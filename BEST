-- Made by Fer Modz

-- Instances: 1334 | Scripts: 28 | Modules: 163
local G2L = {};

-- StarterGui.BestOne
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["Name"] = [[BestOne]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
G2L["1"]["ResetOnSpawn"] = false;

-- StarterGui.BestOne.Frame1
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["Visible"] = false;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(60, 60, 60);
G2L["2"]["Size"] = UDim2.new(0.36891, 0, 0.44981, 0);
G2L["2"]["Position"] = UDim2.new(0.33199, 0, 0.27509, 0);
G2L["2"]["Name"] = [[Frame1]];

-- StarterGui.BestOne.Frame1.UICorner
G2L["3"] = Instance.new("UICorner", G2L["2"]);


-- StarterGui.BestOne.Frame1.Credits
G2L["4"] = Instance.new("TextButton", G2L["2"]);
G2L["4"]["TextWrapped"] = true;
G2L["4"]["TextSize"] = 23;
G2L["4"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4"]["TextScaled"] = true;
G2L["4"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
G2L["4"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4"]["ZIndex"] = 9;
G2L["4"]["Size"] = UDim2.new(0.20736, 0, 0.10468, 0);
G2L["4"]["Name"] = [[Credits]];
G2L["4"]["Text"] = [[Credits]];
G2L["4"]["Position"] = UDim2.new(0.04181, 0, 0.09642, 0);

-- StarterGui.BestOne.Frame1.Credits.UICorner
G2L["5"] = Instance.new("UICorner", G2L["4"]);


-- StarterGui.BestOne.Frame1.Credits.LocalScript
G2L["6"] = Instance.new("LocalScript", G2L["4"]);


-- StarterGui.BestOne.Frame1.Main
G2L["7"] = Instance.new("TextButton", G2L["2"]);
G2L["7"]["TextWrapped"] = true;
G2L["7"]["TextSize"] = 28;
G2L["7"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["TextScaled"] = true;
G2L["7"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
G2L["7"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["7"]["ZIndex"] = 9;
G2L["7"]["Size"] = UDim2.new(0.20736, 0, 0.10744, 0);
G2L["7"]["Name"] = [[Main]];
G2L["7"]["Text"] = [[Main]];
G2L["7"]["Position"] = UDim2.new(0.04181, 0, 0.2259, 0);

-- StarterGui.BestOne.Frame1.Main.UICorner
G2L["8"] = Instance.new("UICorner", G2L["7"]);


-- StarterGui.BestOne.Frame1.Main.LocalScript
G2L["9"] = Instance.new("LocalScript", G2L["7"]);


-- StarterGui.BestOne.Frame1.LocalP
G2L["a"] = Instance.new("TextButton", G2L["2"]);
G2L["a"]["TextWrapped"] = true;
G2L["a"]["TextSize"] = 14;
G2L["a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a"]["TextScaled"] = true;
G2L["a"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
G2L["a"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a"]["ZIndex"] = 9;
G2L["a"]["Size"] = UDim2.new(0.20736, 0, 0.1157, 0);
G2L["a"]["Name"] = [[LocalP]];
G2L["a"]["Text"] = [[Local Player]];
G2L["a"]["Position"] = UDim2.new(0.04181, 0, 0.35813, 0);

-- StarterGui.BestOne.Frame1.LocalP.UICorner
G2L["b"] = Instance.new("UICorner", G2L["a"]);


-- StarterGui.BestOne.Frame1.LocalP.LocalScript
G2L["c"] = Instance.new("LocalScript", G2L["a"]);


-- StarterGui.BestOne.Frame1.Help
G2L["d"] = Instance.new("TextButton", G2L["2"]);
G2L["d"]["TextWrapped"] = true;
G2L["d"]["TextSize"] = 14;
G2L["d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d"]["TextScaled"] = true;
G2L["d"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
G2L["d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d"]["ZIndex"] = 9;
G2L["d"]["Size"] = UDim2.new(0.20736, 0, 0.10468, 0);
G2L["d"]["Name"] = [[Help]];
G2L["d"]["Text"] = [[Help]];
G2L["d"]["Position"] = UDim2.new(0.04181, 0, 0.50138, 0);

-- StarterGui.BestOne.Frame1.Help.UICorner
G2L["e"] = Instance.new("UICorner", G2L["d"]);


-- StarterGui.BestOne.Frame1.Help.LocalScript
G2L["f"] = Instance.new("LocalScript", G2L["d"]);


-- StarterGui.BestOne.CreditsF
G2L["10"] = Instance.new("Frame", G2L["1"]);
G2L["10"]["Visible"] = false;
G2L["10"]["ZIndex"] = 2;
G2L["10"]["BorderSizePixel"] = 0;
G2L["10"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10"]["Size"] = UDim2.new(0.26043, 0, 0.44939, 0);
G2L["10"]["Position"] = UDim2.new(0.43616, 0, 0.27509, 0);
G2L["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10"]["Name"] = [[CreditsF]];
G2L["10"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.CreditsF.TextLabel
G2L["11"] = Instance.new("TextLabel", G2L["10"]);
G2L["11"]["TextWrapped"] = true;
G2L["11"]["BorderSizePixel"] = 0;
G2L["11"]["TextScaled"] = true;
G2L["11"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["TextSize"] = 24;
G2L["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["11"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["BackgroundTransparency"] = 1;
G2L["11"]["Size"] = UDim2.new(0.93691, 0, 0.23569, 0);
G2L["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["Text"] = [[Made by Fer Modz]];
G2L["11"]["Position"] = UDim2.new(0.02913, 0, 0.06757, 0);

-- StarterGui.BestOne.CreditsF.TextLabel.UIStroke
G2L["12"] = Instance.new("UIStroke", G2L["11"]);


-- StarterGui.BestOne.CreditsF.TextLabel.UITextSizeConstraint
G2L["13"] = Instance.new("UITextSizeConstraint", G2L["11"]);
G2L["13"]["MaxTextSize"] = 24;

-- StarterGui.BestOne.MainF
G2L["14"] = Instance.new("Frame", G2L["1"]);
G2L["14"]["Visible"] = false;
G2L["14"]["BorderSizePixel"] = 0;
G2L["14"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14"]["Size"] = UDim2.new(0.26109, 0, 0.45142, 0);
G2L["14"]["Position"] = UDim2.new(0.43599, 0, 0.27328, 0);
G2L["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14"]["Name"] = [[MainF]];
G2L["14"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.MainF.Fling
G2L["15"] = Instance.new("TextButton", G2L["14"]);
G2L["15"]["TextWrapped"] = true;
G2L["15"]["BorderSizePixel"] = 0;
G2L["15"]["TextSize"] = 24;
G2L["15"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["15"]["TextScaled"] = true;
G2L["15"]["BackgroundColor3"] = Color3.fromRGB(94, 94, 94);
G2L["15"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15"]["Size"] = UDim2.new(0.3804, 0, 0.12334, 0);
G2L["15"]["Name"] = [[Fling]];
G2L["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["Text"] = [[Fling GUI]];
G2L["15"]["Position"] = UDim2.new(0, 0, 0.06726, 0);

-- StarterGui.BestOne.MainF.Fling.LocalScript
G2L["16"] = Instance.new("LocalScript", G2L["15"]);


-- StarterGui.BestOne.MainF.Fling.UICorner
G2L["17"] = Instance.new("UICorner", G2L["15"]);


-- StarterGui.BestOne.MainF.Fling.UITextSizeConstraint
G2L["18"] = Instance.new("UITextSizeConstraint", G2L["15"]);
G2L["18"]["MaxTextSize"] = 24;

-- StarterGui.BestOne.MainF.RESET
G2L["19"] = Instance.new("TextButton", G2L["14"]);
G2L["19"]["TextWrapped"] = true;
G2L["19"]["BorderSizePixel"] = 0;
G2L["19"]["TextSize"] = 24;
G2L["19"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["19"]["TextScaled"] = true;
G2L["19"]["BackgroundColor3"] = Color3.fromRGB(94, 94, 94);
G2L["19"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19"]["Size"] = UDim2.new(0.35252, 0, 0.12334, 0);
G2L["19"]["Name"] = [[RESET]];
G2L["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19"]["Text"] = [[RE (reset)]];
G2L["19"]["Position"] = UDim2.new(0.4939, 0, 0.06726, 0);

-- StarterGui.BestOne.MainF.RESET.LocalScript
G2L["1a"] = Instance.new("LocalScript", G2L["19"]);


-- StarterGui.BestOne.MainF.RESET.LocalScript.InstantRespawn
G2L["1b"] = Instance.new("Script", G2L["1a"]);
G2L["1b"]["RunContext"] = Enum.RunContext.Server;
G2L["1b"]["Name"] = [[InstantRespawn]];

-- StarterGui.BestOne.MainF.RESET.LocalScript.InstantRespawn.Instructions
G2L["1c"] = Instance.new("ModuleScript", G2L["1b"]);
G2L["1c"]["Name"] = [[Instructions]];

-- StarterGui.BestOne.MainF.RESET.UICorner
G2L["1d"] = Instance.new("UICorner", G2L["19"]);


-- StarterGui.BestOne.MainF.RESET.UITextSizeConstraint
G2L["1e"] = Instance.new("UITextSizeConstraint", G2L["19"]);
G2L["1e"]["MaxTextSize"] = 24;

-- StarterGui.BestOne.MainF.Fly
G2L["1f"] = Instance.new("TextButton", G2L["14"]);
G2L["1f"]["TextWrapped"] = true;
G2L["1f"]["BorderSizePixel"] = 0;
G2L["1f"]["TextSize"] = 24;
G2L["1f"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1f"]["TextScaled"] = true;
G2L["1f"]["BackgroundColor3"] = Color3.fromRGB(94, 94, 94);
G2L["1f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1f"]["Size"] = UDim2.new(0.3804, 0, 0.11629, 0);
G2L["1f"]["Name"] = [[Fly]];
G2L["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f"]["Text"] = [[Fly (FE)]];
G2L["1f"]["Position"] = UDim2.new(0, 0, 0.24383, 0);

-- StarterGui.BestOne.MainF.Fly.LocalScript
G2L["20"] = Instance.new("LocalScript", G2L["1f"]);


-- StarterGui.BestOne.MainF.Fly.UITextSizeConstraint
G2L["21"] = Instance.new("UITextSizeConstraint", G2L["1f"]);
G2L["21"]["MaxTextSize"] = 24;

-- StarterGui.BestOne.MainF.Fly.UICorner
G2L["22"] = Instance.new("UICorner", G2L["1f"]);


-- StarterGui.BestOne.MainF.INFINITE
G2L["23"] = Instance.new("TextButton", G2L["14"]);
G2L["23"]["TextWrapped"] = true;
G2L["23"]["BorderSizePixel"] = 0;
G2L["23"]["TextSize"] = 24;
G2L["23"]["TextColor3"] = Color3.fromRGB(255, 0, 0);
G2L["23"]["TextScaled"] = true;
G2L["23"]["BackgroundColor3"] = Color3.fromRGB(94, 94, 94);
G2L["23"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["23"]["Size"] = UDim2.new(0.35252, 0, 0.11629, 0);
G2L["23"]["Name"] = [[INFINITE]];
G2L["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23"]["Text"] = [[Infinite Jump]];
G2L["23"]["Position"] = UDim2.new(0.4939, 0, 0.24383, 0);

-- StarterGui.BestOne.MainF.INFINITE.LocalScript
G2L["24"] = Instance.new("LocalScript", G2L["23"]);


-- StarterGui.BestOne.MainF.INFINITE.UITextSizeConstraint
G2L["25"] = Instance.new("UITextSizeConstraint", G2L["23"]);
G2L["25"]["MaxTextSize"] = 24;

-- StarterGui.BestOne.MainF.INFINITE.UICorner
G2L["26"] = Instance.new("UICorner", G2L["23"]);


-- StarterGui.BestOne.MainF.NOCLIP
G2L["27"] = Instance.new("TextButton", G2L["14"]);
G2L["27"]["TextWrapped"] = true;
G2L["27"]["BorderSizePixel"] = 0;
G2L["27"]["TextSize"] = 24;
G2L["27"]["TextColor3"] = Color3.fromRGB(250, 0, 0);
G2L["27"]["TextScaled"] = true;
G2L["27"]["BackgroundColor3"] = Color3.fromRGB(94, 94, 94);
G2L["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["27"]["Size"] = UDim2.new(0.3804, 0, 0.13248, 0);
G2L["27"]["Name"] = [[NOCLIP]];
G2L["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27"]["Text"] = [[Noclip]];
G2L["27"]["Position"] = UDim2.new(-0, 0, 0.39993, 0);

-- StarterGui.BestOne.MainF.NOCLIP.UICorner
G2L["28"] = Instance.new("UICorner", G2L["27"]);


-- StarterGui.BestOne.MainF.NOCLIP.UITextSizeConstraint
G2L["29"] = Instance.new("UITextSizeConstraint", G2L["27"]);
G2L["29"]["MaxTextSize"] = 24;

-- StarterGui.BestOne.MainF.NOCLIP.LocalScript
G2L["2a"] = Instance.new("LocalScript", G2L["27"]);


-- StarterGui.BestOne.Top
G2L["2b"] = Instance.new("Frame", G2L["1"]);
G2L["2b"]["Visible"] = false;
G2L["2b"]["BorderSizePixel"] = 0;
G2L["2b"]["BackgroundColor3"] = Color3.fromRGB(58, 58, 58);
G2L["2b"]["Size"] = UDim2.new(0, 260, 0, 44);
G2L["2b"]["Position"] = UDim2.new(0.17397, 0, 0.37045, 0);
G2L["2b"]["Name"] = [[Top]];

-- StarterGui.BestOne.Top.Title
G2L["2c"] = Instance.new("TextLabel", G2L["2b"]);
G2L["2c"]["TextWrapped"] = true;
G2L["2c"]["BorderSizePixel"] = 0;
G2L["2c"]["TextScaled"] = true;
G2L["2c"]["BackgroundColor3"] = Color3.fromRGB(50, 50, 50);
G2L["2c"]["TextSize"] = 14;
G2L["2c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c"]["Size"] = UDim2.new(0, 252, 0, 30);
G2L["2c"]["Text"] = [[FE Yeet Gui (trollface edition)]];
G2L["2c"]["Name"] = [[Title]];
G2L["2c"]["Position"] = UDim2.new(0, 0, 0.29545, 0);

-- StarterGui.BestOne.Top.Main
G2L["2d"] = Instance.new("ImageLabel", G2L["2b"]);
G2L["2d"]["Active"] = true;
G2L["2d"]["BorderSizePixel"] = 0;
G2L["2d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2d"]["Image"] = [[rbxassetid://2005276185]];
G2L["2d"]["Size"] = UDim2.new(0, 260, 0, 136);
G2L["2d"]["Name"] = [[Main]];
G2L["2d"]["Position"] = UDim2.new(0.16685, -43, 0.43685, 27);

-- StarterGui.BestOne.Top.Main.TextBox
G2L["2e"] = Instance.new("TextBox", G2L["2d"]);
G2L["2e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e"]["BorderSizePixel"] = 0;
G2L["2e"]["TextWrapped"] = true;
G2L["2e"]["TextSize"] = 14;
G2L["2e"]["TextScaled"] = true;
G2L["2e"]["BackgroundColor3"] = Color3.fromRGB(50, 50, 50);
G2L["2e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2e"]["PlaceholderText"] = [[Player Name here]];
G2L["2e"]["Size"] = UDim2.new(0, 220, 0, 43);
G2L["2e"]["Position"] = UDim2.new(0.07048, 0, 0.33992, 0);
G2L["2e"]["Text"] = [[]];

-- StarterGui.BestOne.Top.Main.TextButton
G2L["2f"] = Instance.new("TextButton", G2L["2d"]);
G2L["2f"]["TextWrapped"] = true;
G2L["2f"]["BorderSizePixel"] = 0;
G2L["2f"]["TextSize"] = 14;
G2L["2f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f"]["TextScaled"] = true;
G2L["2f"]["BackgroundColor3"] = Color3.fromRGB(50, 50, 50);
G2L["2f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2f"]["Size"] = UDim2.new(0, 159, 0, 27);
G2L["2f"]["Text"] = [[Cheese em']];
G2L["2f"]["Position"] = UDim2.new(0.16122, 0, 0.69927, 0);

-- StarterGui.BestOne.Top.Main.TextButton.LocalScript
G2L["30"] = Instance.new("LocalScript", G2L["2f"]);


-- StarterGui.BestOne.Top.LocalScript
G2L["31"] = Instance.new("LocalScript", G2L["2b"]);


-- StarterGui.BestOne.Top.X
G2L["32"] = Instance.new("TextButton", G2L["2b"]);
G2L["32"]["BorderSizePixel"] = 0;
G2L["32"]["TextSize"] = 24;
G2L["32"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["32"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["32"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["32"]["Size"] = UDim2.new(0, 35, 0, 28);
G2L["32"]["Name"] = [[X]];
G2L["32"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["32"]["Text"] = [[X]];
G2L["32"]["Position"] = UDim2.new(0.96923, 0, -0.35112, 0);

-- StarterGui.BestOne.Top.X.UICorner
G2L["33"] = Instance.new("UICorner", G2L["32"]);


-- StarterGui.BestOne.Top.X.LocalScript
G2L["34"] = Instance.new("LocalScript", G2L["32"]);


-- StarterGui.BestOne.Open
G2L["35"] = Instance.new("TextButton", G2L["1"]);
G2L["35"]["BorderSizePixel"] = 0;
G2L["35"]["TextSize"] = 24;
G2L["35"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["35"]["BackgroundColor3"] = Color3.fromRGB(87, 87, 87);
G2L["35"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["35"]["Size"] = UDim2.new(0, 63, 0, 50);
G2L["35"]["Name"] = [[Open]];
G2L["35"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["35"]["Text"] = [[Open]];
G2L["35"]["Visible"] = false;
G2L["35"]["Position"] = UDim2.new(0, 0, 0.5, 0);

-- StarterGui.BestOne.Open.LocalScript
G2L["36"] = Instance.new("LocalScript", G2L["35"]);


-- StarterGui.BestOne.Open.UIStroke
G2L["37"] = Instance.new("UIStroke", G2L["35"]);
G2L["37"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.BestOne.Open.UICorner
G2L["38"] = Instance.new("UICorner", G2L["35"]);


-- StarterGui.BestOne.KeyF
G2L["39"] = Instance.new("Frame", G2L["1"]);
G2L["39"]["BorderSizePixel"] = 0;
G2L["39"]["BackgroundColor3"] = Color3.fromRGB(94, 94, 94);
G2L["39"]["Size"] = UDim2.new(0.29911, 0, 0.39069, 0);
G2L["39"]["Position"] = UDim2.new(0.36248, 0, 0.21053, 0);
G2L["39"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["39"]["Name"] = [[KeyF]];

-- StarterGui.BestOne.KeyF.TextBox
G2L["3a"] = Instance.new("TextBox", G2L["39"]);
G2L["3a"]["CursorPosition"] = -1;
G2L["3a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["BorderSizePixel"] = 0;
G2L["3a"]["TextSize"] = 14;
G2L["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3a"]["Size"] = UDim2.new(0.84746, 0, 0.24111, 0);
G2L["3a"]["Position"] = UDim2.new(0.07627, 0, 0.0829, 0);
G2L["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["Text"] = [[]];

-- StarterGui.BestOne.KeyF.TextBox.UIStroke
G2L["3b"] = Instance.new("UIStroke", G2L["3a"]);
G2L["3b"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.BestOne.KeyF.TextBox.UICorner
G2L["3c"] = Instance.new("UICorner", G2L["3a"]);


-- StarterGui.BestOne.KeyF.Verify
G2L["3d"] = Instance.new("TextButton", G2L["39"]);
G2L["3d"]["BorderSizePixel"] = 0;
G2L["3d"]["TextSize"] = 24;
G2L["3d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3d"]["Size"] = UDim2.new(0.84746, 0, 0.27738, 0);
G2L["3d"]["Name"] = [[Verify]];
G2L["3d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3d"]["Text"] = [[Verify]];
G2L["3d"]["Position"] = UDim2.new(0.07627, 0, 0.43523, 0);

-- StarterGui.BestOne.KeyF.Verify.UIStroke
G2L["3e"] = Instance.new("UIStroke", G2L["3d"]);
G2L["3e"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.BestOne.KeyF.Verify.UICorner
G2L["3f"] = Instance.new("UICorner", G2L["3d"]);


-- StarterGui.BestOne.KeyF.Verify.LocalScript
G2L["40"] = Instance.new("LocalScript", G2L["3d"]);


-- StarterGui.BestOne.KeyF.UIStroke
G2L["41"] = Instance.new("UIStroke", G2L["39"]);
G2L["41"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["41"]["Thickness"] = 3;

-- StarterGui.BestOne.KeyF.UICorner
G2L["42"] = Instance.new("UICorner", G2L["39"]);


-- StarterGui.BestOne.KeyF.KillFrame
G2L["43"] = Instance.new("TextButton", G2L["39"]);
G2L["43"]["BorderSizePixel"] = 0;
G2L["43"]["TextSize"] = 24;
G2L["43"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["BackgroundColor3"] = Color3.fromRGB(255, 2, 2);
G2L["43"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["43"]["Size"] = UDim2.new(0.1672, 0, 0.17098, 0);
G2L["43"]["Name"] = [[KillFrame]];
G2L["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["Text"] = [[X]];
G2L["43"]["Position"] = UDim2.new(0.96186, 0, -0.17098, 0);

-- StarterGui.BestOne.KeyF.KillFrame.UIStroke
G2L["44"] = Instance.new("UIStroke", G2L["43"]);
G2L["44"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.BestOne.KeyF.KillFrame.UICorner
G2L["45"] = Instance.new("UICorner", G2L["43"]);


-- StarterGui.BestOne.KeyF.KillFrame.LocalScript
G2L["46"] = Instance.new("LocalScript", G2L["43"]);


-- StarterGui.BestOne.KeyF.Link
G2L["47"] = Instance.new("TextBox", G2L["39"]);
G2L["47"]["CursorPosition"] = -1;
G2L["47"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["47"]["BorderSizePixel"] = 0;
G2L["47"]["TextSize"] = 14;
G2L["47"]["Name"] = [[Link]];
G2L["47"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["47"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["47"]["Size"] = UDim2.new(0.84746, 0, 0.16549, 0);
G2L["47"]["Position"] = UDim2.new(0.07627, 0, 0.78756, 0);
G2L["47"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["47"]["Text"] = [[https://pastebin.com/bgRQUA2D]];

-- StarterGui.BestOne.KeyF.Link.LocalScript
G2L["48"] = Instance.new("LocalScript", G2L["47"]);


-- StarterGui.BestOne.KeyF.Link.UIStroke
G2L["49"] = Instance.new("UIStroke", G2L["47"]);
G2L["49"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.BestOne.KeyF.Link.UICorner
G2L["4a"] = Instance.new("UICorner", G2L["47"]);


-- StarterGui.BestOne.KeyF.Link.LocalScript
G2L["4b"] = Instance.new("LocalScript", G2L["47"]);


-- StarterGui.BestOne.KeyF.Link.LocalScript
G2L["4c"] = Instance.new("LocalScript", G2L["47"]);


-- StarterGui.BestOne.KeyF.Link.LocalScript
G2L["4d"] = Instance.new("LocalScript", G2L["47"]);


-- StarterGui.BestOne.KeyF.LocalScript
G2L["4e"] = Instance.new("LocalScript", G2L["39"]);


-- StarterGui.BestOne.LocalPlayerF
G2L["4f"] = Instance.new("Frame", G2L["1"]);
G2L["4f"]["Visible"] = false;
G2L["4f"]["BorderSizePixel"] = 0;
G2L["4f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4f"]["Size"] = UDim2.new(0.27757, 0, 0.45142, 0);
G2L["4f"]["Position"] = UDim2.new(0.41952, 0, 0.27328, 0);
G2L["4f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4f"]["Name"] = [[LocalPlayerF]];
G2L["4f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Speed
G2L["50"] = Instance.new("TextLabel", G2L["4f"]);
G2L["50"]["TextWrapped"] = true;
G2L["50"]["TextScaled"] = true;
G2L["50"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["50"]["TextSize"] = 14;
G2L["50"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["50"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["50"]["BackgroundTransparency"] = 1;
G2L["50"]["Size"] = UDim2.new(0.4251, 0, 0.12823, 0);
G2L["50"]["Text"] = [[Speed]];
G2L["50"]["Name"] = [[Speed]];
G2L["50"]["Position"] = UDim2.new(0.05258, 0, 0.10088, 0);

-- StarterGui.BestOne.LocalPlayerF.TextLabel
G2L["51"] = Instance.new("TextLabel", G2L["4f"]);
G2L["51"]["TextWrapped"] = true;
G2L["51"]["BorderSizePixel"] = 0;
G2L["51"]["TextScaled"] = true;
G2L["51"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["51"]["TextSize"] = 14;
G2L["51"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["51"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["51"]["BackgroundTransparency"] = 1;
G2L["51"]["Size"] = UDim2.new(0.31048, 0, 0.18907, 0);
G2L["51"]["Text"] = [[16]];
G2L["51"]["Position"] = UDim2.new(0.1213, 0, 0.22911, 0);

-- StarterGui.BestOne.LocalPlayerF.-
G2L["52"] = Instance.new("TextButton", G2L["4f"]);
G2L["52"]["TextWrapped"] = true;
G2L["52"]["TextSize"] = 14;
G2L["52"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["52"]["TextScaled"] = true;
G2L["52"]["BackgroundColor3"] = Color3.fromRGB(0, 50, 80);
G2L["52"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["52"]["Size"] = UDim2.new(0.13741, 0, 0.15385, 0);
G2L["52"]["Name"] = [[-]];
G2L["52"]["Text"] = [[-]];
G2L["52"]["Position"] = UDim2.new(0.08477, 0, 0.41818, 0);

-- StarterGui.BestOne.LocalPlayerF.-.UICorner
G2L["53"] = Instance.new("UICorner", G2L["52"]);
G2L["53"]["CornerRadius"] = UDim.new(0.2, 2);

-- StarterGui.BestOne.LocalPlayerF.-.LocalScript
G2L["54"] = Instance.new("LocalScript", G2L["52"]);


-- StarterGui.BestOne.LocalPlayerF.+
G2L["55"] = Instance.new("TextButton", G2L["4f"]);
G2L["55"]["TextWrapped"] = true;
G2L["55"]["TextSize"] = 1;
G2L["55"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["TextScaled"] = true;
G2L["55"]["BackgroundColor3"] = Color3.fromRGB(0, 50, 80);
G2L["55"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["55"]["Size"] = UDim2.new(0.16334, 0, 0.15385, 0);
G2L["55"]["Name"] = [[+]];
G2L["55"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["Text"] = [[+]];
G2L["55"]["Position"] = UDim2.new(0.26843, 0, 0.41818, 0);

-- StarterGui.BestOne.LocalPlayerF.+.UICorner
G2L["56"] = Instance.new("UICorner", G2L["55"]);
G2L["56"]["CornerRadius"] = UDim.new(0.2, 2);

-- StarterGui.BestOne.LocalPlayerF.+.LocalScript
G2L["57"] = Instance.new("LocalScript", G2L["55"]);


-- StarterGui.BestOne.LocalPlayerF.Clicktp
G2L["58"] = Instance.new("TextButton", G2L["4f"]);
G2L["58"]["TextWrapped"] = true;
G2L["58"]["BorderSizePixel"] = 0;
G2L["58"]["TextSize"] = 14;
G2L["58"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["58"]["BackgroundColor3"] = Color3.fromRGB(0, 50, 80);
G2L["58"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["58"]["Size"] = UDim2.new(0.23497, 0, 0.10803, 0);
G2L["58"]["Name"] = [[Clicktp]];
G2L["58"]["Text"] = [[ClickTP]];
G2L["58"]["Position"] = UDim2.new(0.5311, 0, 0.12108, 0);

-- StarterGui.BestOne.LocalPlayerF.Clicktp.LocalScript
G2L["59"] = Instance.new("LocalScript", G2L["58"]);


-- StarterGui.BestOne.LocalPlayerF.Btools
G2L["5a"] = Instance.new("TextButton", G2L["4f"]);
G2L["5a"]["BorderSizePixel"] = 0;
G2L["5a"]["TextSize"] = 14;
G2L["5a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["BackgroundColor3"] = Color3.fromRGB(8, 30, 59);
G2L["5a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5a"]["Size"] = UDim2.new(0.23621, 0, 0.15094, 0);
G2L["5a"]["Name"] = [[Btools]];
G2L["5a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["Text"] = [[Btool/FE]];
G2L["5a"]["Position"] = UDim2.new(0.52986, 0, 0.26725, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript
G2L["5b"] = Instance.new("LocalScript", G2L["5a"]);


-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!
G2L["5c"] = Instance.new("Tool", G2L["5b"]);
-- [ERROR] cannot convert Grip, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldPivot, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5c"]["ToolTip"] = [[Building Tools by F3X]];
G2L["5c"]["RequiresHandle"] = false;
G2L["5c"]["Name"] = [[F3X Btools!]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Handle
G2L["5d"] = Instance.new("Part", G2L["5c"]);
G2L["5d"]["BottomSurface"] = Enum.SurfaceType.Smooth;
G2L["5d"]["Color"] = Color3.fromRGB(18, 18, 18);
G2L["5d"]["TopSurface"] = Enum.SurfaceType.Smooth;
G2L["5d"]["Locked"] = true;
G2L["5d"]["Material"] = Enum.Material.SmoothPlastic;
G2L["5d"]["Size"] = Vector3.new(0.8, 0.8, 0.8);
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5d"]["Name"] = [[Handle]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Handle.Decal
G2L["5e"] = Instance.new("Decal", G2L["5d"]);
G2L["5e"]["Texture"] = [[http://www.roblox.com/asset/?id=129748355]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Handle.Decal
G2L["5f"] = Instance.new("Decal", G2L["5d"]);
G2L["5f"]["Face"] = Enum.NormalId.Back;
G2L["5f"]["Texture"] = [[http://www.roblox.com/asset/?id=129748355]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Handle.Decal
G2L["60"] = Instance.new("Decal", G2L["5d"]);
G2L["60"]["Face"] = Enum.NormalId.Left;
G2L["60"]["Texture"] = [[http://www.roblox.com/asset/?id=129748355]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Handle.Decal
G2L["61"] = Instance.new("Decal", G2L["5d"]);
G2L["61"]["Face"] = Enum.NormalId.Right;
G2L["61"]["Texture"] = [[http://www.roblox.com/asset/?id=129748355]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Handle.Decal
G2L["62"] = Instance.new("Decal", G2L["5d"]);
G2L["62"]["Face"] = Enum.NormalId.Top;
G2L["62"]["Texture"] = [[http://www.roblox.com/asset/?id=129748355]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Handle.Decal
G2L["63"] = Instance.new("Decal", G2L["5d"]);
G2L["63"]["Face"] = Enum.NormalId.Bottom;
G2L["63"]["Texture"] = [[http://www.roblox.com/asset/?id=129748355]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.AutoUpdate
G2L["64"] = Instance.new("BoolValue", G2L["5c"]);
G2L["64"]["Name"] = [[AutoUpdate]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.AutoUpdate.AutomaticUpdating
G2L["65"] = Instance.new("Script", G2L["64"]);
G2L["65"]["Name"] = [[AutomaticUpdating]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.SyncAPI
G2L["66"] = Instance.new("BindableFunction", G2L["5c"]);
G2L["66"]["Name"] = [[SyncAPI]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.SyncAPI.SyncModule
G2L["67"] = Instance.new("ModuleScript", G2L["66"]);
G2L["67"]["Name"] = [[SyncModule]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.SyncAPI.ServerEndpoint
G2L["68"] = Instance.new("RemoteFunction", G2L["66"]);
G2L["68"]["Name"] = [[ServerEndpoint]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.SyncAPI.ServerEndpoint.ServerEndpoint
G2L["69"] = Instance.new("Script", G2L["68"]);
G2L["69"]["Name"] = [[ServerEndpoint]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.SyncAPI.LocalEndpoint
G2L["6a"] = Instance.new("LocalScript", G2L["66"]);
G2L["6a"]["Name"] = [[LocalEndpoint]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loaded
G2L["6b"] = Instance.new("BoolValue", G2L["5c"]);
G2L["6b"]["Name"] = [[Loaded]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loaded.DescendantCount
G2L["6c"] = Instance.new("IntValue", G2L["6b"]);
G2L["6c"]["Name"] = [[DescendantCount]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loaded.DescendantCount.DescendantCounter
G2L["6d"] = Instance.new("Script", G2L["6c"]);
G2L["6d"]["Name"] = [[DescendantCounter]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loaded.ReplicationListener
G2L["6e"] = Instance.new("LocalScript", G2L["6b"]);
G2L["6e"]["Name"] = [[ReplicationListener]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Assets
G2L["6f"] = Instance.new("ModuleScript", G2L["5c"]);
G2L["6f"]["Name"] = [[Assets]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Core
G2L["70"] = Instance.new("ModuleScript", G2L["5c"]);
G2L["70"]["Name"] = [[Core]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Core.Snapping
G2L["71"] = Instance.new("ModuleScript", G2L["70"]);
G2L["71"]["Name"] = [[Snapping]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Core.BoundingBox
G2L["72"] = Instance.new("ModuleScript", G2L["70"]);
G2L["72"]["Name"] = [[BoundingBox]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Core.Selection
G2L["73"] = Instance.new("ModuleScript", G2L["70"]);
G2L["73"]["Name"] = [[Selection]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Core.Targeting
G2L["74"] = Instance.new("ModuleScript", G2L["70"]);
G2L["74"]["Name"] = [[Targeting]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Core.History
G2L["75"] = Instance.new("ModuleScript", G2L["70"]);
G2L["75"]["Name"] = [[History]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Core.Security
G2L["76"] = Instance.new("ModuleScript", G2L["70"]);
G2L["76"]["Name"] = [[Security]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces
G2L["77"] = Instance.new("Folder", G2L["5c"]);
G2L["77"]["Name"] = [[Interfaces]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog
G2L["78"] = Instance.new("Frame", G2L["77"]);
G2L["78"]["Active"] = true;
G2L["78"]["BorderSizePixel"] = 0;
G2L["78"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["Size"] = UDim2.new(0, 200, 0, 110);
G2L["78"]["Position"] = UDim2.new(0.5, -100, 0.5, -55);
G2L["78"]["Name"] = [[ExportDialog]];
G2L["78"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info
G2L["79"] = Instance.new("Frame", G2L["78"]);
G2L["79"]["Visible"] = false;
G2L["79"]["BorderSizePixel"] = 0;
G2L["79"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["79"]["ClipsDescendants"] = true;
G2L["79"]["Size"] = UDim2.new(1, 0, 0, 75);
G2L["79"]["Name"] = [[Info]];
G2L["79"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.CreationIDLabel
G2L["7a"] = Instance.new("TextLabel", G2L["79"]);
G2L["7a"]["TextStrokeTransparency"] = 0.75;
G2L["7a"]["BorderSizePixel"] = 0;
G2L["7a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7a"]["TextSize"] = 18;
G2L["7a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["7a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7a"]["BackgroundTransparency"] = 1;
G2L["7a"]["Size"] = UDim2.new(1, 0, 0, 40);
G2L["7a"]["Text"] = [[Your creation's ID:]];
G2L["7a"]["Name"] = [[CreationIDLabel]];
G2L["7a"]["Position"] = UDim2.new(0, 0, 0, 5);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.CreationID
G2L["7b"] = Instance.new("TextLabel", G2L["79"]);
G2L["7b"]["TextStrokeTransparency"] = 0;
G2L["7b"]["BorderSizePixel"] = 0;
G2L["7b"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["TextSize"] = 24;
G2L["7b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["7b"]["TextColor3"] = Color3.fromRGB(113, 113, 113);
G2L["7b"]["BackgroundTransparency"] = 1;
G2L["7b"]["Size"] = UDim2.new(1, 0, 0, 40);
G2L["7b"]["Text"] = [[j5of0]];
G2L["7b"]["Name"] = [[CreationID]];
G2L["7b"]["Position"] = UDim2.new(0, 0, 0, 30);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.ColorBar
G2L["7c"] = Instance.new("Frame", G2L["79"]);
G2L["7c"]["BorderSizePixel"] = 0;
G2L["7c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7c"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["7c"]["Name"] = [[ColorBar]];
G2L["7c"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.ColorBar.Yellow
G2L["7d"] = Instance.new("Frame", G2L["7c"]);
G2L["7d"]["BorderSizePixel"] = 0;
G2L["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 176, 0);
G2L["7d"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["7d"]["Name"] = [[Yellow]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.ColorBar.Green
G2L["7e"] = Instance.new("Frame", G2L["7c"]);
G2L["7e"]["BorderSizePixel"] = 0;
G2L["7e"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["7e"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["7e"]["Position"] = UDim2.new(0.2, 0, 0, 0);
G2L["7e"]["Name"] = [[Green]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.ColorBar.Blue
G2L["7f"] = Instance.new("Frame", G2L["7c"]);
G2L["7f"]["BorderSizePixel"] = 0;
G2L["7f"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["7f"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["7f"]["Position"] = UDim2.new(0.4, 0, 0, 0);
G2L["7f"]["Name"] = [[Blue]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.ColorBar.Red
G2L["80"] = Instance.new("Frame", G2L["7c"]);
G2L["80"]["BorderSizePixel"] = 0;
G2L["80"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["80"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["80"]["Position"] = UDim2.new(0.6, 0, 0, 0);
G2L["80"]["Name"] = [[Red]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Info.ColorBar.Purple
G2L["81"] = Instance.new("Frame", G2L["7c"]);
G2L["81"]["BorderSizePixel"] = 0;
G2L["81"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["81"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["81"]["Position"] = UDim2.new(0.8, 0, 0, 0);
G2L["81"]["Name"] = [[Purple]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip
G2L["82"] = Instance.new("Frame", G2L["78"]);
G2L["82"]["Visible"] = false;
G2L["82"]["BorderSizePixel"] = 0;
G2L["82"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["82"]["Size"] = UDim2.new(1, 0, 0, 30);
G2L["82"]["Position"] = UDim2.new(0, 0, 0, 75);
G2L["82"]["Name"] = [[Tip]];
G2L["82"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip.Tip
G2L["83"] = Instance.new("TextLabel", G2L["82"]);
G2L["83"]["TextWrapped"] = true;
G2L["83"]["TextStrokeTransparency"] = 0.75;
G2L["83"]["BorderSizePixel"] = 0;
G2L["83"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["83"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["83"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["83"]["TextSize"] = 10;
G2L["83"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["83"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["83"]["BackgroundTransparency"] = 1;
G2L["83"]["Size"] = UDim2.new(1, 0, 0, 30);
G2L["83"]["Text"] = [[Use the ID above to import your creation using the plugin.]];
G2L["83"]["Name"] = [[Tip]];
G2L["83"]["Position"] = UDim2.new(0, 0, 0, 7);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip.ColorBar
G2L["84"] = Instance.new("Frame", G2L["82"]);
G2L["84"]["BorderSizePixel"] = 0;
G2L["84"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["84"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["84"]["Name"] = [[ColorBar]];
G2L["84"]["Rotation"] = 180;
G2L["84"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip.ColorBar.Yellow
G2L["85"] = Instance.new("Frame", G2L["84"]);
G2L["85"]["BorderSizePixel"] = 0;
G2L["85"]["BackgroundColor3"] = Color3.fromRGB(255, 176, 0);
G2L["85"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["85"]["Name"] = [[Yellow]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip.ColorBar.Green
G2L["86"] = Instance.new("Frame", G2L["84"]);
G2L["86"]["BorderSizePixel"] = 0;
G2L["86"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["86"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["86"]["Position"] = UDim2.new(0.2, 0, 0, 0);
G2L["86"]["Name"] = [[Green]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip.ColorBar.Blue
G2L["87"] = Instance.new("Frame", G2L["84"]);
G2L["87"]["BorderSizePixel"] = 0;
G2L["87"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["87"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["87"]["Position"] = UDim2.new(0.4, 0, 0, 0);
G2L["87"]["Name"] = [[Blue]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip.ColorBar.Red
G2L["88"] = Instance.new("Frame", G2L["84"]);
G2L["88"]["BorderSizePixel"] = 0;
G2L["88"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["88"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["88"]["Position"] = UDim2.new(0.6, 0, 0, 0);
G2L["88"]["Name"] = [[Red]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Tip.ColorBar.Purple
G2L["89"] = Instance.new("Frame", G2L["84"]);
G2L["89"]["BorderSizePixel"] = 0;
G2L["89"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["89"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["89"]["Position"] = UDim2.new(0.8, 0, 0, 0);
G2L["89"]["Name"] = [[Purple]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Close
G2L["8a"] = Instance.new("Frame", G2L["78"]);
G2L["8a"]["Visible"] = false;
G2L["8a"]["BorderSizePixel"] = 0;
G2L["8a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8a"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["8a"]["Position"] = UDim2.new(0, 0, 1, 5);
G2L["8a"]["Name"] = [[Close]];
G2L["8a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Close.Button
G2L["8b"] = Instance.new("TextButton", G2L["8a"]);
G2L["8b"]["TextStrokeTransparency"] = 0.8;
G2L["8b"]["BorderSizePixel"] = 0;
G2L["8b"]["TextSize"] = 14;
G2L["8b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["8b"]["BackgroundTransparency"] = 0.5;
G2L["8b"]["Name"] = [[Button]];
G2L["8b"]["Text"] = [[Got it]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Close.Shadow
G2L["8c"] = Instance.new("Frame", G2L["8a"]);
G2L["8c"]["ZIndex"] = 2;
G2L["8c"]["BorderSizePixel"] = 0;
G2L["8c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8c"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["8c"]["Position"] = UDim2.new(0, 0, 1, 0);
G2L["8c"]["Name"] = [[Shadow]];
G2L["8c"]["BackgroundTransparency"] = 0.3;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading
G2L["8d"] = Instance.new("Frame", G2L["78"]);
G2L["8d"]["BorderSizePixel"] = 0;
G2L["8d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["ClipsDescendants"] = true;
G2L["8d"]["Size"] = UDim2.new(1, 0, 0, 80);
G2L["8d"]["Name"] = [[Loading]];
G2L["8d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.ColorBar
G2L["8e"] = Instance.new("Frame", G2L["8d"]);
G2L["8e"]["BorderSizePixel"] = 0;
G2L["8e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8e"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["8e"]["Name"] = [[ColorBar]];
G2L["8e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.ColorBar.Yellow
G2L["8f"] = Instance.new("Frame", G2L["8e"]);
G2L["8f"]["BorderSizePixel"] = 0;
G2L["8f"]["BackgroundColor3"] = Color3.fromRGB(255, 176, 0);
G2L["8f"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["8f"]["Name"] = [[Yellow]];
G2L["8f"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.ColorBar.Green
G2L["90"] = Instance.new("Frame", G2L["8e"]);
G2L["90"]["BorderSizePixel"] = 0;
G2L["90"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["90"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["90"]["Position"] = UDim2.new(0.2, 0, 0, 0);
G2L["90"]["Name"] = [[Green]];
G2L["90"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.ColorBar.Blue
G2L["91"] = Instance.new("Frame", G2L["8e"]);
G2L["91"]["BorderSizePixel"] = 0;
G2L["91"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["91"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["91"]["Position"] = UDim2.new(0.4, 0, 0, 0);
G2L["91"]["Name"] = [[Blue]];
G2L["91"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.ColorBar.Red
G2L["92"] = Instance.new("Frame", G2L["8e"]);
G2L["92"]["BorderSizePixel"] = 0;
G2L["92"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["92"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["92"]["Position"] = UDim2.new(0.6, 0, 0, 0);
G2L["92"]["Name"] = [[Red]];
G2L["92"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.ColorBar.Purple
G2L["93"] = Instance.new("Frame", G2L["8e"]);
G2L["93"]["BorderSizePixel"] = 0;
G2L["93"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["93"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["93"]["Position"] = UDim2.new(0.8, 0, 0, 0);
G2L["93"]["Name"] = [[Purple]];
G2L["93"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.TextLabel
G2L["94"] = Instance.new("TextLabel", G2L["8d"]);
G2L["94"]["TextWrapped"] = true;
G2L["94"]["TextStrokeTransparency"] = 0.8;
G2L["94"]["BorderSizePixel"] = 0;
G2L["94"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["94"]["TextSize"] = 18;
G2L["94"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["94"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["94"]["BackgroundTransparency"] = 1;
G2L["94"]["Size"] = UDim2.new(1, 0, 0, 50);
G2L["94"]["Text"] = [[Uploading your creation...]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.BottomColorBar
G2L["95"] = Instance.new("Frame", G2L["8d"]);
G2L["95"]["BorderSizePixel"] = 0;
G2L["95"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["95"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["95"]["Position"] = UDim2.new(0, 0, 1, 0);
G2L["95"]["Name"] = [[BottomColorBar]];
G2L["95"]["Rotation"] = 180;
G2L["95"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.BottomColorBar.Yellow
G2L["96"] = Instance.new("Frame", G2L["95"]);
G2L["96"]["BorderSizePixel"] = 0;
G2L["96"]["BackgroundColor3"] = Color3.fromRGB(255, 176, 0);
G2L["96"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["96"]["Name"] = [[Yellow]];
G2L["96"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.BottomColorBar.Green
G2L["97"] = Instance.new("Frame", G2L["95"]);
G2L["97"]["BorderSizePixel"] = 0;
G2L["97"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["97"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["97"]["Position"] = UDim2.new(0.2, 0, 0, 0);
G2L["97"]["Name"] = [[Green]];
G2L["97"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.BottomColorBar.Blue
G2L["98"] = Instance.new("Frame", G2L["95"]);
G2L["98"]["BorderSizePixel"] = 0;
G2L["98"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["98"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["98"]["Position"] = UDim2.new(0.4, 0, 0, 0);
G2L["98"]["Name"] = [[Blue]];
G2L["98"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.BottomColorBar.Red
G2L["99"] = Instance.new("Frame", G2L["95"]);
G2L["99"]["BorderSizePixel"] = 0;
G2L["99"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["99"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["99"]["Position"] = UDim2.new(0.6, 0, 0, 0);
G2L["99"]["Name"] = [[Red]];
G2L["99"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.BottomColorBar.Purple
G2L["9a"] = Instance.new("Frame", G2L["95"]);
G2L["9a"]["BorderSizePixel"] = 0;
G2L["9a"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["9a"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["9a"]["Position"] = UDim2.new(0.8, 0, 0, 0);
G2L["9a"]["Name"] = [[Purple]];
G2L["9a"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.CloseButton
G2L["9b"] = Instance.new("TextButton", G2L["8d"]);
G2L["9b"]["TextStrokeTransparency"] = 0.85;
G2L["9b"]["BorderSizePixel"] = 0;
G2L["9b"]["TextSize"] = 14;
G2L["9b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["9b"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["9b"]["BackgroundTransparency"] = 0.5;
G2L["9b"]["Name"] = [[CloseButton]];
G2L["9b"]["Text"] = [[Close]];
G2L["9b"]["Position"] = UDim2.new(0, 0, 1, -30);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.Loading.CloseButton.Shadow
G2L["9c"] = Instance.new("Frame", G2L["9b"]);
G2L["9c"]["BorderSizePixel"] = 0;
G2L["9c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9c"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["9c"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["9c"]["Name"] = [[Shadow]];
G2L["9c"]["BackgroundTransparency"] = 0.7;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.ExportDialog.[Component]
G2L["9d"] = Instance.new("ModuleScript", G2L["78"]);
G2L["9d"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI
G2L["9e"] = Instance.new("Frame", G2L["77"]);
G2L["9e"]["Active"] = true;
G2L["9e"]["BorderSizePixel"] = 0;
G2L["9e"]["Size"] = UDim2.new(0, 245, 0, 90);
G2L["9e"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["9e"]["Name"] = [[BTAnchorToolGUI]];
G2L["9e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Title
G2L["9f"] = Instance.new("Frame", G2L["9e"]);
G2L["9f"]["BorderSizePixel"] = 0;
G2L["9f"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["9f"]["Name"] = [[Title]];
G2L["9f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Title.ColorBar
G2L["a0"] = Instance.new("Frame", G2L["9f"]);
G2L["a0"]["BorderSizePixel"] = 0;
G2L["a0"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["a0"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["a0"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["a0"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Title.Label
G2L["a1"] = Instance.new("TextLabel", G2L["9f"]);
G2L["a1"]["TextWrapped"] = true;
G2L["a1"]["TextStrokeTransparency"] = 0;
G2L["a1"]["BorderSizePixel"] = 0;
G2L["a1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a1"]["TextSize"] = 10;
G2L["a1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a1"]["BackgroundTransparency"] = 1;
G2L["a1"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["a1"]["Text"] = [[ANCHOR TOOL]];
G2L["a1"]["Name"] = [[Label]];
G2L["a1"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Title.F3XSignature
G2L["a2"] = Instance.new("TextLabel", G2L["9f"]);
G2L["a2"]["TextWrapped"] = true;
G2L["a2"]["TextStrokeTransparency"] = 0.9;
G2L["a2"]["BorderSizePixel"] = 0;
G2L["a2"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["a2"]["TextSize"] = 14;
G2L["a2"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a2"]["BackgroundTransparency"] = 1;
G2L["a2"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["a2"]["Text"] = [[F3X]];
G2L["a2"]["Name"] = [[F3XSignature]];
G2L["a2"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status
G2L["a3"] = Instance.new("Frame", G2L["9e"]);
G2L["a3"]["BorderSizePixel"] = 0;
G2L["a3"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["a3"]["Name"] = [[Status]];
G2L["a3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Label
G2L["a4"] = Instance.new("TextLabel", G2L["a3"]);
G2L["a4"]["TextWrapped"] = true;
G2L["a4"]["TextStrokeTransparency"] = 0;
G2L["a4"]["BorderSizePixel"] = 0;
G2L["a4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a4"]["TextSize"] = 10;
G2L["a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a4"]["BackgroundTransparency"] = 1;
G2L["a4"]["Size"] = UDim2.new(0, 40, 0, 25);
G2L["a4"]["Text"] = [[Status]];
G2L["a4"]["Name"] = [[Label]];
G2L["a4"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Anchored
G2L["a5"] = Instance.new("Frame", G2L["a3"]);
G2L["a5"]["BorderSizePixel"] = 0;
G2L["a5"]["Size"] = UDim2.new(0, 90, 0, 25);
G2L["a5"]["Position"] = UDim2.new(0, 55, 0, 0);
G2L["a5"]["Name"] = [[Anchored]];
G2L["a5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Anchored.SelectedIndicator
G2L["a6"] = Instance.new("Frame", G2L["a5"]);
G2L["a6"]["BorderSizePixel"] = 0;
G2L["a6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a6"]["Size"] = UDim2.new(1, -9, 0, 2);
G2L["a6"]["Position"] = UDim2.new(0, 9, 0, -2);
G2L["a6"]["Name"] = [[SelectedIndicator]];
G2L["a6"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Anchored.Button
G2L["a7"] = Instance.new("TextButton", G2L["a5"]);
G2L["a7"]["BorderSizePixel"] = 0;
G2L["a7"]["TextTransparency"] = 1;
G2L["a7"]["ZIndex"] = 2;
G2L["a7"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["a7"]["BackgroundTransparency"] = 1;
G2L["a7"]["Name"] = [[Button]];
G2L["a7"]["Text"] = [[]];
G2L["a7"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Anchored.Background
G2L["a8"] = Instance.new("ImageLabel", G2L["a5"]);
G2L["a8"]["BorderSizePixel"] = 0;
G2L["a8"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["a8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a8"]["BackgroundTransparency"] = 1;
G2L["a8"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Anchored.Label
G2L["a9"] = Instance.new("TextLabel", G2L["a5"]);
G2L["a9"]["BorderSizePixel"] = 0;
G2L["a9"]["TextSize"] = 10;
G2L["a9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a9"]["BackgroundTransparency"] = 1;
G2L["a9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a9"]["Text"] = [[ANCHORED]];
G2L["a9"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Unanchored
G2L["aa"] = Instance.new("Frame", G2L["a3"]);
G2L["aa"]["BorderSizePixel"] = 0;
G2L["aa"]["Size"] = UDim2.new(0, 90, 0, 25);
G2L["aa"]["Position"] = UDim2.new(0, 140, 0, 0);
G2L["aa"]["Name"] = [[Unanchored]];
G2L["aa"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Unanchored.SelectedIndicator
G2L["ab"] = Instance.new("Frame", G2L["aa"]);
G2L["ab"]["BorderSizePixel"] = 0;
G2L["ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ab"]["Size"] = UDim2.new(1, -9, 0, 2);
G2L["ab"]["Position"] = UDim2.new(0, 9, 0, -2);
G2L["ab"]["Name"] = [[SelectedIndicator]];
G2L["ab"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Unanchored.Button
G2L["ac"] = Instance.new("TextButton", G2L["aa"]);
G2L["ac"]["BorderSizePixel"] = 0;
G2L["ac"]["TextTransparency"] = 1;
G2L["ac"]["ZIndex"] = 2;
G2L["ac"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["ac"]["BackgroundTransparency"] = 1;
G2L["ac"]["Name"] = [[Button]];
G2L["ac"]["Text"] = [[]];
G2L["ac"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Unanchored.Background
G2L["ad"] = Instance.new("ImageLabel", G2L["aa"]);
G2L["ad"]["BorderSizePixel"] = 0;
G2L["ad"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["ad"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["ad"]["BackgroundTransparency"] = 1;
G2L["ad"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Status.Unanchored.Label
G2L["ae"] = Instance.new("TextLabel", G2L["aa"]);
G2L["ae"]["BorderSizePixel"] = 0;
G2L["ae"]["TextSize"] = 10;
G2L["ae"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["ae"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ae"]["BackgroundTransparency"] = 1;
G2L["ae"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["ae"]["Text"] = [[UNANCHORED]];
G2L["ae"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Tip
G2L["af"] = Instance.new("Frame", G2L["9e"]);
G2L["af"]["BorderSizePixel"] = 0;
G2L["af"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["af"]["Position"] = UDim2.new(0, 5, 0, 70);
G2L["af"]["Name"] = [[Tip]];
G2L["af"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Tip.ColorBar
G2L["b0"] = Instance.new("Frame", G2L["af"]);
G2L["b0"]["BorderSizePixel"] = 0;
G2L["b0"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["b0"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["b0"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTAnchorToolGUI.Tip.Text
G2L["b1"] = Instance.new("TextLabel", G2L["af"]);
G2L["b1"]["TextWrapped"] = true;
G2L["b1"]["TextStrokeTransparency"] = 0.5;
G2L["b1"]["BorderSizePixel"] = 0;
G2L["b1"]["TextSize"] = 10;
G2L["b1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b1"]["BackgroundTransparency"] = 1;
G2L["b1"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["b1"]["Text"] = [[TIP: Press Enter to quickly toggle the anchor.]];
G2L["b1"]["Name"] = [[Text]];
G2L["b1"]["Position"] = UDim2.new(0, 0, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI
G2L["b2"] = Instance.new("Frame", G2L["77"]);
G2L["b2"]["Active"] = true;
G2L["b2"]["BorderSizePixel"] = 0;
G2L["b2"]["Size"] = UDim2.new(0, 200, 0, 90);
G2L["b2"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["b2"]["Name"] = [[BTCollisionToolGUI]];
G2L["b2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Title
G2L["b3"] = Instance.new("Frame", G2L["b2"]);
G2L["b3"]["BorderSizePixel"] = 0;
G2L["b3"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["b3"]["Name"] = [[Title]];
G2L["b3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Title.ColorBar
G2L["b4"] = Instance.new("Frame", G2L["b3"]);
G2L["b4"]["BorderSizePixel"] = 0;
G2L["b4"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["b4"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["b4"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["b4"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Title.Label
G2L["b5"] = Instance.new("TextLabel", G2L["b3"]);
G2L["b5"]["TextWrapped"] = true;
G2L["b5"]["TextStrokeTransparency"] = 0;
G2L["b5"]["BorderSizePixel"] = 0;
G2L["b5"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["b5"]["TextSize"] = 10;
G2L["b5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b5"]["BackgroundTransparency"] = 1;
G2L["b5"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["b5"]["Text"] = [[COLLISION TOOL]];
G2L["b5"]["Name"] = [[Label]];
G2L["b5"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Title.F3XSignature
G2L["b6"] = Instance.new("TextLabel", G2L["b3"]);
G2L["b6"]["TextWrapped"] = true;
G2L["b6"]["TextStrokeTransparency"] = 0.9;
G2L["b6"]["BorderSizePixel"] = 0;
G2L["b6"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["b6"]["TextSize"] = 14;
G2L["b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b6"]["BackgroundTransparency"] = 1;
G2L["b6"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["b6"]["Text"] = [[F3X]];
G2L["b6"]["Name"] = [[F3XSignature]];
G2L["b6"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status
G2L["b7"] = Instance.new("Frame", G2L["b2"]);
G2L["b7"]["BorderSizePixel"] = 0;
G2L["b7"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["b7"]["Name"] = [[Status]];
G2L["b7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.Label
G2L["b8"] = Instance.new("TextLabel", G2L["b7"]);
G2L["b8"]["TextWrapped"] = true;
G2L["b8"]["TextStrokeTransparency"] = 0;
G2L["b8"]["BorderSizePixel"] = 0;
G2L["b8"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["b8"]["TextSize"] = 10;
G2L["b8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b8"]["BackgroundTransparency"] = 1;
G2L["b8"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["b8"]["Text"] = [[Collision]];
G2L["b8"]["Name"] = [[Label]];
G2L["b8"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.On
G2L["b9"] = Instance.new("Frame", G2L["b7"]);
G2L["b9"]["BorderSizePixel"] = 0;
G2L["b9"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["b9"]["Position"] = UDim2.new(0, 65, 0, 0);
G2L["b9"]["Name"] = [[On]];
G2L["b9"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.On.SelectedIndicator
G2L["ba"] = Instance.new("Frame", G2L["b9"]);
G2L["ba"]["BorderSizePixel"] = 0;
G2L["ba"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ba"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["ba"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["ba"]["Name"] = [[SelectedIndicator]];
G2L["ba"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.On.Button
G2L["bb"] = Instance.new("TextButton", G2L["b9"]);
G2L["bb"]["BorderSizePixel"] = 0;
G2L["bb"]["TextTransparency"] = 1;
G2L["bb"]["ZIndex"] = 2;
G2L["bb"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["bb"]["BackgroundTransparency"] = 1;
G2L["bb"]["Name"] = [[Button]];
G2L["bb"]["Text"] = [[]];
G2L["bb"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.On.Background
G2L["bc"] = Instance.new("ImageLabel", G2L["b9"]);
G2L["bc"]["BorderSizePixel"] = 0;
G2L["bc"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["bc"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["bc"]["BackgroundTransparency"] = 1;
G2L["bc"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.On.Label
G2L["bd"] = Instance.new("TextLabel", G2L["b9"]);
G2L["bd"]["BorderSizePixel"] = 0;
G2L["bd"]["TextSize"] = 10;
G2L["bd"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["bd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bd"]["BackgroundTransparency"] = 1;
G2L["bd"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["bd"]["Text"] = [[ON]];
G2L["bd"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.Off
G2L["be"] = Instance.new("Frame", G2L["b7"]);
G2L["be"]["BorderSizePixel"] = 0;
G2L["be"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["be"]["Position"] = UDim2.new(0, 113, 0, 0);
G2L["be"]["Name"] = [[Off]];
G2L["be"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.Off.SelectedIndicator
G2L["bf"] = Instance.new("Frame", G2L["be"]);
G2L["bf"]["BorderSizePixel"] = 0;
G2L["bf"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bf"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["bf"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["bf"]["Name"] = [[SelectedIndicator]];
G2L["bf"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.Off.Button
G2L["c0"] = Instance.new("TextButton", G2L["be"]);
G2L["c0"]["BorderSizePixel"] = 0;
G2L["c0"]["TextTransparency"] = 1;
G2L["c0"]["ZIndex"] = 2;
G2L["c0"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["c0"]["BackgroundTransparency"] = 1;
G2L["c0"]["Name"] = [[Button]];
G2L["c0"]["Text"] = [[]];
G2L["c0"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.Off.Background
G2L["c1"] = Instance.new("ImageLabel", G2L["be"]);
G2L["c1"]["BorderSizePixel"] = 0;
G2L["c1"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["c1"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["c1"]["BackgroundTransparency"] = 1;
G2L["c1"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Status.Off.Label
G2L["c2"] = Instance.new("TextLabel", G2L["be"]);
G2L["c2"]["BorderSizePixel"] = 0;
G2L["c2"]["TextSize"] = 10;
G2L["c2"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c2"]["BackgroundTransparency"] = 1;
G2L["c2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["c2"]["Text"] = [[OFF]];
G2L["c2"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Tip
G2L["c3"] = Instance.new("Frame", G2L["b2"]);
G2L["c3"]["BorderSizePixel"] = 0;
G2L["c3"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["c3"]["Position"] = UDim2.new(0, 5, 0, 70);
G2L["c3"]["Name"] = [[Tip]];
G2L["c3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Tip.ColorBar
G2L["c4"] = Instance.new("Frame", G2L["c3"]);
G2L["c4"]["BorderSizePixel"] = 0;
G2L["c4"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["c4"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["c4"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTCollisionToolGUI.Tip.Text
G2L["c5"] = Instance.new("TextLabel", G2L["c3"]);
G2L["c5"]["TextWrapped"] = true;
G2L["c5"]["TextStrokeTransparency"] = 0.5;
G2L["c5"]["BorderSizePixel"] = 0;
G2L["c5"]["TextSize"] = 10;
G2L["c5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c5"]["BackgroundTransparency"] = 1;
G2L["c5"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["c5"]["Text"] = [[TIP: Press Enter to toggle collision.]];
G2L["c5"]["Name"] = [[Text]];
G2L["c5"]["Position"] = UDim2.new(0, 0, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI
G2L["c6"] = Instance.new("Frame", G2L["77"]);
G2L["c6"]["Active"] = true;
G2L["c6"]["BorderSizePixel"] = 0;
G2L["c6"]["Size"] = UDim2.new(0, 200, 0, 100);
G2L["c6"]["Position"] = UDim2.new(0, -210, 0, 0);
G2L["c6"]["Name"] = [[BTGroupsGUI]];
G2L["c6"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates
G2L["c7"] = Instance.new("Frame", G2L["c6"]);
G2L["c7"]["Visible"] = false;
G2L["c7"]["BorderSizePixel"] = 0;
G2L["c7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c7"]["Size"] = UDim2.new(0, 100, 0, 100);
G2L["c7"]["Name"] = [[Templates]];
G2L["c7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton
G2L["c8"] = Instance.new("Frame", G2L["c7"]);
G2L["c8"]["BorderSizePixel"] = 0;
G2L["c8"]["BackgroundColor3"] = Color3.fromRGB(69, 69, 69);
G2L["c8"]["Size"] = UDim2.new(1, -5, 0, 25);
G2L["c8"]["Name"] = [[GroupButton]];
G2L["c8"]["BackgroundTransparency"] = 0.65;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.EditButton
G2L["c9"] = Instance.new("ImageButton", G2L["c8"]);
G2L["c9"]["BorderSizePixel"] = 0;
G2L["c9"]["ImageTransparency"] = 0.25;
G2L["c9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c9"]["Image"] = [[http://www.roblox.com/asset/?id=160400465]];
G2L["c9"]["Size"] = UDim2.new(0, 16, 0, 16);
G2L["c9"]["BackgroundTransparency"] = 1;
G2L["c9"]["Name"] = [[EditButton]];
G2L["c9"]["Position"] = UDim2.new(1, -50, 0, 5);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.EditButton.RightTooltip
G2L["ca"] = Instance.new("Frame", G2L["c9"]);
G2L["ca"]["Visible"] = false;
G2L["ca"]["ZIndex"] = 2;
G2L["ca"]["BorderSizePixel"] = 0;
G2L["ca"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ca"]["Size"] = UDim2.new(0, 40, 0, 16);
G2L["ca"]["Position"] = UDim2.new(0, -50, 0, 0);
G2L["ca"]["Name"] = [[RightTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.EditButton.RightTooltip.Tip
G2L["cb"] = Instance.new("Frame", G2L["ca"]);
G2L["cb"]["ZIndex"] = 2;
G2L["cb"]["BorderSizePixel"] = 0;
G2L["cb"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["cb"]["Size"] = UDim2.new(0, 12, 0, 12);
G2L["cb"]["Position"] = UDim2.new(1, -6, 0, 2);
G2L["cb"]["Name"] = [[Tip]];
G2L["cb"]["Rotation"] = 45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.EditButton.RightTooltip.Text
G2L["cc"] = Instance.new("TextLabel", G2L["ca"]);
G2L["cc"]["ZIndex"] = 3;
G2L["cc"]["BorderSizePixel"] = 0;
G2L["cc"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["cc"]["TextSize"] = 10;
G2L["cc"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["cc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cc"]["BackgroundTransparency"] = 1;
G2L["cc"]["Size"] = UDim2.new(1, 4, 1, 0);
G2L["cc"]["Text"] = [[RENAME]];
G2L["cc"]["Name"] = [[Text]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.IgnoreButton
G2L["cd"] = Instance.new("ImageButton", G2L["c8"]);
G2L["cd"]["BorderSizePixel"] = 0;
G2L["cd"]["ImageTransparency"] = 0.25;
G2L["cd"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["cd"]["Image"] = [[http://www.roblox.com/asset/?id=160408836]];
G2L["cd"]["Size"] = UDim2.new(0, 16, 0, 16);
G2L["cd"]["BackgroundTransparency"] = 1;
G2L["cd"]["Name"] = [[IgnoreButton]];
G2L["cd"]["Position"] = UDim2.new(1, -25, 0, 5);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.IgnoreButton.RightTooltip
G2L["ce"] = Instance.new("Frame", G2L["cd"]);
G2L["ce"]["Visible"] = false;
G2L["ce"]["ZIndex"] = 2;
G2L["ce"]["BorderSizePixel"] = 0;
G2L["ce"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ce"]["Size"] = UDim2.new(0, 48, 0, 16);
G2L["ce"]["Position"] = UDim2.new(0, -58, 0, 0);
G2L["ce"]["Name"] = [[RightTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.IgnoreButton.RightTooltip.Tip
G2L["cf"] = Instance.new("Frame", G2L["ce"]);
G2L["cf"]["ZIndex"] = 2;
G2L["cf"]["BorderSizePixel"] = 0;
G2L["cf"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["cf"]["Size"] = UDim2.new(0, 12, 0, 12);
G2L["cf"]["Position"] = UDim2.new(1, -6, 0, 2);
G2L["cf"]["Name"] = [[Tip]];
G2L["cf"]["Rotation"] = 45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.IgnoreButton.RightTooltip.Text
G2L["d0"] = Instance.new("TextLabel", G2L["ce"]);
G2L["d0"]["ZIndex"] = 3;
G2L["d0"]["BorderSizePixel"] = 0;
G2L["d0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d0"]["TextSize"] = 10;
G2L["d0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d0"]["BackgroundTransparency"] = 1;
G2L["d0"]["Size"] = UDim2.new(1, 4, 1, 0);
G2L["d0"]["Text"] = [[UNIGNORE]];
G2L["d0"]["Name"] = [[Text]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.UpdateButton
G2L["d1"] = Instance.new("ImageButton", G2L["c8"]);
G2L["d1"]["BorderSizePixel"] = 0;
G2L["d1"]["ImageTransparency"] = 0.25;
G2L["d1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d1"]["Image"] = [[http://www.roblox.com/asset/?id=160402908]];
G2L["d1"]["Size"] = UDim2.new(0, 16, 0, 16);
G2L["d1"]["BackgroundTransparency"] = 1;
G2L["d1"]["Name"] = [[UpdateButton]];
G2L["d1"]["Position"] = UDim2.new(0, 12, 0, 5);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.UpdateButton.LeftTooltip
G2L["d2"] = Instance.new("Frame", G2L["d1"]);
G2L["d2"]["Visible"] = false;
G2L["d2"]["ZIndex"] = 3;
G2L["d2"]["BorderSizePixel"] = 0;
G2L["d2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d2"]["Size"] = UDim2.new(0, 38, 0, 16);
G2L["d2"]["Position"] = UDim2.new(1, 12, 0, 0);
G2L["d2"]["Name"] = [[LeftTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.UpdateButton.LeftTooltip.Tip
G2L["d3"] = Instance.new("Frame", G2L["d2"]);
G2L["d3"]["ZIndex"] = 3;
G2L["d3"]["BorderSizePixel"] = 0;
G2L["d3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d3"]["Size"] = UDim2.new(0, 12, 0, 12);
G2L["d3"]["Position"] = UDim2.new(0, -6, 0, 2);
G2L["d3"]["Name"] = [[Tip]];
G2L["d3"]["Rotation"] = 45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.UpdateButton.LeftTooltip.Text
G2L["d4"] = Instance.new("TextLabel", G2L["d2"]);
G2L["d4"]["ZIndex"] = 3;
G2L["d4"]["BorderSizePixel"] = 0;
G2L["d4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d4"]["TextSize"] = 10;
G2L["d4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d4"]["BackgroundTransparency"] = 1;
G2L["d4"]["Size"] = UDim2.new(1, 4, 1, 0);
G2L["d4"]["Text"] = [[UPDATE]];
G2L["d4"]["Name"] = [[Text]];
G2L["d4"]["Position"] = UDim2.new(0, -4, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.GroupNameArea
G2L["d5"] = Instance.new("Frame", G2L["c8"]);
G2L["d5"]["BorderSizePixel"] = 0;
G2L["d5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d5"]["Size"] = UDim2.new(0, 90, 0, 25);
G2L["d5"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["d5"]["Name"] = [[GroupNameArea]];
G2L["d5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.GroupNameArea.LeftTooltip
G2L["d6"] = Instance.new("Frame", G2L["d5"]);
G2L["d6"]["Visible"] = false;
G2L["d6"]["ZIndex"] = 2;
G2L["d6"]["BorderSizePixel"] = 0;
G2L["d6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d6"]["Size"] = UDim2.new(0, 38, 0, 16);
G2L["d6"]["Position"] = UDim2.new(1, 12, 0, 5);
G2L["d6"]["Name"] = [[LeftTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.GroupNameArea.LeftTooltip.Tip
G2L["d7"] = Instance.new("Frame", G2L["d6"]);
G2L["d7"]["ZIndex"] = 2;
G2L["d7"]["BorderSizePixel"] = 0;
G2L["d7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d7"]["Size"] = UDim2.new(0, 12, 0, 12);
G2L["d7"]["Position"] = UDim2.new(0, -6, 0, 2);
G2L["d7"]["Name"] = [[Tip]];
G2L["d7"]["Rotation"] = 45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.GroupNameArea.LeftTooltip.Text
G2L["d8"] = Instance.new("TextLabel", G2L["d6"]);
G2L["d8"]["ZIndex"] = 3;
G2L["d8"]["BorderSizePixel"] = 0;
G2L["d8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d8"]["TextSize"] = 10;
G2L["d8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d8"]["BackgroundTransparency"] = 1;
G2L["d8"]["Size"] = UDim2.new(1, 4, 1, 0);
G2L["d8"]["Text"] = [[SELECT]];
G2L["d8"]["Name"] = [[Text]];
G2L["d8"]["Position"] = UDim2.new(0, -4, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.GroupName
G2L["d9"] = Instance.new("TextButton", G2L["c8"]);
G2L["d9"]["TextStrokeTransparency"] = 0.8;
G2L["d9"]["BorderSizePixel"] = 0;
G2L["d9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["d9"]["TextSize"] = 10;
G2L["d9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d9"]["ZIndex"] = 2;
G2L["d9"]["Size"] = UDim2.new(0, 90, 0, 25);
G2L["d9"]["BackgroundTransparency"] = 1;
G2L["d9"]["Name"] = [[GroupName]];
G2L["d9"]["ClipsDescendants"] = true;
G2L["d9"]["Text"] = [[Group 1]];
G2L["d9"]["Position"] = UDim2.new(0, 35, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Templates.GroupButton.GroupNamer
G2L["da"] = Instance.new("TextBox", G2L["c8"]);
G2L["da"]["Visible"] = false;
G2L["da"]["TextStrokeTransparency"] = 0.8;
G2L["da"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["da"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["da"]["ZIndex"] = 2;
G2L["da"]["BorderSizePixel"] = 0;
G2L["da"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["da"]["TextSize"] = 10;
G2L["da"]["Name"] = [[GroupNamer]];
G2L["da"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["da"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["da"]["ClipsDescendants"] = true;
G2L["da"]["Size"] = UDim2.new(0, 90, 0, 25);
G2L["da"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["da"]["Text"] = [[Group 1]];
G2L["da"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.GroupList
G2L["db"] = Instance.new("ScrollingFrame", G2L["c6"]);
G2L["db"]["BorderSizePixel"] = 0;
G2L["db"]["CanvasSize"] = UDim2.new(1, -10, 0, 0);
G2L["db"]["TopImage"] = [[rbxasset://textures/blackBkg_square.png]];
G2L["db"]["MidImage"] = [[rbxasset://textures/blackBkg_square.png]];
G2L["db"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["db"]["Name"] = [[GroupList]];
G2L["db"]["BottomImage"] = [[rbxasset://textures/blackBkg_square.png]];
G2L["db"]["Size"] = UDim2.new(1, -10, 0, 70);
G2L["db"]["Position"] = UDim2.new(0, 10, 0, 30);
G2L["db"]["ScrollBarThickness"] = 3;
G2L["db"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.SelectNote
G2L["dc"] = Instance.new("TextLabel", G2L["c6"]);
G2L["dc"]["TextWrapped"] = true;
G2L["dc"]["TextStrokeTransparency"] = 0.5;
G2L["dc"]["BorderSizePixel"] = 0;
G2L["dc"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["dc"]["TextScaled"] = true;
G2L["dc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["dc"]["TextSize"] = 14;
G2L["dc"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["dc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["dc"]["BackgroundTransparency"] = 1;
G2L["dc"]["Size"] = UDim2.new(1, -10, 0, 15);
G2L["dc"]["Visible"] = false;
G2L["dc"]["Text"] = [[Select something to use this tool.]];
G2L["dc"]["Name"] = [[SelectNote]];
G2L["dc"]["Position"] = UDim2.new(0, 10, 0, 27);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Title
G2L["dd"] = Instance.new("Frame", G2L["c6"]);
G2L["dd"]["BorderSizePixel"] = 0;
G2L["dd"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["dd"]["Name"] = [[Title]];
G2L["dd"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Title.CreateButton
G2L["de"] = Instance.new("TextButton", G2L["dd"]);
G2L["de"]["BorderSizePixel"] = 0;
G2L["de"]["TextSize"] = 10;
G2L["de"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["de"]["BackgroundColor3"] = Color3.fromRGB(58, 58, 58);
G2L["de"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["de"]["Size"] = UDim2.new(0, 40, 0, 16);
G2L["de"]["BackgroundTransparency"] = 0.5;
G2L["de"]["Name"] = [[CreateButton]];
G2L["de"]["Text"] = [[NEW]];
G2L["de"]["Position"] = UDim2.new(1, -40, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Title.ColorBar
G2L["df"] = Instance.new("Frame", G2L["dd"]);
G2L["df"]["BorderSizePixel"] = 0;
G2L["df"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["df"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["df"]["Position"] = UDim2.new(0, 7, 0, -3);
G2L["df"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTGroupsGUI.Title.Label
G2L["e0"] = Instance.new("TextLabel", G2L["dd"]);
G2L["e0"]["TextWrapped"] = true;
G2L["e0"]["TextStrokeTransparency"] = 0;
G2L["e0"]["BorderSizePixel"] = 0;
G2L["e0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["e0"]["TextSize"] = 10;
G2L["e0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e0"]["BackgroundTransparency"] = 1;
G2L["e0"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["e0"]["Text"] = [[SELECTION GROUPS]];
G2L["e0"]["Name"] = [[Label]];
G2L["e0"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI
G2L["e1"] = Instance.new("Frame", G2L["77"]);
G2L["e1"]["Active"] = true;
G2L["e1"]["BorderSizePixel"] = 0;
G2L["e1"]["Size"] = UDim2.new(0, 200, 0, 125);
G2L["e1"]["Position"] = UDim2.new(0, 0, 0.4, 0);
G2L["e1"]["Name"] = [[BTDecorateToolGUI]];
G2L["e1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.BottomColorBar
G2L["e2"] = Instance.new("Frame", G2L["e1"]);
G2L["e2"]["BorderSizePixel"] = 0;
G2L["e2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e2"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["e2"]["Position"] = UDim2.new(0, 5, 1, -2);
G2L["e2"]["Name"] = [[BottomColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Title
G2L["e3"] = Instance.new("Frame", G2L["e1"]);
G2L["e3"]["BorderSizePixel"] = 0;
G2L["e3"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["e3"]["Name"] = [[Title]];
G2L["e3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Title.ColorBar
G2L["e4"] = Instance.new("Frame", G2L["e3"]);
G2L["e4"]["BorderSizePixel"] = 0;
G2L["e4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e4"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["e4"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["e4"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Title.Label
G2L["e5"] = Instance.new("TextLabel", G2L["e3"]);
G2L["e5"]["TextWrapped"] = true;
G2L["e5"]["TextStrokeTransparency"] = 0;
G2L["e5"]["BorderSizePixel"] = 0;
G2L["e5"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["e5"]["TextSize"] = 10;
G2L["e5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e5"]["BackgroundTransparency"] = 1;
G2L["e5"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["e5"]["Text"] = [[DECORATE TOOL]];
G2L["e5"]["Name"] = [[Label]];
G2L["e5"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Title.F3XSignature
G2L["e6"] = Instance.new("TextLabel", G2L["e3"]);
G2L["e6"]["TextWrapped"] = true;
G2L["e6"]["TextStrokeTransparency"] = 0.9;
G2L["e6"]["BorderSizePixel"] = 0;
G2L["e6"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["e6"]["TextSize"] = 14;
G2L["e6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e6"]["BackgroundTransparency"] = 1;
G2L["e6"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["e6"]["Text"] = [[F3X]];
G2L["e6"]["Name"] = [[F3XSignature]];
G2L["e6"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke
G2L["e7"] = Instance.new("Frame", G2L["e1"]);
G2L["e7"]["BorderSizePixel"] = 0;
G2L["e7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e7"]["ClipsDescendants"] = true;
G2L["e7"]["Size"] = UDim2.new(1, -10, 0, 25);
G2L["e7"]["Position"] = UDim2.new(0, 10, 0, 30);
G2L["e7"]["Name"] = [[Smoke]];
G2L["e7"]["BackgroundTransparency"] = 0.675;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Label
G2L["e8"] = Instance.new("TextLabel", G2L["e7"]);
G2L["e8"]["TextWrapped"] = true;
G2L["e8"]["TextStrokeTransparency"] = 0.5;
G2L["e8"]["BorderSizePixel"] = 0;
G2L["e8"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["e8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e8"]["TextSize"] = 10;
G2L["e8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["e8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e8"]["BackgroundTransparency"] = 1;
G2L["e8"]["Size"] = UDim2.new(0, 60, 0, 25);
G2L["e8"]["Text"] = [[Smoke]];
G2L["e8"]["Name"] = [[Label]];
G2L["e8"]["Position"] = UDim2.new(0, 35, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.ArrowButton
G2L["e9"] = Instance.new("ImageButton", G2L["e7"]);
G2L["e9"]["BorderSizePixel"] = 0;
G2L["e9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e9"]["Image"] = [[http://www.roblox.com/asset/?id=134367382]];
G2L["e9"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["e9"]["BackgroundTransparency"] = 1;
G2L["e9"]["Name"] = [[ArrowButton]];
G2L["e9"]["Position"] = UDim2.new(0, 10, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.ColorBar
G2L["ea"] = Instance.new("Frame", G2L["e7"]);
G2L["ea"]["BorderSizePixel"] = 0;
G2L["ea"]["BackgroundColor3"] = Color3.fromRGB(255, 175, 61);
G2L["ea"]["Size"] = UDim2.new(0, 3, 1, 0);
G2L["ea"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.AddButton
G2L["eb"] = Instance.new("TextButton", G2L["e7"]);
G2L["eb"]["BorderSizePixel"] = 0;
G2L["eb"]["TextSize"] = 10;
G2L["eb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["eb"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["eb"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["eb"]["Size"] = UDim2.new(0, 35, 0, 19);
G2L["eb"]["BackgroundTransparency"] = 0.75;
G2L["eb"]["Name"] = [[AddButton]];
G2L["eb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["eb"]["Text"] = [[ADD]];
G2L["eb"]["Position"] = UDim2.new(1, -40, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.RemoveButton
G2L["ec"] = Instance.new("TextButton", G2L["e7"]);
G2L["ec"]["BorderSizePixel"] = 0;
G2L["ec"]["TextSize"] = 10;
G2L["ec"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ec"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ec"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["ec"]["Size"] = UDim2.new(0, 58, 0, 19);
G2L["ec"]["BackgroundTransparency"] = 0.75;
G2L["ec"]["Name"] = [[RemoveButton]];
G2L["ec"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ec"]["Text"] = [[REMOVE]];
G2L["ec"]["Visible"] = false;
G2L["ec"]["Position"] = UDim2.new(0, 127, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Shadow
G2L["ed"] = Instance.new("Frame", G2L["e7"]);
G2L["ed"]["BorderSizePixel"] = 0;
G2L["ed"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ed"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["ed"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["ed"]["Name"] = [[Shadow]];
G2L["ed"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options
G2L["ee"] = Instance.new("Frame", G2L["e7"]);
G2L["ee"]["BorderSizePixel"] = 0;
G2L["ee"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ee"]["ClipsDescendants"] = true;
G2L["ee"]["Size"] = UDim2.new(1, -3, 0, 72);
G2L["ee"]["Position"] = UDim2.new(0, 3, 1, 0);
G2L["ee"]["Name"] = [[Options]];
G2L["ee"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.OpacityOption
G2L["ef"] = Instance.new("Frame", G2L["ee"]);
G2L["ef"]["BorderSizePixel"] = 0;
G2L["ef"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["ef"]["Position"] = UDim2.new(0, 100, 0, 10);
G2L["ef"]["Name"] = [[OpacityOption]];
G2L["ef"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.OpacityOption.Label
G2L["f0"] = Instance.new("TextLabel", G2L["ef"]);
G2L["f0"]["TextWrapped"] = true;
G2L["f0"]["TextStrokeTransparency"] = 0;
G2L["f0"]["BorderSizePixel"] = 0;
G2L["f0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["f0"]["TextSize"] = 10;
G2L["f0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f0"]["BackgroundTransparency"] = 1;
G2L["f0"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["f0"]["Text"] = [[Opacity]];
G2L["f0"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.OpacityOption.Input
G2L["f1"] = Instance.new("Frame", G2L["ef"]);
G2L["f1"]["BorderSizePixel"] = 0;
G2L["f1"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["f1"]["Position"] = UDim2.new(0, 45, 0, 0);
G2L["f1"]["Name"] = [[Input]];
G2L["f1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.OpacityOption.Input.Background
G2L["f2"] = Instance.new("ImageLabel", G2L["f1"]);
G2L["f2"]["BorderSizePixel"] = 0;
G2L["f2"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["f2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["f2"]["BackgroundTransparency"] = 1;
G2L["f2"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.OpacityOption.Input.SelectedIndicator
G2L["f3"] = Instance.new("Frame", G2L["f1"]);
G2L["f3"]["BorderSizePixel"] = 0;
G2L["f3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f3"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["f3"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["f3"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.OpacityOption.Input.TextBox
G2L["f4"] = Instance.new("TextBox", G2L["f1"]);
G2L["f4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f4"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["f4"]["ZIndex"] = 2;
G2L["f4"]["BorderSizePixel"] = 0;
G2L["f4"]["TextSize"] = 10;
G2L["f4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f4"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["f4"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["f4"]["Text"] = [[1]];
G2L["f4"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.VelocityOption
G2L["f5"] = Instance.new("Frame", G2L["ee"]);
G2L["f5"]["BorderSizePixel"] = 0;
G2L["f5"]["Size"] = UDim2.new(1, -115, 0, 25);
G2L["f5"]["Position"] = UDim2.new(0, 100, 0, 45);
G2L["f5"]["Name"] = [[VelocityOption]];
G2L["f5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.VelocityOption.Label
G2L["f6"] = Instance.new("TextLabel", G2L["f5"]);
G2L["f6"]["TextWrapped"] = true;
G2L["f6"]["TextStrokeTransparency"] = 0;
G2L["f6"]["BorderSizePixel"] = 0;
G2L["f6"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["f6"]["TextSize"] = 10;
G2L["f6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f6"]["BackgroundTransparency"] = 1;
G2L["f6"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["f6"]["Text"] = [[Velocity]];
G2L["f6"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.VelocityOption.Input
G2L["f7"] = Instance.new("Frame", G2L["f5"]);
G2L["f7"]["BorderSizePixel"] = 0;
G2L["f7"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["f7"]["Position"] = UDim2.new(0, 45, 0, 0);
G2L["f7"]["Name"] = [[Input]];
G2L["f7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.VelocityOption.Input.Background
G2L["f8"] = Instance.new("ImageLabel", G2L["f7"]);
G2L["f8"]["BorderSizePixel"] = 0;
G2L["f8"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["f8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["f8"]["BackgroundTransparency"] = 1;
G2L["f8"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.VelocityOption.Input.SelectedIndicator
G2L["f9"] = Instance.new("Frame", G2L["f7"]);
G2L["f9"]["BorderSizePixel"] = 0;
G2L["f9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f9"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["f9"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["f9"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.VelocityOption.Input.TextBox
G2L["fa"] = Instance.new("TextBox", G2L["f7"]);
G2L["fa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fa"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["fa"]["ZIndex"] = 2;
G2L["fa"]["BorderSizePixel"] = 0;
G2L["fa"]["TextSize"] = 10;
G2L["fa"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["fa"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["fa"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["fa"]["Text"] = [[90]];
G2L["fa"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.SizeOption
G2L["fb"] = Instance.new("Frame", G2L["ee"]);
G2L["fb"]["BorderSizePixel"] = 0;
G2L["fb"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["fb"]["Position"] = UDim2.new(0, 0, 0, 45);
G2L["fb"]["Name"] = [[SizeOption]];
G2L["fb"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.SizeOption.Label
G2L["fc"] = Instance.new("TextLabel", G2L["fb"]);
G2L["fc"]["TextWrapped"] = true;
G2L["fc"]["TextStrokeTransparency"] = 0;
G2L["fc"]["BorderSizePixel"] = 0;
G2L["fc"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["fc"]["TextSize"] = 10;
G2L["fc"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["fc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["fc"]["BackgroundTransparency"] = 1;
G2L["fc"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["fc"]["Text"] = [[Size]];
G2L["fc"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.SizeOption.Input
G2L["fd"] = Instance.new("Frame", G2L["fb"]);
G2L["fd"]["BorderSizePixel"] = 0;
G2L["fd"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["fd"]["Position"] = UDim2.new(0, 30, 0, 0);
G2L["fd"]["Name"] = [[Input]];
G2L["fd"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.SizeOption.Input.Background
G2L["fe"] = Instance.new("ImageLabel", G2L["fd"]);
G2L["fe"]["BorderSizePixel"] = 0;
G2L["fe"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["fe"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["fe"]["BackgroundTransparency"] = 1;
G2L["fe"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.SizeOption.Input.SelectedIndicator
G2L["ff"] = Instance.new("Frame", G2L["fd"]);
G2L["ff"]["BorderSizePixel"] = 0;
G2L["ff"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ff"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["ff"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["ff"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.SizeOption.Input.TextBox
G2L["100"] = Instance.new("TextBox", G2L["fd"]);
G2L["100"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["100"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["100"]["ZIndex"] = 2;
G2L["100"]["BorderSizePixel"] = 0;
G2L["100"]["TextSize"] = 10;
G2L["100"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["100"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["100"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["100"]["Text"] = [[16]];
G2L["100"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.ColorOption
G2L["101"] = Instance.new("Frame", G2L["ee"]);
G2L["101"]["BorderSizePixel"] = 0;
G2L["101"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["101"]["Position"] = UDim2.new(0, 0, 0, 10);
G2L["101"]["Name"] = [[ColorOption]];
G2L["101"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.ColorOption.HSVPicker
G2L["102"] = Instance.new("ImageButton", G2L["101"]);
G2L["102"]["BorderSizePixel"] = 0;
G2L["102"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["102"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["102"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["102"]["BackgroundTransparency"] = 0.4;
G2L["102"]["Name"] = [[HSVPicker]];
G2L["102"]["Position"] = UDim2.new(0, 60, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.ColorOption.HSVPicker.Shadow
G2L["103"] = Instance.new("Frame", G2L["102"]);
G2L["103"]["BorderSizePixel"] = 0;
G2L["103"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["103"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["103"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["103"]["Name"] = [[Shadow]];
G2L["103"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.ColorOption.Label
G2L["104"] = Instance.new("TextLabel", G2L["101"]);
G2L["104"]["TextWrapped"] = true;
G2L["104"]["TextStrokeTransparency"] = 0;
G2L["104"]["BorderSizePixel"] = 0;
G2L["104"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["104"]["TextSize"] = 10;
G2L["104"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["104"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["104"]["BackgroundTransparency"] = 1;
G2L["104"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["104"]["Text"] = [[Color]];
G2L["104"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.ColorOption.Indicator
G2L["105"] = Instance.new("Frame", G2L["101"]);
G2L["105"]["BorderSizePixel"] = 0;
G2L["105"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["105"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["105"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["105"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.ColorOption.Indicator.Shadow
G2L["106"] = Instance.new("Frame", G2L["105"]);
G2L["106"]["BorderSizePixel"] = 0;
G2L["106"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["106"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["106"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["106"]["Name"] = [[Shadow]];
G2L["106"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Smoke.Options.ColorOption.Indicator.Varies
G2L["107"] = Instance.new("TextLabel", G2L["105"]);
G2L["107"]["TextWrapped"] = true;
G2L["107"]["TextStrokeTransparency"] = 0.75;
G2L["107"]["BorderSizePixel"] = 0;
G2L["107"]["TextScaled"] = true;
G2L["107"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["107"]["TextSize"] = 14;
G2L["107"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["107"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["107"]["BackgroundTransparency"] = 1;
G2L["107"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["107"]["Text"] = [[]];
G2L["107"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.SelectNote
G2L["108"] = Instance.new("TextLabel", G2L["e1"]);
G2L["108"]["TextWrapped"] = true;
G2L["108"]["TextStrokeTransparency"] = 0.5;
G2L["108"]["BorderSizePixel"] = 0;
G2L["108"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["108"]["TextScaled"] = true;
G2L["108"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["108"]["TextSize"] = 14;
G2L["108"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["108"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["108"]["BackgroundTransparency"] = 1;
G2L["108"]["Size"] = UDim2.new(1, -10, 0, 15);
G2L["108"]["Visible"] = false;
G2L["108"]["Text"] = [[Select something to use this tool.]];
G2L["108"]["Name"] = [[SelectNote]];
G2L["108"]["Position"] = UDim2.new(0, 10, 0, 27);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire
G2L["109"] = Instance.new("Frame", G2L["e1"]);
G2L["109"]["BorderSizePixel"] = 0;
G2L["109"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["109"]["ClipsDescendants"] = true;
G2L["109"]["Size"] = UDim2.new(1, -10, 0, 25);
G2L["109"]["Position"] = UDim2.new(0, 10, 0, 60);
G2L["109"]["Name"] = [[Fire]];
G2L["109"]["BackgroundTransparency"] = 0.675;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Label
G2L["10a"] = Instance.new("TextLabel", G2L["109"]);
G2L["10a"]["TextWrapped"] = true;
G2L["10a"]["TextStrokeTransparency"] = 0.5;
G2L["10a"]["BorderSizePixel"] = 0;
G2L["10a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["10a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10a"]["TextSize"] = 10;
G2L["10a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["10a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10a"]["BackgroundTransparency"] = 1;
G2L["10a"]["Size"] = UDim2.new(0, 60, 0, 25);
G2L["10a"]["Text"] = [[Fire]];
G2L["10a"]["Name"] = [[Label]];
G2L["10a"]["Position"] = UDim2.new(0, 35, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.ArrowButton
G2L["10b"] = Instance.new("ImageButton", G2L["109"]);
G2L["10b"]["BorderSizePixel"] = 0;
G2L["10b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10b"]["Image"] = [[http://www.roblox.com/asset/?id=134367382]];
G2L["10b"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["10b"]["BackgroundTransparency"] = 1;
G2L["10b"]["Name"] = [[ArrowButton]];
G2L["10b"]["Position"] = UDim2.new(0, 10, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.ColorBar
G2L["10c"] = Instance.new("Frame", G2L["109"]);
G2L["10c"]["BorderSizePixel"] = 0;
G2L["10c"]["BackgroundColor3"] = Color3.fromRGB(218, 0, 255);
G2L["10c"]["Size"] = UDim2.new(0, 3, 1, 0);
G2L["10c"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.AddButton
G2L["10d"] = Instance.new("TextButton", G2L["109"]);
G2L["10d"]["BorderSizePixel"] = 0;
G2L["10d"]["TextSize"] = 10;
G2L["10d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["10d"]["Size"] = UDim2.new(0, 35, 0, 19);
G2L["10d"]["BackgroundTransparency"] = 0.75;
G2L["10d"]["Name"] = [[AddButton]];
G2L["10d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10d"]["Text"] = [[ADD]];
G2L["10d"]["Position"] = UDim2.new(1, -40, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.RemoveButton
G2L["10e"] = Instance.new("TextButton", G2L["109"]);
G2L["10e"]["BorderSizePixel"] = 0;
G2L["10e"]["TextSize"] = 10;
G2L["10e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["10e"]["Size"] = UDim2.new(0, 58, 0, 19);
G2L["10e"]["BackgroundTransparency"] = 0.75;
G2L["10e"]["Name"] = [[RemoveButton]];
G2L["10e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10e"]["Text"] = [[REMOVE]];
G2L["10e"]["Visible"] = false;
G2L["10e"]["Position"] = UDim2.new(0, 90, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Shadow
G2L["10f"] = Instance.new("Frame", G2L["109"]);
G2L["10f"]["BorderSizePixel"] = 0;
G2L["10f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10f"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["10f"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["10f"]["Name"] = [[Shadow]];
G2L["10f"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options
G2L["110"] = Instance.new("Frame", G2L["109"]);
G2L["110"]["BorderSizePixel"] = 0;
G2L["110"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["110"]["Size"] = UDim2.new(1, -3, 0, 72);
G2L["110"]["Position"] = UDim2.new(0, 3, 1, 0);
G2L["110"]["Name"] = [[Options]];
G2L["110"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.HeatOption
G2L["111"] = Instance.new("Frame", G2L["110"]);
G2L["111"]["BorderSizePixel"] = 0;
G2L["111"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["111"]["Position"] = UDim2.new(0, 0, 0, 45);
G2L["111"]["Name"] = [[HeatOption]];
G2L["111"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.HeatOption.Label
G2L["112"] = Instance.new("TextLabel", G2L["111"]);
G2L["112"]["TextWrapped"] = true;
G2L["112"]["TextStrokeTransparency"] = 0;
G2L["112"]["BorderSizePixel"] = 0;
G2L["112"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["112"]["TextSize"] = 10;
G2L["112"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["112"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["112"]["BackgroundTransparency"] = 1;
G2L["112"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["112"]["Text"] = [[Heat]];
G2L["112"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.HeatOption.Input
G2L["113"] = Instance.new("Frame", G2L["111"]);
G2L["113"]["BorderSizePixel"] = 0;
G2L["113"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["113"]["Position"] = UDim2.new(0, 34, 0, 0);
G2L["113"]["Name"] = [[Input]];
G2L["113"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.HeatOption.Input.Background
G2L["114"] = Instance.new("ImageLabel", G2L["113"]);
G2L["114"]["BorderSizePixel"] = 0;
G2L["114"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["114"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["114"]["BackgroundTransparency"] = 1;
G2L["114"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.HeatOption.Input.SelectedIndicator
G2L["115"] = Instance.new("Frame", G2L["113"]);
G2L["115"]["BorderSizePixel"] = 0;
G2L["115"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["115"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["115"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["115"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.HeatOption.Input.TextBox
G2L["116"] = Instance.new("TextBox", G2L["113"]);
G2L["116"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["116"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["116"]["ZIndex"] = 2;
G2L["116"]["BorderSizePixel"] = 0;
G2L["116"]["TextSize"] = 10;
G2L["116"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["116"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["116"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["116"]["Text"] = [[1]];
G2L["116"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SizeOption
G2L["117"] = Instance.new("Frame", G2L["110"]);
G2L["117"]["BorderSizePixel"] = 0;
G2L["117"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["117"]["Position"] = UDim2.new(0, 90, 0, 45);
G2L["117"]["Name"] = [[SizeOption]];
G2L["117"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SizeOption.Label
G2L["118"] = Instance.new("TextLabel", G2L["117"]);
G2L["118"]["TextWrapped"] = true;
G2L["118"]["TextStrokeTransparency"] = 0;
G2L["118"]["BorderSizePixel"] = 0;
G2L["118"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["118"]["TextSize"] = 10;
G2L["118"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["118"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["118"]["BackgroundTransparency"] = 1;
G2L["118"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["118"]["Text"] = [[Size]];
G2L["118"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SizeOption.Input
G2L["119"] = Instance.new("Frame", G2L["117"]);
G2L["119"]["BorderSizePixel"] = 0;
G2L["119"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["119"]["Position"] = UDim2.new(0, 30, 0, 0);
G2L["119"]["Name"] = [[Input]];
G2L["119"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SizeOption.Input.Background
G2L["11a"] = Instance.new("ImageLabel", G2L["119"]);
G2L["11a"]["BorderSizePixel"] = 0;
G2L["11a"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["11a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["11a"]["BackgroundTransparency"] = 1;
G2L["11a"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SizeOption.Input.SelectedIndicator
G2L["11b"] = Instance.new("Frame", G2L["119"]);
G2L["11b"]["BorderSizePixel"] = 0;
G2L["11b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11b"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["11b"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["11b"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SizeOption.Input.TextBox
G2L["11c"] = Instance.new("TextBox", G2L["119"]);
G2L["11c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11c"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["11c"]["ZIndex"] = 2;
G2L["11c"]["BorderSizePixel"] = 0;
G2L["11c"]["TextSize"] = 10;
G2L["11c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["11c"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["11c"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["11c"]["Text"] = [[16]];
G2L["11c"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.ColorOption
G2L["11d"] = Instance.new("Frame", G2L["110"]);
G2L["11d"]["BorderSizePixel"] = 0;
G2L["11d"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["11d"]["Position"] = UDim2.new(0, 0, 0, 10);
G2L["11d"]["Name"] = [[ColorOption]];
G2L["11d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.ColorOption.HSVPicker
G2L["11e"] = Instance.new("ImageButton", G2L["11d"]);
G2L["11e"]["BorderSizePixel"] = 0;
G2L["11e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11e"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["11e"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["11e"]["BackgroundTransparency"] = 0.4;
G2L["11e"]["Name"] = [[HSVPicker]];
G2L["11e"]["Position"] = UDim2.new(0, 60, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.ColorOption.HSVPicker.Shadow
G2L["11f"] = Instance.new("Frame", G2L["11e"]);
G2L["11f"]["BorderSizePixel"] = 0;
G2L["11f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11f"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["11f"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["11f"]["Name"] = [[Shadow]];
G2L["11f"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.ColorOption.Label
G2L["120"] = Instance.new("TextLabel", G2L["11d"]);
G2L["120"]["TextWrapped"] = true;
G2L["120"]["TextStrokeTransparency"] = 0;
G2L["120"]["BorderSizePixel"] = 0;
G2L["120"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["120"]["TextSize"] = 10;
G2L["120"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["120"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["120"]["BackgroundTransparency"] = 1;
G2L["120"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["120"]["Text"] = [[Color]];
G2L["120"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.ColorOption.Indicator
G2L["121"] = Instance.new("Frame", G2L["11d"]);
G2L["121"]["BorderSizePixel"] = 0;
G2L["121"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["121"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["121"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["121"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.ColorOption.Indicator.Shadow
G2L["122"] = Instance.new("Frame", G2L["121"]);
G2L["122"]["BorderSizePixel"] = 0;
G2L["122"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["122"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["122"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["122"]["Name"] = [[Shadow]];
G2L["122"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.ColorOption.Indicator.Varies
G2L["123"] = Instance.new("TextLabel", G2L["121"]);
G2L["123"]["TextWrapped"] = true;
G2L["123"]["TextStrokeTransparency"] = 0.75;
G2L["123"]["BorderSizePixel"] = 0;
G2L["123"]["TextScaled"] = true;
G2L["123"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["123"]["TextSize"] = 14;
G2L["123"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["123"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["123"]["BackgroundTransparency"] = 1;
G2L["123"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["123"]["Text"] = [[]];
G2L["123"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SecondaryColorOption
G2L["124"] = Instance.new("Frame", G2L["110"]);
G2L["124"]["BorderSizePixel"] = 0;
G2L["124"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["124"]["Position"] = UDim2.new(0, 100, 0, 10);
G2L["124"]["Name"] = [[SecondaryColorOption]];
G2L["124"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SecondaryColorOption.HSVPicker
G2L["125"] = Instance.new("ImageButton", G2L["124"]);
G2L["125"]["BorderSizePixel"] = 0;
G2L["125"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["125"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["125"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["125"]["BackgroundTransparency"] = 0.4;
G2L["125"]["Name"] = [[HSVPicker]];
G2L["125"]["Position"] = UDim2.new(0, 60, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SecondaryColorOption.HSVPicker.Shadow
G2L["126"] = Instance.new("Frame", G2L["125"]);
G2L["126"]["BorderSizePixel"] = 0;
G2L["126"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["126"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["126"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["126"]["Name"] = [[Shadow]];
G2L["126"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SecondaryColorOption.Label
G2L["127"] = Instance.new("TextLabel", G2L["124"]);
G2L["127"]["TextWrapped"] = true;
G2L["127"]["TextStrokeTransparency"] = 0;
G2L["127"]["BorderSizePixel"] = 0;
G2L["127"]["TextSize"] = 10;
G2L["127"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["127"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["127"]["BackgroundTransparency"] = 1;
G2L["127"]["Size"] = UDim2.new(0, 30, 0, 25);
G2L["127"]["Text"] = [[2nd Color]];
G2L["127"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SecondaryColorOption.Indicator
G2L["128"] = Instance.new("Frame", G2L["124"]);
G2L["128"]["BorderSizePixel"] = 0;
G2L["128"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["128"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["128"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["128"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SecondaryColorOption.Indicator.Shadow
G2L["129"] = Instance.new("Frame", G2L["128"]);
G2L["129"]["BorderSizePixel"] = 0;
G2L["129"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["129"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["129"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["129"]["Name"] = [[Shadow]];
G2L["129"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Fire.Options.SecondaryColorOption.Indicator.Varies
G2L["12a"] = Instance.new("TextLabel", G2L["128"]);
G2L["12a"]["TextWrapped"] = true;
G2L["12a"]["TextStrokeTransparency"] = 0.75;
G2L["12a"]["BorderSizePixel"] = 0;
G2L["12a"]["TextScaled"] = true;
G2L["12a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12a"]["TextSize"] = 14;
G2L["12a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["12a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12a"]["BackgroundTransparency"] = 1;
G2L["12a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["12a"]["Text"] = [[]];
G2L["12a"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles
G2L["12b"] = Instance.new("Frame", G2L["e1"]);
G2L["12b"]["BorderSizePixel"] = 0;
G2L["12b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12b"]["ClipsDescendants"] = true;
G2L["12b"]["Size"] = UDim2.new(1, -10, 0, 25);
G2L["12b"]["Position"] = UDim2.new(0, 10, 0, 90);
G2L["12b"]["Name"] = [[Sparkles]];
G2L["12b"]["BackgroundTransparency"] = 0.675;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Label
G2L["12c"] = Instance.new("TextLabel", G2L["12b"]);
G2L["12c"]["TextWrapped"] = true;
G2L["12c"]["TextStrokeTransparency"] = 0.5;
G2L["12c"]["BorderSizePixel"] = 0;
G2L["12c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["12c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12c"]["TextSize"] = 10;
G2L["12c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["12c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12c"]["BackgroundTransparency"] = 1;
G2L["12c"]["Size"] = UDim2.new(0, 60, 0, 25);
G2L["12c"]["Text"] = [[Sparkles]];
G2L["12c"]["Name"] = [[Label]];
G2L["12c"]["Position"] = UDim2.new(0, 35, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.ArrowButton
G2L["12d"] = Instance.new("ImageButton", G2L["12b"]);
G2L["12d"]["BorderSizePixel"] = 0;
G2L["12d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12d"]["Image"] = [[http://www.roblox.com/asset/?id=134367382]];
G2L["12d"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["12d"]["BackgroundTransparency"] = 1;
G2L["12d"]["Name"] = [[ArrowButton]];
G2L["12d"]["Position"] = UDim2.new(0, 10, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.ColorBar
G2L["12e"] = Instance.new("Frame", G2L["12b"]);
G2L["12e"]["BorderSizePixel"] = 0;
G2L["12e"]["BackgroundColor3"] = Color3.fromRGB(6, 102, 255);
G2L["12e"]["Size"] = UDim2.new(0, 3, 1, 0);
G2L["12e"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.AddButton
G2L["12f"] = Instance.new("TextButton", G2L["12b"]);
G2L["12f"]["BorderSizePixel"] = 0;
G2L["12f"]["TextSize"] = 10;
G2L["12f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["12f"]["ZIndex"] = 2;
G2L["12f"]["Size"] = UDim2.new(0, 35, 0, 19);
G2L["12f"]["BackgroundTransparency"] = 0.75;
G2L["12f"]["Name"] = [[AddButton]];
G2L["12f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12f"]["Text"] = [[ADD]];
G2L["12f"]["Position"] = UDim2.new(1, -40, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.RemoveButton
G2L["130"] = Instance.new("TextButton", G2L["12b"]);
G2L["130"]["BorderSizePixel"] = 0;
G2L["130"]["TextSize"] = 10;
G2L["130"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["130"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["130"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["130"]["ZIndex"] = 2;
G2L["130"]["Size"] = UDim2.new(0, 58, 0, 19);
G2L["130"]["BackgroundTransparency"] = 0.75;
G2L["130"]["Name"] = [[RemoveButton]];
G2L["130"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["130"]["Text"] = [[REMOVE]];
G2L["130"]["Visible"] = false;
G2L["130"]["Position"] = UDim2.new(0, 90, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Shadow
G2L["131"] = Instance.new("Frame", G2L["12b"]);
G2L["131"]["BorderSizePixel"] = 0;
G2L["131"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["131"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["131"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["131"]["Name"] = [[Shadow]];
G2L["131"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options
G2L["132"] = Instance.new("Frame", G2L["12b"]);
G2L["132"]["BorderSizePixel"] = 0;
G2L["132"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["132"]["Size"] = UDim2.new(1, -3, 0, 36);
G2L["132"]["Position"] = UDim2.new(0, 3, 1, 0);
G2L["132"]["Name"] = [[Options]];
G2L["132"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options.ColorOption
G2L["133"] = Instance.new("Frame", G2L["132"]);
G2L["133"]["BorderSizePixel"] = 0;
G2L["133"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["133"]["Position"] = UDim2.new(0, 0, 0, 10);
G2L["133"]["Name"] = [[ColorOption]];
G2L["133"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options.ColorOption.HSVPicker
G2L["134"] = Instance.new("ImageButton", G2L["133"]);
G2L["134"]["BorderSizePixel"] = 0;
G2L["134"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["134"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["134"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["134"]["BackgroundTransparency"] = 0.4;
G2L["134"]["Name"] = [[HSVPicker]];
G2L["134"]["Position"] = UDim2.new(0, 60, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options.ColorOption.HSVPicker.Shadow
G2L["135"] = Instance.new("Frame", G2L["134"]);
G2L["135"]["BorderSizePixel"] = 0;
G2L["135"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["135"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["135"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["135"]["Name"] = [[Shadow]];
G2L["135"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options.ColorOption.Label
G2L["136"] = Instance.new("TextLabel", G2L["133"]);
G2L["136"]["TextWrapped"] = true;
G2L["136"]["TextStrokeTransparency"] = 0;
G2L["136"]["BorderSizePixel"] = 0;
G2L["136"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["136"]["TextSize"] = 10;
G2L["136"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["136"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["136"]["BackgroundTransparency"] = 1;
G2L["136"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["136"]["Text"] = [[Color]];
G2L["136"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options.ColorOption.Indicator
G2L["137"] = Instance.new("Frame", G2L["133"]);
G2L["137"]["BorderSizePixel"] = 0;
G2L["137"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["137"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["137"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["137"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options.ColorOption.Indicator.Shadow
G2L["138"] = Instance.new("Frame", G2L["137"]);
G2L["138"]["BorderSizePixel"] = 0;
G2L["138"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["138"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["138"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["138"]["Name"] = [[Shadow]];
G2L["138"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTDecorateToolGUI.Sparkles.Options.ColorOption.Indicator.Varies
G2L["139"] = Instance.new("TextLabel", G2L["137"]);
G2L["139"]["TextWrapped"] = true;
G2L["139"]["TextStrokeTransparency"] = 0.75;
G2L["139"]["BorderSizePixel"] = 0;
G2L["139"]["TextScaled"] = true;
G2L["139"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["139"]["TextSize"] = 14;
G2L["139"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["139"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["139"]["BackgroundTransparency"] = 1;
G2L["139"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["139"]["Text"] = [[]];
G2L["139"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock
G2L["13a"] = Instance.new("Frame", G2L["77"]);
G2L["13a"]["Active"] = true;
G2L["13a"]["BorderSizePixel"] = 0;
G2L["13a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13a"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["13a"]["Size"] = UDim2.new(0, 70, 0, 380);
G2L["13a"]["Position"] = UDim2.new(1, -80, 0.6, 0);
G2L["13a"]["BorderColor3"] = Color3.fromRGB(36, 36, 36);
G2L["13a"]["Name"] = [[Dock]];
G2L["13a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.SelectionButtons
G2L["13b"] = Instance.new("Frame", G2L["13a"]);
G2L["13b"]["BorderSizePixel"] = 0;
G2L["13b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13b"]["Size"] = UDim2.new(1, 0, 0, 105);
G2L["13b"]["Position"] = UDim2.new(0, 0, 0, 245);
G2L["13b"]["Name"] = [[SelectionButtons]];
G2L["13b"]["BackgroundTransparency"] = 0.5;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolButtons
G2L["13c"] = Instance.new("Frame", G2L["13a"]);
G2L["13c"]["BorderSizePixel"] = 0;
G2L["13c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13c"]["Size"] = UDim2.new(0, 70, 0, 245);
G2L["13c"]["Name"] = [[ToolButtons]];
G2L["13c"]["BackgroundTransparency"] = 0.6;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo
G2L["13d"] = Instance.new("Frame", G2L["13a"]);
G2L["13d"]["Visible"] = false;
G2L["13d"]["BorderSizePixel"] = 0;
G2L["13d"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["13d"]["ClipsDescendants"] = true;
G2L["13d"]["Size"] = UDim2.new(0, 120, 0, 315);
G2L["13d"]["Position"] = UDim2.new(0, -120, 0, 0);
G2L["13d"]["Name"] = [[HelpInfo]];
G2L["13d"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.BottomColorBar
G2L["13e"] = Instance.new("Frame", G2L["13d"]);
G2L["13e"]["BorderSizePixel"] = 0;
G2L["13e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13e"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["13e"]["Position"] = UDim2.new(0, 0, 1, 0);
G2L["13e"]["Name"] = [[BottomColorBar]];
G2L["13e"]["Rotation"] = 180;
G2L["13e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.BottomColorBar.Yellow
G2L["13f"] = Instance.new("Frame", G2L["13e"]);
G2L["13f"]["BorderSizePixel"] = 0;
G2L["13f"]["BackgroundColor3"] = Color3.fromRGB(255, 176, 0);
G2L["13f"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["13f"]["Name"] = [[Yellow]];
G2L["13f"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.BottomColorBar.Green
G2L["140"] = Instance.new("Frame", G2L["13e"]);
G2L["140"]["BorderSizePixel"] = 0;
G2L["140"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["140"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["140"]["Position"] = UDim2.new(0.2, 0, 0, 0);
G2L["140"]["Name"] = [[Green]];
G2L["140"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.BottomColorBar.Blue
G2L["141"] = Instance.new("Frame", G2L["13e"]);
G2L["141"]["BorderSizePixel"] = 0;
G2L["141"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["141"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["141"]["Position"] = UDim2.new(0.4, 0, 0, 0);
G2L["141"]["Name"] = [[Blue]];
G2L["141"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.BottomColorBar.Red
G2L["142"] = Instance.new("Frame", G2L["13e"]);
G2L["142"]["BorderSizePixel"] = 0;
G2L["142"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["142"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["142"]["Position"] = UDim2.new(0.6, 0, 0, 0);
G2L["142"]["Name"] = [[Red]];
G2L["142"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.BottomColorBar.Purple
G2L["143"] = Instance.new("Frame", G2L["13e"]);
G2L["143"]["BorderSizePixel"] = 0;
G2L["143"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["143"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["143"]["Position"] = UDim2.new(0.8, 0, 0, 0);
G2L["143"]["Name"] = [[Purple]];
G2L["143"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content
G2L["144"] = Instance.new("ScrollingFrame", G2L["13d"]);
G2L["144"]["BorderSizePixel"] = 0;
G2L["144"]["CanvasSize"] = UDim2.new(0, 0, 0, 480);
G2L["144"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["144"]["Name"] = [[Content]];
G2L["144"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["144"]["ScrollBarThickness"] = 6;
G2L["144"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ColorBar
G2L["145"] = Instance.new("Frame", G2L["144"]);
G2L["145"]["BorderSizePixel"] = 0;
G2L["145"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["145"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["145"]["Name"] = [[ColorBar]];
G2L["145"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ColorBar.Yellow
G2L["146"] = Instance.new("Frame", G2L["145"]);
G2L["146"]["BorderSizePixel"] = 0;
G2L["146"]["BackgroundColor3"] = Color3.fromRGB(255, 176, 0);
G2L["146"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["146"]["Name"] = [[Yellow]];
G2L["146"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ColorBar.Green
G2L["147"] = Instance.new("Frame", G2L["145"]);
G2L["147"]["BorderSizePixel"] = 0;
G2L["147"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["147"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["147"]["Position"] = UDim2.new(0.2, 0, 0, 0);
G2L["147"]["Name"] = [[Green]];
G2L["147"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ColorBar.Blue
G2L["148"] = Instance.new("Frame", G2L["145"]);
G2L["148"]["BorderSizePixel"] = 0;
G2L["148"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["148"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["148"]["Position"] = UDim2.new(0.4, 0, 0, 0);
G2L["148"]["Name"] = [[Blue]];
G2L["148"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ColorBar.Red
G2L["149"] = Instance.new("Frame", G2L["145"]);
G2L["149"]["BorderSizePixel"] = 0;
G2L["149"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["149"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["149"]["Position"] = UDim2.new(0.6, 0, 0, 0);
G2L["149"]["Name"] = [[Red]];
G2L["149"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ColorBar.Purple
G2L["14a"] = Instance.new("Frame", G2L["145"]);
G2L["14a"]["BorderSizePixel"] = 0;
G2L["14a"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["14a"]["Size"] = UDim2.new(0.2, 0, 1, 0);
G2L["14a"]["Position"] = UDim2.new(0.8, 0, 0, 0);
G2L["14a"]["Name"] = [[Purple]];
G2L["14a"]["BackgroundTransparency"] = 0.25;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ExportingInfo
G2L["14b"] = Instance.new("Frame", G2L["144"]);
G2L["14b"]["BorderSizePixel"] = 0;
G2L["14b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14b"]["Size"] = UDim2.new(1, 0, 0, 220);
G2L["14b"]["Position"] = UDim2.new(0, 0, 0, 290);
G2L["14b"]["Name"] = [[ExportingInfo]];
G2L["14b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ExportingInfo.TextLabel
G2L["14c"] = Instance.new("TextLabel", G2L["14b"]);
G2L["14c"]["TextWrapped"] = true;
G2L["14c"]["BorderSizePixel"] = 0;
G2L["14c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["14c"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["14c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14c"]["TextSize"] = 10;
G2L["14c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14c"]["BackgroundTransparency"] = 1;
G2L["14c"]["Size"] = UDim2.new(0, 90, 0, 200);
G2L["14c"]["Text"] = [[You can export your builds into a short code by clicking the export button, or pressing [Shift P].

Install the import plugin in ROBLOX Studio to import your creation:

roblox.com/library/142485815/import]];
G2L["14c"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ExportingInfo.TextLabel
G2L["14d"] = Instance.new("TextLabel", G2L["14b"]);
G2L["14d"]["TextWrapped"] = true;
G2L["14d"]["BorderSizePixel"] = 0;
G2L["14d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["14d"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["14d"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["14d"]["TextSize"] = 10;
G2L["14d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["14d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14d"]["BackgroundTransparency"] = 1;
G2L["14d"]["Size"] = UDim2.new(0, 90, 0, 24);
G2L["14d"]["Text"] = [[Exporting your creations]];
G2L["14d"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.SelectionInfo
G2L["14e"] = Instance.new("Frame", G2L["144"]);
G2L["14e"]["BorderSizePixel"] = 0;
G2L["14e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14e"]["Size"] = UDim2.new(1, 0, 0, 150);
G2L["14e"]["Position"] = UDim2.new(0, 0, 0, 90);
G2L["14e"]["Name"] = [[SelectionInfo]];
G2L["14e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.SelectionInfo.TextLabel
G2L["14f"] = Instance.new("TextLabel", G2L["14e"]);
G2L["14f"]["TextWrapped"] = true;
G2L["14f"]["BorderSizePixel"] = 0;
G2L["14f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["14f"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["14f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14f"]["TextSize"] = 10;
G2L["14f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14f"]["BackgroundTransparency"] = 1;
G2L["14f"]["Size"] = UDim2.new(0, 95, 0, 240);
G2L["14f"]["Text"] = [[Select individual multiple parts by holding [Shift] and clicking each one.

• Rectangle select multiple parts by holding [Shift], clicking, and dragging.

• Press [Shift K] to select parts inside of the selected parts.

• Press [Shift R] to clear your selection.]];
G2L["14f"]["Position"] = UDim2.new(0, 10, 0, 15);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.SelectionInfo.TextLabel
G2L["150"] = Instance.new("TextLabel", G2L["14e"]);
G2L["150"]["TextWrapped"] = true;
G2L["150"]["BorderSizePixel"] = 0;
G2L["150"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["150"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["150"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["150"]["TextSize"] = 10;
G2L["150"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["150"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["150"]["BackgroundTransparency"] = 1;
G2L["150"]["Size"] = UDim2.new(0, 80, 0, 12);
G2L["150"]["Text"] = [[Selecting]];
G2L["150"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ToolDescription
G2L["151"] = Instance.new("TextLabel", G2L["144"]);
G2L["151"]["TextWrapped"] = true;
G2L["151"]["BorderSizePixel"] = 0;
G2L["151"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["151"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["151"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["151"]["TextSize"] = 10;
G2L["151"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["151"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["151"]["BackgroundTransparency"] = 1;
G2L["151"]["Size"] = UDim2.new(0, 93, 0, 250);
G2L["151"]["Text"] = [[To learn more about each tool, click on it and read its help section.]];
G2L["151"]["Name"] = [[ToolDescription]];
G2L["151"]["Position"] = UDim2.new(0, 10, 0, 35);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.HelpInfo.Content.ToolName
G2L["152"] = Instance.new("TextLabel", G2L["144"]);
G2L["152"]["TextWrapped"] = true;
G2L["152"]["BorderSizePixel"] = 0;
G2L["152"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["152"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["152"]["TextSize"] = 10;
G2L["152"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["152"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["152"]["BackgroundTransparency"] = 1;
G2L["152"]["Size"] = UDim2.new(0, 80, 0, 30);
G2L["152"]["Text"] = [[BUILDING TOOLS BY F3X]];
G2L["152"]["Name"] = [[ToolName]];
G2L["152"]["Position"] = UDim2.new(0, 10, 0, 4);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.Tooltip
G2L["153"] = Instance.new("TextLabel", G2L["13a"]);
G2L["153"]["ZIndex"] = 10;
G2L["153"]["BorderSizePixel"] = 0;
G2L["153"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["153"]["TextSize"] = 10;
G2L["153"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["153"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["153"]["BackgroundTransparency"] = 0.4;
G2L["153"]["Size"] = UDim2.new(0, 50, 0, 22);
G2L["153"]["Visible"] = false;
G2L["153"]["Text"] = [[TEST]];
G2L["153"]["Name"] = [[Tooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.Tooltip.[Component]
G2L["154"] = Instance.new("ModuleScript", G2L["153"]);
G2L["154"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.SelectionButton
G2L["155"] = Instance.new("ImageButton", G2L["13a"]);
G2L["155"]["BorderSizePixel"] = 0;
G2L["155"]["BackgroundColor3"] = Color3.fromRGB(86, 171, 255);
G2L["155"]["Image"] = [[rbxassetid://142074563]];
G2L["155"]["Size"] = UDim2.new(0, 35, 0, 35);
G2L["155"]["BackgroundTransparency"] = 1;
G2L["155"]["Name"] = [[SelectionButton]];
G2L["155"]["Visible"] = false;
G2L["155"]["Position"] = UDim2.new(0, 0, 0, 70);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolButton
G2L["156"] = Instance.new("ImageButton", G2L["13a"]);
G2L["156"]["BorderSizePixel"] = 0;
G2L["156"]["AutoButtonColor"] = false;
G2L["156"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["156"]["Image"] = [[http://www.roblox.com/asset/?id=141741323]];
G2L["156"]["Size"] = UDim2.new(0, 35, 0, 35);
G2L["156"]["BackgroundTransparency"] = 1;
G2L["156"]["Name"] = [[ToolButton]];
G2L["156"]["Visible"] = false;
G2L["156"]["Position"] = UDim2.new(0, 0, 0, 105);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolButton.Hotkey
G2L["157"] = Instance.new("TextLabel", G2L["156"]);
G2L["157"]["BorderSizePixel"] = 0;
G2L["157"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["157"]["TextSize"] = 10;
G2L["157"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["157"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["157"]["BackgroundTransparency"] = 1;
G2L["157"]["Size"] = UDim2.new(0, 13, 0, 13);
G2L["157"]["Text"] = [[M]];
G2L["157"]["Name"] = [[Hotkey]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation
G2L["158"] = Instance.new("Frame", G2L["13a"]);
G2L["158"]["BorderSizePixel"] = 0;
G2L["158"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["158"]["ClipsDescendants"] = true;
G2L["158"]["Size"] = UDim2.new(0, 120, 0, 315);
G2L["158"]["Position"] = UDim2.new(0, -120, 0, 0);
G2L["158"]["Name"] = [[ToolInformation]];
G2L["158"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.PaintInfo
G2L["159"] = Instance.new("Frame", G2L["158"]);
G2L["159"]["Visible"] = false;
G2L["159"]["BorderSizePixel"] = 0;
G2L["159"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["159"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["159"]["Name"] = [[PaintInfo]];
G2L["159"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.PaintInfo.Content
G2L["15a"] = Instance.new("Frame", G2L["159"]);
G2L["15a"]["BorderSizePixel"] = 0;
G2L["15a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15a"]["Size"] = UDim2.new(1, 0, 0, 70);
G2L["15a"]["Name"] = [[Content]];
G2L["15a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.PaintInfo.Content.ColorBar
G2L["15b"] = Instance.new("Frame", G2L["15a"]);
G2L["15b"]["BorderSizePixel"] = 0;
G2L["15b"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["15b"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["15b"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.PaintInfo.Content.ToolDescription
G2L["15c"] = Instance.new("TextLabel", G2L["15a"]);
G2L["15c"]["TextWrapped"] = true;
G2L["15c"]["BorderSizePixel"] = 0;
G2L["15c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["15c"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["15c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15c"]["TextSize"] = 10;
G2L["15c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15c"]["BackgroundTransparency"] = 1;
G2L["15c"]["Size"] = UDim2.new(0, 95, 0, 200);
G2L["15c"]["Text"] = [[Lets you paint parts in different colors.

TIP: Press R while hovering over a part to copy its color.]];
G2L["15c"]["Name"] = [[ToolDescription]];
G2L["15c"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.PaintInfo.Content.ToolName
G2L["15d"] = Instance.new("TextLabel", G2L["15a"]);
G2L["15d"]["BorderSizePixel"] = 0;
G2L["15d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["15d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15d"]["TextSize"] = 10;
G2L["15d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["15d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15d"]["BackgroundTransparency"] = 1;
G2L["15d"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["15d"]["Text"] = [[PAINT TOOL]];
G2L["15d"]["Name"] = [[ToolName]];
G2L["15d"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.SurfaceInfo
G2L["15e"] = Instance.new("Frame", G2L["158"]);
G2L["15e"]["Visible"] = false;
G2L["15e"]["BorderSizePixel"] = 0;
G2L["15e"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["15e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["15e"]["Name"] = [[SurfaceInfo]];
G2L["15e"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.SurfaceInfo.Content
G2L["15f"] = Instance.new("Frame", G2L["15e"]);
G2L["15f"]["BorderSizePixel"] = 0;
G2L["15f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15f"]["Size"] = UDim2.new(1, 0, 0, 150);
G2L["15f"]["Name"] = [[Content]];
G2L["15f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.SurfaceInfo.Content.ColorBar
G2L["160"] = Instance.new("Frame", G2L["15f"]);
G2L["160"]["BorderSizePixel"] = 0;
G2L["160"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["160"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["160"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.SurfaceInfo.Content.ToolDescription
G2L["161"] = Instance.new("TextLabel", G2L["15f"]);
G2L["161"]["TextWrapped"] = true;
G2L["161"]["BorderSizePixel"] = 0;
G2L["161"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["161"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["161"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["161"]["TextSize"] = 10;
G2L["161"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["161"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["161"]["BackgroundTransparency"] = 1;
G2L["161"]["Size"] = UDim2.new(0, 82, 0, 120);
G2L["161"]["Text"] = [[Lets you change the surfaces of parts.

TIP: Click a part's surface to select it quickly.]];
G2L["161"]["Name"] = [[ToolDescription]];
G2L["161"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.SurfaceInfo.Content.ToolName
G2L["162"] = Instance.new("TextLabel", G2L["15f"]);
G2L["162"]["BorderSizePixel"] = 0;
G2L["162"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["162"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["162"]["TextSize"] = 10;
G2L["162"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["162"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["162"]["BackgroundTransparency"] = 1;
G2L["162"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["162"]["Text"] = [[SURFACE TOOL]];
G2L["162"]["Name"] = [[ToolName]];
G2L["162"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MaterialInfo
G2L["163"] = Instance.new("Frame", G2L["158"]);
G2L["163"]["Visible"] = false;
G2L["163"]["BorderSizePixel"] = 0;
G2L["163"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["163"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["163"]["Name"] = [[MaterialInfo]];
G2L["163"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MaterialInfo.Content
G2L["164"] = Instance.new("Frame", G2L["163"]);
G2L["164"]["BorderSizePixel"] = 0;
G2L["164"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["164"]["Size"] = UDim2.new(1, 0, 0, 150);
G2L["164"]["Name"] = [[Content]];
G2L["164"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MaterialInfo.Content.ColorBar
G2L["165"] = Instance.new("Frame", G2L["164"]);
G2L["165"]["BorderSizePixel"] = 0;
G2L["165"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["165"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["165"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MaterialInfo.Content.ToolDescription
G2L["166"] = Instance.new("TextLabel", G2L["164"]);
G2L["166"]["TextWrapped"] = true;
G2L["166"]["BorderSizePixel"] = 0;
G2L["166"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["166"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["166"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["166"]["TextSize"] = 10;
G2L["166"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["166"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["166"]["BackgroundTransparency"] = 1;
G2L["166"]["Size"] = UDim2.new(0, 80, 0, 120);
G2L["166"]["Text"] = [[Lets you change the material, transparency, and reflectance of parts.]];
G2L["166"]["Name"] = [[ToolDescription]];
G2L["166"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MaterialInfo.Content.ToolName
G2L["167"] = Instance.new("TextLabel", G2L["164"]);
G2L["167"]["BorderSizePixel"] = 0;
G2L["167"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["167"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["167"]["TextSize"] = 10;
G2L["167"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["167"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["167"]["BackgroundTransparency"] = 1;
G2L["167"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["167"]["Text"] = [[MATERIAL TOOL]];
G2L["167"]["Name"] = [[ToolName]];
G2L["167"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.AnchorInfo
G2L["168"] = Instance.new("Frame", G2L["158"]);
G2L["168"]["Visible"] = false;
G2L["168"]["BorderSizePixel"] = 0;
G2L["168"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["168"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["168"]["Name"] = [[AnchorInfo]];
G2L["168"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.AnchorInfo.Content
G2L["169"] = Instance.new("Frame", G2L["168"]);
G2L["169"]["BorderSizePixel"] = 0;
G2L["169"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["169"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["169"]["Name"] = [[Content]];
G2L["169"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.AnchorInfo.Content.ColorBar
G2L["16a"] = Instance.new("Frame", G2L["169"]);
G2L["16a"]["BorderSizePixel"] = 0;
G2L["16a"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["16a"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["16a"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.AnchorInfo.Content.ToolDescription
G2L["16b"] = Instance.new("TextLabel", G2L["169"]);
G2L["16b"]["TextWrapped"] = true;
G2L["16b"]["BorderSizePixel"] = 0;
G2L["16b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["16b"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["16b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16b"]["TextSize"] = 10;
G2L["16b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16b"]["BackgroundTransparency"] = 1;
G2L["16b"]["Size"] = UDim2.new(0, 80, 0, 120);
G2L["16b"]["Text"] = [[Lets you anchor and unanchor parts.

TIP: Press Enter to toggle anchor quickly.]];
G2L["16b"]["Name"] = [[ToolDescription]];
G2L["16b"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.AnchorInfo.Content.ToolName
G2L["16c"] = Instance.new("TextLabel", G2L["169"]);
G2L["16c"]["BorderSizePixel"] = 0;
G2L["16c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["16c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16c"]["TextSize"] = 10;
G2L["16c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["16c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16c"]["BackgroundTransparency"] = 1;
G2L["16c"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["16c"]["Text"] = [[ANCHOR TOOL]];
G2L["16c"]["Name"] = [[ToolName]];
G2L["16c"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.NewPartInfo
G2L["16d"] = Instance.new("Frame", G2L["158"]);
G2L["16d"]["Visible"] = false;
G2L["16d"]["BorderSizePixel"] = 0;
G2L["16d"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["16d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["16d"]["Name"] = [[NewPartInfo]];
G2L["16d"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.NewPartInfo.Content
G2L["16e"] = Instance.new("Frame", G2L["16d"]);
G2L["16e"]["BorderSizePixel"] = 0;
G2L["16e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16e"]["Size"] = UDim2.new(1, 0, 0, 150);
G2L["16e"]["Name"] = [[Content]];
G2L["16e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.NewPartInfo.Content.ColorBar
G2L["16f"] = Instance.new("Frame", G2L["16e"]);
G2L["16f"]["BorderSizePixel"] = 0;
G2L["16f"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["16f"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["16f"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.NewPartInfo.Content.ToolDescription
G2L["170"] = Instance.new("TextLabel", G2L["16e"]);
G2L["170"]["TextWrapped"] = true;
G2L["170"]["BorderSizePixel"] = 0;
G2L["170"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["170"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["170"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["170"]["TextSize"] = 10;
G2L["170"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["170"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["170"]["BackgroundTransparency"] = 1;
G2L["170"]["Size"] = UDim2.new(0, 80, 0, 120);
G2L["170"]["Text"] = [[Lets you create new parts.

TIP: Click and drag where you want your part to be.]];
G2L["170"]["Name"] = [[ToolDescription]];
G2L["170"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.NewPartInfo.Content.ToolName
G2L["171"] = Instance.new("TextLabel", G2L["16e"]);
G2L["171"]["BorderSizePixel"] = 0;
G2L["171"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["171"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["171"]["TextSize"] = 10;
G2L["171"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["171"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["171"]["BackgroundTransparency"] = 1;
G2L["171"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["171"]["Text"] = [[NEW PART TOOL]];
G2L["171"]["Name"] = [[ToolName]];
G2L["171"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MeshInfo
G2L["172"] = Instance.new("Frame", G2L["158"]);
G2L["172"]["Visible"] = false;
G2L["172"]["BorderSizePixel"] = 0;
G2L["172"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["172"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["172"]["Name"] = [[MeshInfo]];
G2L["172"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MeshInfo.Content
G2L["173"] = Instance.new("Frame", G2L["172"]);
G2L["173"]["BorderSizePixel"] = 0;
G2L["173"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["173"]["Size"] = UDim2.new(1, 0, 0, 150);
G2L["173"]["Name"] = [[Content]];
G2L["173"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MeshInfo.Content.ColorBar
G2L["174"] = Instance.new("Frame", G2L["173"]);
G2L["174"]["BorderSizePixel"] = 0;
G2L["174"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["174"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["174"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MeshInfo.Content.ToolDescription
G2L["175"] = Instance.new("TextLabel", G2L["173"]);
G2L["175"]["TextWrapped"] = true;
G2L["175"]["BorderSizePixel"] = 0;
G2L["175"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["175"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["175"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["175"]["TextSize"] = 10;
G2L["175"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["175"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["175"]["BackgroundTransparency"] = 1;
G2L["175"]["Size"] = UDim2.new(0, 84, 0, 260);
G2L["175"]["Text"] = [[Lets you add meshes to parts.

TIP: You can paste the link to anything with a mesh (e.g. a hat, gear, etc.) and it will automatically find the right mesh and texture IDs.

NOTE: If HttpService is not enabled, you must type the mesh or image asset ID directly.]];
G2L["175"]["Name"] = [[ToolDescription]];
G2L["175"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MeshInfo.Content.ToolName
G2L["176"] = Instance.new("TextLabel", G2L["173"]);
G2L["176"]["BorderSizePixel"] = 0;
G2L["176"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["176"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["176"]["TextSize"] = 10;
G2L["176"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["176"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["176"]["BackgroundTransparency"] = 1;
G2L["176"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["176"]["Text"] = [[MESH TOOL]];
G2L["176"]["Name"] = [[ToolName]];
G2L["176"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.TextureInfo
G2L["177"] = Instance.new("Frame", G2L["158"]);
G2L["177"]["Visible"] = false;
G2L["177"]["BorderSizePixel"] = 0;
G2L["177"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["177"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["177"]["Name"] = [[TextureInfo]];
G2L["177"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.TextureInfo.Content
G2L["178"] = Instance.new("Frame", G2L["177"]);
G2L["178"]["BorderSizePixel"] = 0;
G2L["178"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["178"]["Size"] = UDim2.new(1, 0, 0, 150);
G2L["178"]["Name"] = [[Content]];
G2L["178"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.TextureInfo.Content.ColorBar
G2L["179"] = Instance.new("Frame", G2L["178"]);
G2L["179"]["BorderSizePixel"] = 0;
G2L["179"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["179"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["179"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.TextureInfo.Content.ToolDescription
G2L["17a"] = Instance.new("TextLabel", G2L["178"]);
G2L["17a"]["TextWrapped"] = true;
G2L["17a"]["BorderSizePixel"] = 0;
G2L["17a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["17a"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["17a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17a"]["TextSize"] = 10;
G2L["17a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17a"]["BackgroundTransparency"] = 1;
G2L["17a"]["Size"] = UDim2.new(0, 95, 0, 250);
G2L["17a"]["Text"] = [[Lets you add decals and textures to parts.

TIP: Click on any part's surface to quickly change a decal/texture's side.

TIP: You can paste the link to any decal and it'll automatically get the right image ID.

NOTE: If HttpService isn't enabled, you must manually type an image's ID.]];
G2L["17a"]["Name"] = [[ToolDescription]];
G2L["17a"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.TextureInfo.Content.ToolName
G2L["17b"] = Instance.new("TextLabel", G2L["178"]);
G2L["17b"]["BorderSizePixel"] = 0;
G2L["17b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["17b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17b"]["TextSize"] = 10;
G2L["17b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["17b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17b"]["BackgroundTransparency"] = 1;
G2L["17b"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["17b"]["Text"] = [[TEXTURE TOOL]];
G2L["17b"]["Name"] = [[ToolName]];
G2L["17b"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.LightingInfo
G2L["17c"] = Instance.new("Frame", G2L["158"]);
G2L["17c"]["Visible"] = false;
G2L["17c"]["BorderSizePixel"] = 0;
G2L["17c"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["17c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["17c"]["Name"] = [[LightingInfo]];
G2L["17c"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.LightingInfo.Content
G2L["17d"] = Instance.new("Frame", G2L["17c"]);
G2L["17d"]["BorderSizePixel"] = 0;
G2L["17d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17d"]["Size"] = UDim2.new(1, 0, 0, 100);
G2L["17d"]["Name"] = [[Content]];
G2L["17d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.LightingInfo.Content.ColorBar
G2L["17e"] = Instance.new("Frame", G2L["17d"]);
G2L["17e"]["BorderSizePixel"] = 0;
G2L["17e"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["17e"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["17e"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.LightingInfo.Content.ToolDescription
G2L["17f"] = Instance.new("TextLabel", G2L["17d"]);
G2L["17f"]["TextWrapped"] = true;
G2L["17f"]["BorderSizePixel"] = 0;
G2L["17f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["17f"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["17f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17f"]["TextSize"] = 10;
G2L["17f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17f"]["BackgroundTransparency"] = 1;
G2L["17f"]["Size"] = UDim2.new(0, 80, 0, 200);
G2L["17f"]["Text"] = [[Lets you add point lights, surface lights, and spotlights to parts.

TIP: Click on the surface of any part to change a light's side quickly.]];
G2L["17f"]["Name"] = [[ToolDescription]];
G2L["17f"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.LightingInfo.Content.ToolName
G2L["180"] = Instance.new("TextLabel", G2L["17d"]);
G2L["180"]["BorderSizePixel"] = 0;
G2L["180"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["180"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["180"]["TextSize"] = 10;
G2L["180"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["180"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["180"]["BackgroundTransparency"] = 1;
G2L["180"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["180"]["Text"] = [[LIGHTING TOOL]];
G2L["180"]["Name"] = [[ToolName]];
G2L["180"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.DecorateInfo
G2L["181"] = Instance.new("Frame", G2L["158"]);
G2L["181"]["Visible"] = false;
G2L["181"]["BorderSizePixel"] = 0;
G2L["181"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["181"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["181"]["Name"] = [[DecorateInfo]];
G2L["181"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.DecorateInfo.Content
G2L["182"] = Instance.new("Frame", G2L["181"]);
G2L["182"]["BorderSizePixel"] = 0;
G2L["182"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["182"]["Size"] = UDim2.new(1, 0, 0, 100);
G2L["182"]["Name"] = [[Content]];
G2L["182"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.DecorateInfo.Content.ColorBar
G2L["183"] = Instance.new("Frame", G2L["182"]);
G2L["183"]["BorderSizePixel"] = 0;
G2L["183"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["183"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["183"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.DecorateInfo.Content.ToolDescription
G2L["184"] = Instance.new("TextLabel", G2L["182"]);
G2L["184"]["TextWrapped"] = true;
G2L["184"]["BorderSizePixel"] = 0;
G2L["184"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["184"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["184"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["184"]["TextSize"] = 10;
G2L["184"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["184"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["184"]["BackgroundTransparency"] = 1;
G2L["184"]["Size"] = UDim2.new(0, 80, 0, 200);
G2L["184"]["Text"] = [[Allows you to add smoke, fire, and sparkles to parts.]];
G2L["184"]["Name"] = [[ToolDescription]];
G2L["184"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.DecorateInfo.Content.ToolName
G2L["185"] = Instance.new("TextLabel", G2L["182"]);
G2L["185"]["BorderSizePixel"] = 0;
G2L["185"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["185"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["185"]["TextSize"] = 10;
G2L["185"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["185"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["185"]["BackgroundTransparency"] = 1;
G2L["185"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["185"]["Text"] = [[DECORATE TOOL]];
G2L["185"]["Name"] = [[ToolName]];
G2L["185"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.WeldInfo
G2L["186"] = Instance.new("Frame", G2L["158"]);
G2L["186"]["Visible"] = false;
G2L["186"]["BorderSizePixel"] = 0;
G2L["186"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["186"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["186"]["Name"] = [[WeldInfo]];
G2L["186"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.WeldInfo.Content
G2L["187"] = Instance.new("Frame", G2L["186"]);
G2L["187"]["BorderSizePixel"] = 0;
G2L["187"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["187"]["Size"] = UDim2.new(1, 0, 0, 310);
G2L["187"]["Name"] = [[Content]];
G2L["187"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.WeldInfo.Content.ColorBar
G2L["188"] = Instance.new("Frame", G2L["187"]);
G2L["188"]["BorderSizePixel"] = 0;
G2L["188"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["188"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["188"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.WeldInfo.Content.ToolDescription
G2L["189"] = Instance.new("TextLabel", G2L["187"]);
G2L["189"]["TextWrapped"] = true;
G2L["189"]["BorderSizePixel"] = 0;
G2L["189"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["189"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["189"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["189"]["TextSize"] = 10;
G2L["189"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["189"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["189"]["BackgroundTransparency"] = 1;
G2L["189"]["Size"] = UDim2.new(0, 90, 0, 300);
G2L["189"]["Text"] = [[Allows you to weld parts to hold them together.

NOTE: Welds may break if parts are individually moved.

NOTE: This tool does not work in Roblox Studio.]];
G2L["189"]["Name"] = [[ToolDescription]];
G2L["189"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.WeldInfo.Content.ToolName
G2L["18a"] = Instance.new("TextLabel", G2L["187"]);
G2L["18a"]["BorderSizePixel"] = 0;
G2L["18a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["18a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18a"]["TextSize"] = 10;
G2L["18a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["18a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18a"]["BackgroundTransparency"] = 1;
G2L["18a"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["18a"]["Text"] = [[WELD TOOL]];
G2L["18a"]["Name"] = [[ToolName]];
G2L["18a"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.CollisionInfo
G2L["18b"] = Instance.new("Frame", G2L["158"]);
G2L["18b"]["Visible"] = false;
G2L["18b"]["BorderSizePixel"] = 0;
G2L["18b"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["18b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["18b"]["Name"] = [[CollisionInfo]];
G2L["18b"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.CollisionInfo.Content
G2L["18c"] = Instance.new("Frame", G2L["18b"]);
G2L["18c"]["BorderSizePixel"] = 0;
G2L["18c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18c"]["Size"] = UDim2.new(1, 0, 0, 150);
G2L["18c"]["Name"] = [[Content]];
G2L["18c"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.CollisionInfo.Content.ColorBar
G2L["18d"] = Instance.new("Frame", G2L["18c"]);
G2L["18d"]["BorderSizePixel"] = 0;
G2L["18d"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["18d"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["18d"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.CollisionInfo.Content.ToolDescription
G2L["18e"] = Instance.new("TextLabel", G2L["18c"]);
G2L["18e"]["TextWrapped"] = true;
G2L["18e"]["BorderSizePixel"] = 0;
G2L["18e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["18e"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["18e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18e"]["TextSize"] = 10;
G2L["18e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18e"]["BackgroundTransparency"] = 1;
G2L["18e"]["Size"] = UDim2.new(0, 80, 0, 120);
G2L["18e"]["Text"] = [[Lets you change whether parts collide with one another.

TIP: Press Enter to toggle collision quickly.]];
G2L["18e"]["Name"] = [[ToolDescription]];
G2L["18e"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.CollisionInfo.Content.ToolName
G2L["18f"] = Instance.new("TextLabel", G2L["18c"]);
G2L["18f"]["BorderSizePixel"] = 0;
G2L["18f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["18f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18f"]["TextSize"] = 10;
G2L["18f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["18f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18f"]["BackgroundTransparency"] = 1;
G2L["18f"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["18f"]["Text"] = [[COLLISION TOOL]];
G2L["18f"]["Name"] = [[ToolName]];
G2L["18f"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo
G2L["190"] = Instance.new("Frame", G2L["158"]);
G2L["190"]["Visible"] = false;
G2L["190"]["BorderSizePixel"] = 0;
G2L["190"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["190"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["190"]["Name"] = [[MoveInfo]];
G2L["190"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content
G2L["191"] = Instance.new("ScrollingFrame", G2L["190"]);
G2L["191"]["BorderSizePixel"] = 0;
G2L["191"]["CanvasSize"] = UDim2.new(0, 0, 0, 700);
G2L["191"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["191"]["Name"] = [[Content]];
G2L["191"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["191"]["ScrollBarThickness"] = 6;
G2L["191"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.AxesInfo
G2L["192"] = Instance.new("Frame", G2L["191"]);
G2L["192"]["BorderSizePixel"] = 0;
G2L["192"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["192"]["Size"] = UDim2.new(1, 0, 0, 300);
G2L["192"]["Position"] = UDim2.new(0, 0, 0, 60);
G2L["192"]["Name"] = [[AxesInfo]];
G2L["192"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.AxesInfo.Frame
G2L["193"] = Instance.new("Frame", G2L["192"]);
G2L["193"]["BorderSizePixel"] = 0;
G2L["193"]["BackgroundColor3"] = Color3.fromRGB(255, 171, 0);
G2L["193"]["Size"] = UDim2.new(0, 2, 0, 103);
G2L["193"]["Position"] = UDim2.new(0, 10, 0, 68);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.AxesInfo.TextLabel
G2L["194"] = Instance.new("TextLabel", G2L["192"]);
G2L["194"]["TextWrapped"] = true;
G2L["194"]["BorderSizePixel"] = 0;
G2L["194"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["194"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["194"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["194"]["TextSize"] = 10;
G2L["194"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["194"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["194"]["BackgroundTransparency"] = 1;
G2L["194"]["Size"] = UDim2.new(0, 80, 0, 180);
G2L["194"]["Text"] = [[GLOBAL - Normal

LOCAL - Relative to each individual part

LAST - Relative to the last part selected]];
G2L["194"]["Position"] = UDim2.new(0, 17, 0, 68);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.AxesInfo.TextLabel
G2L["195"] = Instance.new("TextLabel", G2L["192"]);
G2L["195"]["TextWrapped"] = true;
G2L["195"]["BorderSizePixel"] = 0;
G2L["195"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["195"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["195"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["195"]["TextSize"] = 10;
G2L["195"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["195"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["195"]["BackgroundTransparency"] = 1;
G2L["195"]["Size"] = UDim2.new(0, 80, 0, 60);
G2L["195"]["Text"] = [[This option lets you choose in which direction to move each part.]];
G2L["195"]["Position"] = UDim2.new(0, 10, 0, 15);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.AxesInfo.TextLabel
G2L["196"] = Instance.new("TextLabel", G2L["192"]);
G2L["196"]["TextWrapped"] = true;
G2L["196"]["BorderSizePixel"] = 0;
G2L["196"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["196"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["196"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["196"]["TextSize"] = 10;
G2L["196"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["196"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["196"]["BackgroundTransparency"] = 1;
G2L["196"]["Size"] = UDim2.new(0, 80, 0, 12);
G2L["196"]["Text"] = [[Axes]];
G2L["196"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.AxesInfo.TextLabel
G2L["197"] = Instance.new("TextLabel", G2L["192"]);
G2L["197"]["TextWrapped"] = true;
G2L["197"]["BorderSizePixel"] = 0;
G2L["197"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["197"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["197"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["197"]["TextSize"] = 10;
G2L["197"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["197"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["197"]["BackgroundTransparency"] = 1;
G2L["197"]["Size"] = UDim2.new(0, 80, 0, 90);
G2L["197"]["Text"] = [[TIP: Click on any part to focus the handles on it.]];
G2L["197"]["Position"] = UDim2.new(0, 10, 0, 180);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.ColorBar
G2L["198"] = Instance.new("Frame", G2L["191"]);
G2L["198"]["BorderSizePixel"] = 0;
G2L["198"]["BackgroundColor3"] = Color3.fromRGB(255, 171, 0);
G2L["198"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["198"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.IncrementInfo
G2L["199"] = Instance.new("Frame", G2L["191"]);
G2L["199"]["BorderSizePixel"] = 0;
G2L["199"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["199"]["Size"] = UDim2.new(1, 0, 0, 300);
G2L["199"]["Position"] = UDim2.new(0, 0, 0, 285);
G2L["199"]["Name"] = [[IncrementInfo]];
G2L["199"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.IncrementInfo.TextLabel
G2L["19a"] = Instance.new("TextLabel", G2L["199"]);
G2L["19a"]["TextWrapped"] = true;
G2L["19a"]["BorderSizePixel"] = 0;
G2L["19a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["19a"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["19a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19a"]["TextSize"] = 10;
G2L["19a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19a"]["BackgroundTransparency"] = 1;
G2L["19a"]["Size"] = UDim2.new(0, 90, 0, 400);
G2L["19a"]["Text"] = [[Lets you choose how many studs to move parts by.

TIP: Press T while dragging to align the bottom surface of your base part to the current target surface.

TIP: You can place parts perfectly together by holding the R key, and dragging parts by their snap points.

TIP: Use your right-side number keypad to move exactly by the current increment
  8/2 = up/down
  1/9 = back/forth
  4/6 = left/right
(Shift = reverses increment)

TIP: Hit the Enter key to switch between Axes modes quickly.

TIP: Hit the - key to quickly type increments.]];
G2L["19a"]["Position"] = UDim2.new(0, 10, 0, 15);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.IncrementInfo.TextLabel
G2L["19b"] = Instance.new("TextLabel", G2L["199"]);
G2L["19b"]["TextWrapped"] = true;
G2L["19b"]["BorderSizePixel"] = 0;
G2L["19b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["19b"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["19b"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["19b"]["TextSize"] = 10;
G2L["19b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["19b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19b"]["BackgroundTransparency"] = 1;
G2L["19b"]["Size"] = UDim2.new(0, 80, 0, 12);
G2L["19b"]["Text"] = [[Increment]];
G2L["19b"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.ToolDescription
G2L["19c"] = Instance.new("TextLabel", G2L["191"]);
G2L["19c"]["TextWrapped"] = true;
G2L["19c"]["BorderSizePixel"] = 0;
G2L["19c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["19c"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["19c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19c"]["TextSize"] = 10;
G2L["19c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19c"]["BackgroundTransparency"] = 1;
G2L["19c"]["Size"] = UDim2.new(0, 80, 0, 50);
G2L["19c"]["Text"] = [[Allows you to move parts.]];
G2L["19c"]["Name"] = [[ToolDescription]];
G2L["19c"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.MoveInfo.Content.ToolName
G2L["19d"] = Instance.new("TextLabel", G2L["191"]);
G2L["19d"]["BorderSizePixel"] = 0;
G2L["19d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["19d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19d"]["TextSize"] = 10;
G2L["19d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["19d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19d"]["BackgroundTransparency"] = 1;
G2L["19d"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["19d"]["Text"] = [[MOVE TOOL]];
G2L["19d"]["Name"] = [[ToolName]];
G2L["19d"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo
G2L["19e"] = Instance.new("Frame", G2L["158"]);
G2L["19e"]["Visible"] = false;
G2L["19e"]["BorderSizePixel"] = 0;
G2L["19e"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["19e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["19e"]["Name"] = [[RotateInfo]];
G2L["19e"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content
G2L["19f"] = Instance.new("ScrollingFrame", G2L["19e"]);
G2L["19f"]["BorderSizePixel"] = 0;
G2L["19f"]["CanvasSize"] = UDim2.new(0, 0, 0, 630);
G2L["19f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19f"]["Name"] = [[Content]];
G2L["19f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["19f"]["ScrollBarThickness"] = 6;
G2L["19f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.ColorBar
G2L["1a0"] = Instance.new("Frame", G2L["19f"]);
G2L["1a0"]["BorderSizePixel"] = 0;
G2L["1a0"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["1a0"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["1a0"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.IncrementInfo
G2L["1a1"] = Instance.new("Frame", G2L["19f"]);
G2L["1a1"]["BorderSizePixel"] = 0;
G2L["1a1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a1"]["Size"] = UDim2.new(1, 0, 0, 130);
G2L["1a1"]["Position"] = UDim2.new(0, 0, 0, 310);
G2L["1a1"]["Name"] = [[IncrementInfo]];
G2L["1a1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.IncrementInfo.TextLabel
G2L["1a2"] = Instance.new("TextLabel", G2L["1a1"]);
G2L["1a2"]["TextWrapped"] = true;
G2L["1a2"]["BorderSizePixel"] = 0;
G2L["1a2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a2"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1a2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a2"]["TextSize"] = 10;
G2L["1a2"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a2"]["BackgroundTransparency"] = 1;
G2L["1a2"]["Size"] = UDim2.new(0, 94, 0, 400);
G2L["1a2"]["Text"] = [[Lets you choose how many degrees to rotate by.

TIP: Press R and click on a snap point to rotate around it.

TIP: Hit the Enter key to switch between Pivot modes quickly.

TIP: Hit the - key to quickly type increments.

TIP: Use your right-side number keypad to rotate exactly by the current increment:
 4/6 = Y axis (green)
 1/9 = Z axis (blue)
 2/8 = X axis (red)
(Shift = reverses increment)]];
G2L["1a2"]["Position"] = UDim2.new(0, 10, 0, 15);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.IncrementInfo.TextLabel
G2L["1a3"] = Instance.new("TextLabel", G2L["1a1"]);
G2L["1a3"]["TextWrapped"] = true;
G2L["1a3"]["BorderSizePixel"] = 0;
G2L["1a3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a3"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1a3"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["1a3"]["TextSize"] = 10;
G2L["1a3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1a3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a3"]["BackgroundTransparency"] = 1;
G2L["1a3"]["Size"] = UDim2.new(0, 80, 0, 12);
G2L["1a3"]["Text"] = [[Increment]];
G2L["1a3"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.PivotInfo
G2L["1a4"] = Instance.new("Frame", G2L["19f"]);
G2L["1a4"]["BorderSizePixel"] = 0;
G2L["1a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a4"]["Size"] = UDim2.new(1, 0, 0, 300);
G2L["1a4"]["Position"] = UDim2.new(0, 0, 0, 60);
G2L["1a4"]["Name"] = [[PivotInfo]];
G2L["1a4"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.PivotInfo.Frame
G2L["1a5"] = Instance.new("Frame", G2L["1a4"]);
G2L["1a5"]["BorderSizePixel"] = 0;
G2L["1a5"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["1a5"]["Size"] = UDim2.new(0, 2, 0, 132);
G2L["1a5"]["Position"] = UDim2.new(0, 10, 0, 67);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.PivotInfo.TextLabel
G2L["1a6"] = Instance.new("TextLabel", G2L["1a4"]);
G2L["1a6"]["TextWrapped"] = true;
G2L["1a6"]["BorderSizePixel"] = 0;
G2L["1a6"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a6"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1a6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a6"]["TextSize"] = 10;
G2L["1a6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a6"]["BackgroundTransparency"] = 1;
G2L["1a6"]["Size"] = UDim2.new(0, 80, 0, 180);
G2L["1a6"]["Text"] = [[CENTER - Around the center of the selection

LOCAL - Each part around its own center

LAST - Each part around the center of the last part selected]];
G2L["1a6"]["Position"] = UDim2.new(0, 17, 0, 67);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.PivotInfo.TextLabel
G2L["1a7"] = Instance.new("TextLabel", G2L["1a4"]);
G2L["1a7"]["TextWrapped"] = true;
G2L["1a7"]["BorderSizePixel"] = 0;
G2L["1a7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a7"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1a7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a7"]["TextSize"] = 10;
G2L["1a7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a7"]["BackgroundTransparency"] = 1;
G2L["1a7"]["Size"] = UDim2.new(0, 80, 0, 60);
G2L["1a7"]["Text"] = [[This option lets you choose what to rotate the parts around.]];
G2L["1a7"]["Position"] = UDim2.new(0, 10, 0, 15);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.PivotInfo.TextLabel
G2L["1a8"] = Instance.new("TextLabel", G2L["1a4"]);
G2L["1a8"]["TextWrapped"] = true;
G2L["1a8"]["BorderSizePixel"] = 0;
G2L["1a8"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a8"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1a8"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["1a8"]["TextSize"] = 10;
G2L["1a8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1a8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a8"]["BackgroundTransparency"] = 1;
G2L["1a8"]["Size"] = UDim2.new(0, 80, 0, 12);
G2L["1a8"]["Text"] = [[Pivot]];
G2L["1a8"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.PivotInfo.TextLabel
G2L["1a9"] = Instance.new("TextLabel", G2L["1a4"]);
G2L["1a9"]["TextWrapped"] = true;
G2L["1a9"]["BorderSizePixel"] = 0;
G2L["1a9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a9"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1a9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a9"]["TextSize"] = 10;
G2L["1a9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a9"]["BackgroundTransparency"] = 1;
G2L["1a9"]["Size"] = UDim2.new(0, 80, 0, 90);
G2L["1a9"]["Text"] = [[TIP: Click on any part to focus the handles on it.]];
G2L["1a9"]["Position"] = UDim2.new(0, 10, 0, 208);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.ToolDescription
G2L["1aa"] = Instance.new("TextLabel", G2L["19f"]);
G2L["1aa"]["TextWrapped"] = true;
G2L["1aa"]["BorderSizePixel"] = 0;
G2L["1aa"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1aa"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1aa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1aa"]["TextSize"] = 10;
G2L["1aa"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1aa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1aa"]["BackgroundTransparency"] = 1;
G2L["1aa"]["Size"] = UDim2.new(0, 80, 0, 50);
G2L["1aa"]["Text"] = [[Allows you to rotate parts.]];
G2L["1aa"]["Name"] = [[ToolDescription]];
G2L["1aa"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.RotateInfo.Content.ToolName
G2L["1ab"] = Instance.new("TextLabel", G2L["19f"]);
G2L["1ab"]["BorderSizePixel"] = 0;
G2L["1ab"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ab"]["TextSize"] = 10;
G2L["1ab"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1ab"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ab"]["BackgroundTransparency"] = 1;
G2L["1ab"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["1ab"]["Text"] = [[ROTATE TOOL]];
G2L["1ab"]["Name"] = [[ToolName]];
G2L["1ab"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo
G2L["1ac"] = Instance.new("Frame", G2L["158"]);
G2L["1ac"]["Visible"] = false;
G2L["1ac"]["BorderSizePixel"] = 0;
G2L["1ac"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["1ac"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1ac"]["Name"] = [[ResizeInfo]];
G2L["1ac"]["BackgroundTransparency"] = 0.2;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content
G2L["1ad"] = Instance.new("ScrollingFrame", G2L["1ac"]);
G2L["1ad"]["BorderSizePixel"] = 0;
G2L["1ad"]["CanvasSize"] = UDim2.new(0, 0, 0, 540);
G2L["1ad"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ad"]["Name"] = [[Content]];
G2L["1ad"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1ad"]["ScrollBarThickness"] = 6;
G2L["1ad"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.ColorBar
G2L["1ae"] = Instance.new("Frame", G2L["1ad"]);
G2L["1ae"]["BorderSizePixel"] = 0;
G2L["1ae"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["1ae"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["1ae"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.DirectionsInfo
G2L["1af"] = Instance.new("Frame", G2L["1ad"]);
G2L["1af"]["BorderSizePixel"] = 0;
G2L["1af"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1af"]["Size"] = UDim2.new(1, 0, 0, 300);
G2L["1af"]["Position"] = UDim2.new(0, 0, 0, 60);
G2L["1af"]["Name"] = [[DirectionsInfo]];
G2L["1af"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.DirectionsInfo.TextLabel
G2L["1b0"] = Instance.new("TextLabel", G2L["1af"]);
G2L["1b0"]["TextWrapped"] = true;
G2L["1b0"]["BorderSizePixel"] = 0;
G2L["1b0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b0"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1b0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b0"]["TextSize"] = 10;
G2L["1b0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b0"]["BackgroundTransparency"] = 1;
G2L["1b0"]["Size"] = UDim2.new(0, 80, 0, 120);
G2L["1b0"]["Text"] = [[Lets you choose in which directions to resize the part.

TIP: Click on a part to focus the handles on it.]];
G2L["1b0"]["Position"] = UDim2.new(0, 10, 0, 15);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.DirectionsInfo.TextLabel
G2L["1b1"] = Instance.new("TextLabel", G2L["1af"]);
G2L["1b1"]["TextWrapped"] = true;
G2L["1b1"]["BorderSizePixel"] = 0;
G2L["1b1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b1"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1b1"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["1b1"]["TextSize"] = 10;
G2L["1b1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1b1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b1"]["BackgroundTransparency"] = 1;
G2L["1b1"]["Size"] = UDim2.new(0, 80, 0, 12);
G2L["1b1"]["Text"] = [[Directions]];
G2L["1b1"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.IncrementInfo
G2L["1b2"] = Instance.new("Frame", G2L["1ad"]);
G2L["1b2"]["BorderSizePixel"] = 0;
G2L["1b2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b2"]["Size"] = UDim2.new(1, 0, 0, 135);
G2L["1b2"]["Position"] = UDim2.new(0, 0, 0, 165);
G2L["1b2"]["Name"] = [[IncrementInfo]];
G2L["1b2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.IncrementInfo.TextLabel
G2L["1b3"] = Instance.new("TextLabel", G2L["1b2"]);
G2L["1b3"]["TextWrapped"] = true;
G2L["1b3"]["BorderSizePixel"] = 0;
G2L["1b3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b3"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1b3"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
G2L["1b3"]["TextSize"] = 10;
G2L["1b3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1b3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b3"]["BackgroundTransparency"] = 1;
G2L["1b3"]["Size"] = UDim2.new(0, 80, 0, 12);
G2L["1b3"]["Text"] = [[Increment]];
G2L["1b3"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.IncrementInfo.TextLabel
G2L["1b4"] = Instance.new("TextLabel", G2L["1b2"]);
G2L["1b4"]["TextWrapped"] = true;
G2L["1b4"]["BorderSizePixel"] = 0;
G2L["1b4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b4"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1b4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b4"]["TextSize"] = 10;
G2L["1b4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b4"]["BackgroundTransparency"] = 1;
G2L["1b4"]["Size"] = UDim2.new(0, 82, 0, 400);
G2L["1b4"]["Text"] = [[Lets you choose how many studs to resize by.

TIP: Hit the - key to quickly type increments.

TIP: Hit Enter to switch between directions quickly.

TIP: Use your right-side number keypad to resize exactly by the current increment
  8/2 = up/down
  1/9 = back/forth
  4/6 = left/right
(Shift = reverses increment)

TIP: Hold the R key, and click and drag the snap point of a part (in the direction that you want to resize) towards the snap point of another part, to resize up to that point.]];
G2L["1b4"]["Position"] = UDim2.new(0, 10, 0, 15);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.ToolDescription
G2L["1b5"] = Instance.new("TextLabel", G2L["1ad"]);
G2L["1b5"]["TextWrapped"] = true;
G2L["1b5"]["BorderSizePixel"] = 0;
G2L["1b5"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b5"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1b5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b5"]["TextSize"] = 10;
G2L["1b5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b5"]["BackgroundTransparency"] = 1;
G2L["1b5"]["Size"] = UDim2.new(0, 80, 0, 50);
G2L["1b5"]["Text"] = [[Allows you to resize parts.]];
G2L["1b5"]["Name"] = [[ToolDescription]];
G2L["1b5"]["Position"] = UDim2.new(0, 10, 0, 25);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.ResizeInfo.Content.ToolName
G2L["1b6"] = Instance.new("TextLabel", G2L["1ad"]);
G2L["1b6"]["BorderSizePixel"] = 0;
G2L["1b6"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b6"]["TextSize"] = 10;
G2L["1b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1b6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b6"]["BackgroundTransparency"] = 1;
G2L["1b6"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["1b6"]["Text"] = [[RESIZE TOOL]];
G2L["1b6"]["Name"] = [[ToolName]];
G2L["1b6"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.ToolInformation.[Component]
G2L["1b7"] = Instance.new("ModuleScript", G2L["158"]);
G2L["1b7"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.InfoButtons
G2L["1b8"] = Instance.new("Frame", G2L["13a"]);
G2L["1b8"]["BorderSizePixel"] = 0;
G2L["1b8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b8"]["Size"] = UDim2.new(1, 0, 0, 32);
G2L["1b8"]["Position"] = UDim2.new(0, 0, 0, 350);
G2L["1b8"]["Name"] = [[InfoButtons]];
G2L["1b8"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.InfoButtons.HelpButton
G2L["1b9"] = Instance.new("ImageButton", G2L["1b8"]);
G2L["1b9"]["BorderSizePixel"] = 0;
G2L["1b9"]["BackgroundColor3"] = Color3.fromRGB(86, 171, 255);
G2L["1b9"]["Image"] = [[http://www.roblox.com/asset/?id=141911973]];
G2L["1b9"]["Size"] = UDim2.new(0, 32, 0, 32);
G2L["1b9"]["BackgroundTransparency"] = 1;
G2L["1b9"]["Name"] = [[HelpButton]];
G2L["1b9"]["Position"] = UDim2.new(1, -32, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.InfoButtons.HelpButton.Tooltip
G2L["1ba"] = Instance.new("TextLabel", G2L["1b9"]);
G2L["1ba"]["ZIndex"] = 10;
G2L["1ba"]["BorderSizePixel"] = 0;
G2L["1ba"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ba"]["TextSize"] = 10;
G2L["1ba"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1ba"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ba"]["BackgroundTransparency"] = 0.4;
G2L["1ba"]["AnchorPoint"] = Vector2.new(1, 0);
G2L["1ba"]["Size"] = UDim2.new(0, 45, 0, 22);
G2L["1ba"]["Visible"] = false;
G2L["1ba"]["Text"] = [[HELP]];
G2L["1ba"]["Name"] = [[Tooltip]];
G2L["1ba"]["Position"] = UDim2.new(1, 0, 1, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.InfoButtons.HelpButton.Tooltip.[Component]
G2L["1bb"] = Instance.new("ModuleScript", G2L["1ba"]);
G2L["1bb"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.InfoButtons.Shadow
G2L["1bc"] = Instance.new("Frame", G2L["1b8"]);
G2L["1bc"]["BorderSizePixel"] = 0;
G2L["1bc"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1bc"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["1bc"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["1bc"]["Name"] = [[Shadow]];
G2L["1bc"]["BackgroundTransparency"] = 0.7;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.InfoButtons.F3XSignature
G2L["1bd"] = Instance.new("ImageLabel", G2L["1b8"]);
G2L["1bd"]["BorderSizePixel"] = 0;
G2L["1bd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bd"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["1bd"]["Image"] = [[rbxassetid://2326685066]];
G2L["1bd"]["Size"] = UDim2.new(1, 0, 0, 13);
G2L["1bd"]["BackgroundTransparency"] = 1;
G2L["1bd"]["Name"] = [[F3XSignature]];
G2L["1bd"]["Position"] = UDim2.new(0, 6, 0.5, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.InfoButtons.F3XSignature.UIAspectRatioConstraint
G2L["1be"] = Instance.new("UIAspectRatioConstraint", G2L["1bd"]);
G2L["1be"]["AspectRatio"] = 2.38462;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.[Component]
G2L["1bf"] = Instance.new("ModuleScript", G2L["13a"]);
G2L["1bf"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI
G2L["1c0"] = Instance.new("Frame", G2L["77"]);
G2L["1c0"]["Active"] = true;
G2L["1c0"]["BorderSizePixel"] = 0;
G2L["1c0"]["Size"] = UDim2.new(0, 220, 0, 125);
G2L["1c0"]["Position"] = UDim2.new(0, 0, 0.4, 0);
G2L["1c0"]["Name"] = [[BTLightingToolGUI]];
G2L["1c0"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight
G2L["1c1"] = Instance.new("Frame", G2L["1c0"]);
G2L["1c1"]["BorderSizePixel"] = 0;
G2L["1c1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c1"]["ClipsDescendants"] = true;
G2L["1c1"]["Size"] = UDim2.new(1, -10, 0, 25);
G2L["1c1"]["Position"] = UDim2.new(0, 10, 0, 60);
G2L["1c1"]["Name"] = [[PointLight]];
G2L["1c1"]["BackgroundTransparency"] = 0.675;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Shadow
G2L["1c2"] = Instance.new("Frame", G2L["1c1"]);
G2L["1c2"]["BorderSizePixel"] = 0;
G2L["1c2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c2"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["1c2"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["1c2"]["Name"] = [[Shadow]];
G2L["1c2"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.RemoveButton
G2L["1c3"] = Instance.new("TextButton", G2L["1c1"]);
G2L["1c3"]["BorderSizePixel"] = 0;
G2L["1c3"]["TextSize"] = 10;
G2L["1c3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1c3"]["Size"] = UDim2.new(0, 58, 0, 19);
G2L["1c3"]["BackgroundTransparency"] = 0.75;
G2L["1c3"]["Name"] = [[RemoveButton]];
G2L["1c3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c3"]["Text"] = [[REMOVE]];
G2L["1c3"]["Visible"] = false;
G2L["1c3"]["Position"] = UDim2.new(0, 90, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.AddButton
G2L["1c4"] = Instance.new("TextButton", G2L["1c1"]);
G2L["1c4"]["BorderSizePixel"] = 0;
G2L["1c4"]["TextSize"] = 10;
G2L["1c4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1c4"]["Size"] = UDim2.new(0, 35, 0, 19);
G2L["1c4"]["BackgroundTransparency"] = 0.75;
G2L["1c4"]["Name"] = [[AddButton]];
G2L["1c4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c4"]["Text"] = [[ADD]];
G2L["1c4"]["Position"] = UDim2.new(1, -40, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.ColorBar
G2L["1c5"] = Instance.new("Frame", G2L["1c1"]);
G2L["1c5"]["BorderSizePixel"] = 0;
G2L["1c5"]["BackgroundColor3"] = Color3.fromRGB(218, 0, 255);
G2L["1c5"]["Size"] = UDim2.new(0, 3, 1, 0);
G2L["1c5"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.ArrowButton
G2L["1c6"] = Instance.new("ImageButton", G2L["1c1"]);
G2L["1c6"]["BorderSizePixel"] = 0;
G2L["1c6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c6"]["Image"] = [[http://www.roblox.com/asset/?id=134367382]];
G2L["1c6"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["1c6"]["BackgroundTransparency"] = 1;
G2L["1c6"]["Name"] = [[ArrowButton]];
G2L["1c6"]["Position"] = UDim2.new(0, 10, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Label
G2L["1c7"] = Instance.new("TextLabel", G2L["1c1"]);
G2L["1c7"]["TextWrapped"] = true;
G2L["1c7"]["TextStrokeTransparency"] = 0.5;
G2L["1c7"]["BorderSizePixel"] = 0;
G2L["1c7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1c7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c7"]["TextSize"] = 10;
G2L["1c7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1c7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c7"]["BackgroundTransparency"] = 1;
G2L["1c7"]["Size"] = UDim2.new(0, 60, 0, 25);
G2L["1c7"]["Text"] = [[Point light]];
G2L["1c7"]["Name"] = [[Label]];
G2L["1c7"]["Position"] = UDim2.new(0, 35, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options
G2L["1c8"] = Instance.new("Frame", G2L["1c1"]);
G2L["1c8"]["BorderSizePixel"] = 0;
G2L["1c8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c8"]["ClipsDescendants"] = true;
G2L["1c8"]["Size"] = UDim2.new(1, -3, 0, 71);
G2L["1c8"]["Position"] = UDim2.new(0, 3, 1, 0);
G2L["1c8"]["Name"] = [[Options]];
G2L["1c8"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ShadowsOption
G2L["1c9"] = Instance.new("Frame", G2L["1c8"]);
G2L["1c9"]["BorderSizePixel"] = 0;
G2L["1c9"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["1c9"]["Position"] = UDim2.new(0, 120, 0, 45);
G2L["1c9"]["Name"] = [[ShadowsOption]];
G2L["1c9"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ShadowsOption.Label
G2L["1ca"] = Instance.new("TextLabel", G2L["1c9"]);
G2L["1ca"]["TextWrapped"] = true;
G2L["1ca"]["TextStrokeTransparency"] = 0;
G2L["1ca"]["BorderSizePixel"] = 0;
G2L["1ca"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1ca"]["TextSize"] = 10;
G2L["1ca"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1ca"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ca"]["BackgroundTransparency"] = 1;
G2L["1ca"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["1ca"]["Text"] = [[Shadows]];
G2L["1ca"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ShadowsOption.Checkbox
G2L["1cb"] = Instance.new("ImageButton", G2L["1c9"]);
G2L["1cb"]["BorderSizePixel"] = 0;
G2L["1cb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1cb"]["ImageColor3"] = Color3.fromRGB(242, 242, 242);
G2L["1cb"]["Image"] = [[rbxassetid://401518903]];
G2L["1cb"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["1cb"]["BackgroundTransparency"] = 1;
G2L["1cb"]["Name"] = [[Checkbox]];
G2L["1cb"]["Position"] = UDim2.new(0, 55, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.RangeOption
G2L["1cc"] = Instance.new("Frame", G2L["1c8"]);
G2L["1cc"]["BorderSizePixel"] = 0;
G2L["1cc"]["Size"] = UDim2.new(0, 80, 0, 25);
G2L["1cc"]["Position"] = UDim2.new(0, 105, 0, 10);
G2L["1cc"]["Name"] = [[RangeOption]];
G2L["1cc"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.RangeOption.Input
G2L["1cd"] = Instance.new("Frame", G2L["1cc"]);
G2L["1cd"]["BorderSizePixel"] = 0;
G2L["1cd"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["1cd"]["Position"] = UDim2.new(0, 40, 0, 0);
G2L["1cd"]["Name"] = [[Input]];
G2L["1cd"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.RangeOption.Input.TextBox
G2L["1ce"] = Instance.new("TextBox", G2L["1cd"]);
G2L["1ce"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ce"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["1ce"]["ZIndex"] = 2;
G2L["1ce"]["BorderSizePixel"] = 0;
G2L["1ce"]["TextSize"] = 10;
G2L["1ce"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1ce"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["1ce"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["1ce"]["Text"] = [[16]];
G2L["1ce"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.RangeOption.Input.Background
G2L["1cf"] = Instance.new("ImageLabel", G2L["1cd"]);
G2L["1cf"]["BorderSizePixel"] = 0;
G2L["1cf"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["1cf"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1cf"]["BackgroundTransparency"] = 1;
G2L["1cf"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.RangeOption.Input.SelectedIndicator
G2L["1d0"] = Instance.new("Frame", G2L["1cd"]);
G2L["1d0"]["BorderSizePixel"] = 0;
G2L["1d0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d0"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["1d0"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["1d0"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.RangeOption.Label
G2L["1d1"] = Instance.new("TextLabel", G2L["1cc"]);
G2L["1d1"]["TextWrapped"] = true;
G2L["1d1"]["TextStrokeTransparency"] = 0;
G2L["1d1"]["BorderSizePixel"] = 0;
G2L["1d1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1d1"]["TextSize"] = 10;
G2L["1d1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1d1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d1"]["BackgroundTransparency"] = 1;
G2L["1d1"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["1d1"]["Text"] = [[Range]];
G2L["1d1"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.BrightnessOption
G2L["1d2"] = Instance.new("Frame", G2L["1c8"]);
G2L["1d2"]["BorderSizePixel"] = 0;
G2L["1d2"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["1d2"]["Position"] = UDim2.new(0, 0, 0, 45);
G2L["1d2"]["Name"] = [[BrightnessOption]];
G2L["1d2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.BrightnessOption.Input
G2L["1d3"] = Instance.new("Frame", G2L["1d2"]);
G2L["1d3"]["BorderSizePixel"] = 0;
G2L["1d3"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["1d3"]["Position"] = UDim2.new(0, 60, 0, 0);
G2L["1d3"]["Name"] = [[Input]];
G2L["1d3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.BrightnessOption.Input.TextBox
G2L["1d4"] = Instance.new("TextBox", G2L["1d3"]);
G2L["1d4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d4"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["1d4"]["ZIndex"] = 2;
G2L["1d4"]["BorderSizePixel"] = 0;
G2L["1d4"]["TextSize"] = 10;
G2L["1d4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1d4"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["1d4"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["1d4"]["Text"] = [[1]];
G2L["1d4"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.BrightnessOption.Input.Background
G2L["1d5"] = Instance.new("ImageLabel", G2L["1d3"]);
G2L["1d5"]["BorderSizePixel"] = 0;
G2L["1d5"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["1d5"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1d5"]["BackgroundTransparency"] = 1;
G2L["1d5"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.BrightnessOption.Input.SelectedIndicator
G2L["1d6"] = Instance.new("Frame", G2L["1d3"]);
G2L["1d6"]["BorderSizePixel"] = 0;
G2L["1d6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d6"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["1d6"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["1d6"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.BrightnessOption.Label
G2L["1d7"] = Instance.new("TextLabel", G2L["1d2"]);
G2L["1d7"]["TextWrapped"] = true;
G2L["1d7"]["TextStrokeTransparency"] = 0;
G2L["1d7"]["BorderSizePixel"] = 0;
G2L["1d7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1d7"]["TextSize"] = 10;
G2L["1d7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1d7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d7"]["BackgroundTransparency"] = 1;
G2L["1d7"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["1d7"]["Text"] = [[Brightness]];
G2L["1d7"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ColorOption
G2L["1d8"] = Instance.new("Frame", G2L["1c8"]);
G2L["1d8"]["BorderSizePixel"] = 0;
G2L["1d8"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["1d8"]["Position"] = UDim2.new(0, 0, 0, 10);
G2L["1d8"]["Name"] = [[ColorOption]];
G2L["1d8"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ColorOption.HSVPicker
G2L["1d9"] = Instance.new("ImageButton", G2L["1d8"]);
G2L["1d9"]["BorderSizePixel"] = 0;
G2L["1d9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d9"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["1d9"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["1d9"]["BackgroundTransparency"] = 0.4;
G2L["1d9"]["Name"] = [[HSVPicker]];
G2L["1d9"]["Position"] = UDim2.new(0, 60, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ColorOption.HSVPicker.Shadow
G2L["1da"] = Instance.new("Frame", G2L["1d9"]);
G2L["1da"]["BorderSizePixel"] = 0;
G2L["1da"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1da"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["1da"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["1da"]["Name"] = [[Shadow]];
G2L["1da"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ColorOption.Label
G2L["1db"] = Instance.new("TextLabel", G2L["1d8"]);
G2L["1db"]["TextWrapped"] = true;
G2L["1db"]["TextStrokeTransparency"] = 0;
G2L["1db"]["BorderSizePixel"] = 0;
G2L["1db"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1db"]["TextSize"] = 10;
G2L["1db"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1db"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1db"]["BackgroundTransparency"] = 1;
G2L["1db"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["1db"]["Text"] = [[Color]];
G2L["1db"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ColorOption.Indicator
G2L["1dc"] = Instance.new("Frame", G2L["1d8"]);
G2L["1dc"]["BorderSizePixel"] = 0;
G2L["1dc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1dc"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["1dc"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["1dc"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ColorOption.Indicator.Shadow
G2L["1dd"] = Instance.new("Frame", G2L["1dc"]);
G2L["1dd"]["BorderSizePixel"] = 0;
G2L["1dd"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1dd"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["1dd"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["1dd"]["Name"] = [[Shadow]];
G2L["1dd"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.PointLight.Options.ColorOption.Indicator.Varies
G2L["1de"] = Instance.new("TextLabel", G2L["1dc"]);
G2L["1de"]["TextWrapped"] = true;
G2L["1de"]["TextStrokeTransparency"] = 0.75;
G2L["1de"]["BorderSizePixel"] = 0;
G2L["1de"]["TextScaled"] = true;
G2L["1de"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1de"]["TextSize"] = 14;
G2L["1de"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1de"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1de"]["BackgroundTransparency"] = 1;
G2L["1de"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1de"]["Text"] = [[]];
G2L["1de"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SelectNote
G2L["1df"] = Instance.new("TextLabel", G2L["1c0"]);
G2L["1df"]["TextWrapped"] = true;
G2L["1df"]["TextStrokeTransparency"] = 0.5;
G2L["1df"]["BorderSizePixel"] = 0;
G2L["1df"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1df"]["TextScaled"] = true;
G2L["1df"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1df"]["TextSize"] = 14;
G2L["1df"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1df"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1df"]["BackgroundTransparency"] = 1;
G2L["1df"]["Size"] = UDim2.new(1, -10, 0, 15);
G2L["1df"]["Visible"] = false;
G2L["1df"]["Text"] = [[Select something to use this tool.]];
G2L["1df"]["Name"] = [[SelectNote]];
G2L["1df"]["Position"] = UDim2.new(0, 10, 0, 27);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight
G2L["1e0"] = Instance.new("Frame", G2L["1c0"]);
G2L["1e0"]["BorderSizePixel"] = 0;
G2L["1e0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e0"]["ClipsDescendants"] = true;
G2L["1e0"]["Size"] = UDim2.new(1, -10, 0, 25);
G2L["1e0"]["Position"] = UDim2.new(0, 10, 0, 30);
G2L["1e0"]["Name"] = [[SpotLight]];
G2L["1e0"]["BackgroundTransparency"] = 0.675;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options
G2L["1e1"] = Instance.new("Frame", G2L["1e0"]);
G2L["1e1"]["BorderSizePixel"] = 0;
G2L["1e1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e1"]["ClipsDescendants"] = true;
G2L["1e1"]["Size"] = UDim2.new(1, -3, 0, 105);
G2L["1e1"]["Position"] = UDim2.new(0, 3, 1, 0);
G2L["1e1"]["Name"] = [[Options]];
G2L["1e1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ShadowsOption
G2L["1e2"] = Instance.new("Frame", G2L["1e1"]);
G2L["1e2"]["BorderSizePixel"] = 0;
G2L["1e2"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["1e2"]["Position"] = UDim2.new(0, 120, 0, 80);
G2L["1e2"]["Name"] = [[ShadowsOption]];
G2L["1e2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ShadowsOption.Label
G2L["1e3"] = Instance.new("TextLabel", G2L["1e2"]);
G2L["1e3"]["TextWrapped"] = true;
G2L["1e3"]["TextStrokeTransparency"] = 0;
G2L["1e3"]["BorderSizePixel"] = 0;
G2L["1e3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1e3"]["TextSize"] = 10;
G2L["1e3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1e3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e3"]["BackgroundTransparency"] = 1;
G2L["1e3"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["1e3"]["Text"] = [[Shadows]];
G2L["1e3"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ShadowsOption.Checkbox
G2L["1e4"] = Instance.new("ImageButton", G2L["1e2"]);
G2L["1e4"]["BorderSizePixel"] = 0;
G2L["1e4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e4"]["ImageColor3"] = Color3.fromRGB(242, 242, 242);
G2L["1e4"]["Image"] = [[rbxassetid://401518903]];
G2L["1e4"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["1e4"]["BackgroundTransparency"] = 1;
G2L["1e4"]["Name"] = [[Checkbox]];
G2L["1e4"]["Position"] = UDim2.new(0, 55, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption
G2L["1e5"] = Instance.new("Frame", G2L["1e1"]);
G2L["1e5"]["BorderSizePixel"] = 0;
G2L["1e5"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["1e5"]["Position"] = UDim2.new(0, 0, 0, 80);
G2L["1e5"]["Name"] = [[SideOption]];
G2L["1e5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Label
G2L["1e6"] = Instance.new("TextLabel", G2L["1e5"]);
G2L["1e6"]["TextWrapped"] = true;
G2L["1e6"]["TextStrokeTransparency"] = 0;
G2L["1e6"]["BorderSizePixel"] = 0;
G2L["1e6"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1e6"]["TextSize"] = 10;
G2L["1e6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1e6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e6"]["BackgroundTransparency"] = 1;
G2L["1e6"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["1e6"]["Text"] = [[Side]];
G2L["1e6"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown
G2L["1e7"] = Instance.new("TextButton", G2L["1e5"]);
G2L["1e7"]["TextStrokeTransparency"] = 0.8;
G2L["1e7"]["BorderSizePixel"] = 0;
G2L["1e7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1e7"]["TextSize"] = 10;
G2L["1e7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1e7"]["Size"] = UDim2.new(0, 72, 0, 25);
G2L["1e7"]["BackgroundTransparency"] = 0.3;
G2L["1e7"]["Name"] = [[Dropdown]];
G2L["1e7"]["Text"] = [[]];
G2L["1e7"]["Position"] = UDim2.new(0, 30, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown.Icon
G2L["1e8"] = Instance.new("ImageLabel", G2L["1e7"]);
G2L["1e8"]["ZIndex"] = 3;
G2L["1e8"]["BorderSizePixel"] = 0;
G2L["1e8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e8"]["Image"] = [[rbxassetid://134367382]];
G2L["1e8"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["1e8"]["BackgroundTransparency"] = 1;
G2L["1e8"]["Name"] = [[Icon]];
G2L["1e8"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown.OptionButton
G2L["1e9"] = Instance.new("TextButton", G2L["1e7"]);
G2L["1e9"]["TextStrokeTransparency"] = 0.8;
G2L["1e9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1e9"]["TextSize"] = 10;
G2L["1e9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1e9"]["ZIndex"] = 4;
G2L["1e9"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["1e9"]["BackgroundTransparency"] = 0.3;
G2L["1e9"]["Name"] = [[OptionButton]];
G2L["1e9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e9"]["Text"] = [[]];
G2L["1e9"]["Visible"] = false;
G2L["1e9"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown.OptionButton.OptionLabel
G2L["1ea"] = Instance.new("TextLabel", G2L["1e9"]);
G2L["1ea"]["ZIndex"] = 4;
G2L["1ea"]["BorderSizePixel"] = 0;
G2L["1ea"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1ea"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ea"]["TextSize"] = 10;
G2L["1ea"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1ea"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ea"]["BackgroundTransparency"] = 1;
G2L["1ea"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["1ea"]["Text"] = [[ALL]];
G2L["1ea"]["Name"] = [[OptionLabel]];
G2L["1ea"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown.Options
G2L["1eb"] = Instance.new("Folder", G2L["1e7"]);
G2L["1eb"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown.Border
G2L["1ec"] = Instance.new("Frame", G2L["1e7"]);
G2L["1ec"]["BorderSizePixel"] = 0;
G2L["1ec"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ec"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["1ec"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["1ec"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown.CurrentOption
G2L["1ed"] = Instance.new("TextLabel", G2L["1e7"]);
G2L["1ed"]["ZIndex"] = 3;
G2L["1ed"]["BorderSizePixel"] = 0;
G2L["1ed"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1ed"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ed"]["TextSize"] = 10;
G2L["1ed"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1ed"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ed"]["BackgroundTransparency"] = 1;
G2L["1ed"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["1ed"]["Text"] = [[]];
G2L["1ed"]["Name"] = [[CurrentOption]];
G2L["1ed"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.SideOption.Dropdown.[Component]
G2L["1ee"] = Instance.new("ModuleScript", G2L["1e7"]);
G2L["1ee"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.RangeOption
G2L["1ef"] = Instance.new("Frame", G2L["1e1"]);
G2L["1ef"]["BorderSizePixel"] = 0;
G2L["1ef"]["Size"] = UDim2.new(0, 80, 0, 25);
G2L["1ef"]["Position"] = UDim2.new(0, 110, 0, 10);
G2L["1ef"]["Name"] = [[RangeOption]];
G2L["1ef"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.RangeOption.Input
G2L["1f0"] = Instance.new("Frame", G2L["1ef"]);
G2L["1f0"]["BorderSizePixel"] = 0;
G2L["1f0"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["1f0"]["Position"] = UDim2.new(0, 40, 0, 0);
G2L["1f0"]["Name"] = [[Input]];
G2L["1f0"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.RangeOption.Input.TextBox
G2L["1f1"] = Instance.new("TextBox", G2L["1f0"]);
G2L["1f1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f1"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["1f1"]["ZIndex"] = 2;
G2L["1f1"]["BorderSizePixel"] = 0;
G2L["1f1"]["TextSize"] = 10;
G2L["1f1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1f1"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["1f1"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["1f1"]["Text"] = [[16]];
G2L["1f1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.RangeOption.Input.Background
G2L["1f2"] = Instance.new("ImageLabel", G2L["1f0"]);
G2L["1f2"]["BorderSizePixel"] = 0;
G2L["1f2"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["1f2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1f2"]["BackgroundTransparency"] = 1;
G2L["1f2"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.RangeOption.Input.SelectedIndicator
G2L["1f3"] = Instance.new("Frame", G2L["1f0"]);
G2L["1f3"]["BorderSizePixel"] = 0;
G2L["1f3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f3"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["1f3"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["1f3"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.RangeOption.Label
G2L["1f4"] = Instance.new("TextLabel", G2L["1ef"]);
G2L["1f4"]["TextWrapped"] = true;
G2L["1f4"]["TextStrokeTransparency"] = 0;
G2L["1f4"]["BorderSizePixel"] = 0;
G2L["1f4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1f4"]["TextSize"] = 10;
G2L["1f4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1f4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f4"]["BackgroundTransparency"] = 1;
G2L["1f4"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["1f4"]["Text"] = [[Range]];
G2L["1f4"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.AngleOption
G2L["1f5"] = Instance.new("Frame", G2L["1e1"]);
G2L["1f5"]["BorderSizePixel"] = 0;
G2L["1f5"]["Size"] = UDim2.new(1, -115, 0, 25);
G2L["1f5"]["Position"] = UDim2.new(0, 120, 0, 46);
G2L["1f5"]["Name"] = [[AngleOption]];
G2L["1f5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.AngleOption.Input
G2L["1f6"] = Instance.new("Frame", G2L["1f5"]);
G2L["1f6"]["BorderSizePixel"] = 0;
G2L["1f6"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["1f6"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["1f6"]["Name"] = [[Input]];
G2L["1f6"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.AngleOption.Input.TextBox
G2L["1f7"] = Instance.new("TextBox", G2L["1f6"]);
G2L["1f7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f7"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["1f7"]["ZIndex"] = 2;
G2L["1f7"]["BorderSizePixel"] = 0;
G2L["1f7"]["TextSize"] = 10;
G2L["1f7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1f7"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["1f7"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["1f7"]["Text"] = [[90]];
G2L["1f7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.AngleOption.Input.SelectedIndicator
G2L["1f8"] = Instance.new("Frame", G2L["1f6"]);
G2L["1f8"]["BorderSizePixel"] = 0;
G2L["1f8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f8"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["1f8"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["1f8"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.AngleOption.Input.Background
G2L["1f9"] = Instance.new("ImageLabel", G2L["1f6"]);
G2L["1f9"]["BorderSizePixel"] = 0;
G2L["1f9"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["1f9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1f9"]["BackgroundTransparency"] = 1;
G2L["1f9"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.AngleOption.Label
G2L["1fa"] = Instance.new("TextLabel", G2L["1f5"]);
G2L["1fa"]["TextWrapped"] = true;
G2L["1fa"]["TextStrokeTransparency"] = 0;
G2L["1fa"]["BorderSizePixel"] = 0;
G2L["1fa"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1fa"]["TextSize"] = 10;
G2L["1fa"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1fa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fa"]["BackgroundTransparency"] = 1;
G2L["1fa"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["1fa"]["Text"] = [[Angle]];
G2L["1fa"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.BrightnessOption
G2L["1fb"] = Instance.new("Frame", G2L["1e1"]);
G2L["1fb"]["BorderSizePixel"] = 0;
G2L["1fb"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["1fb"]["Position"] = UDim2.new(0, 0, 0, 45);
G2L["1fb"]["Name"] = [[BrightnessOption]];
G2L["1fb"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.BrightnessOption.Input
G2L["1fc"] = Instance.new("Frame", G2L["1fb"]);
G2L["1fc"]["BorderSizePixel"] = 0;
G2L["1fc"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["1fc"]["Position"] = UDim2.new(0, 60, 0, 0);
G2L["1fc"]["Name"] = [[Input]];
G2L["1fc"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.BrightnessOption.Input.TextBox
G2L["1fd"] = Instance.new("TextBox", G2L["1fc"]);
G2L["1fd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fd"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["1fd"]["ZIndex"] = 2;
G2L["1fd"]["BorderSizePixel"] = 0;
G2L["1fd"]["TextSize"] = 10;
G2L["1fd"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1fd"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["1fd"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["1fd"]["Text"] = [[1]];
G2L["1fd"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.BrightnessOption.Input.Background
G2L["1fe"] = Instance.new("ImageLabel", G2L["1fc"]);
G2L["1fe"]["BorderSizePixel"] = 0;
G2L["1fe"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["1fe"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1fe"]["BackgroundTransparency"] = 1;
G2L["1fe"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.BrightnessOption.Input.SelectedIndicator
G2L["1ff"] = Instance.new("Frame", G2L["1fc"]);
G2L["1ff"]["BorderSizePixel"] = 0;
G2L["1ff"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ff"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["1ff"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["1ff"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.BrightnessOption.Label
G2L["200"] = Instance.new("TextLabel", G2L["1fb"]);
G2L["200"]["TextWrapped"] = true;
G2L["200"]["TextStrokeTransparency"] = 0;
G2L["200"]["BorderSizePixel"] = 0;
G2L["200"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["200"]["TextSize"] = 10;
G2L["200"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["200"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["200"]["BackgroundTransparency"] = 1;
G2L["200"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["200"]["Text"] = [[Brightness]];
G2L["200"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ColorOption
G2L["201"] = Instance.new("Frame", G2L["1e1"]);
G2L["201"]["BorderSizePixel"] = 0;
G2L["201"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["201"]["Position"] = UDim2.new(0, 0, 0, 10);
G2L["201"]["Name"] = [[ColorOption]];
G2L["201"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ColorOption.HSVPicker
G2L["202"] = Instance.new("ImageButton", G2L["201"]);
G2L["202"]["BorderSizePixel"] = 0;
G2L["202"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["202"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["202"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["202"]["BackgroundTransparency"] = 0.4;
G2L["202"]["Name"] = [[HSVPicker]];
G2L["202"]["Position"] = UDim2.new(0, 60, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ColorOption.HSVPicker.Shadow
G2L["203"] = Instance.new("Frame", G2L["202"]);
G2L["203"]["BorderSizePixel"] = 0;
G2L["203"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["203"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["203"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["203"]["Name"] = [[Shadow]];
G2L["203"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ColorOption.Label
G2L["204"] = Instance.new("TextLabel", G2L["201"]);
G2L["204"]["TextWrapped"] = true;
G2L["204"]["TextStrokeTransparency"] = 0;
G2L["204"]["BorderSizePixel"] = 0;
G2L["204"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["204"]["TextSize"] = 10;
G2L["204"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["204"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["204"]["BackgroundTransparency"] = 1;
G2L["204"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["204"]["Text"] = [[Color]];
G2L["204"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ColorOption.Indicator
G2L["205"] = Instance.new("Frame", G2L["201"]);
G2L["205"]["BorderSizePixel"] = 0;
G2L["205"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["205"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["205"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["205"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ColorOption.Indicator.Shadow
G2L["206"] = Instance.new("Frame", G2L["205"]);
G2L["206"]["BorderSizePixel"] = 0;
G2L["206"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["206"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["206"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["206"]["Name"] = [[Shadow]];
G2L["206"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Options.ColorOption.Indicator.Varies
G2L["207"] = Instance.new("TextLabel", G2L["205"]);
G2L["207"]["TextWrapped"] = true;
G2L["207"]["TextStrokeTransparency"] = 0.75;
G2L["207"]["BorderSizePixel"] = 0;
G2L["207"]["TextScaled"] = true;
G2L["207"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["207"]["TextSize"] = 14;
G2L["207"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["207"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["207"]["BackgroundTransparency"] = 1;
G2L["207"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["207"]["Text"] = [[]];
G2L["207"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Shadow
G2L["208"] = Instance.new("Frame", G2L["1e0"]);
G2L["208"]["BorderSizePixel"] = 0;
G2L["208"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["208"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["208"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["208"]["Name"] = [[Shadow]];
G2L["208"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.RemoveButton
G2L["209"] = Instance.new("TextButton", G2L["1e0"]);
G2L["209"]["BorderSizePixel"] = 0;
G2L["209"]["TextSize"] = 10;
G2L["209"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["209"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["209"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["209"]["Size"] = UDim2.new(0, 58, 0, 19);
G2L["209"]["BackgroundTransparency"] = 0.75;
G2L["209"]["Name"] = [[RemoveButton]];
G2L["209"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["209"]["Text"] = [[REMOVE]];
G2L["209"]["Visible"] = false;
G2L["209"]["Position"] = UDim2.new(0, 127, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.AddButton
G2L["20a"] = Instance.new("TextButton", G2L["1e0"]);
G2L["20a"]["BorderSizePixel"] = 0;
G2L["20a"]["TextSize"] = 10;
G2L["20a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["20a"]["Size"] = UDim2.new(0, 35, 0, 19);
G2L["20a"]["BackgroundTransparency"] = 0.75;
G2L["20a"]["Name"] = [[AddButton]];
G2L["20a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20a"]["Text"] = [[ADD]];
G2L["20a"]["Position"] = UDim2.new(1, -40, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.ColorBar
G2L["20b"] = Instance.new("Frame", G2L["1e0"]);
G2L["20b"]["BorderSizePixel"] = 0;
G2L["20b"]["BackgroundColor3"] = Color3.fromRGB(255, 175, 61);
G2L["20b"]["Size"] = UDim2.new(0, 3, 1, 0);
G2L["20b"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.ArrowButton
G2L["20c"] = Instance.new("ImageButton", G2L["1e0"]);
G2L["20c"]["BorderSizePixel"] = 0;
G2L["20c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20c"]["Image"] = [[http://www.roblox.com/asset/?id=134367382]];
G2L["20c"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["20c"]["BackgroundTransparency"] = 1;
G2L["20c"]["Name"] = [[ArrowButton]];
G2L["20c"]["Position"] = UDim2.new(0, 10, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SpotLight.Label
G2L["20d"] = Instance.new("TextLabel", G2L["1e0"]);
G2L["20d"]["TextWrapped"] = true;
G2L["20d"]["TextStrokeTransparency"] = 0.5;
G2L["20d"]["BorderSizePixel"] = 0;
G2L["20d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["20d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20d"]["TextSize"] = 10;
G2L["20d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["20d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20d"]["BackgroundTransparency"] = 1;
G2L["20d"]["Size"] = UDim2.new(0, 60, 0, 25);
G2L["20d"]["Text"] = [[Spot light]];
G2L["20d"]["Name"] = [[Label]];
G2L["20d"]["Position"] = UDim2.new(0, 35, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.Title
G2L["20e"] = Instance.new("Frame", G2L["1c0"]);
G2L["20e"]["BorderSizePixel"] = 0;
G2L["20e"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["20e"]["Name"] = [[Title]];
G2L["20e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.Title.F3XSignature
G2L["20f"] = Instance.new("TextLabel", G2L["20e"]);
G2L["20f"]["TextWrapped"] = true;
G2L["20f"]["TextStrokeTransparency"] = 0.9;
G2L["20f"]["BorderSizePixel"] = 0;
G2L["20f"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["20f"]["TextSize"] = 14;
G2L["20f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["20f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20f"]["BackgroundTransparency"] = 1;
G2L["20f"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["20f"]["Text"] = [[F3X]];
G2L["20f"]["Name"] = [[F3XSignature]];
G2L["20f"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.Title.Label
G2L["210"] = Instance.new("TextLabel", G2L["20e"]);
G2L["210"]["TextWrapped"] = true;
G2L["210"]["TextStrokeTransparency"] = 0;
G2L["210"]["BorderSizePixel"] = 0;
G2L["210"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["210"]["TextSize"] = 10;
G2L["210"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["210"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["210"]["BackgroundTransparency"] = 1;
G2L["210"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["210"]["Text"] = [[LIGHTING TOOL]];
G2L["210"]["Name"] = [[Label]];
G2L["210"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.Title.ColorBar
G2L["211"] = Instance.new("Frame", G2L["20e"]);
G2L["211"]["BorderSizePixel"] = 0;
G2L["211"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["211"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["211"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["211"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.BottomColorBar
G2L["212"] = Instance.new("Frame", G2L["1c0"]);
G2L["212"]["BorderSizePixel"] = 0;
G2L["212"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["212"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["212"]["Position"] = UDim2.new(0, 5, 1, -2);
G2L["212"]["Name"] = [[BottomColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight
G2L["213"] = Instance.new("Frame", G2L["1c0"]);
G2L["213"]["BorderSizePixel"] = 0;
G2L["213"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["213"]["ClipsDescendants"] = true;
G2L["213"]["Size"] = UDim2.new(1, -10, 0, 25);
G2L["213"]["Position"] = UDim2.new(0, 10, 0, 90);
G2L["213"]["Name"] = [[SurfaceLight]];
G2L["213"]["BackgroundTransparency"] = 0.675;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Shadow
G2L["214"] = Instance.new("Frame", G2L["213"]);
G2L["214"]["BorderSizePixel"] = 0;
G2L["214"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["214"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["214"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["214"]["Name"] = [[Shadow]];
G2L["214"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.RemoveButton
G2L["215"] = Instance.new("TextButton", G2L["213"]);
G2L["215"]["BorderSizePixel"] = 0;
G2L["215"]["TextSize"] = 10;
G2L["215"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["215"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["215"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["215"]["Size"] = UDim2.new(0, 58, 0, 19);
G2L["215"]["BackgroundTransparency"] = 0.75;
G2L["215"]["Name"] = [[RemoveButton]];
G2L["215"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["215"]["Text"] = [[REMOVE]];
G2L["215"]["Visible"] = false;
G2L["215"]["Position"] = UDim2.new(0, 90, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.AddButton
G2L["216"] = Instance.new("TextButton", G2L["213"]);
G2L["216"]["BorderSizePixel"] = 0;
G2L["216"]["TextSize"] = 10;
G2L["216"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["216"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["216"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["216"]["Size"] = UDim2.new(0, 35, 0, 19);
G2L["216"]["BackgroundTransparency"] = 0.75;
G2L["216"]["Name"] = [[AddButton]];
G2L["216"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["216"]["Text"] = [[ADD]];
G2L["216"]["Position"] = UDim2.new(1, -40, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.ColorBar
G2L["217"] = Instance.new("Frame", G2L["213"]);
G2L["217"]["BorderSizePixel"] = 0;
G2L["217"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 5);
G2L["217"]["Size"] = UDim2.new(0, 3, 1, 0);
G2L["217"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.ArrowButton
G2L["218"] = Instance.new("ImageButton", G2L["213"]);
G2L["218"]["BorderSizePixel"] = 0;
G2L["218"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["218"]["Image"] = [[http://www.roblox.com/asset/?id=134367382]];
G2L["218"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["218"]["BackgroundTransparency"] = 1;
G2L["218"]["Name"] = [[ArrowButton]];
G2L["218"]["Position"] = UDim2.new(0, 10, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Label
G2L["219"] = Instance.new("TextLabel", G2L["213"]);
G2L["219"]["TextWrapped"] = true;
G2L["219"]["TextStrokeTransparency"] = 0.5;
G2L["219"]["BorderSizePixel"] = 0;
G2L["219"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["219"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["219"]["TextSize"] = 10;
G2L["219"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["219"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["219"]["BackgroundTransparency"] = 1;
G2L["219"]["Size"] = UDim2.new(0, 80, 0, 25);
G2L["219"]["Text"] = [[Surface light]];
G2L["219"]["Name"] = [[Label]];
G2L["219"]["Position"] = UDim2.new(0, 35, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options
G2L["21a"] = Instance.new("Frame", G2L["213"]);
G2L["21a"]["BorderSizePixel"] = 0;
G2L["21a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21a"]["ClipsDescendants"] = true;
G2L["21a"]["Size"] = UDim2.new(1, -3, 0, 105);
G2L["21a"]["Position"] = UDim2.new(0, 3, 1, 0);
G2L["21a"]["Name"] = [[Options]];
G2L["21a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ShadowsOption
G2L["21b"] = Instance.new("Frame", G2L["21a"]);
G2L["21b"]["BorderSizePixel"] = 0;
G2L["21b"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["21b"]["Position"] = UDim2.new(0, 120, 0, 80);
G2L["21b"]["Name"] = [[ShadowsOption]];
G2L["21b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ShadowsOption.Label
G2L["21c"] = Instance.new("TextLabel", G2L["21b"]);
G2L["21c"]["TextWrapped"] = true;
G2L["21c"]["TextStrokeTransparency"] = 0;
G2L["21c"]["BorderSizePixel"] = 0;
G2L["21c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["21c"]["TextSize"] = 10;
G2L["21c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["21c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21c"]["BackgroundTransparency"] = 1;
G2L["21c"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["21c"]["Text"] = [[Shadows]];
G2L["21c"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ShadowsOption.Checkbox
G2L["21d"] = Instance.new("ImageButton", G2L["21b"]);
G2L["21d"]["BorderSizePixel"] = 0;
G2L["21d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21d"]["ImageColor3"] = Color3.fromRGB(242, 242, 242);
G2L["21d"]["Image"] = [[rbxassetid://401518903]];
G2L["21d"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["21d"]["BackgroundTransparency"] = 1;
G2L["21d"]["Name"] = [[Checkbox]];
G2L["21d"]["Position"] = UDim2.new(0, 55, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption
G2L["21e"] = Instance.new("Frame", G2L["21a"]);
G2L["21e"]["BorderSizePixel"] = 0;
G2L["21e"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["21e"]["Position"] = UDim2.new(0, 0, 0, 80);
G2L["21e"]["Name"] = [[SideOption]];
G2L["21e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Label
G2L["21f"] = Instance.new("TextLabel", G2L["21e"]);
G2L["21f"]["TextWrapped"] = true;
G2L["21f"]["TextStrokeTransparency"] = 0;
G2L["21f"]["BorderSizePixel"] = 0;
G2L["21f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["21f"]["TextSize"] = 10;
G2L["21f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["21f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21f"]["BackgroundTransparency"] = 1;
G2L["21f"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["21f"]["Text"] = [[Side]];
G2L["21f"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown
G2L["220"] = Instance.new("TextButton", G2L["21e"]);
G2L["220"]["TextStrokeTransparency"] = 0.8;
G2L["220"]["BorderSizePixel"] = 0;
G2L["220"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["220"]["TextSize"] = 10;
G2L["220"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["220"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["220"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["220"]["Size"] = UDim2.new(0, 72, 0, 25);
G2L["220"]["BackgroundTransparency"] = 0.3;
G2L["220"]["Name"] = [[Dropdown]];
G2L["220"]["Text"] = [[]];
G2L["220"]["Position"] = UDim2.new(0, 30, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown.Icon
G2L["221"] = Instance.new("ImageLabel", G2L["220"]);
G2L["221"]["ZIndex"] = 3;
G2L["221"]["BorderSizePixel"] = 0;
G2L["221"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["221"]["Image"] = [[rbxassetid://134367382]];
G2L["221"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["221"]["BackgroundTransparency"] = 1;
G2L["221"]["Name"] = [[Icon]];
G2L["221"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown.OptionButton
G2L["222"] = Instance.new("TextButton", G2L["220"]);
G2L["222"]["TextStrokeTransparency"] = 0.8;
G2L["222"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["222"]["TextSize"] = 10;
G2L["222"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["222"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["222"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["222"]["ZIndex"] = 4;
G2L["222"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["222"]["BackgroundTransparency"] = 0.3;
G2L["222"]["Name"] = [[OptionButton]];
G2L["222"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["222"]["Text"] = [[]];
G2L["222"]["Visible"] = false;
G2L["222"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown.OptionButton.OptionLabel
G2L["223"] = Instance.new("TextLabel", G2L["222"]);
G2L["223"]["ZIndex"] = 4;
G2L["223"]["BorderSizePixel"] = 0;
G2L["223"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["223"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["223"]["TextSize"] = 10;
G2L["223"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["223"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["223"]["BackgroundTransparency"] = 1;
G2L["223"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["223"]["Text"] = [[ALL]];
G2L["223"]["Name"] = [[OptionLabel]];
G2L["223"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown.Options
G2L["224"] = Instance.new("Folder", G2L["220"]);
G2L["224"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown.Border
G2L["225"] = Instance.new("Frame", G2L["220"]);
G2L["225"]["BorderSizePixel"] = 0;
G2L["225"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["225"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["225"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["225"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown.CurrentOption
G2L["226"] = Instance.new("TextLabel", G2L["220"]);
G2L["226"]["ZIndex"] = 3;
G2L["226"]["BorderSizePixel"] = 0;
G2L["226"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["226"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["226"]["TextSize"] = 10;
G2L["226"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["226"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["226"]["BackgroundTransparency"] = 1;
G2L["226"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["226"]["Text"] = [[]];
G2L["226"]["Name"] = [[CurrentOption]];
G2L["226"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.SideOption.Dropdown.[Component]
G2L["227"] = Instance.new("ModuleScript", G2L["220"]);
G2L["227"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.RangeOption
G2L["228"] = Instance.new("Frame", G2L["21a"]);
G2L["228"]["BorderSizePixel"] = 0;
G2L["228"]["Size"] = UDim2.new(0, 80, 0, 25);
G2L["228"]["Position"] = UDim2.new(0, 110, 0, 10);
G2L["228"]["Name"] = [[RangeOption]];
G2L["228"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.RangeOption.Input
G2L["229"] = Instance.new("Frame", G2L["228"]);
G2L["229"]["BorderSizePixel"] = 0;
G2L["229"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["229"]["Position"] = UDim2.new(0, 40, 0, 0);
G2L["229"]["Name"] = [[Input]];
G2L["229"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.RangeOption.Input.TextBox
G2L["22a"] = Instance.new("TextBox", G2L["229"]);
G2L["22a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22a"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["22a"]["ZIndex"] = 2;
G2L["22a"]["BorderSizePixel"] = 0;
G2L["22a"]["TextSize"] = 10;
G2L["22a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["22a"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["22a"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["22a"]["Text"] = [[16]];
G2L["22a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.RangeOption.Input.Background
G2L["22b"] = Instance.new("ImageLabel", G2L["229"]);
G2L["22b"]["BorderSizePixel"] = 0;
G2L["22b"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["22b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["22b"]["BackgroundTransparency"] = 1;
G2L["22b"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.RangeOption.Input.SelectedIndicator
G2L["22c"] = Instance.new("Frame", G2L["229"]);
G2L["22c"]["BorderSizePixel"] = 0;
G2L["22c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22c"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["22c"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["22c"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.RangeOption.Label
G2L["22d"] = Instance.new("TextLabel", G2L["228"]);
G2L["22d"]["TextWrapped"] = true;
G2L["22d"]["TextStrokeTransparency"] = 0;
G2L["22d"]["BorderSizePixel"] = 0;
G2L["22d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["22d"]["TextSize"] = 10;
G2L["22d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["22d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22d"]["BackgroundTransparency"] = 1;
G2L["22d"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["22d"]["Text"] = [[Range]];
G2L["22d"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.AngleOption
G2L["22e"] = Instance.new("Frame", G2L["21a"]);
G2L["22e"]["BorderSizePixel"] = 0;
G2L["22e"]["Size"] = UDim2.new(1, -115, 0, 25);
G2L["22e"]["Position"] = UDim2.new(0, 120, 0, 46);
G2L["22e"]["Name"] = [[AngleOption]];
G2L["22e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.AngleOption.Input
G2L["22f"] = Instance.new("Frame", G2L["22e"]);
G2L["22f"]["BorderSizePixel"] = 0;
G2L["22f"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["22f"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["22f"]["Name"] = [[Input]];
G2L["22f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.AngleOption.Input.TextBox
G2L["230"] = Instance.new("TextBox", G2L["22f"]);
G2L["230"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["230"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["230"]["ZIndex"] = 2;
G2L["230"]["BorderSizePixel"] = 0;
G2L["230"]["TextSize"] = 10;
G2L["230"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["230"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["230"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["230"]["Text"] = [[90]];
G2L["230"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.AngleOption.Input.SelectedIndicator
G2L["231"] = Instance.new("Frame", G2L["22f"]);
G2L["231"]["BorderSizePixel"] = 0;
G2L["231"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["231"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["231"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["231"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.AngleOption.Input.Background
G2L["232"] = Instance.new("ImageLabel", G2L["22f"]);
G2L["232"]["BorderSizePixel"] = 0;
G2L["232"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["232"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["232"]["BackgroundTransparency"] = 1;
G2L["232"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.AngleOption.Label
G2L["233"] = Instance.new("TextLabel", G2L["22e"]);
G2L["233"]["TextWrapped"] = true;
G2L["233"]["TextStrokeTransparency"] = 0;
G2L["233"]["BorderSizePixel"] = 0;
G2L["233"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["233"]["TextSize"] = 10;
G2L["233"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["233"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["233"]["BackgroundTransparency"] = 1;
G2L["233"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["233"]["Text"] = [[Angle]];
G2L["233"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.BrightnessOption
G2L["234"] = Instance.new("Frame", G2L["21a"]);
G2L["234"]["BorderSizePixel"] = 0;
G2L["234"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["234"]["Position"] = UDim2.new(0, 0, 0, 45);
G2L["234"]["Name"] = [[BrightnessOption]];
G2L["234"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.BrightnessOption.Input
G2L["235"] = Instance.new("Frame", G2L["234"]);
G2L["235"]["BorderSizePixel"] = 0;
G2L["235"]["Size"] = UDim2.new(0, 38, 0, 25);
G2L["235"]["Position"] = UDim2.new(0, 60, 0, 0);
G2L["235"]["Name"] = [[Input]];
G2L["235"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.BrightnessOption.Input.TextBox
G2L["236"] = Instance.new("TextBox", G2L["235"]);
G2L["236"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["236"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["236"]["ZIndex"] = 2;
G2L["236"]["BorderSizePixel"] = 0;
G2L["236"]["TextSize"] = 10;
G2L["236"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["236"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["236"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["236"]["Text"] = [[1]];
G2L["236"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.BrightnessOption.Input.Background
G2L["237"] = Instance.new("ImageLabel", G2L["235"]);
G2L["237"]["BorderSizePixel"] = 0;
G2L["237"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["237"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["237"]["BackgroundTransparency"] = 1;
G2L["237"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.BrightnessOption.Input.SelectedIndicator
G2L["238"] = Instance.new("Frame", G2L["235"]);
G2L["238"]["BorderSizePixel"] = 0;
G2L["238"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["238"]["Size"] = UDim2.new(1, -3, 0, 2);
G2L["238"]["Position"] = UDim2.new(0, 3, 0, -2);
G2L["238"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.BrightnessOption.Label
G2L["239"] = Instance.new("TextLabel", G2L["234"]);
G2L["239"]["TextWrapped"] = true;
G2L["239"]["TextStrokeTransparency"] = 0;
G2L["239"]["BorderSizePixel"] = 0;
G2L["239"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["239"]["TextSize"] = 10;
G2L["239"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["239"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["239"]["BackgroundTransparency"] = 1;
G2L["239"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["239"]["Text"] = [[Brightness]];
G2L["239"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ColorOption
G2L["23a"] = Instance.new("Frame", G2L["21a"]);
G2L["23a"]["BorderSizePixel"] = 0;
G2L["23a"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["23a"]["Position"] = UDim2.new(0, 0, 0, 10);
G2L["23a"]["Name"] = [[ColorOption]];
G2L["23a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ColorOption.HSVPicker
G2L["23b"] = Instance.new("ImageButton", G2L["23a"]);
G2L["23b"]["BorderSizePixel"] = 0;
G2L["23b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23b"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["23b"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["23b"]["BackgroundTransparency"] = 0.4;
G2L["23b"]["Name"] = [[HSVPicker]];
G2L["23b"]["Position"] = UDim2.new(0, 60, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ColorOption.HSVPicker.Shadow
G2L["23c"] = Instance.new("Frame", G2L["23b"]);
G2L["23c"]["BorderSizePixel"] = 0;
G2L["23c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23c"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["23c"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["23c"]["Name"] = [[Shadow]];
G2L["23c"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ColorOption.Label
G2L["23d"] = Instance.new("TextLabel", G2L["23a"]);
G2L["23d"]["TextWrapped"] = true;
G2L["23d"]["TextStrokeTransparency"] = 0;
G2L["23d"]["BorderSizePixel"] = 0;
G2L["23d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["23d"]["TextSize"] = 10;
G2L["23d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["23d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["23d"]["BackgroundTransparency"] = 1;
G2L["23d"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["23d"]["Text"] = [[Color]];
G2L["23d"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ColorOption.Indicator
G2L["23e"] = Instance.new("Frame", G2L["23a"]);
G2L["23e"]["BorderSizePixel"] = 0;
G2L["23e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["23e"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["23e"]["Position"] = UDim2.new(0, 35, 0, 0);
G2L["23e"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ColorOption.Indicator.Shadow
G2L["23f"] = Instance.new("Frame", G2L["23e"]);
G2L["23f"]["BorderSizePixel"] = 0;
G2L["23f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23f"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["23f"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["23f"]["Name"] = [[Shadow]];
G2L["23f"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTLightingToolGUI.SurfaceLight.Options.ColorOption.Indicator.Varies
G2L["240"] = Instance.new("TextLabel", G2L["23e"]);
G2L["240"]["TextWrapped"] = true;
G2L["240"]["TextStrokeTransparency"] = 0.75;
G2L["240"]["BorderSizePixel"] = 0;
G2L["240"]["TextScaled"] = true;
G2L["240"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["240"]["TextSize"] = 14;
G2L["240"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["240"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["240"]["BackgroundTransparency"] = 1;
G2L["240"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["240"]["Text"] = [[]];
G2L["240"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI
G2L["241"] = Instance.new("Frame", G2L["77"]);
G2L["241"]["Active"] = true;
G2L["241"]["BorderSizePixel"] = 0;
G2L["241"]["Size"] = UDim2.new(0, 200, 0, 145);
G2L["241"]["Position"] = UDim2.new(0, 0, 0.4, 0);
G2L["241"]["Name"] = [[BTMaterialToolGUI]];
G2L["241"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.Title
G2L["242"] = Instance.new("Frame", G2L["241"]);
G2L["242"]["BorderSizePixel"] = 0;
G2L["242"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["242"]["Name"] = [[Title]];
G2L["242"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.Title.ColorBar
G2L["243"] = Instance.new("Frame", G2L["242"]);
G2L["243"]["BorderSizePixel"] = 0;
G2L["243"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["243"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["243"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["243"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.Title.Label
G2L["244"] = Instance.new("TextLabel", G2L["242"]);
G2L["244"]["TextWrapped"] = true;
G2L["244"]["TextStrokeTransparency"] = 0;
G2L["244"]["BorderSizePixel"] = 0;
G2L["244"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["244"]["TextSize"] = 10;
G2L["244"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["244"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["244"]["BackgroundTransparency"] = 1;
G2L["244"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["244"]["Text"] = [[MATERIAL TOOL]];
G2L["244"]["Name"] = [[Label]];
G2L["244"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.Title.F3XSignature
G2L["245"] = Instance.new("TextLabel", G2L["242"]);
G2L["245"]["TextWrapped"] = true;
G2L["245"]["TextStrokeTransparency"] = 0.9;
G2L["245"]["BorderSizePixel"] = 0;
G2L["245"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["245"]["TextSize"] = 14;
G2L["245"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["245"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["245"]["BackgroundTransparency"] = 1;
G2L["245"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["245"]["Text"] = [[F3X]];
G2L["245"]["Name"] = [[F3XSignature]];
G2L["245"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption
G2L["246"] = Instance.new("Frame", G2L["241"]);
G2L["246"]["BorderSizePixel"] = 0;
G2L["246"]["Size"] = UDim2.new(1, -14, 0, 25);
G2L["246"]["Position"] = UDim2.new(0, 14, 0, 30);
G2L["246"]["Name"] = [[MaterialOption]];
G2L["246"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Label
G2L["247"] = Instance.new("TextLabel", G2L["246"]);
G2L["247"]["TextWrapped"] = true;
G2L["247"]["TextStrokeTransparency"] = 0;
G2L["247"]["BorderSizePixel"] = 0;
G2L["247"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["247"]["TextSize"] = 10;
G2L["247"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["247"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["247"]["BackgroundTransparency"] = 1;
G2L["247"]["Size"] = UDim2.new(0, 40, 0, 25);
G2L["247"]["Text"] = [[Material]];
G2L["247"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown
G2L["248"] = Instance.new("TextButton", G2L["246"]);
G2L["248"]["TextStrokeTransparency"] = 0.8;
G2L["248"]["BorderSizePixel"] = 0;
G2L["248"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["248"]["TextSize"] = 10;
G2L["248"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["248"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["248"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["248"]["Size"] = UDim2.new(0, 130, 0, 25);
G2L["248"]["BackgroundTransparency"] = 0.3;
G2L["248"]["Name"] = [[Dropdown]];
G2L["248"]["Text"] = [[]];
G2L["248"]["Position"] = UDim2.new(0, 50, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown.Icon
G2L["249"] = Instance.new("ImageLabel", G2L["248"]);
G2L["249"]["ZIndex"] = 3;
G2L["249"]["BorderSizePixel"] = 0;
G2L["249"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["249"]["Image"] = [[rbxassetid://134367382]];
G2L["249"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["249"]["BackgroundTransparency"] = 1;
G2L["249"]["Name"] = [[Icon]];
G2L["249"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown.OptionButton
G2L["24a"] = Instance.new("TextButton", G2L["248"]);
G2L["24a"]["TextStrokeTransparency"] = 0.8;
G2L["24a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["24a"]["TextSize"] = 10;
G2L["24a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["24a"]["ZIndex"] = 4;
G2L["24a"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["24a"]["BackgroundTransparency"] = 0.3;
G2L["24a"]["Name"] = [[OptionButton]];
G2L["24a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24a"]["Text"] = [[]];
G2L["24a"]["Visible"] = false;
G2L["24a"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown.OptionButton.OptionLabel
G2L["24b"] = Instance.new("TextLabel", G2L["24a"]);
G2L["24b"]["ZIndex"] = 4;
G2L["24b"]["BorderSizePixel"] = 0;
G2L["24b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["24b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24b"]["TextSize"] = 10;
G2L["24b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["24b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24b"]["BackgroundTransparency"] = 1;
G2L["24b"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["24b"]["Text"] = [[ALL]];
G2L["24b"]["Name"] = [[OptionLabel]];
G2L["24b"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown.Options
G2L["24c"] = Instance.new("Folder", G2L["248"]);
G2L["24c"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown.Border
G2L["24d"] = Instance.new("Frame", G2L["248"]);
G2L["24d"]["BorderSizePixel"] = 0;
G2L["24d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24d"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["24d"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["24d"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown.CurrentOption
G2L["24e"] = Instance.new("TextLabel", G2L["248"]);
G2L["24e"]["ZIndex"] = 3;
G2L["24e"]["BorderSizePixel"] = 0;
G2L["24e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["24e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24e"]["TextSize"] = 10;
G2L["24e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["24e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24e"]["BackgroundTransparency"] = 1;
G2L["24e"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["24e"]["Text"] = [[]];
G2L["24e"]["Name"] = [[CurrentOption]];
G2L["24e"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.MaterialOption.Dropdown.[Component]
G2L["24f"] = Instance.new("ModuleScript", G2L["248"]);
G2L["24f"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.TransparencyOption
G2L["250"] = Instance.new("Frame", G2L["241"]);
G2L["250"]["BorderSizePixel"] = 0;
G2L["250"]["Size"] = UDim2.new(1, 0, 0, 24);
G2L["250"]["Position"] = UDim2.new(0, 0, 0, 65);
G2L["250"]["Name"] = [[TransparencyOption]];
G2L["250"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.TransparencyOption.Label
G2L["251"] = Instance.new("TextLabel", G2L["250"]);
G2L["251"]["TextWrapped"] = true;
G2L["251"]["TextStrokeTransparency"] = 0;
G2L["251"]["BorderSizePixel"] = 0;
G2L["251"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["251"]["TextSize"] = 10;
G2L["251"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["251"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["251"]["BackgroundTransparency"] = 1;
G2L["251"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["251"]["Text"] = [[Transparency]];
G2L["251"]["Name"] = [[Label]];
G2L["251"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.TransparencyOption.Input
G2L["252"] = Instance.new("Frame", G2L["250"]);
G2L["252"]["BorderSizePixel"] = 0;
G2L["252"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["252"]["Position"] = UDim2.new(0, 90, 0, 0);
G2L["252"]["Name"] = [[Input]];
G2L["252"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.TransparencyOption.Input.Background
G2L["253"] = Instance.new("ImageLabel", G2L["252"]);
G2L["253"]["BorderSizePixel"] = 0;
G2L["253"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["253"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["253"]["BackgroundTransparency"] = 1;
G2L["253"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.TransparencyOption.Input.SelectedIndicator
G2L["254"] = Instance.new("Frame", G2L["252"]);
G2L["254"]["BorderSizePixel"] = 0;
G2L["254"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["254"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["254"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["254"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.TransparencyOption.Input.TextBox
G2L["255"] = Instance.new("TextBox", G2L["252"]);
G2L["255"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["255"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["255"]["BorderSizePixel"] = 0;
G2L["255"]["TextSize"] = 10;
G2L["255"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["255"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["255"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["255"]["Text"] = [[]];
G2L["255"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.ReflectanceOption
G2L["256"] = Instance.new("Frame", G2L["241"]);
G2L["256"]["BorderSizePixel"] = 0;
G2L["256"]["Size"] = UDim2.new(1, 0, 0, 24);
G2L["256"]["Position"] = UDim2.new(0, 0, 0, 100);
G2L["256"]["Name"] = [[ReflectanceOption]];
G2L["256"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.ReflectanceOption.Label
G2L["257"] = Instance.new("TextLabel", G2L["256"]);
G2L["257"]["TextWrapped"] = true;
G2L["257"]["TextStrokeTransparency"] = 0;
G2L["257"]["BorderSizePixel"] = 0;
G2L["257"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["257"]["TextSize"] = 10;
G2L["257"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["257"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["257"]["BackgroundTransparency"] = 1;
G2L["257"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["257"]["Text"] = [[Reflectance]];
G2L["257"]["Name"] = [[Label]];
G2L["257"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.ReflectanceOption.Input
G2L["258"] = Instance.new("Frame", G2L["256"]);
G2L["258"]["BorderSizePixel"] = 0;
G2L["258"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["258"]["Position"] = UDim2.new(0, 85, 0, 0);
G2L["258"]["Name"] = [[Input]];
G2L["258"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.ReflectanceOption.Input.SelectedIndicator
G2L["259"] = Instance.new("Frame", G2L["258"]);
G2L["259"]["BorderSizePixel"] = 0;
G2L["259"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["259"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["259"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["259"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.ReflectanceOption.Input.Background
G2L["25a"] = Instance.new("ImageLabel", G2L["258"]);
G2L["25a"]["BorderSizePixel"] = 0;
G2L["25a"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["25a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["25a"]["BackgroundTransparency"] = 1;
G2L["25a"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.ReflectanceOption.Input.TextBox
G2L["25b"] = Instance.new("TextBox", G2L["258"]);
G2L["25b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["25b"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["25b"]["BorderSizePixel"] = 0;
G2L["25b"]["TextSize"] = 10;
G2L["25b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["25b"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["25b"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["25b"]["Text"] = [[]];
G2L["25b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.Bottom
G2L["25c"] = Instance.new("Frame", G2L["241"]);
G2L["25c"]["BorderSizePixel"] = 0;
G2L["25c"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["25c"]["Position"] = UDim2.new(0, 5, 1, -10);
G2L["25c"]["Name"] = [[Bottom]];
G2L["25c"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.Bottom.ColorBar
G2L["25d"] = Instance.new("Frame", G2L["25c"]);
G2L["25d"]["BorderSizePixel"] = 0;
G2L["25d"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["25d"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["25d"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMaterialToolGUI.SelectNote
G2L["25e"] = Instance.new("TextLabel", G2L["241"]);
G2L["25e"]["TextWrapped"] = true;
G2L["25e"]["TextStrokeTransparency"] = 0.5;
G2L["25e"]["BorderSizePixel"] = 0;
G2L["25e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["25e"]["TextScaled"] = true;
G2L["25e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["25e"]["TextSize"] = 14;
G2L["25e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["25e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["25e"]["BackgroundTransparency"] = 1;
G2L["25e"]["Size"] = UDim2.new(1, -10, 0, 15);
G2L["25e"]["Visible"] = false;
G2L["25e"]["Text"] = [[Select something to use this tool.]];
G2L["25e"]["Name"] = [[SelectNote]];
G2L["25e"]["Position"] = UDim2.new(0, 10, 0, 27);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI
G2L["25f"] = Instance.new("Frame", G2L["77"]);
G2L["25f"]["Active"] = true;
G2L["25f"]["BorderSizePixel"] = 0;
G2L["25f"]["Size"] = UDim2.new(0, 200, 0, 55);
G2L["25f"]["Position"] = UDim2.new(0, 0, 0.4, 0);
G2L["25f"]["Name"] = [[BTMeshToolGUI]];
G2L["25f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.Title
G2L["260"] = Instance.new("Frame", G2L["25f"]);
G2L["260"]["BorderSizePixel"] = 0;
G2L["260"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["260"]["Name"] = [[Title]];
G2L["260"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.Title.ColorBar
G2L["261"] = Instance.new("Frame", G2L["260"]);
G2L["261"]["BorderSizePixel"] = 0;
G2L["261"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["261"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["261"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["261"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.Title.Label
G2L["262"] = Instance.new("TextLabel", G2L["260"]);
G2L["262"]["TextWrapped"] = true;
G2L["262"]["TextStrokeTransparency"] = 0;
G2L["262"]["BorderSizePixel"] = 0;
G2L["262"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["262"]["TextSize"] = 10;
G2L["262"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["262"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["262"]["BackgroundTransparency"] = 1;
G2L["262"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["262"]["Text"] = [[MESH TOOL]];
G2L["262"]["Name"] = [[Label]];
G2L["262"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.Title.F3XSignature
G2L["263"] = Instance.new("TextLabel", G2L["260"]);
G2L["263"]["TextWrapped"] = true;
G2L["263"]["TextStrokeTransparency"] = 0.9;
G2L["263"]["BorderSizePixel"] = 0;
G2L["263"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["263"]["TextSize"] = 14;
G2L["263"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["263"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["263"]["BackgroundTransparency"] = 1;
G2L["263"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["263"]["Text"] = [[F3X]];
G2L["263"]["Name"] = [[F3XSignature]];
G2L["263"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption
G2L["264"] = Instance.new("Frame", G2L["25f"]);
G2L["264"]["Visible"] = false;
G2L["264"]["BorderSizePixel"] = 0;
G2L["264"]["Size"] = UDim2.new(1, -14, 0, 25);
G2L["264"]["Position"] = UDim2.new(0, 14, 0, 65);
G2L["264"]["Name"] = [[TypeOption]];
G2L["264"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Label
G2L["265"] = Instance.new("TextLabel", G2L["264"]);
G2L["265"]["TextWrapped"] = true;
G2L["265"]["TextStrokeTransparency"] = 0;
G2L["265"]["BorderSizePixel"] = 0;
G2L["265"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["265"]["TextSize"] = 10;
G2L["265"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["265"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["265"]["BackgroundTransparency"] = 1;
G2L["265"]["Size"] = UDim2.new(0, 30, 0, 25);
G2L["265"]["Text"] = [[Type]];
G2L["265"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown
G2L["266"] = Instance.new("TextButton", G2L["264"]);
G2L["266"]["TextStrokeTransparency"] = 0.8;
G2L["266"]["BorderSizePixel"] = 0;
G2L["266"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["266"]["TextSize"] = 10;
G2L["266"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["266"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["266"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["266"]["Size"] = UDim2.new(1, -40, 0, 25);
G2L["266"]["BackgroundTransparency"] = 0.3;
G2L["266"]["Name"] = [[Dropdown]];
G2L["266"]["Text"] = [[]];
G2L["266"]["Position"] = UDim2.new(0, 40, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown.Icon
G2L["267"] = Instance.new("ImageLabel", G2L["266"]);
G2L["267"]["ZIndex"] = 3;
G2L["267"]["BorderSizePixel"] = 0;
G2L["267"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["267"]["Image"] = [[rbxassetid://134367382]];
G2L["267"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["267"]["BackgroundTransparency"] = 1;
G2L["267"]["Name"] = [[Icon]];
G2L["267"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown.OptionButton
G2L["268"] = Instance.new("TextButton", G2L["266"]);
G2L["268"]["TextStrokeTransparency"] = 0.8;
G2L["268"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["268"]["TextSize"] = 10;
G2L["268"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["268"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["268"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["268"]["ZIndex"] = 4;
G2L["268"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["268"]["BackgroundTransparency"] = 0.3;
G2L["268"]["Name"] = [[OptionButton]];
G2L["268"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["268"]["Text"] = [[]];
G2L["268"]["Visible"] = false;
G2L["268"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown.OptionButton.OptionLabel
G2L["269"] = Instance.new("TextLabel", G2L["268"]);
G2L["269"]["ZIndex"] = 4;
G2L["269"]["BorderSizePixel"] = 0;
G2L["269"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["269"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["269"]["TextSize"] = 10;
G2L["269"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["269"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["269"]["BackgroundTransparency"] = 1;
G2L["269"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["269"]["Text"] = [[ALL]];
G2L["269"]["Name"] = [[OptionLabel]];
G2L["269"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown.Options
G2L["26a"] = Instance.new("Folder", G2L["266"]);
G2L["26a"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown.Border
G2L["26b"] = Instance.new("Frame", G2L["266"]);
G2L["26b"]["BorderSizePixel"] = 0;
G2L["26b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["26b"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["26b"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["26b"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown.CurrentOption
G2L["26c"] = Instance.new("TextLabel", G2L["266"]);
G2L["26c"]["ZIndex"] = 3;
G2L["26c"]["BorderSizePixel"] = 0;
G2L["26c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["26c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["26c"]["TextSize"] = 10;
G2L["26c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["26c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["26c"]["BackgroundTransparency"] = 1;
G2L["26c"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["26c"]["Text"] = [[]];
G2L["26c"]["Name"] = [[CurrentOption]];
G2L["26c"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TypeOption.Dropdown.[Component]
G2L["26d"] = Instance.new("ModuleScript", G2L["266"]);
G2L["26d"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption
G2L["26e"] = Instance.new("Frame", G2L["25f"]);
G2L["26e"]["Visible"] = false;
G2L["26e"]["BorderSizePixel"] = 0;
G2L["26e"]["Size"] = UDim2.new(0, 200, 0, 25);
G2L["26e"]["Position"] = UDim2.new(0, 0, 0, 100);
G2L["26e"]["Name"] = [[ScaleOption]];
G2L["26e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.Label
G2L["26f"] = Instance.new("TextLabel", G2L["26e"]);
G2L["26f"]["TextWrapped"] = true;
G2L["26f"]["TextStrokeTransparency"] = 0;
G2L["26f"]["BorderSizePixel"] = 0;
G2L["26f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["26f"]["TextSize"] = 10;
G2L["26f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["26f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["26f"]["BackgroundTransparency"] = 1;
G2L["26f"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["26f"]["Text"] = [[Scale]];
G2L["26f"]["Name"] = [[Label]];
G2L["26f"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.XInput
G2L["270"] = Instance.new("Frame", G2L["26e"]);
G2L["270"]["BorderSizePixel"] = 0;
G2L["270"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["270"]["Position"] = UDim2.new(0, 55, 0, 0);
G2L["270"]["Name"] = [[XInput]];
G2L["270"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.XInput.Background
G2L["271"] = Instance.new("ImageLabel", G2L["270"]);
G2L["271"]["BorderSizePixel"] = 0;
G2L["271"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["271"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["271"]["BackgroundTransparency"] = 1;
G2L["271"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.XInput.SelectedIndicator
G2L["272"] = Instance.new("Frame", G2L["270"]);
G2L["272"]["BorderSizePixel"] = 0;
G2L["272"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["272"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["272"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["272"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.XInput.TextBox
G2L["273"] = Instance.new("TextBox", G2L["270"]);
G2L["273"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["273"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["273"]["BorderSizePixel"] = 0;
G2L["273"]["TextSize"] = 10;
G2L["273"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["273"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["273"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["273"]["Text"] = [[1]];
G2L["273"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.YInput
G2L["274"] = Instance.new("Frame", G2L["26e"]);
G2L["274"]["BorderSizePixel"] = 0;
G2L["274"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["274"]["Position"] = UDim2.new(0, 100, 0, 0);
G2L["274"]["Name"] = [[YInput]];
G2L["274"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.YInput.Background
G2L["275"] = Instance.new("ImageLabel", G2L["274"]);
G2L["275"]["BorderSizePixel"] = 0;
G2L["275"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["275"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["275"]["BackgroundTransparency"] = 1;
G2L["275"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.YInput.SelectedIndicator
G2L["276"] = Instance.new("Frame", G2L["274"]);
G2L["276"]["BorderSizePixel"] = 0;
G2L["276"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["276"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["276"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["276"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.YInput.TextBox
G2L["277"] = Instance.new("TextBox", G2L["274"]);
G2L["277"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["277"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["277"]["BorderSizePixel"] = 0;
G2L["277"]["TextSize"] = 10;
G2L["277"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["277"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["277"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["277"]["Text"] = [[1]];
G2L["277"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.ZInput
G2L["278"] = Instance.new("Frame", G2L["26e"]);
G2L["278"]["BorderSizePixel"] = 0;
G2L["278"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["278"]["Position"] = UDim2.new(0, 145, 0, 0);
G2L["278"]["Name"] = [[ZInput]];
G2L["278"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.ZInput.Background
G2L["279"] = Instance.new("ImageLabel", G2L["278"]);
G2L["279"]["BorderSizePixel"] = 0;
G2L["279"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["279"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["279"]["BackgroundTransparency"] = 1;
G2L["279"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.ZInput.SelectedIndicator
G2L["27a"] = Instance.new("Frame", G2L["278"]);
G2L["27a"]["BorderSizePixel"] = 0;
G2L["27a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27a"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["27a"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["27a"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.ScaleOption.ZInput.TextBox
G2L["27b"] = Instance.new("TextBox", G2L["278"]);
G2L["27b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27b"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["27b"]["BorderSizePixel"] = 0;
G2L["27b"]["TextSize"] = 10;
G2L["27b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["27b"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["27b"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["27b"]["Text"] = [[1]];
G2L["27b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.AddButton
G2L["27c"] = Instance.new("Frame", G2L["25f"]);
G2L["27c"]["Visible"] = false;
G2L["27c"]["BorderSizePixel"] = 0;
G2L["27c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27c"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["27c"]["Position"] = UDim2.new(0, 10, 0, 30);
G2L["27c"]["Name"] = [[AddButton]];
G2L["27c"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.AddButton.Button
G2L["27d"] = Instance.new("TextButton", G2L["27c"]);
G2L["27d"]["TextStrokeTransparency"] = 0.8;
G2L["27d"]["BorderSizePixel"] = 0;
G2L["27d"]["TextSize"] = 10;
G2L["27d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["27d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["27d"]["BackgroundTransparency"] = 0.45;
G2L["27d"]["Name"] = [[Button]];
G2L["27d"]["Text"] = [[ADD MESH]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.AddButton.Shadow
G2L["27e"] = Instance.new("Frame", G2L["27c"]);
G2L["27e"]["ZIndex"] = 2;
G2L["27e"]["BorderSizePixel"] = 0;
G2L["27e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27e"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["27e"]["Position"] = UDim2.new(0, 0, 1, 0);
G2L["27e"]["Name"] = [[Shadow]];
G2L["27e"]["BackgroundTransparency"] = 0.3;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption
G2L["27f"] = Instance.new("Frame", G2L["25f"]);
G2L["27f"]["Visible"] = false;
G2L["27f"]["BorderSizePixel"] = 0;
G2L["27f"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["27f"]["Position"] = UDim2.new(0, 14, 0, 135);
G2L["27f"]["Name"] = [[MeshIdOption]];
G2L["27f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption.Label
G2L["280"] = Instance.new("TextLabel", G2L["27f"]);
G2L["280"]["TextWrapped"] = true;
G2L["280"]["TextStrokeTransparency"] = 0;
G2L["280"]["BorderSizePixel"] = 0;
G2L["280"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["280"]["TextSize"] = 10;
G2L["280"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["280"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["280"]["BackgroundTransparency"] = 1;
G2L["280"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["280"]["Text"] = [[Mesh ID]];
G2L["280"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption.TextBox
G2L["281"] = Instance.new("TextBox", G2L["27f"]);
G2L["281"]["TextStrokeTransparency"] = 0.5;
G2L["281"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["281"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["281"]["BorderSizePixel"] = 0;
G2L["281"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["281"]["TextWrapped"] = true;
G2L["281"]["TextSize"] = 10;
G2L["281"]["TextScaled"] = true;
G2L["281"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["281"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["281"]["Size"] = UDim2.new(0, 80, 0, 18);
G2L["281"]["Position"] = UDim2.new(0, 60, 0, -1);
G2L["281"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["281"]["Text"] = [[]];
G2L["281"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption.TextBoxBorder
G2L["282"] = Instance.new("Frame", G2L["27f"]);
G2L["282"]["BorderSizePixel"] = 0;
G2L["282"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["282"]["Size"] = UDim2.new(0, 85, 0, 3);
G2L["282"]["Position"] = UDim2.new(0, 56, 0, 17);
G2L["282"]["Name"] = [[TextBoxBorder]];
G2L["282"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption.TextBoxBorder.BottomBorder
G2L["283"] = Instance.new("Frame", G2L["282"]);
G2L["283"]["BorderSizePixel"] = 0;
G2L["283"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["283"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["283"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["283"]["Name"] = [[BottomBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption.TextBoxBorder.LeftBorder
G2L["284"] = Instance.new("Frame", G2L["282"]);
G2L["284"]["BorderSizePixel"] = 0;
G2L["284"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["284"]["Size"] = UDim2.new(0, 1, 1, 0);
G2L["284"]["Name"] = [[LeftBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption.TextBoxBorder.RightBorder
G2L["285"] = Instance.new("Frame", G2L["282"]);
G2L["285"]["BorderSizePixel"] = 0;
G2L["285"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["285"]["Size"] = UDim2.new(0, 1, 1, 0);
G2L["285"]["Position"] = UDim2.new(1, -1, 0, 0);
G2L["285"]["Name"] = [[RightBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.MeshIdOption.TextBoxBackground
G2L["286"] = Instance.new("Frame", G2L["27f"]);
G2L["286"]["BorderSizePixel"] = 0;
G2L["286"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["286"]["Size"] = UDim2.new(0, 86, 0, 22);
G2L["286"]["Position"] = UDim2.new(0, 55, 0, -2);
G2L["286"]["Name"] = [[TextBoxBackground]];
G2L["286"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.BottomColorBar
G2L["287"] = Instance.new("Frame", G2L["25f"]);
G2L["287"]["BorderSizePixel"] = 0;
G2L["287"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["287"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["287"]["Position"] = UDim2.new(0, 5, 1, -2);
G2L["287"]["Name"] = [[BottomColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption
G2L["288"] = Instance.new("Frame", G2L["25f"]);
G2L["288"]["Visible"] = false;
G2L["288"]["BorderSizePixel"] = 0;
G2L["288"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["288"]["Position"] = UDim2.new(0, 14, 0, 165);
G2L["288"]["Name"] = [[TextureIdOption]];
G2L["288"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption.Label
G2L["289"] = Instance.new("TextLabel", G2L["288"]);
G2L["289"]["TextWrapped"] = true;
G2L["289"]["TextStrokeTransparency"] = 0;
G2L["289"]["BorderSizePixel"] = 0;
G2L["289"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["289"]["TextSize"] = 10;
G2L["289"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["289"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["289"]["BackgroundTransparency"] = 1;
G2L["289"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["289"]["Text"] = [[Texture ID]];
G2L["289"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption.TextBox
G2L["28a"] = Instance.new("TextBox", G2L["288"]);
G2L["28a"]["TextStrokeTransparency"] = 0.5;
G2L["28a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["28a"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["28a"]["BorderSizePixel"] = 0;
G2L["28a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["28a"]["TextWrapped"] = true;
G2L["28a"]["TextSize"] = 10;
G2L["28a"]["TextScaled"] = true;
G2L["28a"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["28a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["28a"]["Size"] = UDim2.new(0, 80, 0, 18);
G2L["28a"]["Position"] = UDim2.new(0, 65, 0, -1);
G2L["28a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28a"]["Text"] = [[]];
G2L["28a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption.TextBoxBorder
G2L["28b"] = Instance.new("Frame", G2L["288"]);
G2L["28b"]["BorderSizePixel"] = 0;
G2L["28b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["28b"]["Size"] = UDim2.new(0, 85, 0, 3);
G2L["28b"]["Position"] = UDim2.new(0, 61, 0, 17);
G2L["28b"]["Name"] = [[TextBoxBorder]];
G2L["28b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption.TextBoxBorder.BottomBorder
G2L["28c"] = Instance.new("Frame", G2L["28b"]);
G2L["28c"]["BorderSizePixel"] = 0;
G2L["28c"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["28c"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["28c"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["28c"]["Name"] = [[BottomBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption.TextBoxBorder.LeftBorder
G2L["28d"] = Instance.new("Frame", G2L["28b"]);
G2L["28d"]["BorderSizePixel"] = 0;
G2L["28d"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["28d"]["Size"] = UDim2.new(0, 1, 1, 0);
G2L["28d"]["Name"] = [[LeftBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption.TextBoxBorder.RightBorder
G2L["28e"] = Instance.new("Frame", G2L["28b"]);
G2L["28e"]["BorderSizePixel"] = 0;
G2L["28e"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["28e"]["Size"] = UDim2.new(0, 1, 1, 0);
G2L["28e"]["Position"] = UDim2.new(1, -1, 0, 0);
G2L["28e"]["Name"] = [[RightBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TextureIdOption.TextBoxBackground
G2L["28f"] = Instance.new("Frame", G2L["288"]);
G2L["28f"]["BorderSizePixel"] = 0;
G2L["28f"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["28f"]["Size"] = UDim2.new(0, 86, 0, 22);
G2L["28f"]["Position"] = UDim2.new(0, 60, 0, -2);
G2L["28f"]["Name"] = [[TextBoxBackground]];
G2L["28f"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.RemoveButton
G2L["290"] = Instance.new("Frame", G2L["25f"]);
G2L["290"]["Visible"] = false;
G2L["290"]["BorderSizePixel"] = 0;
G2L["290"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["290"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["290"]["Position"] = UDim2.new(0, 10, 1, -30);
G2L["290"]["Name"] = [[RemoveButton]];
G2L["290"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.RemoveButton.Button
G2L["291"] = Instance.new("TextButton", G2L["290"]);
G2L["291"]["TextStrokeTransparency"] = 0.8;
G2L["291"]["BorderSizePixel"] = 0;
G2L["291"]["TextSize"] = 10;
G2L["291"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["291"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["291"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["291"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["291"]["BackgroundTransparency"] = 0.45;
G2L["291"]["Name"] = [[Button]];
G2L["291"]["Text"] = [[REMOVE MESH]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.RemoveButton.Shadow
G2L["292"] = Instance.new("Frame", G2L["290"]);
G2L["292"]["ZIndex"] = 2;
G2L["292"]["BorderSizePixel"] = 0;
G2L["292"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["292"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["292"]["Position"] = UDim2.new(0, 0, 1, 0);
G2L["292"]["Name"] = [[Shadow]];
G2L["292"]["BackgroundTransparency"] = 0.3;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TintOption
G2L["293"] = Instance.new("Frame", G2L["25f"]);
G2L["293"]["Visible"] = false;
G2L["293"]["BorderSizePixel"] = 0;
G2L["293"]["Size"] = UDim2.new(0, 100, 0, 24);
G2L["293"]["Position"] = UDim2.new(0, 0, 0, 200);
G2L["293"]["Name"] = [[TintOption]];
G2L["293"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TintOption.Label
G2L["294"] = Instance.new("TextLabel", G2L["293"]);
G2L["294"]["TextWrapped"] = true;
G2L["294"]["TextStrokeTransparency"] = 0;
G2L["294"]["BorderSizePixel"] = 0;
G2L["294"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["294"]["TextSize"] = 10;
G2L["294"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["294"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["294"]["BackgroundTransparency"] = 1;
G2L["294"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["294"]["Text"] = [[Tint]];
G2L["294"]["Name"] = [[Label]];
G2L["294"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TintOption.Indicator
G2L["295"] = Instance.new("Frame", G2L["293"]);
G2L["295"]["BorderSizePixel"] = 0;
G2L["295"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["295"]["Size"] = UDim2.new(0, 22, 0, 24);
G2L["295"]["Position"] = UDim2.new(0, 45, 0, 0);
G2L["295"]["Name"] = [[Indicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TintOption.Indicator.Shadow
G2L["296"] = Instance.new("Frame", G2L["295"]);
G2L["296"]["BorderSizePixel"] = 0;
G2L["296"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["296"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["296"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["296"]["Name"] = [[Shadow]];
G2L["296"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TintOption.Indicator.Varies
G2L["297"] = Instance.new("TextLabel", G2L["295"]);
G2L["297"]["TextWrapped"] = true;
G2L["297"]["TextStrokeTransparency"] = 0.75;
G2L["297"]["BorderSizePixel"] = 0;
G2L["297"]["TextScaled"] = true;
G2L["297"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["297"]["TextSize"] = 14;
G2L["297"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["297"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["297"]["BackgroundTransparency"] = 1;
G2L["297"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["297"]["Text"] = [[]];
G2L["297"]["Name"] = [[Varies]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TintOption.HSVPicker
G2L["298"] = Instance.new("ImageButton", G2L["293"]);
G2L["298"]["BorderSizePixel"] = 0;
G2L["298"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["298"]["Image"] = [[http://www.roblox.com/asset/?id=141313631]];
G2L["298"]["Size"] = UDim2.new(0, 24, 0, 24);
G2L["298"]["BackgroundTransparency"] = 0.4;
G2L["298"]["Name"] = [[HSVPicker]];
G2L["298"]["Position"] = UDim2.new(0, 70, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.TintOption.HSVPicker.Shadow
G2L["299"] = Instance.new("Frame", G2L["298"]);
G2L["299"]["BorderSizePixel"] = 0;
G2L["299"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["299"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["299"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["299"]["Name"] = [[Shadow]];
G2L["299"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.SelectNote
G2L["29a"] = Instance.new("TextLabel", G2L["25f"]);
G2L["29a"]["TextWrapped"] = true;
G2L["29a"]["TextStrokeTransparency"] = 0.5;
G2L["29a"]["BorderSizePixel"] = 0;
G2L["29a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["29a"]["TextScaled"] = true;
G2L["29a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["29a"]["TextSize"] = 14;
G2L["29a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["29a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["29a"]["BackgroundTransparency"] = 1;
G2L["29a"]["Size"] = UDim2.new(1, -10, 0, 15);
G2L["29a"]["Visible"] = false;
G2L["29a"]["Text"] = [[Select something to use this tool.]];
G2L["29a"]["Name"] = [[SelectNote]];
G2L["29a"]["Position"] = UDim2.new(0, 10, 0, 27);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption
G2L["29b"] = Instance.new("Frame", G2L["25f"]);
G2L["29b"]["Visible"] = false;
G2L["29b"]["BorderSizePixel"] = 0;
G2L["29b"]["Size"] = UDim2.new(0, 200, 0, 25);
G2L["29b"]["Position"] = UDim2.new(0, 0, 0, 100);
G2L["29b"]["Name"] = [[OffsetOption]];
G2L["29b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.Label
G2L["29c"] = Instance.new("TextLabel", G2L["29b"]);
G2L["29c"]["TextWrapped"] = true;
G2L["29c"]["TextStrokeTransparency"] = 0;
G2L["29c"]["BorderSizePixel"] = 0;
G2L["29c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["29c"]["TextSize"] = 10;
G2L["29c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["29c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["29c"]["BackgroundTransparency"] = 1;
G2L["29c"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["29c"]["Text"] = [[Offset]];
G2L["29c"]["Name"] = [[Label]];
G2L["29c"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.XInput
G2L["29d"] = Instance.new("Frame", G2L["29b"]);
G2L["29d"]["BorderSizePixel"] = 0;
G2L["29d"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["29d"]["Position"] = UDim2.new(0, 55, 0, 0);
G2L["29d"]["Name"] = [[XInput]];
G2L["29d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.XInput.Background
G2L["29e"] = Instance.new("ImageLabel", G2L["29d"]);
G2L["29e"]["BorderSizePixel"] = 0;
G2L["29e"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["29e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["29e"]["BackgroundTransparency"] = 1;
G2L["29e"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.XInput.SelectedIndicator
G2L["29f"] = Instance.new("Frame", G2L["29d"]);
G2L["29f"]["BorderSizePixel"] = 0;
G2L["29f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["29f"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["29f"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["29f"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.XInput.TextBox
G2L["2a0"] = Instance.new("TextBox", G2L["29d"]);
G2L["2a0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2a0"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["2a0"]["BorderSizePixel"] = 0;
G2L["2a0"]["TextSize"] = 10;
G2L["2a0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2a0"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2a0"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["2a0"]["Text"] = [[1]];
G2L["2a0"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.YInput
G2L["2a1"] = Instance.new("Frame", G2L["29b"]);
G2L["2a1"]["BorderSizePixel"] = 0;
G2L["2a1"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["2a1"]["Position"] = UDim2.new(0, 100, 0, 0);
G2L["2a1"]["Name"] = [[YInput]];
G2L["2a1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.YInput.Background
G2L["2a2"] = Instance.new("ImageLabel", G2L["2a1"]);
G2L["2a2"]["BorderSizePixel"] = 0;
G2L["2a2"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2a2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2a2"]["BackgroundTransparency"] = 1;
G2L["2a2"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.YInput.SelectedIndicator
G2L["2a3"] = Instance.new("Frame", G2L["2a1"]);
G2L["2a3"]["BorderSizePixel"] = 0;
G2L["2a3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2a3"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["2a3"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["2a3"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.YInput.TextBox
G2L["2a4"] = Instance.new("TextBox", G2L["2a1"]);
G2L["2a4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2a4"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["2a4"]["BorderSizePixel"] = 0;
G2L["2a4"]["TextSize"] = 10;
G2L["2a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2a4"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2a4"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["2a4"]["Text"] = [[1]];
G2L["2a4"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.ZInput
G2L["2a5"] = Instance.new("Frame", G2L["29b"]);
G2L["2a5"]["BorderSizePixel"] = 0;
G2L["2a5"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["2a5"]["Position"] = UDim2.new(0, 145, 0, 0);
G2L["2a5"]["Name"] = [[ZInput]];
G2L["2a5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.ZInput.Background
G2L["2a6"] = Instance.new("ImageLabel", G2L["2a5"]);
G2L["2a6"]["BorderSizePixel"] = 0;
G2L["2a6"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2a6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2a6"]["BackgroundTransparency"] = 1;
G2L["2a6"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.ZInput.SelectedIndicator
G2L["2a7"] = Instance.new("Frame", G2L["2a5"]);
G2L["2a7"]["BorderSizePixel"] = 0;
G2L["2a7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2a7"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["2a7"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["2a7"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMeshToolGUI.OffsetOption.ZInput.TextBox
G2L["2a8"] = Instance.new("TextBox", G2L["2a5"]);
G2L["2a8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2a8"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["2a8"]["BorderSizePixel"] = 0;
G2L["2a8"]["TextSize"] = 10;
G2L["2a8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2a8"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2a8"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["2a8"]["Text"] = [[1]];
G2L["2a8"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI
G2L["2a9"] = Instance.new("Frame", G2L["77"]);
G2L["2a9"]["Active"] = true;
G2L["2a9"]["BorderSizePixel"] = 0;
G2L["2a9"]["Size"] = UDim2.new(0, 245, 0, 90);
G2L["2a9"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["2a9"]["Name"] = [[BTMoveToolGUI]];
G2L["2a9"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Changes
G2L["2aa"] = Instance.new("Frame", G2L["2a9"]);
G2L["2aa"]["BorderSizePixel"] = 0;
G2L["2aa"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["2aa"]["Position"] = UDim2.new(0, 5, 1, 10);
G2L["2aa"]["Name"] = [[Changes]];
G2L["2aa"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Changes.Text
G2L["2ab"] = Instance.new("TextLabel", G2L["2aa"]);
G2L["2ab"]["TextWrapped"] = true;
G2L["2ab"]["TextStrokeTransparency"] = 0.5;
G2L["2ab"]["BorderSizePixel"] = 0;
G2L["2ab"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["2ab"]["TextSize"] = 10;
G2L["2ab"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2ab"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2ab"]["BackgroundTransparency"] = 1;
G2L["2ab"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["2ab"]["Text"] = [[moved 0 studs]];
G2L["2ab"]["Name"] = [[Text]];
G2L["2ab"]["Position"] = UDim2.new(0, 10, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Changes.ColorBar
G2L["2ac"] = Instance.new("Frame", G2L["2aa"]);
G2L["2ac"]["BorderSizePixel"] = 0;
G2L["2ac"]["BackgroundColor3"] = Color3.fromRGB(255, 171, 0);
G2L["2ac"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["2ac"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info
G2L["2ad"] = Instance.new("Frame", G2L["2a9"]);
G2L["2ad"]["Visible"] = false;
G2L["2ad"]["BorderSizePixel"] = 0;
G2L["2ad"]["Size"] = UDim2.new(1, -5, 0, 60);
G2L["2ad"]["Position"] = UDim2.new(0, 5, 0, 100);
G2L["2ad"]["Name"] = [[Info]];
G2L["2ad"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center
G2L["2ae"] = Instance.new("Frame", G2L["2ad"]);
G2L["2ae"]["BorderSizePixel"] = 0;
G2L["2ae"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["2ae"]["Name"] = [[Center]];
G2L["2ae"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.Z
G2L["2af"] = Instance.new("Frame", G2L["2ae"]);
G2L["2af"]["BorderSizePixel"] = 0;
G2L["2af"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["2af"]["Position"] = UDim2.new(0, 164, 0, 0);
G2L["2af"]["Name"] = [[Z]];
G2L["2af"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.Z.Background
G2L["2b0"] = Instance.new("ImageLabel", G2L["2af"]);
G2L["2b0"]["BorderSizePixel"] = 0;
G2L["2b0"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2b0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2b0"]["BackgroundTransparency"] = 1;
G2L["2b0"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.Z.TextBox
G2L["2b1"] = Instance.new("TextBox", G2L["2af"]);
G2L["2b1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b1"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["2b1"]["ZIndex"] = 2;
G2L["2b1"]["BorderSizePixel"] = 0;
G2L["2b1"]["TextSize"] = 10;
G2L["2b1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2b1"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2b1"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["2b1"]["Text"] = [[]];
G2L["2b1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.Y
G2L["2b2"] = Instance.new("Frame", G2L["2ae"]);
G2L["2b2"]["BorderSizePixel"] = 0;
G2L["2b2"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["2b2"]["Position"] = UDim2.new(0, 117, 0, 0);
G2L["2b2"]["Name"] = [[Y]];
G2L["2b2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.Y.TextBox
G2L["2b3"] = Instance.new("TextBox", G2L["2b2"]);
G2L["2b3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b3"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["2b3"]["ZIndex"] = 2;
G2L["2b3"]["BorderSizePixel"] = 0;
G2L["2b3"]["TextSize"] = 10;
G2L["2b3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2b3"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2b3"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["2b3"]["Text"] = [[]];
G2L["2b3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.Y.Background
G2L["2b4"] = Instance.new("ImageLabel", G2L["2b2"]);
G2L["2b4"]["BorderSizePixel"] = 0;
G2L["2b4"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2b4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2b4"]["BackgroundTransparency"] = 1;
G2L["2b4"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.X
G2L["2b5"] = Instance.new("Frame", G2L["2ae"]);
G2L["2b5"]["BorderSizePixel"] = 0;
G2L["2b5"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["2b5"]["Position"] = UDim2.new(0, 70, 0, 0);
G2L["2b5"]["Name"] = [[X]];
G2L["2b5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.X.TextBox
G2L["2b6"] = Instance.new("TextBox", G2L["2b5"]);
G2L["2b6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b6"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["2b6"]["ZIndex"] = 2;
G2L["2b6"]["BorderSizePixel"] = 0;
G2L["2b6"]["TextSize"] = 10;
G2L["2b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2b6"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2b6"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["2b6"]["Text"] = [[]];
G2L["2b6"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.X.Background
G2L["2b7"] = Instance.new("ImageLabel", G2L["2b5"]);
G2L["2b7"]["BorderSizePixel"] = 0;
G2L["2b7"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2b7"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2b7"]["BackgroundTransparency"] = 1;
G2L["2b7"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Center.TextLabel
G2L["2b8"] = Instance.new("TextLabel", G2L["2ae"]);
G2L["2b8"]["TextWrapped"] = true;
G2L["2b8"]["TextStrokeTransparency"] = 0;
G2L["2b8"]["BorderSizePixel"] = 0;
G2L["2b8"]["TextSize"] = 10;
G2L["2b8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2b8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b8"]["BackgroundTransparency"] = 1;
G2L["2b8"]["Size"] = UDim2.new(0, 75, 0, 25);
G2L["2b8"]["Text"] = [[Position]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.Label
G2L["2b9"] = Instance.new("TextLabel", G2L["2ad"]);
G2L["2b9"]["TextWrapped"] = true;
G2L["2b9"]["TextStrokeTransparency"] = 0;
G2L["2b9"]["BorderSizePixel"] = 0;
G2L["2b9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2b9"]["TextSize"] = 10;
G2L["2b9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2b9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b9"]["BackgroundTransparency"] = 1;
G2L["2b9"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["2b9"]["Text"] = [[SELECTION INFO]];
G2L["2b9"]["Name"] = [[Label]];
G2L["2b9"]["Position"] = UDim2.new(0, 10, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Info.ColorBar
G2L["2ba"] = Instance.new("Frame", G2L["2ad"]);
G2L["2ba"]["BorderSizePixel"] = 0;
G2L["2ba"]["BackgroundColor3"] = Color3.fromRGB(255, 171, 0);
G2L["2ba"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["2ba"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.IncrementOption
G2L["2bb"] = Instance.new("Frame", G2L["2a9"]);
G2L["2bb"]["BorderSizePixel"] = 0;
G2L["2bb"]["Position"] = UDim2.new(0, 0, 0, 65);
G2L["2bb"]["Name"] = [[IncrementOption]];
G2L["2bb"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.IncrementOption.Label
G2L["2bc"] = Instance.new("Frame", G2L["2bb"]);
G2L["2bc"]["BorderSizePixel"] = 0;
G2L["2bc"]["Size"] = UDim2.new(0, 75, 0, 25);
G2L["2bc"]["Name"] = [[Label]];
G2L["2bc"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.IncrementOption.Label.TextLabel
G2L["2bd"] = Instance.new("TextLabel", G2L["2bc"]);
G2L["2bd"]["TextWrapped"] = true;
G2L["2bd"]["TextStrokeTransparency"] = 0;
G2L["2bd"]["BorderSizePixel"] = 0;
G2L["2bd"]["TextSize"] = 10;
G2L["2bd"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2bd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2bd"]["BackgroundTransparency"] = 1;
G2L["2bd"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2bd"]["Text"] = [[Increment]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.IncrementOption.Increment
G2L["2be"] = Instance.new("Frame", G2L["2bb"]);
G2L["2be"]["BorderSizePixel"] = 0;
G2L["2be"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["2be"]["Position"] = UDim2.new(0, 70, 0, 0);
G2L["2be"]["Name"] = [[Increment]];
G2L["2be"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.IncrementOption.Increment.Background
G2L["2bf"] = Instance.new("ImageLabel", G2L["2be"]);
G2L["2bf"]["BorderSizePixel"] = 0;
G2L["2bf"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2bf"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2bf"]["BackgroundTransparency"] = 1;
G2L["2bf"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.IncrementOption.Increment.TextBox
G2L["2c0"] = Instance.new("TextBox", G2L["2be"]);
G2L["2c0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c0"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["2c0"]["ZIndex"] = 2;
G2L["2c0"]["BorderSizePixel"] = 0;
G2L["2c0"]["TextSize"] = 10;
G2L["2c0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2c0"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2c0"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["2c0"]["Text"] = [[1]];
G2L["2c0"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.IncrementOption.Increment.SelectedIndicator
G2L["2c1"] = Instance.new("Frame", G2L["2be"]);
G2L["2c1"]["BorderSizePixel"] = 0;
G2L["2c1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c1"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["2c1"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["2c1"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Title
G2L["2c2"] = Instance.new("Frame", G2L["2a9"]);
G2L["2c2"]["BorderSizePixel"] = 0;
G2L["2c2"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["2c2"]["Name"] = [[Title]];
G2L["2c2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Title.F3XSignature
G2L["2c3"] = Instance.new("TextLabel", G2L["2c2"]);
G2L["2c3"]["TextWrapped"] = true;
G2L["2c3"]["TextStrokeTransparency"] = 0.9;
G2L["2c3"]["BorderSizePixel"] = 0;
G2L["2c3"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["2c3"]["TextSize"] = 14;
G2L["2c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2c3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c3"]["BackgroundTransparency"] = 1;
G2L["2c3"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2c3"]["Text"] = [[F3X]];
G2L["2c3"]["Name"] = [[F3XSignature]];
G2L["2c3"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Title.Label
G2L["2c4"] = Instance.new("TextLabel", G2L["2c2"]);
G2L["2c4"]["TextWrapped"] = true;
G2L["2c4"]["TextStrokeTransparency"] = 0;
G2L["2c4"]["BorderSizePixel"] = 0;
G2L["2c4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2c4"]["TextSize"] = 10;
G2L["2c4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2c4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c4"]["BackgroundTransparency"] = 1;
G2L["2c4"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2c4"]["Text"] = [[MOVE TOOL]];
G2L["2c4"]["Name"] = [[Label]];
G2L["2c4"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.Title.ColorBar
G2L["2c5"] = Instance.new("Frame", G2L["2c2"]);
G2L["2c5"]["BorderSizePixel"] = 0;
G2L["2c5"]["BackgroundColor3"] = Color3.fromRGB(255, 171, 0);
G2L["2c5"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["2c5"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["2c5"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption
G2L["2c6"] = Instance.new("Frame", G2L["2a9"]);
G2L["2c6"]["BorderSizePixel"] = 0;
G2L["2c6"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["2c6"]["Name"] = [[AxesOption]];
G2L["2c6"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Label
G2L["2c7"] = Instance.new("Frame", G2L["2c6"]);
G2L["2c7"]["BorderSizePixel"] = 0;
G2L["2c7"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["2c7"]["Name"] = [[Label]];
G2L["2c7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Label.TextLabel
G2L["2c8"] = Instance.new("TextLabel", G2L["2c7"]);
G2L["2c8"]["TextWrapped"] = true;
G2L["2c8"]["TextStrokeTransparency"] = 0;
G2L["2c8"]["BorderSizePixel"] = 0;
G2L["2c8"]["TextSize"] = 10;
G2L["2c8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2c8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c8"]["BackgroundTransparency"] = 1;
G2L["2c8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2c8"]["Text"] = [[Axes]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Last
G2L["2c9"] = Instance.new("Frame", G2L["2c6"]);
G2L["2c9"]["BorderSizePixel"] = 0;
G2L["2c9"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["2c9"]["Position"] = UDim2.new(0, 175, 0, 0);
G2L["2c9"]["Name"] = [[Last]];
G2L["2c9"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Last.Label
G2L["2ca"] = Instance.new("TextLabel", G2L["2c9"]);
G2L["2ca"]["ZIndex"] = 2;
G2L["2ca"]["BorderSizePixel"] = 0;
G2L["2ca"]["TextSize"] = 10;
G2L["2ca"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2ca"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2ca"]["BackgroundTransparency"] = 1;
G2L["2ca"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2ca"]["Text"] = [[LAST]];
G2L["2ca"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Last.Background
G2L["2cb"] = Instance.new("ImageLabel", G2L["2c9"]);
G2L["2cb"]["BorderSizePixel"] = 0;
G2L["2cb"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2cb"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2cb"]["BackgroundTransparency"] = 1;
G2L["2cb"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Last.Button
G2L["2cc"] = Instance.new("TextButton", G2L["2c9"]);
G2L["2cc"]["BorderSizePixel"] = 0;
G2L["2cc"]["TextTransparency"] = 1;
G2L["2cc"]["ZIndex"] = 2;
G2L["2cc"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2cc"]["BackgroundTransparency"] = 1;
G2L["2cc"]["Name"] = [[Button]];
G2L["2cc"]["Text"] = [[]];
G2L["2cc"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Last.SelectedIndicator
G2L["2cd"] = Instance.new("Frame", G2L["2c9"]);
G2L["2cd"]["BorderSizePixel"] = 0;
G2L["2cd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2cd"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["2cd"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["2cd"]["Name"] = [[SelectedIndicator]];
G2L["2cd"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Local
G2L["2ce"] = Instance.new("Frame", G2L["2c6"]);
G2L["2ce"]["BorderSizePixel"] = 0;
G2L["2ce"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["2ce"]["Position"] = UDim2.new(0, 110, 0, 0);
G2L["2ce"]["Name"] = [[Local]];
G2L["2ce"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Local.Label
G2L["2cf"] = Instance.new("TextLabel", G2L["2ce"]);
G2L["2cf"]["ZIndex"] = 2;
G2L["2cf"]["BorderSizePixel"] = 0;
G2L["2cf"]["TextSize"] = 10;
G2L["2cf"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2cf"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2cf"]["BackgroundTransparency"] = 1;
G2L["2cf"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2cf"]["Text"] = [[LOCAL]];
G2L["2cf"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Local.Background
G2L["2d0"] = Instance.new("ImageLabel", G2L["2ce"]);
G2L["2d0"]["BorderSizePixel"] = 0;
G2L["2d0"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["2d0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2d0"]["BackgroundTransparency"] = 1;
G2L["2d0"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Local.Button
G2L["2d1"] = Instance.new("TextButton", G2L["2ce"]);
G2L["2d1"]["BorderSizePixel"] = 0;
G2L["2d1"]["TextTransparency"] = 1;
G2L["2d1"]["ZIndex"] = 2;
G2L["2d1"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2d1"]["BackgroundTransparency"] = 1;
G2L["2d1"]["Name"] = [[Button]];
G2L["2d1"]["Text"] = [[]];
G2L["2d1"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Local.SelectedIndicator
G2L["2d2"] = Instance.new("Frame", G2L["2ce"]);
G2L["2d2"]["BorderSizePixel"] = 0;
G2L["2d2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2d2"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["2d2"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["2d2"]["Name"] = [[SelectedIndicator]];
G2L["2d2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Global
G2L["2d3"] = Instance.new("Frame", G2L["2c6"]);
G2L["2d3"]["BorderSizePixel"] = 0;
G2L["2d3"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["2d3"]["Position"] = UDim2.new(0, 45, 0, 0);
G2L["2d3"]["Name"] = [[Global]];
G2L["2d3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Global.Label
G2L["2d4"] = Instance.new("TextLabel", G2L["2d3"]);
G2L["2d4"]["ZIndex"] = 2;
G2L["2d4"]["BorderSizePixel"] = 0;
G2L["2d4"]["TextSize"] = 10;
G2L["2d4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2d4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2d4"]["BackgroundTransparency"] = 1;
G2L["2d4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2d4"]["Text"] = [[GLOBAL]];
G2L["2d4"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Global.Background
G2L["2d5"] = Instance.new("ImageLabel", G2L["2d3"]);
G2L["2d5"]["BorderSizePixel"] = 0;
G2L["2d5"]["Image"] = [[http://www.roblox.com/asset/?id=127774197]];
G2L["2d5"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2d5"]["BackgroundTransparency"] = 1;
G2L["2d5"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Global.Button
G2L["2d6"] = Instance.new("TextButton", G2L["2d3"]);
G2L["2d6"]["BorderSizePixel"] = 0;
G2L["2d6"]["TextTransparency"] = 1;
G2L["2d6"]["ZIndex"] = 2;
G2L["2d6"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2d6"]["BackgroundTransparency"] = 1;
G2L["2d6"]["Name"] = [[Button]];
G2L["2d6"]["Text"] = [[]];
G2L["2d6"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTMoveToolGUI.AxesOption.Global.SelectedIndicator
G2L["2d7"] = Instance.new("Frame", G2L["2d3"]);
G2L["2d7"]["BorderSizePixel"] = 0;
G2L["2d7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2d7"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["2d7"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["2d7"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI
G2L["2d8"] = Instance.new("Frame", G2L["77"]);
G2L["2d8"]["Active"] = true;
G2L["2d8"]["BorderSizePixel"] = 0;
G2L["2d8"]["Size"] = UDim2.new(0, 220, 0, 90);
G2L["2d8"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["2d8"]["Name"] = [[BTNewPartToolGUI]];
G2L["2d8"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.Title
G2L["2d9"] = Instance.new("Frame", G2L["2d8"]);
G2L["2d9"]["BorderSizePixel"] = 0;
G2L["2d9"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["2d9"]["Name"] = [[Title]];
G2L["2d9"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.Title.ColorBar
G2L["2da"] = Instance.new("Frame", G2L["2d9"]);
G2L["2da"]["BorderSizePixel"] = 0;
G2L["2da"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["2da"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["2da"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["2da"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.Title.Label
G2L["2db"] = Instance.new("TextLabel", G2L["2d9"]);
G2L["2db"]["TextWrapped"] = true;
G2L["2db"]["TextStrokeTransparency"] = 0;
G2L["2db"]["BorderSizePixel"] = 0;
G2L["2db"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2db"]["TextSize"] = 10;
G2L["2db"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2db"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2db"]["BackgroundTransparency"] = 1;
G2L["2db"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2db"]["Text"] = [[NEW PART TOOL]];
G2L["2db"]["Name"] = [[Label]];
G2L["2db"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.Title.F3XSignature
G2L["2dc"] = Instance.new("TextLabel", G2L["2d9"]);
G2L["2dc"]["TextWrapped"] = true;
G2L["2dc"]["TextStrokeTransparency"] = 0.9;
G2L["2dc"]["BorderSizePixel"] = 0;
G2L["2dc"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["2dc"]["TextSize"] = 14;
G2L["2dc"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2dc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2dc"]["BackgroundTransparency"] = 1;
G2L["2dc"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["2dc"]["Text"] = [[F3X]];
G2L["2dc"]["Name"] = [[F3XSignature]];
G2L["2dc"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption
G2L["2dd"] = Instance.new("Frame", G2L["2d8"]);
G2L["2dd"]["BorderSizePixel"] = 0;
G2L["2dd"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["2dd"]["Name"] = [[TypeOption]];
G2L["2dd"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Label
G2L["2de"] = Instance.new("TextLabel", G2L["2dd"]);
G2L["2de"]["TextWrapped"] = true;
G2L["2de"]["TextStrokeTransparency"] = 0;
G2L["2de"]["BorderSizePixel"] = 0;
G2L["2de"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2de"]["TextSize"] = 10;
G2L["2de"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2de"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2de"]["BackgroundTransparency"] = 1;
G2L["2de"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["2de"]["Text"] = [[Part Type]];
G2L["2de"]["Name"] = [[Label]];
G2L["2de"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown
G2L["2df"] = Instance.new("TextButton", G2L["2dd"]);
G2L["2df"]["TextStrokeTransparency"] = 0.8;
G2L["2df"]["BorderSizePixel"] = 0;
G2L["2df"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2df"]["TextSize"] = 10;
G2L["2df"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2df"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2df"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2df"]["Size"] = UDim2.new(0, 140, 0, 25);
G2L["2df"]["BackgroundTransparency"] = 0.3;
G2L["2df"]["Name"] = [[Dropdown]];
G2L["2df"]["Text"] = [[]];
G2L["2df"]["Position"] = UDim2.new(0, 70, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown.Icon
G2L["2e0"] = Instance.new("ImageLabel", G2L["2df"]);
G2L["2e0"]["ZIndex"] = 3;
G2L["2e0"]["BorderSizePixel"] = 0;
G2L["2e0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e0"]["Image"] = [[rbxassetid://134367382]];
G2L["2e0"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["2e0"]["BackgroundTransparency"] = 1;
G2L["2e0"]["Name"] = [[Icon]];
G2L["2e0"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown.OptionButton
G2L["2e1"] = Instance.new("TextButton", G2L["2df"]);
G2L["2e1"]["TextStrokeTransparency"] = 0.8;
G2L["2e1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2e1"]["TextSize"] = 10;
G2L["2e1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2e1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2e1"]["ZIndex"] = 4;
G2L["2e1"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["2e1"]["BackgroundTransparency"] = 0.3;
G2L["2e1"]["Name"] = [[OptionButton]];
G2L["2e1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2e1"]["Text"] = [[]];
G2L["2e1"]["Visible"] = false;
G2L["2e1"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown.OptionButton.OptionLabel
G2L["2e2"] = Instance.new("TextLabel", G2L["2e1"]);
G2L["2e2"]["ZIndex"] = 4;
G2L["2e2"]["BorderSizePixel"] = 0;
G2L["2e2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2e2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e2"]["TextSize"] = 10;
G2L["2e2"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2e2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e2"]["BackgroundTransparency"] = 1;
G2L["2e2"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["2e2"]["Text"] = [[ALL]];
G2L["2e2"]["Name"] = [[OptionLabel]];
G2L["2e2"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown.Options
G2L["2e3"] = Instance.new("Folder", G2L["2df"]);
G2L["2e3"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown.Border
G2L["2e4"] = Instance.new("Frame", G2L["2df"]);
G2L["2e4"]["BorderSizePixel"] = 0;
G2L["2e4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2e4"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["2e4"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["2e4"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown.CurrentOption
G2L["2e5"] = Instance.new("TextLabel", G2L["2df"]);
G2L["2e5"]["ZIndex"] = 3;
G2L["2e5"]["BorderSizePixel"] = 0;
G2L["2e5"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2e5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e5"]["TextSize"] = 10;
G2L["2e5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2e5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e5"]["BackgroundTransparency"] = 1;
G2L["2e5"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["2e5"]["Text"] = [[]];
G2L["2e5"]["Name"] = [[CurrentOption]];
G2L["2e5"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.TypeOption.Dropdown.[Component]
G2L["2e6"] = Instance.new("ModuleScript", G2L["2df"]);
G2L["2e6"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.Tip
G2L["2e7"] = Instance.new("Frame", G2L["2d8"]);
G2L["2e7"]["BorderSizePixel"] = 0;
G2L["2e7"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["2e7"]["Position"] = UDim2.new(0, 5, 0, 70);
G2L["2e7"]["Name"] = [[Tip]];
G2L["2e7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.Tip.ColorBar
G2L["2e8"] = Instance.new("Frame", G2L["2e7"]);
G2L["2e8"]["BorderSizePixel"] = 0;
G2L["2e8"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["2e8"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["2e8"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTNewPartToolGUI.Tip.Text
G2L["2e9"] = Instance.new("TextLabel", G2L["2e7"]);
G2L["2e9"]["TextWrapped"] = true;
G2L["2e9"]["TextStrokeTransparency"] = 0.5;
G2L["2e9"]["BorderSizePixel"] = 0;
G2L["2e9"]["TextSize"] = 10;
G2L["2e9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2e9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e9"]["BackgroundTransparency"] = 1;
G2L["2e9"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["2e9"]["Text"] = [[TIP: Point and click for a new part.]];
G2L["2e9"]["Name"] = [[Text]];
G2L["2e9"]["Position"] = UDim2.new(0, 0, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI
G2L["2ea"] = Instance.new("Frame", G2L["77"]);
G2L["2ea"]["Active"] = true;
G2L["2ea"]["BorderSizePixel"] = 0;
G2L["2ea"]["Size"] = UDim2.new(0, 205, 0, 285);
G2L["2ea"]["Position"] = UDim2.new(0, 5, 0.35, 0);
G2L["2ea"]["Name"] = [[BTPaintToolGUI]];
G2L["2ea"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Title
G2L["2eb"] = Instance.new("Frame", G2L["2ea"]);
G2L["2eb"]["BorderSizePixel"] = 0;
G2L["2eb"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["2eb"]["Name"] = [[Title]];
G2L["2eb"]["LayoutOrder"] = 1;
G2L["2eb"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Title.ColorBar
G2L["2ec"] = Instance.new("Frame", G2L["2eb"]);
G2L["2ec"]["BorderSizePixel"] = 0;
G2L["2ec"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["2ec"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["2ec"]["Position"] = UDim2.new(0, 0, 0, -3);
G2L["2ec"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Title.Label
G2L["2ed"] = Instance.new("TextLabel", G2L["2eb"]);
G2L["2ed"]["TextWrapped"] = true;
G2L["2ed"]["TextStrokeTransparency"] = 0;
G2L["2ed"]["BorderSizePixel"] = 0;
G2L["2ed"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2ed"]["TextSize"] = 10;
G2L["2ed"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2ed"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2ed"]["BackgroundTransparency"] = 1;
G2L["2ed"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["2ed"]["Text"] = [[PAINT TOOL]];
G2L["2ed"]["Name"] = [[Label]];
G2L["2ed"]["Position"] = UDim2.new(0, 5, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Title.F3XSignature
G2L["2ee"] = Instance.new("TextLabel", G2L["2eb"]);
G2L["2ee"]["TextWrapped"] = true;
G2L["2ee"]["TextStrokeTransparency"] = 0.9;
G2L["2ee"]["BorderSizePixel"] = 0;
G2L["2ee"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["2ee"]["TextSize"] = 14;
G2L["2ee"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2ee"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2ee"]["BackgroundTransparency"] = 1;
G2L["2ee"]["Size"] = UDim2.new(1, -3, 0, 20);
G2L["2ee"]["Text"] = [[F3X]];
G2L["2ee"]["Name"] = [[F3XSignature]];
G2L["2ee"]["Position"] = UDim2.new(0, 0, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.UIListLayout
G2L["2ef"] = Instance.new("UIListLayout", G2L["2ea"]);
G2L["2ef"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette
G2L["2f0"] = Instance.new("Frame", G2L["2ea"]);
G2L["2f0"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2f0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2f0"]["Size"] = UDim2.new(1, 0, 0, 228);
G2L["2f0"]["Position"] = UDim2.new(0, 0, 0, 25);
G2L["2f0"]["Name"] = [[Palette]];
G2L["2f0"]["LayoutOrder"] = 2;
G2L["2f0"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.UIListLayout
G2L["2f1"] = Instance.new("UIListLayout", G2L["2f0"]);
G2L["2f1"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["2f1"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
G2L["2f1"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
G2L["2f1"]["FillDirection"] = Enum.FillDirection.Horizontal;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays
G2L["2f2"] = Instance.new("Frame", G2L["2f0"]);
G2L["2f2"]["BorderSizePixel"] = 0;
G2L["2f2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f2"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["2f2"]["Name"] = [[Grays]];
G2L["2f2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.UIListLayout
G2L["2f3"] = Instance.new("UIListLayout", G2L["2f2"]);
G2L["2f3"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["2f3"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Institutional white
G2L["2f4"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2f4"]["TextWrapped"] = true;
G2L["2f4"]["TextStrokeTransparency"] = 0.5;
G2L["2f4"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2f4"]["BorderSizePixel"] = 0;
G2L["2f4"]["Modal"] = true;
G2L["2f4"]["TextSize"] = 10;
G2L["2f4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f4"]["BackgroundColor3"] = Color3.fromRGB(249, 249, 249);
G2L["2f4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2f4"]["ZIndex"] = 2;
G2L["2f4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2f4"]["LayoutOrder"] = 1;
G2L["2f4"]["Name"] = [[Institutional white]];
G2L["2f4"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.White
G2L["2f5"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2f5"]["TextWrapped"] = true;
G2L["2f5"]["TextStrokeTransparency"] = 0.5;
G2L["2f5"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2f5"]["BorderSizePixel"] = 0;
G2L["2f5"]["Modal"] = true;
G2L["2f5"]["TextSize"] = 10;
G2L["2f5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f5"]["BackgroundColor3"] = Color3.fromRGB(243, 244, 244);
G2L["2f5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2f5"]["ZIndex"] = 2;
G2L["2f5"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2f5"]["LayoutOrder"] = 2;
G2L["2f5"]["Name"] = [[White]];
G2L["2f5"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Light stone grey
G2L["2f6"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2f6"]["TextWrapped"] = true;
G2L["2f6"]["TextStrokeTransparency"] = 0.5;
G2L["2f6"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2f6"]["BorderSizePixel"] = 0;
G2L["2f6"]["Modal"] = true;
G2L["2f6"]["TextSize"] = 10;
G2L["2f6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f6"]["BackgroundColor3"] = Color3.fromRGB(230, 229, 224);
G2L["2f6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2f6"]["ZIndex"] = 2;
G2L["2f6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2f6"]["LayoutOrder"] = 3;
G2L["2f6"]["Name"] = [[Light stone grey]];
G2L["2f6"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Lily white
G2L["2f7"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2f7"]["TextWrapped"] = true;
G2L["2f7"]["TextStrokeTransparency"] = 0.5;
G2L["2f7"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2f7"]["BorderSizePixel"] = 0;
G2L["2f7"]["Modal"] = true;
G2L["2f7"]["TextSize"] = 10;
G2L["2f7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f7"]["BackgroundColor3"] = Color3.fromRGB(238, 235, 235);
G2L["2f7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2f7"]["ZIndex"] = 2;
G2L["2f7"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2f7"]["LayoutOrder"] = 4;
G2L["2f7"]["Name"] = [[Lily white]];
G2L["2f7"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Pearl
G2L["2f8"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2f8"]["TextWrapped"] = true;
G2L["2f8"]["TextStrokeTransparency"] = 0.5;
G2L["2f8"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2f8"]["BorderSizePixel"] = 0;
G2L["2f8"]["Modal"] = true;
G2L["2f8"]["TextSize"] = 10;
G2L["2f8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f8"]["BackgroundColor3"] = Color3.fromRGB(232, 232, 237);
G2L["2f8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2f8"]["ZIndex"] = 2;
G2L["2f8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2f8"]["LayoutOrder"] = 5;
G2L["2f8"]["Name"] = [[Pearl]];
G2L["2f8"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Quill grey
G2L["2f9"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2f9"]["TextWrapped"] = true;
G2L["2f9"]["TextStrokeTransparency"] = 0.5;
G2L["2f9"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2f9"]["BorderSizePixel"] = 0;
G2L["2f9"]["Modal"] = true;
G2L["2f9"]["TextSize"] = 10;
G2L["2f9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f9"]["BackgroundColor3"] = Color3.fromRGB(224, 224, 223);
G2L["2f9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2f9"]["ZIndex"] = 2;
G2L["2f9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2f9"]["LayoutOrder"] = 6;
G2L["2f9"]["Name"] = [[Quill grey]];
G2L["2f9"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Mid gray
G2L["2fa"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2fa"]["TextWrapped"] = true;
G2L["2fa"]["TextStrokeTransparency"] = 0.5;
G2L["2fa"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2fa"]["BorderSizePixel"] = 0;
G2L["2fa"]["Modal"] = true;
G2L["2fa"]["TextSize"] = 10;
G2L["2fa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2fa"]["BackgroundColor3"] = Color3.fromRGB(206, 206, 206);
G2L["2fa"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2fa"]["ZIndex"] = 2;
G2L["2fa"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2fa"]["LayoutOrder"] = 7;
G2L["2fa"]["Name"] = [[Mid gray]];
G2L["2fa"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Ghost grey
G2L["2fb"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2fb"]["TextWrapped"] = true;
G2L["2fb"]["TextStrokeTransparency"] = 0.5;
G2L["2fb"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2fb"]["BorderSizePixel"] = 0;
G2L["2fb"]["Modal"] = true;
G2L["2fb"]["TextSize"] = 10;
G2L["2fb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2fb"]["BackgroundColor3"] = Color3.fromRGB(203, 204, 210);
G2L["2fb"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2fb"]["ZIndex"] = 2;
G2L["2fb"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2fb"]["LayoutOrder"] = 8;
G2L["2fb"]["Name"] = [[Ghost grey]];
G2L["2fb"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Medium stone grey
G2L["2fc"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2fc"]["TextWrapped"] = true;
G2L["2fc"]["TextStrokeTransparency"] = 0.5;
G2L["2fc"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2fc"]["BorderSizePixel"] = 0;
G2L["2fc"]["Modal"] = true;
G2L["2fc"]["TextSize"] = 10;
G2L["2fc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2fc"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2fc"]["ZIndex"] = 2;
G2L["2fc"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2fc"]["LayoutOrder"] = 9;
G2L["2fc"]["Name"] = [[Medium stone grey]];
G2L["2fc"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Dark stone grey
G2L["2fd"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2fd"]["TextWrapped"] = true;
G2L["2fd"]["TextStrokeTransparency"] = 0.5;
G2L["2fd"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2fd"]["BorderSizePixel"] = 0;
G2L["2fd"]["Modal"] = true;
G2L["2fd"]["TextSize"] = 10;
G2L["2fd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2fd"]["BackgroundColor3"] = Color3.fromRGB(100, 96, 99);
G2L["2fd"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2fd"]["ZIndex"] = 2;
G2L["2fd"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2fd"]["LayoutOrder"] = 10;
G2L["2fd"]["Name"] = [[Dark stone grey]];
G2L["2fd"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Black
G2L["2fe"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2fe"]["TextWrapped"] = true;
G2L["2fe"]["TextStrokeTransparency"] = 0.5;
G2L["2fe"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2fe"]["BorderSizePixel"] = 0;
G2L["2fe"]["Modal"] = true;
G2L["2fe"]["TextSize"] = 10;
G2L["2fe"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2fe"]["BackgroundColor3"] = Color3.fromRGB(28, 43, 54);
G2L["2fe"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2fe"]["ZIndex"] = 2;
G2L["2fe"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2fe"]["LayoutOrder"] = 11;
G2L["2fe"]["Name"] = [[Black]];
G2L["2fe"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Grays.Really black
G2L["2ff"] = Instance.new("TextButton", G2L["2f2"]);
G2L["2ff"]["TextWrapped"] = true;
G2L["2ff"]["TextStrokeTransparency"] = 0.5;
G2L["2ff"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["2ff"]["BorderSizePixel"] = 0;
G2L["2ff"]["Modal"] = true;
G2L["2ff"]["TextSize"] = 10;
G2L["2ff"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2ff"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["2ff"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["2ff"]["ZIndex"] = 2;
G2L["2ff"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["2ff"]["LayoutOrder"] = 12;
G2L["2ff"]["Name"] = [[Really black]];
G2L["2ff"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds
G2L["300"] = Instance.new("Frame", G2L["2f0"]);
G2L["300"]["BorderSizePixel"] = 0;
G2L["300"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["300"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["300"]["Name"] = [[Reds]];
G2L["300"]["LayoutOrder"] = 2;
G2L["300"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.UIListLayout
G2L["301"] = Instance.new("UIListLayout", G2L["300"]);
G2L["301"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["301"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Really red
G2L["302"] = Instance.new("TextButton", G2L["300"]);
G2L["302"]["TextWrapped"] = true;
G2L["302"]["TextStrokeTransparency"] = 0.5;
G2L["302"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["302"]["BorderSizePixel"] = 0;
G2L["302"]["Modal"] = true;
G2L["302"]["TextSize"] = 10;
G2L["302"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["302"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["302"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["302"]["ZIndex"] = 2;
G2L["302"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["302"]["LayoutOrder"] = 1;
G2L["302"]["Name"] = [[Really red]];
G2L["302"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Bright red
G2L["303"] = Instance.new("TextButton", G2L["300"]);
G2L["303"]["TextWrapped"] = true;
G2L["303"]["TextStrokeTransparency"] = 0.5;
G2L["303"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["303"]["BorderSizePixel"] = 0;
G2L["303"]["Modal"] = true;
G2L["303"]["TextSize"] = 10;
G2L["303"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["303"]["BackgroundColor3"] = Color3.fromRGB(197, 41, 29);
G2L["303"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["303"]["ZIndex"] = 2;
G2L["303"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["303"]["LayoutOrder"] = 2;
G2L["303"]["Name"] = [[Bright red]];
G2L["303"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Crimson
G2L["304"] = Instance.new("TextButton", G2L["300"]);
G2L["304"]["TextWrapped"] = true;
G2L["304"]["TextStrokeTransparency"] = 0.5;
G2L["304"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["304"]["BorderSizePixel"] = 0;
G2L["304"]["Modal"] = true;
G2L["304"]["TextSize"] = 10;
G2L["304"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["304"]["BackgroundColor3"] = Color3.fromRGB(152, 0, 0);
G2L["304"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["304"]["ZIndex"] = 2;
G2L["304"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["304"]["LayoutOrder"] = 3;
G2L["304"]["Name"] = [[Crimson]];
G2L["304"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Maroon
G2L["305"] = Instance.new("TextButton", G2L["300"]);
G2L["305"]["TextWrapped"] = true;
G2L["305"]["TextStrokeTransparency"] = 0.5;
G2L["305"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["305"]["BorderSizePixel"] = 0;
G2L["305"]["Modal"] = true;
G2L["305"]["TextSize"] = 10;
G2L["305"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["305"]["BackgroundColor3"] = Color3.fromRGB(118, 0, 0);
G2L["305"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["305"]["ZIndex"] = 2;
G2L["305"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["305"]["LayoutOrder"] = 4;
G2L["305"]["Name"] = [[Maroon]];
G2L["305"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Dusty Rose
G2L["306"] = Instance.new("TextButton", G2L["300"]);
G2L["306"]["TextWrapped"] = true;
G2L["306"]["TextStrokeTransparency"] = 0.5;
G2L["306"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["306"]["BorderSizePixel"] = 0;
G2L["306"]["Modal"] = true;
G2L["306"]["TextSize"] = 10;
G2L["306"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["306"]["BackgroundColor3"] = Color3.fromRGB(164, 76, 76);
G2L["306"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["306"]["ZIndex"] = 2;
G2L["306"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["306"]["LayoutOrder"] = 5;
G2L["306"]["Name"] = [[Dusty Rose]];
G2L["306"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Terra Cotta
G2L["307"] = Instance.new("TextButton", G2L["300"]);
G2L["307"]["TextWrapped"] = true;
G2L["307"]["TextStrokeTransparency"] = 0.5;
G2L["307"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["307"]["BorderSizePixel"] = 0;
G2L["307"]["Modal"] = true;
G2L["307"]["TextSize"] = 10;
G2L["307"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["307"]["BackgroundColor3"] = Color3.fromRGB(191, 105, 99);
G2L["307"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["307"]["ZIndex"] = 2;
G2L["307"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["307"]["LayoutOrder"] = 6;
G2L["307"]["Name"] = [[Terra Cotta]];
G2L["307"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Persimmon
G2L["308"] = Instance.new("TextButton", G2L["300"]);
G2L["308"]["TextWrapped"] = true;
G2L["308"]["TextStrokeTransparency"] = 0.5;
G2L["308"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["308"]["BorderSizePixel"] = 0;
G2L["308"]["Modal"] = true;
G2L["308"]["TextSize"] = 10;
G2L["308"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["308"]["BackgroundColor3"] = Color3.fromRGB(255, 90, 90);
G2L["308"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["308"]["ZIndex"] = 2;
G2L["308"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["308"]["LayoutOrder"] = 7;
G2L["308"]["Name"] = [[Persimmon]];
G2L["308"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Tawny
G2L["309"] = Instance.new("TextButton", G2L["300"]);
G2L["309"]["TextWrapped"] = true;
G2L["309"]["TextStrokeTransparency"] = 0.5;
G2L["309"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["309"]["BorderSizePixel"] = 0;
G2L["309"]["Modal"] = true;
G2L["309"]["TextSize"] = 10;
G2L["309"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["309"]["BackgroundColor3"] = Color3.fromRGB(151, 86, 86);
G2L["309"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["309"]["ZIndex"] = 2;
G2L["309"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["309"]["LayoutOrder"] = 8;
G2L["309"]["Name"] = [[Tawny]];
G2L["309"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Burgundy
G2L["30a"] = Instance.new("TextButton", G2L["300"]);
G2L["30a"]["TextWrapped"] = true;
G2L["30a"]["TextStrokeTransparency"] = 0.5;
G2L["30a"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["30a"]["BorderSizePixel"] = 0;
G2L["30a"]["Modal"] = true;
G2L["30a"]["TextSize"] = 10;
G2L["30a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30a"]["BackgroundColor3"] = Color3.fromRGB(137, 63, 63);
G2L["30a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["30a"]["ZIndex"] = 2;
G2L["30a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["30a"]["LayoutOrder"] = 9;
G2L["30a"]["Name"] = [[Burgundy]];
G2L["30a"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Reds.Cocoa
G2L["30b"] = Instance.new("TextButton", G2L["300"]);
G2L["30b"]["TextWrapped"] = true;
G2L["30b"]["TextStrokeTransparency"] = 0.5;
G2L["30b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["30b"]["BorderSizePixel"] = 0;
G2L["30b"]["Modal"] = true;
G2L["30b"]["TextSize"] = 10;
G2L["30b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30b"]["BackgroundColor3"] = Color3.fromRGB(87, 37, 37);
G2L["30b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["30b"]["ZIndex"] = 2;
G2L["30b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["30b"]["LayoutOrder"] = 10;
G2L["30b"]["Name"] = [[Cocoa]];
G2L["30b"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows
G2L["30c"] = Instance.new("Frame", G2L["2f0"]);
G2L["30c"]["BorderSizePixel"] = 0;
G2L["30c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30c"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["30c"]["Name"] = [[Yellows]];
G2L["30c"]["LayoutOrder"] = 3;
G2L["30c"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.UIListLayout
G2L["30d"] = Instance.new("UIListLayout", G2L["30c"]);
G2L["30d"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["30d"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.New Yeller
G2L["30e"] = Instance.new("TextButton", G2L["30c"]);
G2L["30e"]["TextWrapped"] = true;
G2L["30e"]["TextStrokeTransparency"] = 0.5;
G2L["30e"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["30e"]["BorderSizePixel"] = 0;
G2L["30e"]["Modal"] = true;
G2L["30e"]["TextSize"] = 10;
G2L["30e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 0);
G2L["30e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["30e"]["ZIndex"] = 2;
G2L["30e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["30e"]["LayoutOrder"] = 1;
G2L["30e"]["Name"] = [[New Yeller]];
G2L["30e"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Bright yellow
G2L["30f"] = Instance.new("TextButton", G2L["30c"]);
G2L["30f"]["TextWrapped"] = true;
G2L["30f"]["TextStrokeTransparency"] = 0.5;
G2L["30f"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["30f"]["BorderSizePixel"] = 0;
G2L["30f"]["Modal"] = true;
G2L["30f"]["TextSize"] = 10;
G2L["30f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30f"]["BackgroundColor3"] = Color3.fromRGB(246, 206, 49);
G2L["30f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["30f"]["ZIndex"] = 2;
G2L["30f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["30f"]["LayoutOrder"] = 2;
G2L["30f"]["Name"] = [[Bright yellow]];
G2L["30f"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Deep orange
G2L["310"] = Instance.new("TextButton", G2L["30c"]);
G2L["310"]["TextWrapped"] = true;
G2L["310"]["TextStrokeTransparency"] = 0.5;
G2L["310"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["310"]["BorderSizePixel"] = 0;
G2L["310"]["Modal"] = true;
G2L["310"]["TextSize"] = 10;
G2L["310"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["310"]["BackgroundColor3"] = Color3.fromRGB(255, 176, 0);
G2L["310"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["310"]["ZIndex"] = 2;
G2L["310"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["310"]["LayoutOrder"] = 3;
G2L["310"]["Name"] = [[Deep orange]];
G2L["310"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Gold
G2L["311"] = Instance.new("TextButton", G2L["30c"]);
G2L["311"]["TextWrapped"] = true;
G2L["311"]["TextStrokeTransparency"] = 0.5;
G2L["311"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["311"]["BorderSizePixel"] = 0;
G2L["311"]["Modal"] = true;
G2L["311"]["TextSize"] = 10;
G2L["311"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["311"]["BackgroundColor3"] = Color3.fromRGB(240, 185, 57);
G2L["311"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["311"]["ZIndex"] = 2;
G2L["311"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["311"]["LayoutOrder"] = 4;
G2L["311"]["Name"] = [[Gold]];
G2L["311"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Neon orange
G2L["312"] = Instance.new("TextButton", G2L["30c"]);
G2L["312"]["TextWrapped"] = true;
G2L["312"]["TextStrokeTransparency"] = 0.5;
G2L["312"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["312"]["BorderSizePixel"] = 0;
G2L["312"]["Modal"] = true;
G2L["312"]["TextSize"] = 10;
G2L["312"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["312"]["BackgroundColor3"] = Color3.fromRGB(214, 116, 62);
G2L["312"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["312"]["ZIndex"] = 2;
G2L["312"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["312"]["LayoutOrder"] = 5;
G2L["312"]["Name"] = [[Neon orange]];
G2L["312"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Bright orange
G2L["313"] = Instance.new("TextButton", G2L["30c"]);
G2L["313"]["TextWrapped"] = true;
G2L["313"]["TextStrokeTransparency"] = 0.5;
G2L["313"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["313"]["BorderSizePixel"] = 0;
G2L["313"]["Modal"] = true;
G2L["313"]["TextSize"] = 10;
G2L["313"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["313"]["BackgroundColor3"] = Color3.fromRGB(219, 134, 66);
G2L["313"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["313"]["ZIndex"] = 2;
G2L["313"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["313"]["LayoutOrder"] = 6;
G2L["313"]["Name"] = [[Bright orange]];
G2L["313"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Br. yellowish orange
G2L["314"] = Instance.new("TextButton", G2L["30c"]);
G2L["314"]["TextWrapped"] = true;
G2L["314"]["TextStrokeTransparency"] = 0.5;
G2L["314"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["314"]["BorderSizePixel"] = 0;
G2L["314"]["Modal"] = true;
G2L["314"]["TextSize"] = 10;
G2L["314"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["314"]["BackgroundColor3"] = Color3.fromRGB(227, 156, 65);
G2L["314"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["314"]["ZIndex"] = 2;
G2L["314"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["314"]["LayoutOrder"] = 7;
G2L["314"]["Name"] = [[Br. yellowish orange]];
G2L["314"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Daisy orange
G2L["315"] = Instance.new("TextButton", G2L["30c"]);
G2L["315"]["TextWrapped"] = true;
G2L["315"]["TextStrokeTransparency"] = 0.5;
G2L["315"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["315"]["BorderSizePixel"] = 0;
G2L["315"]["Modal"] = true;
G2L["315"]["TextSize"] = 10;
G2L["315"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["315"]["BackgroundColor3"] = Color3.fromRGB(249, 218, 110);
G2L["315"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["315"]["ZIndex"] = 2;
G2L["315"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["315"]["LayoutOrder"] = 8;
G2L["315"]["Name"] = [[Daisy orange]];
G2L["315"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Cool yellow
G2L["316"] = Instance.new("TextButton", G2L["30c"]);
G2L["316"]["TextWrapped"] = true;
G2L["316"]["TextStrokeTransparency"] = 0.5;
G2L["316"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["316"]["BorderSizePixel"] = 0;
G2L["316"]["Modal"] = true;
G2L["316"]["TextSize"] = 10;
G2L["316"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["316"]["BackgroundColor3"] = Color3.fromRGB(254, 235, 142);
G2L["316"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["316"]["ZIndex"] = 2;
G2L["316"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["316"]["LayoutOrder"] = 9;
G2L["316"]["Name"] = [[Cool yellow]];
G2L["316"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Buttermilk
G2L["317"] = Instance.new("TextButton", G2L["30c"]);
G2L["317"]["TextWrapped"] = true;
G2L["317"]["TextStrokeTransparency"] = 0.5;
G2L["317"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["317"]["BorderSizePixel"] = 0;
G2L["317"]["Modal"] = true;
G2L["317"]["TextSize"] = 10;
G2L["317"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["317"]["BackgroundColor3"] = Color3.fromRGB(255, 244, 188);
G2L["317"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["317"]["ZIndex"] = 2;
G2L["317"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["317"]["LayoutOrder"] = 10;
G2L["317"]["Name"] = [[Buttermilk]];
G2L["317"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Yellows.Pastel yellow
G2L["318"] = Instance.new("TextButton", G2L["30c"]);
G2L["318"]["TextWrapped"] = true;
G2L["318"]["TextStrokeTransparency"] = 0.5;
G2L["318"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["318"]["BorderSizePixel"] = 0;
G2L["318"]["Modal"] = true;
G2L["318"]["TextSize"] = 10;
G2L["318"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["318"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 205);
G2L["318"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["318"]["ZIndex"] = 2;
G2L["318"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["318"]["LayoutOrder"] = 11;
G2L["318"]["Name"] = [[Pastel yellow]];
G2L["318"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens
G2L["319"] = Instance.new("Frame", G2L["2f0"]);
G2L["319"]["BorderSizePixel"] = 0;
G2L["319"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["319"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["319"]["Name"] = [[Greens]];
G2L["319"]["LayoutOrder"] = 4;
G2L["319"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.UIListLayout
G2L["31a"] = Instance.new("UIListLayout", G2L["319"]);
G2L["31a"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["31a"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Lime green
G2L["31b"] = Instance.new("TextButton", G2L["319"]);
G2L["31b"]["TextWrapped"] = true;
G2L["31b"]["TextStrokeTransparency"] = 0.5;
G2L["31b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["31b"]["BorderSizePixel"] = 0;
G2L["31b"]["Modal"] = true;
G2L["31b"]["TextSize"] = 10;
G2L["31b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31b"]["BackgroundColor3"] = Color3.fromRGB(0, 255, 0);
G2L["31b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["31b"]["ZIndex"] = 2;
G2L["31b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["31b"]["LayoutOrder"] = 1;
G2L["31b"]["Name"] = [[Lime green]];
G2L["31b"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Shamrock
G2L["31c"] = Instance.new("TextButton", G2L["319"]);
G2L["31c"]["TextWrapped"] = true;
G2L["31c"]["TextStrokeTransparency"] = 0.5;
G2L["31c"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["31c"]["BorderSizePixel"] = 0;
G2L["31c"]["Modal"] = true;
G2L["31c"]["TextSize"] = 10;
G2L["31c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31c"]["BackgroundColor3"] = Color3.fromRGB(92, 155, 77);
G2L["31c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["31c"]["ZIndex"] = 2;
G2L["31c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["31c"]["LayoutOrder"] = 2;
G2L["31c"]["Name"] = [[Shamrock]];
G2L["31c"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Bright green
G2L["31d"] = Instance.new("TextButton", G2L["319"]);
G2L["31d"]["TextWrapped"] = true;
G2L["31d"]["TextStrokeTransparency"] = 0.5;
G2L["31d"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["31d"]["BorderSizePixel"] = 0;
G2L["31d"]["Modal"] = true;
G2L["31d"]["TextSize"] = 10;
G2L["31d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31d"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["31d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["31d"]["ZIndex"] = 2;
G2L["31d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["31d"]["LayoutOrder"] = 3;
G2L["31d"]["Name"] = [[Bright green]];
G2L["31d"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Sea green
G2L["31e"] = Instance.new("TextButton", G2L["319"]);
G2L["31e"]["TextWrapped"] = true;
G2L["31e"]["TextStrokeTransparency"] = 0.5;
G2L["31e"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["31e"]["BorderSizePixel"] = 0;
G2L["31e"]["Modal"] = true;
G2L["31e"]["TextSize"] = 10;
G2L["31e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31e"]["BackgroundColor3"] = Color3.fromRGB(53, 143, 65);
G2L["31e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["31e"]["ZIndex"] = 2;
G2L["31e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["31e"]["LayoutOrder"] = 4;
G2L["31e"]["Name"] = [[Sea green]];
G2L["31e"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Dark green
G2L["31f"] = Instance.new("TextButton", G2L["319"]);
G2L["31f"]["TextWrapped"] = true;
G2L["31f"]["TextStrokeTransparency"] = 0.5;
G2L["31f"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["31f"]["BorderSizePixel"] = 0;
G2L["31f"]["Modal"] = true;
G2L["31f"]["TextSize"] = 10;
G2L["31f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31f"]["BackgroundColor3"] = Color3.fromRGB(41, 128, 72);
G2L["31f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["31f"]["ZIndex"] = 2;
G2L["31f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["31f"]["LayoutOrder"] = 5;
G2L["31f"]["Name"] = [[Dark green]];
G2L["31f"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Forest green
G2L["320"] = Instance.new("TextButton", G2L["319"]);
G2L["320"]["TextWrapped"] = true;
G2L["320"]["TextStrokeTransparency"] = 0.5;
G2L["320"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["320"]["BorderSizePixel"] = 0;
G2L["320"]["Modal"] = true;
G2L["320"]["TextSize"] = 10;
G2L["320"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["320"]["BackgroundColor3"] = Color3.fromRGB(32, 129, 30);
G2L["320"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["320"]["ZIndex"] = 2;
G2L["320"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["320"]["LayoutOrder"] = 6;
G2L["320"]["Name"] = [[Forest green]];
G2L["320"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Camo
G2L["321"] = Instance.new("TextButton", G2L["319"]);
G2L["321"]["TextWrapped"] = true;
G2L["321"]["TextStrokeTransparency"] = 0.5;
G2L["321"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["321"]["BorderSizePixel"] = 0;
G2L["321"]["Modal"] = true;
G2L["321"]["TextSize"] = 10;
G2L["321"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["321"]["BackgroundColor3"] = Color3.fromRGB(59, 126, 22);
G2L["321"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["321"]["ZIndex"] = 2;
G2L["321"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["321"]["LayoutOrder"] = 7;
G2L["321"]["Name"] = [[Camo]];
G2L["321"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Parsley green
G2L["322"] = Instance.new("TextButton", G2L["319"]);
G2L["322"]["TextWrapped"] = true;
G2L["322"]["TextStrokeTransparency"] = 0.5;
G2L["322"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["322"]["BorderSizePixel"] = 0;
G2L["322"]["Modal"] = true;
G2L["322"]["TextSize"] = 10;
G2L["322"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["322"]["BackgroundColor3"] = Color3.fromRGB(45, 102, 30);
G2L["322"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["322"]["ZIndex"] = 2;
G2L["322"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["322"]["LayoutOrder"] = 8;
G2L["322"]["Name"] = [[Parsley green]];
G2L["322"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Earth green
G2L["323"] = Instance.new("TextButton", G2L["319"]);
G2L["323"]["TextWrapped"] = true;
G2L["323"]["TextStrokeTransparency"] = 0.5;
G2L["323"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["323"]["BorderSizePixel"] = 0;
G2L["323"]["Modal"] = true;
G2L["323"]["TextSize"] = 10;
G2L["323"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["323"]["BackgroundColor3"] = Color3.fromRGB(40, 71, 46);
G2L["323"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["323"]["ZIndex"] = 2;
G2L["323"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["323"]["LayoutOrder"] = 9;
G2L["323"]["Name"] = [[Earth green]];
G2L["323"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Moss
G2L["324"] = Instance.new("TextButton", G2L["319"]);
G2L["324"]["TextWrapped"] = true;
G2L["324"]["TextStrokeTransparency"] = 0.5;
G2L["324"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["324"]["BorderSizePixel"] = 0;
G2L["324"]["Modal"] = true;
G2L["324"]["TextSize"] = 10;
G2L["324"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["324"]["BackgroundColor3"] = Color3.fromRGB(125, 157, 108);
G2L["324"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["324"]["ZIndex"] = 2;
G2L["324"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["324"]["LayoutOrder"] = 10;
G2L["324"]["Name"] = [[Moss]];
G2L["324"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Laurel green
G2L["325"] = Instance.new("TextButton", G2L["319"]);
G2L["325"]["TextWrapped"] = true;
G2L["325"]["TextStrokeTransparency"] = 0.5;
G2L["325"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["325"]["BorderSizePixel"] = 0;
G2L["325"]["Modal"] = true;
G2L["325"]["TextSize"] = 10;
G2L["325"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["325"]["BackgroundColor3"] = Color3.fromRGB(169, 190, 154);
G2L["325"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["325"]["ZIndex"] = 2;
G2L["325"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["325"]["LayoutOrder"] = 11;
G2L["325"]["Name"] = [[Laurel green]];
G2L["325"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Greens.Sage green
G2L["326"] = Instance.new("TextButton", G2L["319"]);
G2L["326"]["TextWrapped"] = true;
G2L["326"]["TextStrokeTransparency"] = 0.5;
G2L["326"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["326"]["BorderSizePixel"] = 0;
G2L["326"]["Modal"] = true;
G2L["326"]["TextSize"] = 10;
G2L["326"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["326"]["BackgroundColor3"] = Color3.fromRGB(186, 197, 178);
G2L["326"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["326"]["ZIndex"] = 2;
G2L["326"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["326"]["LayoutOrder"] = 12;
G2L["326"]["Name"] = [[Sage green]];
G2L["326"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens
G2L["327"] = Instance.new("Frame", G2L["2f0"]);
G2L["327"]["BorderSizePixel"] = 0;
G2L["327"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["327"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["327"]["Name"] = [[LightGreens]];
G2L["327"]["LayoutOrder"] = 5;
G2L["327"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.UIListLayout
G2L["328"] = Instance.new("UIListLayout", G2L["327"]);
G2L["328"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["328"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Pastel green
G2L["329"] = Instance.new("TextButton", G2L["327"]);
G2L["329"]["TextWrapped"] = true;
G2L["329"]["TextStrokeTransparency"] = 0.5;
G2L["329"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["329"]["BorderSizePixel"] = 0;
G2L["329"]["Modal"] = true;
G2L["329"]["TextSize"] = 10;
G2L["329"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["329"]["BackgroundColor3"] = Color3.fromRGB(205, 255, 205);
G2L["329"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["329"]["ZIndex"] = 2;
G2L["329"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["329"]["LayoutOrder"] = 1;
G2L["329"]["Name"] = [[Pastel green]];
G2L["329"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Mint
G2L["32a"] = Instance.new("TextButton", G2L["327"]);
G2L["32a"]["TextWrapped"] = true;
G2L["32a"]["TextStrokeTransparency"] = 0.5;
G2L["32a"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["32a"]["BorderSizePixel"] = 0;
G2L["32a"]["Modal"] = true;
G2L["32a"]["TextSize"] = 10;
G2L["32a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32a"]["BackgroundColor3"] = Color3.fromRGB(178, 230, 167);
G2L["32a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["32a"]["ZIndex"] = 2;
G2L["32a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["32a"]["LayoutOrder"] = 2;
G2L["32a"]["Name"] = [[Mint]];
G2L["32a"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Medium green
G2L["32b"] = Instance.new("TextButton", G2L["327"]);
G2L["32b"]["TextWrapped"] = true;
G2L["32b"]["TextStrokeTransparency"] = 0.5;
G2L["32b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["32b"]["BorderSizePixel"] = 0;
G2L["32b"]["Modal"] = true;
G2L["32b"]["TextSize"] = 10;
G2L["32b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32b"]["BackgroundColor3"] = Color3.fromRGB(162, 197, 141);
G2L["32b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["32b"]["ZIndex"] = 2;
G2L["32b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["32b"]["LayoutOrder"] = 3;
G2L["32b"]["Name"] = [[Medium green]];
G2L["32b"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Olivine
G2L["32c"] = Instance.new("TextButton", G2L["327"]);
G2L["32c"]["TextWrapped"] = true;
G2L["32c"]["TextStrokeTransparency"] = 0.5;
G2L["32c"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["32c"]["BorderSizePixel"] = 0;
G2L["32c"]["Modal"] = true;
G2L["32c"]["TextSize"] = 10;
G2L["32c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32c"]["BackgroundColor3"] = Color3.fromRGB(149, 191, 130);
G2L["32c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["32c"]["ZIndex"] = 2;
G2L["32c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["32c"]["LayoutOrder"] = 4;
G2L["32c"]["Name"] = [[Olivine]];
G2L["32c"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Artichoke
G2L["32d"] = Instance.new("TextButton", G2L["327"]);
G2L["32d"]["TextWrapped"] = true;
G2L["32d"]["TextStrokeTransparency"] = 0.5;
G2L["32d"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["32d"]["BorderSizePixel"] = 0;
G2L["32d"]["Modal"] = true;
G2L["32d"]["TextSize"] = 10;
G2L["32d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32d"]["BackgroundColor3"] = Color3.fromRGB(139, 172, 134);
G2L["32d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["32d"]["ZIndex"] = 2;
G2L["32d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["32d"]["LayoutOrder"] = 5;
G2L["32d"]["Name"] = [[Artichoke]];
G2L["32d"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Br. yellowish green
G2L["32e"] = Instance.new("TextButton", G2L["327"]);
G2L["32e"]["TextWrapped"] = true;
G2L["32e"]["TextStrokeTransparency"] = 0.5;
G2L["32e"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["32e"]["BorderSizePixel"] = 0;
G2L["32e"]["Modal"] = true;
G2L["32e"]["TextSize"] = 10;
G2L["32e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32e"]["BackgroundColor3"] = Color3.fromRGB(165, 190, 72);
G2L["32e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["32e"]["ZIndex"] = 2;
G2L["32e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["32e"]["LayoutOrder"] = 6;
G2L["32e"]["Name"] = [[Br. yellowish green]];
G2L["32e"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Olive
G2L["32f"] = Instance.new("TextButton", G2L["327"]);
G2L["32f"]["TextWrapped"] = true;
G2L["32f"]["TextStrokeTransparency"] = 0.5;
G2L["32f"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["32f"]["BorderSizePixel"] = 0;
G2L["32f"]["Modal"] = true;
G2L["32f"]["TextSize"] = 10;
G2L["32f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32f"]["BackgroundColor3"] = Color3.fromRGB(194, 191, 67);
G2L["32f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["32f"]["ZIndex"] = 2;
G2L["32f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["32f"]["LayoutOrder"] = 7;
G2L["32f"]["Name"] = [[Olive]];
G2L["32f"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Grime
G2L["330"] = Instance.new("TextButton", G2L["327"]);
G2L["330"]["TextWrapped"] = true;
G2L["330"]["TextStrokeTransparency"] = 0.5;
G2L["330"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["330"]["BorderSizePixel"] = 0;
G2L["330"]["Modal"] = true;
G2L["330"]["TextSize"] = 10;
G2L["330"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["330"]["BackgroundColor3"] = Color3.fromRGB(128, 143, 101);
G2L["330"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["330"]["ZIndex"] = 2;
G2L["330"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["330"]["LayoutOrder"] = 8;
G2L["330"]["Name"] = [[Grime]];
G2L["330"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Sand green
G2L["331"] = Instance.new("TextButton", G2L["327"]);
G2L["331"]["TextWrapped"] = true;
G2L["331"]["TextStrokeTransparency"] = 0.5;
G2L["331"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["331"]["BorderSizePixel"] = 0;
G2L["331"]["Modal"] = true;
G2L["331"]["TextSize"] = 10;
G2L["331"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["331"]["BackgroundColor3"] = Color3.fromRGB(121, 145, 131);
G2L["331"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["331"]["ZIndex"] = 2;
G2L["331"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["331"]["LayoutOrder"] = 9;
G2L["331"]["Name"] = [[Sand green]];
G2L["331"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Slime green
G2L["332"] = Instance.new("TextButton", G2L["327"]);
G2L["332"]["TextWrapped"] = true;
G2L["332"]["TextStrokeTransparency"] = 0.5;
G2L["332"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["332"]["BorderSizePixel"] = 0;
G2L["332"]["Modal"] = true;
G2L["332"]["TextSize"] = 10;
G2L["332"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["332"]["BackgroundColor3"] = Color3.fromRGB(81, 110, 85);
G2L["332"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["332"]["ZIndex"] = 2;
G2L["332"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["332"]["LayoutOrder"] = 10;
G2L["332"]["Name"] = [[Slime green]];
G2L["332"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.LightGreens.Flint
G2L["333"] = Instance.new("TextButton", G2L["327"]);
G2L["333"]["TextWrapped"] = true;
G2L["333"]["TextStrokeTransparency"] = 0.5;
G2L["333"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["333"]["BorderSizePixel"] = 0;
G2L["333"]["Modal"] = true;
G2L["333"]["TextSize"] = 10;
G2L["333"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["333"]["BackgroundColor3"] = Color3.fromRGB(106, 103, 93);
G2L["333"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["333"]["ZIndex"] = 2;
G2L["333"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["333"]["LayoutOrder"] = 11;
G2L["333"]["Name"] = [[Flint]];
G2L["333"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues
G2L["334"] = Instance.new("Frame", G2L["2f0"]);
G2L["334"]["BorderSizePixel"] = 0;
G2L["334"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["334"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["334"]["Name"] = [[GreenishBlues]];
G2L["334"]["LayoutOrder"] = 6;
G2L["334"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.UIListLayout
G2L["335"] = Instance.new("UIListLayout", G2L["334"]);
G2L["335"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["335"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Toothpaste
G2L["336"] = Instance.new("TextButton", G2L["334"]);
G2L["336"]["TextWrapped"] = true;
G2L["336"]["TextStrokeTransparency"] = 0.5;
G2L["336"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["336"]["BorderSizePixel"] = 0;
G2L["336"]["Modal"] = true;
G2L["336"]["TextSize"] = 10;
G2L["336"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["336"]["BackgroundColor3"] = Color3.fromRGB(0, 255, 255);
G2L["336"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["336"]["ZIndex"] = 2;
G2L["336"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["336"]["LayoutOrder"] = 1;
G2L["336"]["Name"] = [[Toothpaste]];
G2L["336"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Teal
G2L["337"] = Instance.new("TextButton", G2L["334"]);
G2L["337"]["TextWrapped"] = true;
G2L["337"]["TextStrokeTransparency"] = 0.5;
G2L["337"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["337"]["BorderSizePixel"] = 0;
G2L["337"]["Modal"] = true;
G2L["337"]["TextSize"] = 10;
G2L["337"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["337"]["BackgroundColor3"] = Color3.fromRGB(19, 239, 213);
G2L["337"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["337"]["ZIndex"] = 2;
G2L["337"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["337"]["LayoutOrder"] = 2;
G2L["337"]["Name"] = [[Teal]];
G2L["337"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Pastel blue-green
G2L["338"] = Instance.new("TextButton", G2L["334"]);
G2L["338"]["TextWrapped"] = true;
G2L["338"]["TextStrokeTransparency"] = 0.5;
G2L["338"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["338"]["BorderSizePixel"] = 0;
G2L["338"]["Modal"] = true;
G2L["338"]["TextSize"] = 10;
G2L["338"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["338"]["BackgroundColor3"] = Color3.fromRGB(160, 244, 234);
G2L["338"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["338"]["ZIndex"] = 2;
G2L["338"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["338"]["LayoutOrder"] = 3;
G2L["338"]["Name"] = [[Pastel blue-green]];
G2L["338"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Pastel light blue
G2L["339"] = Instance.new("TextButton", G2L["334"]);
G2L["339"]["TextWrapped"] = true;
G2L["339"]["TextStrokeTransparency"] = 0.5;
G2L["339"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["339"]["BorderSizePixel"] = 0;
G2L["339"]["Modal"] = true;
G2L["339"]["TextSize"] = 10;
G2L["339"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["339"]["BackgroundColor3"] = Color3.fromRGB(176, 222, 255);
G2L["339"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["339"]["ZIndex"] = 2;
G2L["339"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["339"]["LayoutOrder"] = 4;
G2L["339"]["Name"] = [[Pastel light blue]];
G2L["339"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Light blue
G2L["33a"] = Instance.new("TextButton", G2L["334"]);
G2L["33a"]["TextWrapped"] = true;
G2L["33a"]["TextStrokeTransparency"] = 0.5;
G2L["33a"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["33a"]["BorderSizePixel"] = 0;
G2L["33a"]["Modal"] = true;
G2L["33a"]["TextSize"] = 10;
G2L["33a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["33a"]["BackgroundColor3"] = Color3.fromRGB(181, 211, 229);
G2L["33a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["33a"]["ZIndex"] = 2;
G2L["33a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["33a"]["LayoutOrder"] = 5;
G2L["33a"]["Name"] = [[Light blue]];
G2L["33a"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Fog
G2L["33b"] = Instance.new("TextButton", G2L["334"]);
G2L["33b"]["TextWrapped"] = true;
G2L["33b"]["TextStrokeTransparency"] = 0.5;
G2L["33b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["33b"]["BorderSizePixel"] = 0;
G2L["33b"]["Modal"] = true;
G2L["33b"]["TextSize"] = 10;
G2L["33b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["33b"]["BackgroundColor3"] = Color3.fromRGB(200, 213, 229);
G2L["33b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["33b"]["ZIndex"] = 2;
G2L["33b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["33b"]["LayoutOrder"] = 6;
G2L["33b"]["Name"] = [[Fog]];
G2L["33b"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Cadet blue
G2L["33c"] = Instance.new("TextButton", G2L["334"]);
G2L["33c"]["TextWrapped"] = true;
G2L["33c"]["TextStrokeTransparency"] = 0.5;
G2L["33c"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["33c"]["BorderSizePixel"] = 0;
G2L["33c"]["Modal"] = true;
G2L["33c"]["TextSize"] = 10;
G2L["33c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["33c"]["BackgroundColor3"] = Color3.fromRGB(160, 174, 193);
G2L["33c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["33c"]["ZIndex"] = 2;
G2L["33c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["33c"]["LayoutOrder"] = 7;
G2L["33c"]["Name"] = [[Cadet blue]];
G2L["33c"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Fossil
G2L["33d"] = Instance.new("TextButton", G2L["334"]);
G2L["33d"]["TextWrapped"] = true;
G2L["33d"]["TextStrokeTransparency"] = 0.5;
G2L["33d"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["33d"]["BorderSizePixel"] = 0;
G2L["33d"]["Modal"] = true;
G2L["33d"]["TextSize"] = 10;
G2L["33d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["33d"]["BackgroundColor3"] = Color3.fromRGB(160, 162, 173);
G2L["33d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["33d"]["ZIndex"] = 2;
G2L["33d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["33d"]["LayoutOrder"] = 8;
G2L["33d"]["Name"] = [[Fossil]];
G2L["33d"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Pastel Blue
G2L["33e"] = Instance.new("TextButton", G2L["334"]);
G2L["33e"]["TextWrapped"] = true;
G2L["33e"]["TextStrokeTransparency"] = 0.5;
G2L["33e"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["33e"]["BorderSizePixel"] = 0;
G2L["33e"]["Modal"] = true;
G2L["33e"]["TextSize"] = 10;
G2L["33e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["33e"]["BackgroundColor3"] = Color3.fromRGB(129, 188, 220);
G2L["33e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["33e"]["ZIndex"] = 2;
G2L["33e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["33e"]["LayoutOrder"] = 9;
G2L["33e"]["Name"] = [[Pastel Blue]];
G2L["33e"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Baby blue
G2L["33f"] = Instance.new("TextButton", G2L["334"]);
G2L["33f"]["TextWrapped"] = true;
G2L["33f"]["TextStrokeTransparency"] = 0.5;
G2L["33f"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["33f"]["BorderSizePixel"] = 0;
G2L["33f"]["Modal"] = true;
G2L["33f"]["TextSize"] = 10;
G2L["33f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["33f"]["BackgroundColor3"] = Color3.fromRGB(153, 195, 220);
G2L["33f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["33f"]["ZIndex"] = 2;
G2L["33f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["33f"]["LayoutOrder"] = 10;
G2L["33f"]["Name"] = [[Baby blue]];
G2L["33f"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Sand blue
G2L["340"] = Instance.new("TextButton", G2L["334"]);
G2L["340"]["TextWrapped"] = true;
G2L["340"]["TextStrokeTransparency"] = 0.5;
G2L["340"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["340"]["BorderSizePixel"] = 0;
G2L["340"]["Modal"] = true;
G2L["340"]["TextSize"] = 10;
G2L["340"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["340"]["BackgroundColor3"] = Color3.fromRGB(117, 135, 158);
G2L["340"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["340"]["ZIndex"] = 2;
G2L["340"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["340"]["LayoutOrder"] = 11;
G2L["340"]["Name"] = [[Sand blue]];
G2L["340"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.GreenishBlues.Smoky grey
G2L["341"] = Instance.new("TextButton", G2L["334"]);
G2L["341"]["TextWrapped"] = true;
G2L["341"]["TextStrokeTransparency"] = 0.5;
G2L["341"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["341"]["BorderSizePixel"] = 0;
G2L["341"]["Modal"] = true;
G2L["341"]["TextSize"] = 10;
G2L["341"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["341"]["BackgroundColor3"] = Color3.fromRGB(92, 94, 106);
G2L["341"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["341"]["ZIndex"] = 2;
G2L["341"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["341"]["LayoutOrder"] = 12;
G2L["341"]["Name"] = [[Smoky grey]];
G2L["341"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues
G2L["342"] = Instance.new("Frame", G2L["2f0"]);
G2L["342"]["BorderSizePixel"] = 0;
G2L["342"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["342"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["342"]["Name"] = [[Blues]];
G2L["342"]["LayoutOrder"] = 7;
G2L["342"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.UIListLayout
G2L["343"] = Instance.new("UIListLayout", G2L["342"]);
G2L["343"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["343"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Really blue
G2L["344"] = Instance.new("TextButton", G2L["342"]);
G2L["344"]["TextWrapped"] = true;
G2L["344"]["TextStrokeTransparency"] = 0.5;
G2L["344"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["344"]["BorderSizePixel"] = 0;
G2L["344"]["Modal"] = true;
G2L["344"]["TextSize"] = 10;
G2L["344"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["344"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 255);
G2L["344"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["344"]["ZIndex"] = 2;
G2L["344"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["344"]["LayoutOrder"] = 1;
G2L["344"]["Name"] = [[Really blue]];
G2L["344"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Lapis
G2L["345"] = Instance.new("TextButton", G2L["342"]);
G2L["345"]["TextWrapped"] = true;
G2L["345"]["TextStrokeTransparency"] = 0.5;
G2L["345"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["345"]["BorderSizePixel"] = 0;
G2L["345"]["Modal"] = true;
G2L["345"]["TextSize"] = 10;
G2L["345"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["345"]["BackgroundColor3"] = Color3.fromRGB(17, 43, 221);
G2L["345"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["345"]["ZIndex"] = 2;
G2L["345"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["345"]["LayoutOrder"] = 2;
G2L["345"]["Name"] = [[Lapis]];
G2L["345"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Dark blue
G2L["346"] = Instance.new("TextButton", G2L["342"]);
G2L["346"]["TextWrapped"] = true;
G2L["346"]["TextStrokeTransparency"] = 0.5;
G2L["346"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["346"]["BorderSizePixel"] = 0;
G2L["346"]["Modal"] = true;
G2L["346"]["TextSize"] = 10;
G2L["346"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["346"]["BackgroundColor3"] = Color3.fromRGB(0, 17, 177);
G2L["346"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["346"]["ZIndex"] = 2;
G2L["346"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["346"]["LayoutOrder"] = 3;
G2L["346"]["Name"] = [[Dark blue]];
G2L["346"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Navy blue
G2L["347"] = Instance.new("TextButton", G2L["342"]);
G2L["347"]["TextWrapped"] = true;
G2L["347"]["TextStrokeTransparency"] = 0.5;
G2L["347"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["347"]["BorderSizePixel"] = 0;
G2L["347"]["Modal"] = true;
G2L["347"]["TextSize"] = 10;
G2L["347"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["347"]["BackgroundColor3"] = Color3.fromRGB(0, 33, 97);
G2L["347"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["347"]["ZIndex"] = 2;
G2L["347"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["347"]["LayoutOrder"] = 4;
G2L["347"]["Name"] = [[Navy blue]];
G2L["347"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Deep blue
G2L["348"] = Instance.new("TextButton", G2L["342"]);
G2L["348"]["TextWrapped"] = true;
G2L["348"]["TextStrokeTransparency"] = 0.5;
G2L["348"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["348"]["BorderSizePixel"] = 0;
G2L["348"]["Modal"] = true;
G2L["348"]["TextSize"] = 10;
G2L["348"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["348"]["BackgroundColor3"] = Color3.fromRGB(34, 85, 186);
G2L["348"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["348"]["ZIndex"] = 2;
G2L["348"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["348"]["LayoutOrder"] = 5;
G2L["348"]["Name"] = [[Deep blue]];
G2L["348"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Steel blue
G2L["349"] = Instance.new("TextButton", G2L["342"]);
G2L["349"]["TextWrapped"] = true;
G2L["349"]["TextStrokeTransparency"] = 0.5;
G2L["349"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["349"]["BorderSizePixel"] = 0;
G2L["349"]["Modal"] = true;
G2L["349"]["TextSize"] = 10;
G2L["349"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["349"]["BackgroundColor3"] = Color3.fromRGB(83, 125, 175);
G2L["349"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["349"]["ZIndex"] = 2;
G2L["349"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["349"]["LayoutOrder"] = 6;
G2L["349"]["Name"] = [[Steel blue]];
G2L["349"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Storm blue
G2L["34a"] = Instance.new("TextButton", G2L["342"]);
G2L["34a"]["TextWrapped"] = true;
G2L["34a"]["TextStrokeTransparency"] = 0.5;
G2L["34a"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["34a"]["BorderSizePixel"] = 0;
G2L["34a"]["Modal"] = true;
G2L["34a"]["TextSize"] = 10;
G2L["34a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34a"]["BackgroundColor3"] = Color3.fromRGB(52, 89, 131);
G2L["34a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["34a"]["ZIndex"] = 2;
G2L["34a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["34a"]["LayoutOrder"] = 7;
G2L["34a"]["Name"] = [[Storm blue]];
G2L["34a"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Medium blue
G2L["34b"] = Instance.new("TextButton", G2L["342"]);
G2L["34b"]["TextWrapped"] = true;
G2L["34b"]["TextStrokeTransparency"] = 0.5;
G2L["34b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["34b"]["BorderSizePixel"] = 0;
G2L["34b"]["Modal"] = true;
G2L["34b"]["TextSize"] = 10;
G2L["34b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34b"]["BackgroundColor3"] = Color3.fromRGB(111, 154, 203);
G2L["34b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["34b"]["ZIndex"] = 2;
G2L["34b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["34b"]["LayoutOrder"] = 8;
G2L["34b"]["Name"] = [[Medium blue]];
G2L["34b"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Bright bluish green
G2L["34c"] = Instance.new("TextButton", G2L["342"]);
G2L["34c"]["TextWrapped"] = true;
G2L["34c"]["TextStrokeTransparency"] = 0.5;
G2L["34c"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["34c"]["BorderSizePixel"] = 0;
G2L["34c"]["Modal"] = true;
G2L["34c"]["TextSize"] = 10;
G2L["34c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34c"]["BackgroundColor3"] = Color3.fromRGB(0, 144, 157);
G2L["34c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["34c"]["ZIndex"] = 2;
G2L["34c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["34c"]["LayoutOrder"] = 9;
G2L["34c"]["Name"] = [[Bright bluish green]];
G2L["34c"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Electric blue
G2L["34d"] = Instance.new("TextButton", G2L["342"]);
G2L["34d"]["TextWrapped"] = true;
G2L["34d"]["TextStrokeTransparency"] = 0.5;
G2L["34d"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["34d"]["BorderSizePixel"] = 0;
G2L["34d"]["Modal"] = true;
G2L["34d"]["TextSize"] = 10;
G2L["34d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34d"]["BackgroundColor3"] = Color3.fromRGB(10, 138, 208);
G2L["34d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["34d"]["ZIndex"] = 2;
G2L["34d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["34d"]["LayoutOrder"] = 10;
G2L["34d"]["Name"] = [[Electric blue]];
G2L["34d"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Cyan
G2L["34e"] = Instance.new("TextButton", G2L["342"]);
G2L["34e"]["TextWrapped"] = true;
G2L["34e"]["TextStrokeTransparency"] = 0.5;
G2L["34e"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["34e"]["BorderSizePixel"] = 0;
G2L["34e"]["Modal"] = true;
G2L["34e"]["TextSize"] = 10;
G2L["34e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34e"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["34e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["34e"]["ZIndex"] = 2;
G2L["34e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["34e"]["LayoutOrder"] = 11;
G2L["34e"]["Name"] = [[Cyan]];
G2L["34e"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Blues.Bright blue
G2L["34f"] = Instance.new("TextButton", G2L["342"]);
G2L["34f"]["TextWrapped"] = true;
G2L["34f"]["TextStrokeTransparency"] = 0.5;
G2L["34f"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["34f"]["BorderSizePixel"] = 0;
G2L["34f"]["Modal"] = true;
G2L["34f"]["TextSize"] = 10;
G2L["34f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34f"]["BackgroundColor3"] = Color3.fromRGB(14, 106, 173);
G2L["34f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["34f"]["ZIndex"] = 2;
G2L["34f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["34f"]["LayoutOrder"] = 12;
G2L["34f"]["Name"] = [[Bright blue]];
G2L["34f"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples
G2L["350"] = Instance.new("Frame", G2L["2f0"]);
G2L["350"]["BorderSizePixel"] = 0;
G2L["350"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["350"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["350"]["Name"] = [[Purples]];
G2L["350"]["LayoutOrder"] = 8;
G2L["350"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.UIListLayout
G2L["351"] = Instance.new("UIListLayout", G2L["350"]);
G2L["351"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["351"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Magenta
G2L["352"] = Instance.new("TextButton", G2L["350"]);
G2L["352"]["TextWrapped"] = true;
G2L["352"]["TextStrokeTransparency"] = 0.5;
G2L["352"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["352"]["BorderSizePixel"] = 0;
G2L["352"]["Modal"] = true;
G2L["352"]["TextSize"] = 10;
G2L["352"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["352"]["BackgroundColor3"] = Color3.fromRGB(171, 0, 171);
G2L["352"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["352"]["ZIndex"] = 2;
G2L["352"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["352"]["LayoutOrder"] = 1;
G2L["352"]["Name"] = [[Magenta]];
G2L["352"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Eggplant
G2L["353"] = Instance.new("TextButton", G2L["350"]);
G2L["353"]["TextWrapped"] = true;
G2L["353"]["TextStrokeTransparency"] = 0.5;
G2L["353"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["353"]["BorderSizePixel"] = 0;
G2L["353"]["Modal"] = true;
G2L["353"]["TextSize"] = 10;
G2L["353"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["353"]["BackgroundColor3"] = Color3.fromRGB(124, 0, 124);
G2L["353"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["353"]["ZIndex"] = 2;
G2L["353"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["353"]["LayoutOrder"] = 2;
G2L["353"]["Name"] = [[Eggplant]];
G2L["353"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Mulberry
G2L["354"] = Instance.new("TextButton", G2L["350"]);
G2L["354"]["TextWrapped"] = true;
G2L["354"]["TextStrokeTransparency"] = 0.5;
G2L["354"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["354"]["BorderSizePixel"] = 0;
G2L["354"]["Modal"] = true;
G2L["354"]["TextSize"] = 10;
G2L["354"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["354"]["BackgroundColor3"] = Color3.fromRGB(90, 35, 90);
G2L["354"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["354"]["ZIndex"] = 2;
G2L["354"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["354"]["LayoutOrder"] = 3;
G2L["354"]["Name"] = [[Mulberry]];
G2L["354"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Plum
G2L["355"] = Instance.new("TextButton", G2L["350"]);
G2L["355"]["TextWrapped"] = true;
G2L["355"]["TextStrokeTransparency"] = 0.5;
G2L["355"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["355"]["BorderSizePixel"] = 0;
G2L["355"]["Modal"] = true;
G2L["355"]["TextSize"] = 10;
G2L["355"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["355"]["BackgroundColor3"] = Color3.fromRGB(124, 48, 124);
G2L["355"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["355"]["ZIndex"] = 2;
G2L["355"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["355"]["LayoutOrder"] = 4;
G2L["355"]["Name"] = [[Plum]];
G2L["355"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Bright violet
G2L["356"] = Instance.new("TextButton", G2L["350"]);
G2L["356"]["TextWrapped"] = true;
G2L["356"]["TextStrokeTransparency"] = 0.5;
G2L["356"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["356"]["BorderSizePixel"] = 0;
G2L["356"]["Modal"] = true;
G2L["356"]["TextSize"] = 10;
G2L["356"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["356"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["356"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["356"]["ZIndex"] = 2;
G2L["356"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["356"]["LayoutOrder"] = 5;
G2L["356"]["Name"] = [[Bright violet]];
G2L["356"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Dark indigo
G2L["357"] = Instance.new("TextButton", G2L["350"]);
G2L["357"]["TextWrapped"] = true;
G2L["357"]["TextStrokeTransparency"] = 0.5;
G2L["357"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["357"]["BorderSizePixel"] = 0;
G2L["357"]["Modal"] = true;
G2L["357"]["TextSize"] = 10;
G2L["357"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["357"]["BackgroundColor3"] = Color3.fromRGB(62, 22, 134);
G2L["357"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["357"]["ZIndex"] = 2;
G2L["357"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["357"]["LayoutOrder"] = 6;
G2L["357"]["Name"] = [[Dark indigo]];
G2L["357"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Royal purple
G2L["358"] = Instance.new("TextButton", G2L["350"]);
G2L["358"]["TextWrapped"] = true;
G2L["358"]["TextStrokeTransparency"] = 0.5;
G2L["358"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["358"]["BorderSizePixel"] = 0;
G2L["358"]["Modal"] = true;
G2L["358"]["TextSize"] = 10;
G2L["358"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["358"]["BackgroundColor3"] = Color3.fromRGB(99, 38, 210);
G2L["358"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["358"]["ZIndex"] = 2;
G2L["358"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["358"]["LayoutOrder"] = 7;
G2L["358"]["Name"] = [[Royal purple]];
G2L["358"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Pastel violet
G2L["359"] = Instance.new("TextButton", G2L["350"]);
G2L["359"]["TextWrapped"] = true;
G2L["359"]["TextStrokeTransparency"] = 0.5;
G2L["359"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["359"]["BorderSizePixel"] = 0;
G2L["359"]["Modal"] = true;
G2L["359"]["TextSize"] = 10;
G2L["359"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["359"]["BackgroundColor3"] = Color3.fromRGB(178, 168, 255);
G2L["359"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["359"]["ZIndex"] = 2;
G2L["359"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["359"]["LayoutOrder"] = 8;
G2L["359"]["Name"] = [[Pastel violet]];
G2L["359"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Alder
G2L["35a"] = Instance.new("TextButton", G2L["350"]);
G2L["35a"]["TextWrapped"] = true;
G2L["35a"]["TextStrokeTransparency"] = 0.5;
G2L["35a"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["35a"]["BorderSizePixel"] = 0;
G2L["35a"]["Modal"] = true;
G2L["35a"]["TextSize"] = 10;
G2L["35a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["35a"]["BackgroundColor3"] = Color3.fromRGB(181, 129, 255);
G2L["35a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["35a"]["ZIndex"] = 2;
G2L["35a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["35a"]["LayoutOrder"] = 9;
G2L["35a"]["Name"] = [[Alder]];
G2L["35a"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Lavender
G2L["35b"] = Instance.new("TextButton", G2L["350"]);
G2L["35b"]["TextWrapped"] = true;
G2L["35b"]["TextStrokeTransparency"] = 0.5;
G2L["35b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["35b"]["BorderSizePixel"] = 0;
G2L["35b"]["Modal"] = true;
G2L["35b"]["TextSize"] = 10;
G2L["35b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["35b"]["BackgroundColor3"] = Color3.fromRGB(141, 92, 160);
G2L["35b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["35b"]["ZIndex"] = 2;
G2L["35b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["35b"]["LayoutOrder"] = 10;
G2L["35b"]["Name"] = [[Lavender]];
G2L["35b"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Lilac
G2L["35c"] = Instance.new("TextButton", G2L["350"]);
G2L["35c"]["TextWrapped"] = true;
G2L["35c"]["TextStrokeTransparency"] = 0.5;
G2L["35c"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["35c"]["BorderSizePixel"] = 0;
G2L["35c"]["Modal"] = true;
G2L["35c"]["TextSize"] = 10;
G2L["35c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["35c"]["BackgroundColor3"] = Color3.fromRGB(168, 95, 156);
G2L["35c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["35c"]["ZIndex"] = 2;
G2L["35c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["35c"]["LayoutOrder"] = 11;
G2L["35c"]["Name"] = [[Lilac]];
G2L["35c"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Purples.Sunrise
G2L["35d"] = Instance.new("TextButton", G2L["350"]);
G2L["35d"]["TextWrapped"] = true;
G2L["35d"]["TextStrokeTransparency"] = 0.5;
G2L["35d"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["35d"]["BorderSizePixel"] = 0;
G2L["35d"]["Modal"] = true;
G2L["35d"]["TextSize"] = 10;
G2L["35d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["35d"]["BackgroundColor3"] = Color3.fromRGB(213, 145, 190);
G2L["35d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["35d"]["ZIndex"] = 2;
G2L["35d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["35d"]["LayoutOrder"] = 12;
G2L["35d"]["Name"] = [[Sunrise]];
G2L["35d"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks
G2L["35e"] = Instance.new("Frame", G2L["2f0"]);
G2L["35e"]["BorderSizePixel"] = 0;
G2L["35e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["35e"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["35e"]["Name"] = [[Pinks]];
G2L["35e"]["LayoutOrder"] = 9;
G2L["35e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.UIListLayout
G2L["35f"] = Instance.new("UIListLayout", G2L["35e"]);
G2L["35f"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["35f"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Hot pink
G2L["360"] = Instance.new("TextButton", G2L["35e"]);
G2L["360"]["TextWrapped"] = true;
G2L["360"]["TextStrokeTransparency"] = 0.5;
G2L["360"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["360"]["BorderSizePixel"] = 0;
G2L["360"]["Modal"] = true;
G2L["360"]["TextSize"] = 10;
G2L["360"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["360"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 192);
G2L["360"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["360"]["ZIndex"] = 2;
G2L["360"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["360"]["LayoutOrder"] = 1;
G2L["360"]["Name"] = [[Hot pink]];
G2L["360"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Pink
G2L["361"] = Instance.new("TextButton", G2L["35e"]);
G2L["361"]["TextWrapped"] = true;
G2L["361"]["TextStrokeTransparency"] = 0.5;
G2L["361"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["361"]["BorderSizePixel"] = 0;
G2L["361"]["Modal"] = true;
G2L["361"]["TextSize"] = 10;
G2L["361"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["361"]["BackgroundColor3"] = Color3.fromRGB(255, 103, 205);
G2L["361"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["361"]["ZIndex"] = 2;
G2L["361"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["361"]["LayoutOrder"] = 2;
G2L["361"]["Name"] = [[Pink]];
G2L["361"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Carnation pink
G2L["362"] = Instance.new("TextButton", G2L["35e"]);
G2L["362"]["TextWrapped"] = true;
G2L["362"]["TextStrokeTransparency"] = 0.5;
G2L["362"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["362"]["BorderSizePixel"] = 0;
G2L["362"]["Modal"] = true;
G2L["362"]["TextSize"] = 10;
G2L["362"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["362"]["BackgroundColor3"] = Color3.fromRGB(255, 153, 221);
G2L["362"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["362"]["ZIndex"] = 2;
G2L["362"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["362"]["LayoutOrder"] = 3;
G2L["362"]["Name"] = [[Carnation pink]];
G2L["362"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Mauve
G2L["363"] = Instance.new("TextButton", G2L["35e"]);
G2L["363"]["TextWrapped"] = true;
G2L["363"]["TextStrokeTransparency"] = 0.5;
G2L["363"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["363"]["BorderSizePixel"] = 0;
G2L["363"]["Modal"] = true;
G2L["363"]["TextSize"] = 10;
G2L["363"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["363"]["BackgroundColor3"] = Color3.fromRGB(225, 179, 209);
G2L["363"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["363"]["ZIndex"] = 2;
G2L["363"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["363"]["LayoutOrder"] = 4;
G2L["363"]["Name"] = [[Mauve]];
G2L["363"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Light reddish violet
G2L["364"] = Instance.new("TextButton", G2L["35e"]);
G2L["364"]["TextWrapped"] = true;
G2L["364"]["TextStrokeTransparency"] = 0.5;
G2L["364"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["364"]["BorderSizePixel"] = 0;
G2L["364"]["Modal"] = true;
G2L["364"]["TextSize"] = 10;
G2L["364"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["364"]["BackgroundColor3"] = Color3.fromRGB(233, 187, 201);
G2L["364"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["364"]["ZIndex"] = 2;
G2L["364"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["364"]["LayoutOrder"] = 5;
G2L["364"]["Name"] = [[Light reddish violet]];
G2L["364"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Pastel orange
G2L["365"] = Instance.new("TextButton", G2L["35e"]);
G2L["365"]["TextWrapped"] = true;
G2L["365"]["TextStrokeTransparency"] = 0.5;
G2L["365"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["365"]["BorderSizePixel"] = 0;
G2L["365"]["Modal"] = true;
G2L["365"]["TextSize"] = 10;
G2L["365"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["365"]["BackgroundColor3"] = Color3.fromRGB(255, 202, 202);
G2L["365"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["365"]["ZIndex"] = 2;
G2L["365"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["365"]["LayoutOrder"] = 6;
G2L["365"]["Name"] = [[Pastel orange]];
G2L["365"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Salmon
G2L["366"] = Instance.new("TextButton", G2L["35e"]);
G2L["366"]["TextWrapped"] = true;
G2L["366"]["TextStrokeTransparency"] = 0.5;
G2L["366"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["366"]["BorderSizePixel"] = 0;
G2L["366"]["Modal"] = true;
G2L["366"]["TextSize"] = 10;
G2L["366"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["366"]["BackgroundColor3"] = Color3.fromRGB(255, 149, 149);
G2L["366"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["366"]["ZIndex"] = 2;
G2L["366"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["366"]["LayoutOrder"] = 7;
G2L["366"]["Name"] = [[Salmon]];
G2L["366"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Medium red
G2L["367"] = Instance.new("TextButton", G2L["35e"]);
G2L["367"]["TextWrapped"] = true;
G2L["367"]["TextStrokeTransparency"] = 0.5;
G2L["367"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["367"]["BorderSizePixel"] = 0;
G2L["367"]["Modal"] = true;
G2L["367"]["TextSize"] = 10;
G2L["367"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["367"]["BackgroundColor3"] = Color3.fromRGB(219, 135, 123);
G2L["367"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["367"]["ZIndex"] = 2;
G2L["367"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["367"]["LayoutOrder"] = 8;
G2L["367"]["Name"] = [[Medium red]];
G2L["367"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Light orange
G2L["368"] = Instance.new("TextButton", G2L["35e"]);
G2L["368"]["TextWrapped"] = true;
G2L["368"]["TextStrokeTransparency"] = 0.5;
G2L["368"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["368"]["BorderSizePixel"] = 0;
G2L["368"]["Modal"] = true;
G2L["368"]["TextSize"] = 10;
G2L["368"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["368"]["BackgroundColor3"] = Color3.fromRGB(235, 185, 147);
G2L["368"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["368"]["ZIndex"] = 2;
G2L["368"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["368"]["LayoutOrder"] = 9;
G2L["368"]["Name"] = [[Light orange]];
G2L["368"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Oyster
G2L["369"] = Instance.new("TextButton", G2L["35e"]);
G2L["369"]["TextWrapped"] = true;
G2L["369"]["TextStrokeTransparency"] = 0.5;
G2L["369"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["369"]["BorderSizePixel"] = 0;
G2L["369"]["Modal"] = true;
G2L["369"]["TextSize"] = 10;
G2L["369"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["369"]["BackgroundColor3"] = Color3.fromRGB(188, 180, 179);
G2L["369"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["369"]["ZIndex"] = 2;
G2L["369"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["369"]["LayoutOrder"] = 10;
G2L["369"]["Name"] = [[Oyster]];
G2L["369"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Linen
G2L["36a"] = Instance.new("TextButton", G2L["35e"]);
G2L["36a"]["TextWrapped"] = true;
G2L["36a"]["TextStrokeTransparency"] = 0.5;
G2L["36a"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["36a"]["BorderSizePixel"] = 0;
G2L["36a"]["Modal"] = true;
G2L["36a"]["TextSize"] = 10;
G2L["36a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["36a"]["BackgroundColor3"] = Color3.fromRGB(176, 149, 132);
G2L["36a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["36a"]["ZIndex"] = 2;
G2L["36a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["36a"]["LayoutOrder"] = 11;
G2L["36a"]["Name"] = [[Linen]];
G2L["36a"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Pinks.Hurricane grey
G2L["36b"] = Instance.new("TextButton", G2L["35e"]);
G2L["36b"]["TextWrapped"] = true;
G2L["36b"]["TextStrokeTransparency"] = 0.5;
G2L["36b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["36b"]["BorderSizePixel"] = 0;
G2L["36b"]["Modal"] = true;
G2L["36b"]["TextSize"] = 10;
G2L["36b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["36b"]["BackgroundColor3"] = Color3.fromRGB(150, 138, 137);
G2L["36b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["36b"]["ZIndex"] = 2;
G2L["36b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["36b"]["LayoutOrder"] = 12;
G2L["36b"]["Name"] = [[Hurricane grey]];
G2L["36b"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans
G2L["36c"] = Instance.new("Frame", G2L["2f0"]);
G2L["36c"]["BorderSizePixel"] = 0;
G2L["36c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["36c"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["36c"]["Name"] = [[Tans]];
G2L["36c"]["LayoutOrder"] = 10;
G2L["36c"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.UIListLayout
G2L["36d"] = Instance.new("UIListLayout", G2L["36c"]);
G2L["36d"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["36d"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Sand red
G2L["36e"] = Instance.new("TextButton", G2L["36c"]);
G2L["36e"]["TextWrapped"] = true;
G2L["36e"]["TextStrokeTransparency"] = 0.5;
G2L["36e"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["36e"]["BorderSizePixel"] = 0;
G2L["36e"]["Modal"] = true;
G2L["36e"]["TextSize"] = 10;
G2L["36e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["36e"]["BackgroundColor3"] = Color3.fromRGB(150, 122, 120);
G2L["36e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["36e"]["ZIndex"] = 2;
G2L["36e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["36e"]["LayoutOrder"] = 1;
G2L["36e"]["Name"] = [[Sand red]];
G2L["36e"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Cloudy grey
G2L["36f"] = Instance.new("TextButton", G2L["36c"]);
G2L["36f"]["TextWrapped"] = true;
G2L["36f"]["TextStrokeTransparency"] = 0.5;
G2L["36f"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["36f"]["BorderSizePixel"] = 0;
G2L["36f"]["Modal"] = true;
G2L["36f"]["TextSize"] = 10;
G2L["36f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["36f"]["BackgroundColor3"] = Color3.fromRGB(172, 169, 159);
G2L["36f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["36f"]["ZIndex"] = 2;
G2L["36f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["36f"]["LayoutOrder"] = 2;
G2L["36f"]["Name"] = [[Cloudy grey]];
G2L["36f"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Beige
G2L["370"] = Instance.new("TextButton", G2L["36c"]);
G2L["370"]["TextWrapped"] = true;
G2L["370"]["TextStrokeTransparency"] = 0.5;
G2L["370"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["370"]["BorderSizePixel"] = 0;
G2L["370"]["Modal"] = true;
G2L["370"]["TextSize"] = 10;
G2L["370"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["370"]["BackgroundColor3"] = Color3.fromRGB(203, 192, 164);
G2L["370"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["370"]["ZIndex"] = 2;
G2L["370"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["370"]["LayoutOrder"] = 3;
G2L["370"]["Name"] = [[Beige]];
G2L["370"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Burlap
G2L["371"] = Instance.new("TextButton", G2L["36c"]);
G2L["371"]["TextWrapped"] = true;
G2L["371"]["TextStrokeTransparency"] = 0.5;
G2L["371"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["371"]["BorderSizePixel"] = 0;
G2L["371"]["Modal"] = true;
G2L["371"]["TextSize"] = 10;
G2L["371"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["371"]["BackgroundColor3"] = Color3.fromRGB(200, 173, 121);
G2L["371"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["371"]["ZIndex"] = 2;
G2L["371"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["371"]["LayoutOrder"] = 4;
G2L["371"]["Name"] = [[Burlap]];
G2L["371"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Cashmere
G2L["372"] = Instance.new("TextButton", G2L["36c"]);
G2L["372"]["TextWrapped"] = true;
G2L["372"]["TextStrokeTransparency"] = 0.5;
G2L["372"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["372"]["BorderSizePixel"] = 0;
G2L["372"]["Modal"] = true;
G2L["372"]["TextSize"] = 10;
G2L["372"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["372"]["BackgroundColor3"] = Color3.fromRGB(212, 191, 151);
G2L["372"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["372"]["ZIndex"] = 2;
G2L["372"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["372"]["LayoutOrder"] = 5;
G2L["372"]["Name"] = [[Cashmere]];
G2L["372"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Brick yellow
G2L["373"] = Instance.new("TextButton", G2L["36c"]);
G2L["373"]["TextWrapped"] = true;
G2L["373"]["TextStrokeTransparency"] = 0.5;
G2L["373"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["373"]["BorderSizePixel"] = 0;
G2L["373"]["Modal"] = true;
G2L["373"]["TextSize"] = 10;
G2L["373"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["373"]["BackgroundColor3"] = Color3.fromRGB(216, 198, 155);
G2L["373"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["373"]["ZIndex"] = 2;
G2L["373"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["373"]["LayoutOrder"] = 6;
G2L["373"]["Name"] = [[Brick yellow]];
G2L["373"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Wheat
G2L["374"] = Instance.new("TextButton", G2L["36c"]);
G2L["374"]["TextWrapped"] = true;
G2L["374"]["TextStrokeTransparency"] = 0.5;
G2L["374"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["374"]["BorderSizePixel"] = 0;
G2L["374"]["Modal"] = true;
G2L["374"]["TextSize"] = 10;
G2L["374"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["374"]["BackgroundColor3"] = Color3.fromRGB(242, 232, 200);
G2L["374"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["374"]["ZIndex"] = 2;
G2L["374"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["374"]["LayoutOrder"] = 7;
G2L["374"]["Name"] = [[Wheat]];
G2L["374"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Khaki
G2L["375"] = Instance.new("TextButton", G2L["36c"]);
G2L["375"]["TextWrapped"] = true;
G2L["375"]["TextStrokeTransparency"] = 0.5;
G2L["375"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["375"]["BorderSizePixel"] = 0;
G2L["375"]["Modal"] = true;
G2L["375"]["TextSize"] = 10;
G2L["375"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["375"]["BackgroundColor3"] = Color3.fromRGB(227, 221, 189);
G2L["375"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["375"]["ZIndex"] = 2;
G2L["375"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["375"]["LayoutOrder"] = 8;
G2L["375"]["Name"] = [[Khaki]];
G2L["375"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Seashell
G2L["376"] = Instance.new("TextButton", G2L["36c"]);
G2L["376"]["TextWrapped"] = true;
G2L["376"]["TextStrokeTransparency"] = 0.5;
G2L["376"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["376"]["BorderSizePixel"] = 0;
G2L["376"]["Modal"] = true;
G2L["376"]["TextSize"] = 10;
G2L["376"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["376"]["BackgroundColor3"] = Color3.fromRGB(234, 219, 219);
G2L["376"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["376"]["ZIndex"] = 2;
G2L["376"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["376"]["LayoutOrder"] = 9;
G2L["376"]["Name"] = [[Seashell]];
G2L["376"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Pastel brown
G2L["377"] = Instance.new("TextButton", G2L["36c"]);
G2L["377"]["TextWrapped"] = true;
G2L["377"]["TextStrokeTransparency"] = 0.5;
G2L["377"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["377"]["BorderSizePixel"] = 0;
G2L["377"]["Modal"] = true;
G2L["377"]["TextSize"] = 10;
G2L["377"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["377"]["BackgroundColor3"] = Color3.fromRGB(255, 205, 154);
G2L["377"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["377"]["ZIndex"] = 2;
G2L["377"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["377"]["LayoutOrder"] = 10;
G2L["377"]["Name"] = [[Pastel brown]];
G2L["377"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Nougat
G2L["378"] = Instance.new("TextButton", G2L["36c"]);
G2L["378"]["TextWrapped"] = true;
G2L["378"]["TextStrokeTransparency"] = 0.5;
G2L["378"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["378"]["BorderSizePixel"] = 0;
G2L["378"]["Modal"] = true;
G2L["378"]["TextSize"] = 10;
G2L["378"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["378"]["BackgroundColor3"] = Color3.fromRGB(205, 143, 106);
G2L["378"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["378"]["ZIndex"] = 2;
G2L["378"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["378"]["LayoutOrder"] = 11;
G2L["378"]["Name"] = [[Nougat]];
G2L["378"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Tans.Copper
G2L["379"] = Instance.new("TextButton", G2L["36c"]);
G2L["379"]["TextWrapped"] = true;
G2L["379"]["TextStrokeTransparency"] = 0.5;
G2L["379"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["379"]["BorderSizePixel"] = 0;
G2L["379"]["Modal"] = true;
G2L["379"]["TextSize"] = 10;
G2L["379"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["379"]["BackgroundColor3"] = Color3.fromRGB(151, 104, 103);
G2L["379"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["379"]["ZIndex"] = 2;
G2L["379"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["379"]["LayoutOrder"] = 12;
G2L["379"]["Name"] = [[Copper]];
G2L["379"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns
G2L["37a"] = Instance.new("Frame", G2L["2f0"]);
G2L["37a"]["BorderSizePixel"] = 0;
G2L["37a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37a"]["Size"] = UDim2.new(0.091, 0, 1, 0);
G2L["37a"]["Name"] = [[Browns]];
G2L["37a"]["LayoutOrder"] = 11;
G2L["37a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.UIListLayout
G2L["37b"] = Instance.new("UIListLayout", G2L["37a"]);
G2L["37b"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["37b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Dirt brown
G2L["37c"] = Instance.new("TextButton", G2L["37a"]);
G2L["37c"]["TextWrapped"] = true;
G2L["37c"]["TextStrokeTransparency"] = 0.5;
G2L["37c"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["37c"]["BorderSizePixel"] = 0;
G2L["37c"]["Modal"] = true;
G2L["37c"]["TextSize"] = 10;
G2L["37c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37c"]["BackgroundColor3"] = Color3.fromRGB(87, 67, 55);
G2L["37c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["37c"]["ZIndex"] = 2;
G2L["37c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["37c"]["LayoutOrder"] = 1;
G2L["37c"]["Name"] = [[Dirt brown]];
G2L["37c"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Pine Cone
G2L["37d"] = Instance.new("TextButton", G2L["37a"]);
G2L["37d"]["TextWrapped"] = true;
G2L["37d"]["TextStrokeTransparency"] = 0.5;
G2L["37d"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["37d"]["BorderSizePixel"] = 0;
G2L["37d"]["Modal"] = true;
G2L["37d"]["TextSize"] = 10;
G2L["37d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37d"]["BackgroundColor3"] = Color3.fromRGB(109, 89, 76);
G2L["37d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["37d"]["ZIndex"] = 2;
G2L["37d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["37d"]["LayoutOrder"] = 2;
G2L["37d"]["Name"] = [[Pine Cone]];
G2L["37d"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Bronze
G2L["37e"] = Instance.new("TextButton", G2L["37a"]);
G2L["37e"]["TextWrapped"] = true;
G2L["37e"]["TextStrokeTransparency"] = 0.5;
G2L["37e"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["37e"]["BorderSizePixel"] = 0;
G2L["37e"]["Modal"] = true;
G2L["37e"]["TextSize"] = 10;
G2L["37e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37e"]["BackgroundColor3"] = Color3.fromRGB(127, 105, 64);
G2L["37e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["37e"]["ZIndex"] = 2;
G2L["37e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["37e"]["LayoutOrder"] = 3;
G2L["37e"]["Name"] = [[Bronze]];
G2L["37e"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Fawn brown
G2L["37f"] = Instance.new("TextButton", G2L["37a"]);
G2L["37f"]["TextWrapped"] = true;
G2L["37f"]["TextStrokeTransparency"] = 0.5;
G2L["37f"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["37f"]["BorderSizePixel"] = 0;
G2L["37f"]["Modal"] = true;
G2L["37f"]["TextSize"] = 10;
G2L["37f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37f"]["BackgroundColor3"] = Color3.fromRGB(161, 133, 80);
G2L["37f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["37f"]["ZIndex"] = 2;
G2L["37f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["37f"]["LayoutOrder"] = 4;
G2L["37f"]["Name"] = [[Fawn brown]];
G2L["37f"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Cork
G2L["380"] = Instance.new("TextButton", G2L["37a"]);
G2L["380"]["TextWrapped"] = true;
G2L["380"]["TextStrokeTransparency"] = 0.5;
G2L["380"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["380"]["BorderSizePixel"] = 0;
G2L["380"]["Modal"] = true;
G2L["380"]["TextSize"] = 10;
G2L["380"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["380"]["BackgroundColor3"] = Color3.fromRGB(189, 156, 94);
G2L["380"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["380"]["ZIndex"] = 2;
G2L["380"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["380"]["LayoutOrder"] = 5;
G2L["380"]["Name"] = [[Cork]];
G2L["380"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Burnt Sienna
G2L["381"] = Instance.new("TextButton", G2L["37a"]);
G2L["381"]["TextWrapped"] = true;
G2L["381"]["TextStrokeTransparency"] = 0.5;
G2L["381"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["381"]["BorderSizePixel"] = 0;
G2L["381"]["Modal"] = true;
G2L["381"]["TextSize"] = 10;
G2L["381"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["381"]["BackgroundColor3"] = Color3.fromRGB(107, 58, 10);
G2L["381"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["381"]["ZIndex"] = 2;
G2L["381"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["381"]["LayoutOrder"] = 6;
G2L["381"]["Name"] = [[Burnt Sienna]];
G2L["381"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Reddish brown
G2L["382"] = Instance.new("TextButton", G2L["37a"]);
G2L["382"]["TextWrapped"] = true;
G2L["382"]["TextStrokeTransparency"] = 0.5;
G2L["382"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["382"]["BorderSizePixel"] = 0;
G2L["382"]["Modal"] = true;
G2L["382"]["TextSize"] = 10;
G2L["382"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["382"]["BackgroundColor3"] = Color3.fromRGB(106, 65, 41);
G2L["382"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["382"]["ZIndex"] = 2;
G2L["382"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["382"]["LayoutOrder"] = 7;
G2L["382"]["Name"] = [[Reddish brown]];
G2L["382"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Dark orange
G2L["383"] = Instance.new("TextButton", G2L["37a"]);
G2L["383"]["TextWrapped"] = true;
G2L["383"]["TextStrokeTransparency"] = 0.5;
G2L["383"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["383"]["BorderSizePixel"] = 0;
G2L["383"]["Modal"] = true;
G2L["383"]["TextSize"] = 10;
G2L["383"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["383"]["BackgroundColor3"] = Color3.fromRGB(161, 96, 54);
G2L["383"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["383"]["ZIndex"] = 2;
G2L["383"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["383"]["LayoutOrder"] = 8;
G2L["383"]["Name"] = [[Dark orange]];
G2L["383"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Brown
G2L["384"] = Instance.new("TextButton", G2L["37a"]);
G2L["384"]["TextWrapped"] = true;
G2L["384"]["TextStrokeTransparency"] = 0.5;
G2L["384"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["384"]["BorderSizePixel"] = 0;
G2L["384"]["Modal"] = true;
G2L["384"]["TextSize"] = 10;
G2L["384"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["384"]["BackgroundColor3"] = Color3.fromRGB(125, 93, 71);
G2L["384"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["384"]["ZIndex"] = 2;
G2L["384"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["384"]["LayoutOrder"] = 9;
G2L["384"]["Name"] = [[Brown]];
G2L["384"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Dark taupe
G2L["385"] = Instance.new("TextButton", G2L["37a"]);
G2L["385"]["TextWrapped"] = true;
G2L["385"]["TextStrokeTransparency"] = 0.5;
G2L["385"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["385"]["BorderSizePixel"] = 0;
G2L["385"]["Modal"] = true;
G2L["385"]["TextSize"] = 10;
G2L["385"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["385"]["BackgroundColor3"] = Color3.fromRGB(91, 77, 67);
G2L["385"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["385"]["ZIndex"] = 2;
G2L["385"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["385"]["LayoutOrder"] = 10;
G2L["385"]["Name"] = [[Dark taupe]];
G2L["385"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.Rust
G2L["386"] = Instance.new("TextButton", G2L["37a"]);
G2L["386"]["TextWrapped"] = true;
G2L["386"]["TextStrokeTransparency"] = 0.5;
G2L["386"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["386"]["BorderSizePixel"] = 0;
G2L["386"]["Modal"] = true;
G2L["386"]["TextSize"] = 10;
G2L["386"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["386"]["BackgroundColor3"] = Color3.fromRGB(144, 77, 43);
G2L["386"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["386"]["ZIndex"] = 2;
G2L["386"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["386"]["LayoutOrder"] = 11;
G2L["386"]["Name"] = [[Rust]];
G2L["386"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Palette.Browns.CGA brown
G2L["387"] = Instance.new("TextButton", G2L["37a"]);
G2L["387"]["TextWrapped"] = true;
G2L["387"]["TextStrokeTransparency"] = 0.5;
G2L["387"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["387"]["BorderSizePixel"] = 0;
G2L["387"]["Modal"] = true;
G2L["387"]["TextSize"] = 10;
G2L["387"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["387"]["BackgroundColor3"] = Color3.fromRGB(171, 86, 0);
G2L["387"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["387"]["ZIndex"] = 2;
G2L["387"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["387"]["LayoutOrder"] = 12;
G2L["387"]["Name"] = [[CGA brown]];
G2L["387"]["Text"] = [[]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.ButtonBackground
G2L["388"] = Instance.new("ImageLabel", G2L["2ea"]);
G2L["388"]["BorderSizePixel"] = 0;
G2L["388"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["388"]["ImageColor3"] = Color3.fromRGB(181, 129, 255);
G2L["388"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["388"]["Image"] = [[rbxassetid://736379820]];
G2L["388"]["Size"] = UDim2.new(0.9, 0, 0.9, 0);
G2L["388"]["Visible"] = false;
G2L["388"]["BackgroundTransparency"] = 1;
G2L["388"]["Name"] = [[ButtonBackground]];
G2L["388"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.ButtonTemplate
G2L["389"] = Instance.new("TextButton", G2L["2ea"]);
G2L["389"]["TextWrapped"] = true;
G2L["389"]["TextStrokeTransparency"] = 0.15;
G2L["389"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["389"]["BorderSizePixel"] = 0;
G2L["389"]["Modal"] = true;
G2L["389"]["TextSize"] = 10;
G2L["389"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["389"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["389"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["389"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["389"]["LayoutOrder"] = 4;
G2L["389"]["Name"] = [[ButtonTemplate]];
G2L["389"]["Text"] = [[]];
G2L["389"]["Visible"] = false;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Controls
G2L["38a"] = Instance.new("Frame", G2L["2ea"]);
G2L["38a"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["38a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["38a"]["Size"] = UDim2.new(1, 0, 0.15, 0);
G2L["38a"]["Name"] = [[Controls]];
G2L["38a"]["LayoutOrder"] = 3;
G2L["38a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Controls.ColorPickerButton
G2L["38b"] = Instance.new("ImageButton", G2L["38a"]);
G2L["38b"]["BorderSizePixel"] = 0;
G2L["38b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["38b"]["ImageColor3"] = Color3.fromRGB(255, 0, 5);
G2L["38b"]["Image"] = [[rbxassetid://879282065]];
G2L["38b"]["Size"] = UDim2.new(0, 42, 0, 24);
G2L["38b"]["BackgroundTransparency"] = 1;
G2L["38b"]["Name"] = [[ColorPickerButton]];
G2L["38b"]["Position"] = UDim2.new(0, -4, 0, 12);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Controls.ColorPickerButton.Icons
G2L["38c"] = Instance.new("ImageLabel", G2L["38b"]);
G2L["38c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["38c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["38c"]["Image"] = [[rbxassetid://879281598]];
G2L["38c"]["Size"] = UDim2.new(0, 30, 0, 16);
G2L["38c"]["BackgroundTransparency"] = 1;
G2L["38c"]["Name"] = [[Icons]];
G2L["38c"]["Position"] = UDim2.new(0.5, 0, 0.5, -1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Controls.ColorBar
G2L["38d"] = Instance.new("Frame", G2L["38a"]);
G2L["38d"]["BorderSizePixel"] = 0;
G2L["38d"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
G2L["38d"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["38d"]["Position"] = UDim2.new(0, 0, 0, 8);
G2L["38d"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Controls.LastColorButton
G2L["38e"] = Instance.new("TextButton", G2L["38a"]);
G2L["38e"]["BorderSizePixel"] = 0;
G2L["38e"]["TextSize"] = 14;
G2L["38e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["38e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["38e"]["AnchorPoint"] = Vector2.new(1, 0);
G2L["38e"]["Size"] = UDim2.new(0.7, 0, 0, 23);
G2L["38e"]["BackgroundTransparency"] = 1;
G2L["38e"]["LayoutOrder"] = 4;
G2L["38e"]["Name"] = [[LastColorButton]];
G2L["38e"]["Text"] = [[]];
G2L["38e"]["Position"] = UDim2.new(1, 0, 0, 12);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Controls.LastColorButton.ColorName
G2L["38f"] = Instance.new("TextLabel", G2L["38e"]);
G2L["38f"]["TextStrokeTransparency"] = 0.75;
G2L["38f"]["BorderSizePixel"] = 0;
G2L["38f"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["38f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["38f"]["TextSize"] = 10;
G2L["38f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["38f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["38f"]["BackgroundTransparency"] = 1;
G2L["38f"]["Size"] = UDim2.new(1, -5, 1, 0);
G2L["38f"]["Visible"] = false;
G2L["38f"]["Text"] = [[Medium stone grey]];
G2L["38f"]["Name"] = [[ColorName]];
G2L["38f"]["Position"] = UDim2.new(0, 0, 0, -2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTPaintToolGUI.Controls.LastColorButton.ColorName.ColorSquare
G2L["390"] = Instance.new("Frame", G2L["38f"]);
G2L["390"]["SizeConstraint"] = Enum.SizeConstraint.RelativeYY;
G2L["390"]["BorderSizePixel"] = 0;
G2L["390"]["Size"] = UDim2.new(0.6, 0, 0.6, 0);
G2L["390"]["Position"] = UDim2.new(0.5, -43, 0.2, 1);
G2L["390"]["Name"] = [[ColorSquare]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI
G2L["391"] = Instance.new("Frame", G2L["77"]);
G2L["391"]["Active"] = true;
G2L["391"]["BorderSizePixel"] = 0;
G2L["391"]["Size"] = UDim2.new(0, 245, 0, 90);
G2L["391"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["391"]["Name"] = [[BTResizeToolGUI]];
G2L["391"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption
G2L["392"] = Instance.new("Frame", G2L["391"]);
G2L["392"]["BorderSizePixel"] = 0;
G2L["392"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["392"]["Name"] = [[DirectionsOption]];
G2L["392"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Normal
G2L["393"] = Instance.new("Frame", G2L["392"]);
G2L["393"]["BorderSizePixel"] = 0;
G2L["393"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["393"]["Position"] = UDim2.new(0, 70, 0, 0);
G2L["393"]["Name"] = [[Normal]];
G2L["393"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Normal.SelectedIndicator
G2L["394"] = Instance.new("Frame", G2L["393"]);
G2L["394"]["BorderSizePixel"] = 0;
G2L["394"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["394"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["394"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["394"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Normal.Button
G2L["395"] = Instance.new("TextButton", G2L["393"]);
G2L["395"]["BorderSizePixel"] = 0;
G2L["395"]["TextTransparency"] = 1;
G2L["395"]["ZIndex"] = 2;
G2L["395"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["395"]["BackgroundTransparency"] = 1;
G2L["395"]["Name"] = [[Button]];
G2L["395"]["Text"] = [[]];
G2L["395"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Normal.Background
G2L["396"] = Instance.new("ImageLabel", G2L["393"]);
G2L["396"]["BorderSizePixel"] = 0;
G2L["396"]["Image"] = [[http://www.roblox.com/asset/?id=127774197]];
G2L["396"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["396"]["BackgroundTransparency"] = 1;
G2L["396"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Normal.Label
G2L["397"] = Instance.new("TextLabel", G2L["393"]);
G2L["397"]["BorderSizePixel"] = 0;
G2L["397"]["TextSize"] = 10;
G2L["397"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["397"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["397"]["BackgroundTransparency"] = 1;
G2L["397"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["397"]["Text"] = [[NORMAL]];
G2L["397"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Both
G2L["398"] = Instance.new("Frame", G2L["392"]);
G2L["398"]["BorderSizePixel"] = 0;
G2L["398"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["398"]["Position"] = UDim2.new(0, 135, 0, 0);
G2L["398"]["Name"] = [[Both]];
G2L["398"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Both.SelectedIndicator
G2L["399"] = Instance.new("Frame", G2L["398"]);
G2L["399"]["BorderSizePixel"] = 0;
G2L["399"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["399"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["399"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["399"]["Name"] = [[SelectedIndicator]];
G2L["399"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Both.Button
G2L["39a"] = Instance.new("TextButton", G2L["398"]);
G2L["39a"]["BorderSizePixel"] = 0;
G2L["39a"]["TextTransparency"] = 1;
G2L["39a"]["ZIndex"] = 2;
G2L["39a"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["39a"]["BackgroundTransparency"] = 1;
G2L["39a"]["Name"] = [[Button]];
G2L["39a"]["Text"] = [[]];
G2L["39a"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Both.Background
G2L["39b"] = Instance.new("ImageLabel", G2L["398"]);
G2L["39b"]["BorderSizePixel"] = 0;
G2L["39b"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["39b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["39b"]["BackgroundTransparency"] = 1;
G2L["39b"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Both.Label
G2L["39c"] = Instance.new("TextLabel", G2L["398"]);
G2L["39c"]["BorderSizePixel"] = 0;
G2L["39c"]["TextSize"] = 10;
G2L["39c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["39c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["39c"]["BackgroundTransparency"] = 1;
G2L["39c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["39c"]["Text"] = [[BOTH]];
G2L["39c"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Label
G2L["39d"] = Instance.new("Frame", G2L["392"]);
G2L["39d"]["BorderSizePixel"] = 0;
G2L["39d"]["Size"] = UDim2.new(0, 75, 0, 25);
G2L["39d"]["Name"] = [[Label]];
G2L["39d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.DirectionsOption.Label.TextLabel
G2L["39e"] = Instance.new("TextLabel", G2L["39d"]);
G2L["39e"]["TextWrapped"] = true;
G2L["39e"]["TextStrokeTransparency"] = 0;
G2L["39e"]["BorderSizePixel"] = 0;
G2L["39e"]["TextSize"] = 10;
G2L["39e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["39e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["39e"]["BackgroundTransparency"] = 1;
G2L["39e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["39e"]["Text"] = [[Directions]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Title
G2L["39f"] = Instance.new("Frame", G2L["391"]);
G2L["39f"]["BorderSizePixel"] = 0;
G2L["39f"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["39f"]["Name"] = [[Title]];
G2L["39f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Title.ColorBar
G2L["3a0"] = Instance.new("Frame", G2L["39f"]);
G2L["3a0"]["BorderSizePixel"] = 0;
G2L["3a0"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["3a0"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["3a0"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["3a0"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Title.Label
G2L["3a1"] = Instance.new("TextLabel", G2L["39f"]);
G2L["3a1"]["TextWrapped"] = true;
G2L["3a1"]["TextStrokeTransparency"] = 0;
G2L["3a1"]["BorderSizePixel"] = 0;
G2L["3a1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3a1"]["TextSize"] = 10;
G2L["3a1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3a1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a1"]["BackgroundTransparency"] = 1;
G2L["3a1"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3a1"]["Text"] = [[RESIZE TOOL]];
G2L["3a1"]["Name"] = [[Label]];
G2L["3a1"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Title.F3XSignature
G2L["3a2"] = Instance.new("TextLabel", G2L["39f"]);
G2L["3a2"]["TextWrapped"] = true;
G2L["3a2"]["TextStrokeTransparency"] = 0.9;
G2L["3a2"]["BorderSizePixel"] = 0;
G2L["3a2"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["3a2"]["TextSize"] = 14;
G2L["3a2"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3a2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a2"]["BackgroundTransparency"] = 1;
G2L["3a2"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3a2"]["Text"] = [[F3X]];
G2L["3a2"]["Name"] = [[F3XSignature]];
G2L["3a2"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.IncrementOption
G2L["3a3"] = Instance.new("Frame", G2L["391"]);
G2L["3a3"]["BorderSizePixel"] = 0;
G2L["3a3"]["Position"] = UDim2.new(0, 0, 0, 65);
G2L["3a3"]["Name"] = [[IncrementOption]];
G2L["3a3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.IncrementOption.Increment
G2L["3a4"] = Instance.new("Frame", G2L["3a3"]);
G2L["3a4"]["BorderSizePixel"] = 0;
G2L["3a4"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3a4"]["Position"] = UDim2.new(0, 70, 0, 0);
G2L["3a4"]["Name"] = [[Increment]];
G2L["3a4"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.IncrementOption.Increment.SelectedIndicator
G2L["3a5"] = Instance.new("Frame", G2L["3a4"]);
G2L["3a5"]["BorderSizePixel"] = 0;
G2L["3a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a5"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["3a5"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["3a5"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.IncrementOption.Increment.TextBox
G2L["3a6"] = Instance.new("TextBox", G2L["3a4"]);
G2L["3a6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a6"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3a6"]["ZIndex"] = 2;
G2L["3a6"]["BorderSizePixel"] = 0;
G2L["3a6"]["TextSize"] = 10;
G2L["3a6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3a6"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3a6"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3a6"]["Text"] = [[1]];
G2L["3a6"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.IncrementOption.Increment.Background
G2L["3a7"] = Instance.new("ImageLabel", G2L["3a4"]);
G2L["3a7"]["BorderSizePixel"] = 0;
G2L["3a7"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3a7"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3a7"]["BackgroundTransparency"] = 1;
G2L["3a7"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.IncrementOption.Label
G2L["3a8"] = Instance.new("Frame", G2L["3a3"]);
G2L["3a8"]["BorderSizePixel"] = 0;
G2L["3a8"]["Size"] = UDim2.new(0, 75, 0, 25);
G2L["3a8"]["Name"] = [[Label]];
G2L["3a8"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.IncrementOption.Label.TextLabel
G2L["3a9"] = Instance.new("TextLabel", G2L["3a8"]);
G2L["3a9"]["TextWrapped"] = true;
G2L["3a9"]["TextStrokeTransparency"] = 0;
G2L["3a9"]["BorderSizePixel"] = 0;
G2L["3a9"]["TextSize"] = 10;
G2L["3a9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3a9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a9"]["BackgroundTransparency"] = 1;
G2L["3a9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3a9"]["Text"] = [[Increment]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info
G2L["3aa"] = Instance.new("Frame", G2L["391"]);
G2L["3aa"]["Visible"] = false;
G2L["3aa"]["BorderSizePixel"] = 0;
G2L["3aa"]["Size"] = UDim2.new(1, -5, 0, 60);
G2L["3aa"]["Position"] = UDim2.new(0, 5, 0, 100);
G2L["3aa"]["Name"] = [[Info]];
G2L["3aa"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.ColorBar
G2L["3ab"] = Instance.new("Frame", G2L["3aa"]);
G2L["3ab"]["BorderSizePixel"] = 0;
G2L["3ab"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["3ab"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["3ab"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.Label
G2L["3ac"] = Instance.new("TextLabel", G2L["3aa"]);
G2L["3ac"]["TextWrapped"] = true;
G2L["3ac"]["TextStrokeTransparency"] = 0;
G2L["3ac"]["BorderSizePixel"] = 0;
G2L["3ac"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3ac"]["TextSize"] = 10;
G2L["3ac"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3ac"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3ac"]["BackgroundTransparency"] = 1;
G2L["3ac"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["3ac"]["Text"] = [[SELECTION INFO]];
G2L["3ac"]["Name"] = [[Label]];
G2L["3ac"]["Position"] = UDim2.new(0, 10, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo
G2L["3ad"] = Instance.new("Frame", G2L["3aa"]);
G2L["3ad"]["BorderSizePixel"] = 0;
G2L["3ad"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["3ad"]["Name"] = [[SizeInfo]];
G2L["3ad"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.TextLabel
G2L["3ae"] = Instance.new("TextLabel", G2L["3ad"]);
G2L["3ae"]["TextWrapped"] = true;
G2L["3ae"]["TextStrokeTransparency"] = 0;
G2L["3ae"]["BorderSizePixel"] = 0;
G2L["3ae"]["TextSize"] = 10;
G2L["3ae"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3ae"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3ae"]["BackgroundTransparency"] = 1;
G2L["3ae"]["Size"] = UDim2.new(0, 75, 0, 25);
G2L["3ae"]["Text"] = [[Size]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.X
G2L["3af"] = Instance.new("Frame", G2L["3ad"]);
G2L["3af"]["BorderSizePixel"] = 0;
G2L["3af"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3af"]["Position"] = UDim2.new(0, 70, 0, 0);
G2L["3af"]["Name"] = [[X]];
G2L["3af"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.X.TextBox
G2L["3b0"] = Instance.new("TextBox", G2L["3af"]);
G2L["3b0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3b0"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3b0"]["ZIndex"] = 2;
G2L["3b0"]["BorderSizePixel"] = 0;
G2L["3b0"]["TextSize"] = 10;
G2L["3b0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3b0"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3b0"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3b0"]["Text"] = [[]];
G2L["3b0"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.X.Background
G2L["3b1"] = Instance.new("ImageLabel", G2L["3af"]);
G2L["3b1"]["BorderSizePixel"] = 0;
G2L["3b1"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3b1"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3b1"]["BackgroundTransparency"] = 1;
G2L["3b1"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.Y
G2L["3b2"] = Instance.new("Frame", G2L["3ad"]);
G2L["3b2"]["BorderSizePixel"] = 0;
G2L["3b2"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3b2"]["Position"] = UDim2.new(0, 117, 0, 0);
G2L["3b2"]["Name"] = [[Y]];
G2L["3b2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.Y.TextBox
G2L["3b3"] = Instance.new("TextBox", G2L["3b2"]);
G2L["3b3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3b3"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3b3"]["ZIndex"] = 2;
G2L["3b3"]["BorderSizePixel"] = 0;
G2L["3b3"]["TextSize"] = 10;
G2L["3b3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3b3"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3b3"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3b3"]["Text"] = [[]];
G2L["3b3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.Y.Background
G2L["3b4"] = Instance.new("ImageLabel", G2L["3b2"]);
G2L["3b4"]["BorderSizePixel"] = 0;
G2L["3b4"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3b4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3b4"]["BackgroundTransparency"] = 1;
G2L["3b4"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.Z
G2L["3b5"] = Instance.new("Frame", G2L["3ad"]);
G2L["3b5"]["BorderSizePixel"] = 0;
G2L["3b5"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3b5"]["Position"] = UDim2.new(0, 164, 0, 0);
G2L["3b5"]["Name"] = [[Z]];
G2L["3b5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.Z.TextBox
G2L["3b6"] = Instance.new("TextBox", G2L["3b5"]);
G2L["3b6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3b6"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3b6"]["ZIndex"] = 2;
G2L["3b6"]["BorderSizePixel"] = 0;
G2L["3b6"]["TextSize"] = 10;
G2L["3b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3b6"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3b6"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3b6"]["Text"] = [[]];
G2L["3b6"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Info.SizeInfo.Z.Background
G2L["3b7"] = Instance.new("ImageLabel", G2L["3b5"]);
G2L["3b7"]["BorderSizePixel"] = 0;
G2L["3b7"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3b7"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3b7"]["BackgroundTransparency"] = 1;
G2L["3b7"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Changes
G2L["3b8"] = Instance.new("Frame", G2L["391"]);
G2L["3b8"]["BorderSizePixel"] = 0;
G2L["3b8"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["3b8"]["Position"] = UDim2.new(0, 5, 1, 10);
G2L["3b8"]["Name"] = [[Changes]];
G2L["3b8"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Changes.ColorBar
G2L["3b9"] = Instance.new("Frame", G2L["3b8"]);
G2L["3b9"]["BorderSizePixel"] = 0;
G2L["3b9"]["BackgroundColor3"] = Color3.fromRGB(5, 176, 237);
G2L["3b9"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["3b9"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTResizeToolGUI.Changes.Text
G2L["3ba"] = Instance.new("TextLabel", G2L["3b8"]);
G2L["3ba"]["TextWrapped"] = true;
G2L["3ba"]["TextStrokeTransparency"] = 0.5;
G2L["3ba"]["BorderSizePixel"] = 0;
G2L["3ba"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["3ba"]["TextSize"] = 10;
G2L["3ba"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3ba"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3ba"]["BackgroundTransparency"] = 1;
G2L["3ba"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["3ba"]["Text"] = [[resized 0 studs]];
G2L["3ba"]["Name"] = [[Text]];
G2L["3ba"]["Position"] = UDim2.new(0, 10, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI
G2L["3bb"] = Instance.new("Frame", G2L["77"]);
G2L["3bb"]["Active"] = true;
G2L["3bb"]["BorderSizePixel"] = 0;
G2L["3bb"]["Size"] = UDim2.new(0, 245, 0, 90);
G2L["3bb"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["3bb"]["Name"] = [[BTRotateToolGUI]];
G2L["3bb"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption
G2L["3bc"] = Instance.new("Frame", G2L["3bb"]);
G2L["3bc"]["BorderSizePixel"] = 0;
G2L["3bc"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["3bc"]["Name"] = [[PivotOption]];
G2L["3bc"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Center
G2L["3bd"] = Instance.new("Frame", G2L["3bc"]);
G2L["3bd"]["BorderSizePixel"] = 0;
G2L["3bd"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["3bd"]["Position"] = UDim2.new(0, 50, 0, 0);
G2L["3bd"]["Name"] = [[Center]];
G2L["3bd"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Center.SelectedIndicator
G2L["3be"] = Instance.new("Frame", G2L["3bd"]);
G2L["3be"]["BorderSizePixel"] = 0;
G2L["3be"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3be"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["3be"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["3be"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Center.Button
G2L["3bf"] = Instance.new("TextButton", G2L["3bd"]);
G2L["3bf"]["BorderSizePixel"] = 0;
G2L["3bf"]["TextTransparency"] = 1;
G2L["3bf"]["ZIndex"] = 2;
G2L["3bf"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3bf"]["BackgroundTransparency"] = 1;
G2L["3bf"]["Name"] = [[Button]];
G2L["3bf"]["Text"] = [[]];
G2L["3bf"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Center.Background
G2L["3c0"] = Instance.new("ImageLabel", G2L["3bd"]);
G2L["3c0"]["BorderSizePixel"] = 0;
G2L["3c0"]["Image"] = [[http://www.roblox.com/asset/?id=127774197]];
G2L["3c0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3c0"]["BackgroundTransparency"] = 1;
G2L["3c0"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Center.Label
G2L["3c1"] = Instance.new("TextLabel", G2L["3bd"]);
G2L["3c1"]["BorderSizePixel"] = 0;
G2L["3c1"]["TextSize"] = 10;
G2L["3c1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3c1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3c1"]["BackgroundTransparency"] = 1;
G2L["3c1"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3c1"]["Text"] = [[CENTER]];
G2L["3c1"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Local
G2L["3c2"] = Instance.new("Frame", G2L["3bc"]);
G2L["3c2"]["BorderSizePixel"] = 0;
G2L["3c2"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["3c2"]["Position"] = UDim2.new(0, 115, 0, 0);
G2L["3c2"]["Name"] = [[Local]];
G2L["3c2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Local.SelectedIndicator
G2L["3c3"] = Instance.new("Frame", G2L["3c2"]);
G2L["3c3"]["BorderSizePixel"] = 0;
G2L["3c3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3c3"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["3c3"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["3c3"]["Name"] = [[SelectedIndicator]];
G2L["3c3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Local.Button
G2L["3c4"] = Instance.new("TextButton", G2L["3c2"]);
G2L["3c4"]["BorderSizePixel"] = 0;
G2L["3c4"]["TextTransparency"] = 1;
G2L["3c4"]["ZIndex"] = 2;
G2L["3c4"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3c4"]["BackgroundTransparency"] = 1;
G2L["3c4"]["Name"] = [[Button]];
G2L["3c4"]["Text"] = [[]];
G2L["3c4"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Local.Background
G2L["3c5"] = Instance.new("ImageLabel", G2L["3c2"]);
G2L["3c5"]["BorderSizePixel"] = 0;
G2L["3c5"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3c5"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3c5"]["BackgroundTransparency"] = 1;
G2L["3c5"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Local.Label
G2L["3c6"] = Instance.new("TextLabel", G2L["3c2"]);
G2L["3c6"]["BorderSizePixel"] = 0;
G2L["3c6"]["TextSize"] = 10;
G2L["3c6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3c6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3c6"]["BackgroundTransparency"] = 1;
G2L["3c6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3c6"]["Text"] = [[LOCAL]];
G2L["3c6"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Last
G2L["3c7"] = Instance.new("Frame", G2L["3bc"]);
G2L["3c7"]["BorderSizePixel"] = 0;
G2L["3c7"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["3c7"]["Position"] = UDim2.new(0, 180, 0, 0);
G2L["3c7"]["Name"] = [[Last]];
G2L["3c7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Last.SelectedIndicator
G2L["3c8"] = Instance.new("Frame", G2L["3c7"]);
G2L["3c8"]["BorderSizePixel"] = 0;
G2L["3c8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3c8"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["3c8"]["Position"] = UDim2.new(0, 6, 0, -2);
G2L["3c8"]["Name"] = [[SelectedIndicator]];
G2L["3c8"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Last.Button
G2L["3c9"] = Instance.new("TextButton", G2L["3c7"]);
G2L["3c9"]["BorderSizePixel"] = 0;
G2L["3c9"]["TextTransparency"] = 1;
G2L["3c9"]["ZIndex"] = 2;
G2L["3c9"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3c9"]["BackgroundTransparency"] = 1;
G2L["3c9"]["Name"] = [[Button]];
G2L["3c9"]["Text"] = [[]];
G2L["3c9"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Last.Background
G2L["3ca"] = Instance.new("ImageLabel", G2L["3c7"]);
G2L["3ca"]["BorderSizePixel"] = 0;
G2L["3ca"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3ca"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3ca"]["BackgroundTransparency"] = 1;
G2L["3ca"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Last.Label
G2L["3cb"] = Instance.new("TextLabel", G2L["3c7"]);
G2L["3cb"]["BorderSizePixel"] = 0;
G2L["3cb"]["TextSize"] = 10;
G2L["3cb"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3cb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3cb"]["BackgroundTransparency"] = 1;
G2L["3cb"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3cb"]["Text"] = [[LAST]];
G2L["3cb"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Label
G2L["3cc"] = Instance.new("Frame", G2L["3bc"]);
G2L["3cc"]["BorderSizePixel"] = 0;
G2L["3cc"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3cc"]["Name"] = [[Label]];
G2L["3cc"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.PivotOption.Label.TextLabel
G2L["3cd"] = Instance.new("TextLabel", G2L["3cc"]);
G2L["3cd"]["TextWrapped"] = true;
G2L["3cd"]["TextStrokeTransparency"] = 0;
G2L["3cd"]["BorderSizePixel"] = 0;
G2L["3cd"]["TextSize"] = 10;
G2L["3cd"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3cd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3cd"]["BackgroundTransparency"] = 1;
G2L["3cd"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3cd"]["Text"] = [[Pivot]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Title
G2L["3ce"] = Instance.new("Frame", G2L["3bb"]);
G2L["3ce"]["BorderSizePixel"] = 0;
G2L["3ce"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["3ce"]["Name"] = [[Title]];
G2L["3ce"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Title.ColorBar
G2L["3cf"] = Instance.new("Frame", G2L["3ce"]);
G2L["3cf"]["BorderSizePixel"] = 0;
G2L["3cf"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["3cf"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["3cf"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["3cf"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Title.Label
G2L["3d0"] = Instance.new("TextLabel", G2L["3ce"]);
G2L["3d0"]["TextWrapped"] = true;
G2L["3d0"]["TextStrokeTransparency"] = 0;
G2L["3d0"]["BorderSizePixel"] = 0;
G2L["3d0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3d0"]["TextSize"] = 10;
G2L["3d0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3d0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3d0"]["BackgroundTransparency"] = 1;
G2L["3d0"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3d0"]["Text"] = [[ROTATE TOOL]];
G2L["3d0"]["Name"] = [[Label]];
G2L["3d0"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Title.F3XSignature
G2L["3d1"] = Instance.new("TextLabel", G2L["3ce"]);
G2L["3d1"]["TextWrapped"] = true;
G2L["3d1"]["TextStrokeTransparency"] = 0.9;
G2L["3d1"]["BorderSizePixel"] = 0;
G2L["3d1"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["3d1"]["TextSize"] = 14;
G2L["3d1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3d1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3d1"]["BackgroundTransparency"] = 1;
G2L["3d1"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3d1"]["Text"] = [[F3X]];
G2L["3d1"]["Name"] = [[F3XSignature]];
G2L["3d1"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.IncrementOption
G2L["3d2"] = Instance.new("Frame", G2L["3bb"]);
G2L["3d2"]["BorderSizePixel"] = 0;
G2L["3d2"]["Position"] = UDim2.new(0, 0, 0, 65);
G2L["3d2"]["Name"] = [[IncrementOption]];
G2L["3d2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.IncrementOption.Increment
G2L["3d3"] = Instance.new("Frame", G2L["3d2"]);
G2L["3d3"]["BorderSizePixel"] = 0;
G2L["3d3"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3d3"]["Position"] = UDim2.new(0, 70, 0, 0);
G2L["3d3"]["Name"] = [[Increment]];
G2L["3d3"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.IncrementOption.Increment.SelectedIndicator
G2L["3d4"] = Instance.new("Frame", G2L["3d3"]);
G2L["3d4"]["BorderSizePixel"] = 0;
G2L["3d4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3d4"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["3d4"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["3d4"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.IncrementOption.Increment.TextBox
G2L["3d5"] = Instance.new("TextBox", G2L["3d3"]);
G2L["3d5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3d5"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3d5"]["ZIndex"] = 2;
G2L["3d5"]["BorderSizePixel"] = 0;
G2L["3d5"]["TextSize"] = 10;
G2L["3d5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3d5"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3d5"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3d5"]["Text"] = [[15]];
G2L["3d5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.IncrementOption.Increment.Background
G2L["3d6"] = Instance.new("ImageLabel", G2L["3d3"]);
G2L["3d6"]["BorderSizePixel"] = 0;
G2L["3d6"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3d6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3d6"]["BackgroundTransparency"] = 1;
G2L["3d6"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.IncrementOption.Label
G2L["3d7"] = Instance.new("Frame", G2L["3d2"]);
G2L["3d7"]["BorderSizePixel"] = 0;
G2L["3d7"]["Size"] = UDim2.new(0, 75, 0, 25);
G2L["3d7"]["Name"] = [[Label]];
G2L["3d7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.IncrementOption.Label.TextLabel
G2L["3d8"] = Instance.new("TextLabel", G2L["3d7"]);
G2L["3d8"]["TextWrapped"] = true;
G2L["3d8"]["TextStrokeTransparency"] = 0;
G2L["3d8"]["BorderSizePixel"] = 0;
G2L["3d8"]["TextSize"] = 10;
G2L["3d8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3d8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3d8"]["BackgroundTransparency"] = 1;
G2L["3d8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3d8"]["Text"] = [[Increment]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info
G2L["3d9"] = Instance.new("Frame", G2L["3bb"]);
G2L["3d9"]["Visible"] = false;
G2L["3d9"]["BorderSizePixel"] = 0;
G2L["3d9"]["Size"] = UDim2.new(1, -5, 0, 60);
G2L["3d9"]["Position"] = UDim2.new(0, 5, 0, 100);
G2L["3d9"]["Name"] = [[Info]];
G2L["3d9"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.ColorBar
G2L["3da"] = Instance.new("Frame", G2L["3d9"]);
G2L["3da"]["BorderSizePixel"] = 0;
G2L["3da"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["3da"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["3da"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.Label
G2L["3db"] = Instance.new("TextLabel", G2L["3d9"]);
G2L["3db"]["TextWrapped"] = true;
G2L["3db"]["TextStrokeTransparency"] = 0;
G2L["3db"]["BorderSizePixel"] = 0;
G2L["3db"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3db"]["TextSize"] = 10;
G2L["3db"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3db"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3db"]["BackgroundTransparency"] = 1;
G2L["3db"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["3db"]["Text"] = [[SELECTION INFO]];
G2L["3db"]["Name"] = [[Label]];
G2L["3db"]["Position"] = UDim2.new(0, 10, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo
G2L["3dc"] = Instance.new("Frame", G2L["3d9"]);
G2L["3dc"]["BorderSizePixel"] = 0;
G2L["3dc"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["3dc"]["Name"] = [[RotationInfo]];
G2L["3dc"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.TextLabel
G2L["3dd"] = Instance.new("TextLabel", G2L["3dc"]);
G2L["3dd"]["TextWrapped"] = true;
G2L["3dd"]["TextStrokeTransparency"] = 0;
G2L["3dd"]["BorderSizePixel"] = 0;
G2L["3dd"]["TextSize"] = 10;
G2L["3dd"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3dd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3dd"]["BackgroundTransparency"] = 1;
G2L["3dd"]["Size"] = UDim2.new(0, 75, 0, 25);
G2L["3dd"]["Text"] = [[Rotation]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.X
G2L["3de"] = Instance.new("Frame", G2L["3dc"]);
G2L["3de"]["BorderSizePixel"] = 0;
G2L["3de"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3de"]["Position"] = UDim2.new(0, 70, 0, 0);
G2L["3de"]["Name"] = [[X]];
G2L["3de"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.X.TextBox
G2L["3df"] = Instance.new("TextBox", G2L["3de"]);
G2L["3df"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3df"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3df"]["ZIndex"] = 2;
G2L["3df"]["BorderSizePixel"] = 0;
G2L["3df"]["TextSize"] = 10;
G2L["3df"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3df"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3df"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3df"]["Text"] = [[]];
G2L["3df"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.X.Background
G2L["3e0"] = Instance.new("ImageLabel", G2L["3de"]);
G2L["3e0"]["BorderSizePixel"] = 0;
G2L["3e0"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3e0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3e0"]["BackgroundTransparency"] = 1;
G2L["3e0"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.Y
G2L["3e1"] = Instance.new("Frame", G2L["3dc"]);
G2L["3e1"]["BorderSizePixel"] = 0;
G2L["3e1"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3e1"]["Position"] = UDim2.new(0, 117, 0, 0);
G2L["3e1"]["Name"] = [[Y]];
G2L["3e1"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.Y.TextBox
G2L["3e2"] = Instance.new("TextBox", G2L["3e1"]);
G2L["3e2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e2"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3e2"]["ZIndex"] = 2;
G2L["3e2"]["BorderSizePixel"] = 0;
G2L["3e2"]["TextSize"] = 10;
G2L["3e2"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3e2"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3e2"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3e2"]["Text"] = [[]];
G2L["3e2"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.Y.Background
G2L["3e3"] = Instance.new("ImageLabel", G2L["3e1"]);
G2L["3e3"]["BorderSizePixel"] = 0;
G2L["3e3"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3e3"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3e3"]["BackgroundTransparency"] = 1;
G2L["3e3"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.Z
G2L["3e4"] = Instance.new("Frame", G2L["3dc"]);
G2L["3e4"]["BorderSizePixel"] = 0;
G2L["3e4"]["Size"] = UDim2.new(0, 50, 0, 25);
G2L["3e4"]["Position"] = UDim2.new(0, 164, 0, 0);
G2L["3e4"]["Name"] = [[Z]];
G2L["3e4"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.Z.TextBox
G2L["3e5"] = Instance.new("TextBox", G2L["3e4"]);
G2L["3e5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e5"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["3e5"]["ZIndex"] = 2;
G2L["3e5"]["BorderSizePixel"] = 0;
G2L["3e5"]["TextSize"] = 10;
G2L["3e5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3e5"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3e5"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["3e5"]["Text"] = [[]];
G2L["3e5"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Info.RotationInfo.Z.Background
G2L["3e6"] = Instance.new("ImageLabel", G2L["3e4"]);
G2L["3e6"]["BorderSizePixel"] = 0;
G2L["3e6"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["3e6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["3e6"]["BackgroundTransparency"] = 1;
G2L["3e6"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Changes
G2L["3e7"] = Instance.new("Frame", G2L["3bb"]);
G2L["3e7"]["BorderSizePixel"] = 0;
G2L["3e7"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["3e7"]["Position"] = UDim2.new(0, 5, 1, 10);
G2L["3e7"]["Name"] = [[Changes]];
G2L["3e7"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Changes.ColorBar
G2L["3e8"] = Instance.new("Frame", G2L["3e7"]);
G2L["3e8"]["BorderSizePixel"] = 0;
G2L["3e8"]["BackgroundColor3"] = Color3.fromRGB(76, 152, 76);
G2L["3e8"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["3e8"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTRotateToolGUI.Changes.Text
G2L["3e9"] = Instance.new("TextLabel", G2L["3e7"]);
G2L["3e9"]["TextWrapped"] = true;
G2L["3e9"]["TextStrokeTransparency"] = 0.5;
G2L["3e9"]["BorderSizePixel"] = 0;
G2L["3e9"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["3e9"]["TextSize"] = 10;
G2L["3e9"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3e9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e9"]["BackgroundTransparency"] = 1;
G2L["3e9"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["3e9"]["Text"] = [[rotated 0 degrees]];
G2L["3e9"]["Name"] = [[Text]];
G2L["3e9"]["Position"] = UDim2.new(0, 10, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI
G2L["3ea"] = Instance.new("Frame", G2L["77"]);
G2L["3ea"]["Active"] = true;
G2L["3ea"]["BorderSizePixel"] = 0;
G2L["3ea"]["Size"] = UDim2.new(0, 245, 0, 90);
G2L["3ea"]["Position"] = UDim2.new(0, 0, 0.4, 0);
G2L["3ea"]["Name"] = [[BTSurfaceToolGUI]];
G2L["3ea"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.Title
G2L["3eb"] = Instance.new("Frame", G2L["3ea"]);
G2L["3eb"]["BorderSizePixel"] = 0;
G2L["3eb"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["3eb"]["Name"] = [[Title]];
G2L["3eb"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.Title.ColorBar
G2L["3ec"] = Instance.new("Frame", G2L["3eb"]);
G2L["3ec"]["BorderSizePixel"] = 0;
G2L["3ec"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["3ec"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["3ec"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["3ec"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.Title.Label
G2L["3ed"] = Instance.new("TextLabel", G2L["3eb"]);
G2L["3ed"]["TextWrapped"] = true;
G2L["3ed"]["TextStrokeTransparency"] = 0;
G2L["3ed"]["BorderSizePixel"] = 0;
G2L["3ed"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3ed"]["TextSize"] = 10;
G2L["3ed"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3ed"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3ed"]["BackgroundTransparency"] = 1;
G2L["3ed"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3ed"]["Text"] = [[SURFACE TOOL]];
G2L["3ed"]["Name"] = [[Label]];
G2L["3ed"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.Title.F3XSignature
G2L["3ee"] = Instance.new("TextLabel", G2L["3eb"]);
G2L["3ee"]["TextWrapped"] = true;
G2L["3ee"]["TextStrokeTransparency"] = 0.9;
G2L["3ee"]["BorderSizePixel"] = 0;
G2L["3ee"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["3ee"]["TextSize"] = 14;
G2L["3ee"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3ee"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3ee"]["BackgroundTransparency"] = 1;
G2L["3ee"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["3ee"]["Text"] = [[F3X]];
G2L["3ee"]["Name"] = [[F3XSignature]];
G2L["3ee"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption
G2L["3ef"] = Instance.new("Frame", G2L["3ea"]);
G2L["3ef"]["BorderSizePixel"] = 0;
G2L["3ef"]["Size"] = UDim2.new(0, 120, 0, 25);
G2L["3ef"]["Position"] = UDim2.new(0, 14, 0, 30);
G2L["3ef"]["Name"] = [[SideOption]];
G2L["3ef"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Label
G2L["3f0"] = Instance.new("TextLabel", G2L["3ef"]);
G2L["3f0"]["TextWrapped"] = true;
G2L["3f0"]["TextStrokeTransparency"] = 0;
G2L["3f0"]["BorderSizePixel"] = 0;
G2L["3f0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3f0"]["TextSize"] = 10;
G2L["3f0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3f0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f0"]["BackgroundTransparency"] = 1;
G2L["3f0"]["Size"] = UDim2.new(0, 40, 0, 25);
G2L["3f0"]["Text"] = [[Side]];
G2L["3f0"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown
G2L["3f1"] = Instance.new("TextButton", G2L["3ef"]);
G2L["3f1"]["TextStrokeTransparency"] = 0.8;
G2L["3f1"]["BorderSizePixel"] = 0;
G2L["3f1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3f1"]["TextSize"] = 10;
G2L["3f1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3f1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3f1"]["Size"] = UDim2.new(0, 72, 0, 25);
G2L["3f1"]["BackgroundTransparency"] = 0.3;
G2L["3f1"]["Name"] = [[Dropdown]];
G2L["3f1"]["Text"] = [[]];
G2L["3f1"]["Position"] = UDim2.new(0, 30, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown.Icon
G2L["3f2"] = Instance.new("ImageLabel", G2L["3f1"]);
G2L["3f2"]["ZIndex"] = 3;
G2L["3f2"]["BorderSizePixel"] = 0;
G2L["3f2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f2"]["Image"] = [[rbxassetid://134367382]];
G2L["3f2"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["3f2"]["BackgroundTransparency"] = 1;
G2L["3f2"]["Name"] = [[Icon]];
G2L["3f2"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown.OptionButton
G2L["3f3"] = Instance.new("TextButton", G2L["3f1"]);
G2L["3f3"]["TextStrokeTransparency"] = 0.8;
G2L["3f3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3f3"]["TextSize"] = 10;
G2L["3f3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3f3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3f3"]["ZIndex"] = 4;
G2L["3f3"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["3f3"]["BackgroundTransparency"] = 0.3;
G2L["3f3"]["Name"] = [[OptionButton]];
G2L["3f3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3f3"]["Text"] = [[]];
G2L["3f3"]["Visible"] = false;
G2L["3f3"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown.OptionButton.OptionLabel
G2L["3f4"] = Instance.new("TextLabel", G2L["3f3"]);
G2L["3f4"]["ZIndex"] = 4;
G2L["3f4"]["BorderSizePixel"] = 0;
G2L["3f4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3f4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f4"]["TextSize"] = 11;
G2L["3f4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3f4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f4"]["BackgroundTransparency"] = 1;
G2L["3f4"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["3f4"]["Text"] = [[ALL]];
G2L["3f4"]["Name"] = [[OptionLabel]];
G2L["3f4"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown.Options
G2L["3f5"] = Instance.new("Folder", G2L["3f1"]);
G2L["3f5"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown.Border
G2L["3f6"] = Instance.new("Frame", G2L["3f1"]);
G2L["3f6"]["BorderSizePixel"] = 0;
G2L["3f6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3f6"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["3f6"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["3f6"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown.CurrentOption
G2L["3f7"] = Instance.new("TextLabel", G2L["3f1"]);
G2L["3f7"]["ZIndex"] = 3;
G2L["3f7"]["BorderSizePixel"] = 0;
G2L["3f7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3f7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f7"]["TextSize"] = 10;
G2L["3f7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3f7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3f7"]["BackgroundTransparency"] = 1;
G2L["3f7"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["3f7"]["Text"] = [[ALL]];
G2L["3f7"]["Name"] = [[CurrentOption]];
G2L["3f7"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.SideOption.Dropdown.[Component]
G2L["3f8"] = Instance.new("ModuleScript", G2L["3f1"]);
G2L["3f8"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption
G2L["3f9"] = Instance.new("Frame", G2L["3ea"]);
G2L["3f9"]["BorderSizePixel"] = 0;
G2L["3f9"]["Size"] = UDim2.new(0, 120, 0, 25);
G2L["3f9"]["Position"] = UDim2.new(0, 124, 0, 30);
G2L["3f9"]["Name"] = [[TypeOption]];
G2L["3f9"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Label
G2L["3fa"] = Instance.new("TextLabel", G2L["3f9"]);
G2L["3fa"]["TextWrapped"] = true;
G2L["3fa"]["TextStrokeTransparency"] = 0;
G2L["3fa"]["BorderSizePixel"] = 0;
G2L["3fa"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3fa"]["TextSize"] = 10;
G2L["3fa"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3fa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3fa"]["BackgroundTransparency"] = 1;
G2L["3fa"]["Size"] = UDim2.new(0, 40, 0, 25);
G2L["3fa"]["Text"] = [[Type]];
G2L["3fa"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown
G2L["3fb"] = Instance.new("TextButton", G2L["3f9"]);
G2L["3fb"]["TextStrokeTransparency"] = 0.8;
G2L["3fb"]["BorderSizePixel"] = 0;
G2L["3fb"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3fb"]["TextSize"] = 10;
G2L["3fb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3fb"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3fb"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3fb"]["Size"] = UDim2.new(0, 91, 0, 25);
G2L["3fb"]["BackgroundTransparency"] = 0.3;
G2L["3fb"]["Name"] = [[Dropdown]];
G2L["3fb"]["Text"] = [[]];
G2L["3fb"]["Position"] = UDim2.new(0, 30, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown.Icon
G2L["3fc"] = Instance.new("ImageLabel", G2L["3fb"]);
G2L["3fc"]["ZIndex"] = 3;
G2L["3fc"]["BorderSizePixel"] = 0;
G2L["3fc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3fc"]["Image"] = [[rbxassetid://134367382]];
G2L["3fc"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["3fc"]["BackgroundTransparency"] = 1;
G2L["3fc"]["Name"] = [[Icon]];
G2L["3fc"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown.OptionButton
G2L["3fd"] = Instance.new("TextButton", G2L["3fb"]);
G2L["3fd"]["TextStrokeTransparency"] = 0.8;
G2L["3fd"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3fd"]["TextSize"] = 10;
G2L["3fd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3fd"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3fd"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3fd"]["ZIndex"] = 4;
G2L["3fd"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["3fd"]["BackgroundTransparency"] = 0.3;
G2L["3fd"]["Name"] = [[OptionButton]];
G2L["3fd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3fd"]["Text"] = [[]];
G2L["3fd"]["Visible"] = false;
G2L["3fd"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown.OptionButton.OptionLabel
G2L["3fe"] = Instance.new("TextLabel", G2L["3fd"]);
G2L["3fe"]["ZIndex"] = 4;
G2L["3fe"]["BorderSizePixel"] = 0;
G2L["3fe"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3fe"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3fe"]["TextSize"] = 11;
G2L["3fe"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3fe"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3fe"]["BackgroundTransparency"] = 1;
G2L["3fe"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["3fe"]["Text"] = [[ALL]];
G2L["3fe"]["Name"] = [[OptionLabel]];
G2L["3fe"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown.Options
G2L["3ff"] = Instance.new("Folder", G2L["3fb"]);
G2L["3ff"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown.Border
G2L["400"] = Instance.new("Frame", G2L["3fb"]);
G2L["400"]["BorderSizePixel"] = 0;
G2L["400"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["400"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["400"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["400"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown.CurrentOption
G2L["401"] = Instance.new("TextLabel", G2L["3fb"]);
G2L["401"]["ZIndex"] = 3;
G2L["401"]["BorderSizePixel"] = 0;
G2L["401"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["401"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["401"]["TextSize"] = 10;
G2L["401"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["401"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["401"]["BackgroundTransparency"] = 1;
G2L["401"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["401"]["Text"] = [[]];
G2L["401"]["Name"] = [[CurrentOption]];
G2L["401"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.TypeOption.Dropdown.[Component]
G2L["402"] = Instance.new("ModuleScript", G2L["3fb"]);
G2L["402"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.Tip
G2L["403"] = Instance.new("Frame", G2L["3ea"]);
G2L["403"]["BorderSizePixel"] = 0;
G2L["403"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["403"]["Position"] = UDim2.new(0, 5, 0, 70);
G2L["403"]["Name"] = [[Tip]];
G2L["403"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.Tip.ColorBar
G2L["404"] = Instance.new("Frame", G2L["403"]);
G2L["404"]["BorderSizePixel"] = 0;
G2L["404"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["404"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["404"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTSurfaceToolGUI.Tip.Text
G2L["405"] = Instance.new("TextLabel", G2L["403"]);
G2L["405"]["TextWrapped"] = true;
G2L["405"]["TextStrokeTransparency"] = 0.5;
G2L["405"]["BorderSizePixel"] = 0;
G2L["405"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["405"]["TextSize"] = 10;
G2L["405"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["405"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["405"]["BackgroundTransparency"] = 1;
G2L["405"]["Size"] = UDim2.new(1, -6, 0, 20);
G2L["405"]["Text"] = [[TIP: Click on the side of a part to select it.]];
G2L["405"]["Name"] = [[Text]];
G2L["405"]["Position"] = UDim2.new(0, 6, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI
G2L["406"] = Instance.new("Frame", G2L["77"]);
G2L["406"]["Active"] = true;
G2L["406"]["BorderSizePixel"] = 0;
G2L["406"]["Size"] = UDim2.new(0, 200, 0, 205);
G2L["406"]["Position"] = UDim2.new(0, 0, 0.35, 0);
G2L["406"]["Name"] = [[BTTextureToolGUI]];
G2L["406"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.Title
G2L["407"] = Instance.new("Frame", G2L["406"]);
G2L["407"]["BorderSizePixel"] = 0;
G2L["407"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["407"]["Name"] = [[Title]];
G2L["407"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.Title.ColorBar
G2L["408"] = Instance.new("Frame", G2L["407"]);
G2L["408"]["BorderSizePixel"] = 0;
G2L["408"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["408"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["408"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["408"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.Title.Label
G2L["409"] = Instance.new("TextLabel", G2L["407"]);
G2L["409"]["TextWrapped"] = true;
G2L["409"]["TextStrokeTransparency"] = 0;
G2L["409"]["BorderSizePixel"] = 0;
G2L["409"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["409"]["TextSize"] = 10;
G2L["409"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["409"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["409"]["BackgroundTransparency"] = 1;
G2L["409"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["409"]["Text"] = [[TEXTURE TOOL]];
G2L["409"]["Name"] = [[Label]];
G2L["409"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.Title.F3XSignature
G2L["40a"] = Instance.new("TextLabel", G2L["407"]);
G2L["40a"]["TextWrapped"] = true;
G2L["40a"]["TextStrokeTransparency"] = 0.9;
G2L["40a"]["BorderSizePixel"] = 0;
G2L["40a"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["40a"]["TextSize"] = 14;
G2L["40a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["40a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40a"]["BackgroundTransparency"] = 1;
G2L["40a"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["40a"]["Text"] = [[F3X]];
G2L["40a"]["Name"] = [[F3XSignature]];
G2L["40a"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption
G2L["40b"] = Instance.new("Frame", G2L["406"]);
G2L["40b"]["BorderSizePixel"] = 0;
G2L["40b"]["Size"] = UDim2.new(1, -14, 0, 25);
G2L["40b"]["Position"] = UDim2.new(0, 14, 0, 65);
G2L["40b"]["Name"] = [[SideOption]];
G2L["40b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Label
G2L["40c"] = Instance.new("TextLabel", G2L["40b"]);
G2L["40c"]["TextWrapped"] = true;
G2L["40c"]["TextStrokeTransparency"] = 0;
G2L["40c"]["BorderSizePixel"] = 0;
G2L["40c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["40c"]["TextSize"] = 10;
G2L["40c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["40c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40c"]["BackgroundTransparency"] = 1;
G2L["40c"]["Size"] = UDim2.new(0, 30, 0, 25);
G2L["40c"]["Text"] = [[Side]];
G2L["40c"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown
G2L["40d"] = Instance.new("TextButton", G2L["40b"]);
G2L["40d"]["TextStrokeTransparency"] = 0.8;
G2L["40d"]["BorderSizePixel"] = 0;
G2L["40d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["40d"]["TextSize"] = 10;
G2L["40d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["40d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["40d"]["Size"] = UDim2.new(1, -45, 0, 25);
G2L["40d"]["BackgroundTransparency"] = 0.3;
G2L["40d"]["Name"] = [[Dropdown]];
G2L["40d"]["Text"] = [[]];
G2L["40d"]["Position"] = UDim2.new(0, 30, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown.Icon
G2L["40e"] = Instance.new("ImageLabel", G2L["40d"]);
G2L["40e"]["ZIndex"] = 3;
G2L["40e"]["BorderSizePixel"] = 0;
G2L["40e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40e"]["Image"] = [[rbxassetid://134367382]];
G2L["40e"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["40e"]["BackgroundTransparency"] = 1;
G2L["40e"]["Name"] = [[Icon]];
G2L["40e"]["Position"] = UDim2.new(1, -21, 0, 3);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown.OptionButton
G2L["40f"] = Instance.new("TextButton", G2L["40d"]);
G2L["40f"]["TextStrokeTransparency"] = 0.8;
G2L["40f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["40f"]["TextSize"] = 10;
G2L["40f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["40f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["40f"]["ZIndex"] = 4;
G2L["40f"]["Size"] = UDim2.new(1, -2, 1, 0);
G2L["40f"]["BackgroundTransparency"] = 0.3;
G2L["40f"]["Name"] = [[OptionButton]];
G2L["40f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["40f"]["Text"] = [[]];
G2L["40f"]["Visible"] = false;
G2L["40f"]["Position"] = UDim2.new(0, 1, 1, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown.OptionButton.OptionLabel
G2L["410"] = Instance.new("TextLabel", G2L["40f"]);
G2L["410"]["ZIndex"] = 4;
G2L["410"]["BorderSizePixel"] = 0;
G2L["410"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["410"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["410"]["TextSize"] = 10;
G2L["410"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["410"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["410"]["BackgroundTransparency"] = 1;
G2L["410"]["Size"] = UDim2.new(0.9, 0, 1, 0);
G2L["410"]["Text"] = [[ALL]];
G2L["410"]["Name"] = [[OptionLabel]];
G2L["410"]["Position"] = UDim2.new(0.07, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown.Options
G2L["411"] = Instance.new("Folder", G2L["40d"]);
G2L["411"]["Name"] = [[Options]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown.Border
G2L["412"] = Instance.new("Frame", G2L["40d"]);
G2L["412"]["BorderSizePixel"] = 0;
G2L["412"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["412"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["412"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["412"]["Name"] = [[Border]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown.CurrentOption
G2L["413"] = Instance.new("TextLabel", G2L["40d"]);
G2L["413"]["ZIndex"] = 3;
G2L["413"]["BorderSizePixel"] = 0;
G2L["413"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["413"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["413"]["TextSize"] = 10;
G2L["413"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["413"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["413"]["BackgroundTransparency"] = 1;
G2L["413"]["Size"] = UDim2.new(1, -21, 1, 0);
G2L["413"]["Text"] = [[]];
G2L["413"]["Name"] = [[CurrentOption]];
G2L["413"]["Position"] = UDim2.new(0, 6, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SideOption.Dropdown.[Component]
G2L["414"] = Instance.new("ModuleScript", G2L["40d"]);
G2L["414"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption
G2L["415"] = Instance.new("Frame", G2L["406"]);
G2L["415"]["Visible"] = false;
G2L["415"]["BorderSizePixel"] = 0;
G2L["415"]["Size"] = UDim2.new(0, 200, 0, 24);
G2L["415"]["Position"] = UDim2.new(0, 0, 0, 205);
G2L["415"]["Name"] = [[RepeatOption]];
G2L["415"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.Label
G2L["416"] = Instance.new("TextLabel", G2L["415"]);
G2L["416"]["TextWrapped"] = true;
G2L["416"]["TextStrokeTransparency"] = 0;
G2L["416"]["BorderSizePixel"] = 0;
G2L["416"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["416"]["TextSize"] = 10;
G2L["416"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["416"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["416"]["BackgroundTransparency"] = 1;
G2L["416"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["416"]["Text"] = [[Repeat]];
G2L["416"]["Name"] = [[Label]];
G2L["416"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.XInput
G2L["417"] = Instance.new("Frame", G2L["415"]);
G2L["417"]["BorderSizePixel"] = 0;
G2L["417"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["417"]["Position"] = UDim2.new(0, 60, 0, 0);
G2L["417"]["Name"] = [[XInput]];
G2L["417"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.XInput.Background
G2L["418"] = Instance.new("ImageLabel", G2L["417"]);
G2L["418"]["BorderSizePixel"] = 0;
G2L["418"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["418"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["418"]["BackgroundTransparency"] = 1;
G2L["418"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.XInput.SelectedIndicator
G2L["419"] = Instance.new("Frame", G2L["417"]);
G2L["419"]["BorderSizePixel"] = 0;
G2L["419"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["419"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["419"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["419"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.XInput.TextBox
G2L["41a"] = Instance.new("TextBox", G2L["417"]);
G2L["41a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["41a"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["41a"]["BorderSizePixel"] = 0;
G2L["41a"]["TextSize"] = 10;
G2L["41a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["41a"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["41a"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["41a"]["Text"] = [[2]];
G2L["41a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.YInput
G2L["41b"] = Instance.new("Frame", G2L["415"]);
G2L["41b"]["BorderSizePixel"] = 0;
G2L["41b"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["41b"]["Position"] = UDim2.new(0, 105, 0, 0);
G2L["41b"]["Name"] = [[YInput]];
G2L["41b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.YInput.Background
G2L["41c"] = Instance.new("ImageLabel", G2L["41b"]);
G2L["41c"]["BorderSizePixel"] = 0;
G2L["41c"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["41c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["41c"]["BackgroundTransparency"] = 1;
G2L["41c"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.YInput.SelectedIndicator
G2L["41d"] = Instance.new("Frame", G2L["41b"]);
G2L["41d"]["BorderSizePixel"] = 0;
G2L["41d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["41d"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["41d"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["41d"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RepeatOption.YInput.TextBox
G2L["41e"] = Instance.new("TextBox", G2L["41b"]);
G2L["41e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["41e"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["41e"]["BorderSizePixel"] = 0;
G2L["41e"]["TextSize"] = 10;
G2L["41e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["41e"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["41e"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["41e"]["Text"] = [[2]];
G2L["41e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.BottomColorBar
G2L["41f"] = Instance.new("Frame", G2L["406"]);
G2L["41f"]["BorderSizePixel"] = 0;
G2L["41f"]["BackgroundColor3"] = Color3.fromRGB(108, 51, 125);
G2L["41f"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["41f"]["Position"] = UDim2.new(0, 5, 1, -2);
G2L["41f"]["Name"] = [[BottomColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.TransparencyOption
G2L["420"] = Instance.new("Frame", G2L["406"]);
G2L["420"]["BorderSizePixel"] = 0;
G2L["420"]["Size"] = UDim2.new(1, 0, 0, 25);
G2L["420"]["Position"] = UDim2.new(0, 14, 0, 135);
G2L["420"]["Name"] = [[TransparencyOption]];
G2L["420"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.TransparencyOption.Label
G2L["421"] = Instance.new("TextLabel", G2L["420"]);
G2L["421"]["TextWrapped"] = true;
G2L["421"]["TextStrokeTransparency"] = 0;
G2L["421"]["BorderSizePixel"] = 0;
G2L["421"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["421"]["TextSize"] = 10;
G2L["421"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["421"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["421"]["BackgroundTransparency"] = 1;
G2L["421"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["421"]["Text"] = [[Transparency]];
G2L["421"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.TransparencyOption.Input
G2L["422"] = Instance.new("Frame", G2L["420"]);
G2L["422"]["BorderSizePixel"] = 0;
G2L["422"]["Size"] = UDim2.new(0, 45, 0, 25);
G2L["422"]["Position"] = UDim2.new(0, 75, 0, 0);
G2L["422"]["Name"] = [[Input]];
G2L["422"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.TransparencyOption.Input.Background
G2L["423"] = Instance.new("ImageLabel", G2L["422"]);
G2L["423"]["BorderSizePixel"] = 0;
G2L["423"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["423"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["423"]["BackgroundTransparency"] = 1;
G2L["423"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.TransparencyOption.Input.SelectedIndicator
G2L["424"] = Instance.new("Frame", G2L["422"]);
G2L["424"]["BorderSizePixel"] = 0;
G2L["424"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["424"]["Size"] = UDim2.new(1, -4, 0, 2);
G2L["424"]["Position"] = UDim2.new(0, 5, 0, -2);
G2L["424"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.TransparencyOption.Input.TextBox
G2L["425"] = Instance.new("TextBox", G2L["422"]);
G2L["425"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["425"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["425"]["BorderSizePixel"] = 0;
G2L["425"]["TextSize"] = 10;
G2L["425"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["425"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["425"]["Position"] = UDim2.new(0, 5, 0, 0);
G2L["425"]["Text"] = [[0]];
G2L["425"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption
G2L["426"] = Instance.new("Frame", G2L["406"]);
G2L["426"]["BorderSizePixel"] = 0;
G2L["426"]["Size"] = UDim2.new(0, 200, 0, 23);
G2L["426"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["426"]["Name"] = [[ModeOption]];
G2L["426"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Label
G2L["427"] = Instance.new("TextLabel", G2L["426"]);
G2L["427"]["TextWrapped"] = true;
G2L["427"]["TextStrokeTransparency"] = 0;
G2L["427"]["BorderSizePixel"] = 0;
G2L["427"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["427"]["TextSize"] = 10;
G2L["427"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["427"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["427"]["BackgroundTransparency"] = 1;
G2L["427"]["Size"] = UDim2.new(0, 40, 0, 25);
G2L["427"]["Text"] = [[Mode]];
G2L["427"]["Name"] = [[Label]];
G2L["427"]["Position"] = UDim2.new(0, 14, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Decal
G2L["428"] = Instance.new("Frame", G2L["426"]);
G2L["428"]["BorderSizePixel"] = 0;
G2L["428"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["428"]["Position"] = UDim2.new(0, 55, 0, 0);
G2L["428"]["Name"] = [[Decal]];
G2L["428"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Decal.SelectedIndicator
G2L["429"] = Instance.new("Frame", G2L["428"]);
G2L["429"]["BorderSizePixel"] = 0;
G2L["429"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["429"]["Size"] = UDim2.new(1, -7, 0, 2);
G2L["429"]["Position"] = UDim2.new(0, 7, 0, -2);
G2L["429"]["Name"] = [[SelectedIndicator]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Decal.Button
G2L["42a"] = Instance.new("TextButton", G2L["428"]);
G2L["42a"]["BorderSizePixel"] = 0;
G2L["42a"]["TextTransparency"] = 1;
G2L["42a"]["ZIndex"] = 2;
G2L["42a"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["42a"]["BackgroundTransparency"] = 1;
G2L["42a"]["Name"] = [[Button]];
G2L["42a"]["Text"] = [[]];
G2L["42a"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Decal.Background
G2L["42b"] = Instance.new("ImageLabel", G2L["428"]);
G2L["42b"]["BorderSizePixel"] = 0;
G2L["42b"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["42b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["42b"]["BackgroundTransparency"] = 1;
G2L["42b"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Decal.Label
G2L["42c"] = Instance.new("TextLabel", G2L["428"]);
G2L["42c"]["BorderSizePixel"] = 0;
G2L["42c"]["TextSize"] = 10;
G2L["42c"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["42c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["42c"]["BackgroundTransparency"] = 1;
G2L["42c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["42c"]["Text"] = [[DECAL]];
G2L["42c"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Texture
G2L["42d"] = Instance.new("Frame", G2L["426"]);
G2L["42d"]["BorderSizePixel"] = 0;
G2L["42d"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["42d"]["Position"] = UDim2.new(0, 122, 0, 0);
G2L["42d"]["Name"] = [[Texture]];
G2L["42d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Texture.Button
G2L["42e"] = Instance.new("TextButton", G2L["42d"]);
G2L["42e"]["BorderSizePixel"] = 0;
G2L["42e"]["TextTransparency"] = 1;
G2L["42e"]["ZIndex"] = 2;
G2L["42e"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["42e"]["BackgroundTransparency"] = 1;
G2L["42e"]["Name"] = [[Button]];
G2L["42e"]["Text"] = [[]];
G2L["42e"]["Position"] = UDim2.new(0, 5, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Texture.Background
G2L["42f"] = Instance.new("ImageLabel", G2L["42d"]);
G2L["42f"]["BorderSizePixel"] = 0;
G2L["42f"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["42f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["42f"]["BackgroundTransparency"] = 1;
G2L["42f"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Texture.Label
G2L["430"] = Instance.new("TextLabel", G2L["42d"]);
G2L["430"]["BorderSizePixel"] = 0;
G2L["430"]["TextSize"] = 10;
G2L["430"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["430"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["430"]["BackgroundTransparency"] = 1;
G2L["430"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["430"]["Text"] = [[TEXTURE]];
G2L["430"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ModeOption.Texture.SelectedIndicator
G2L["431"] = Instance.new("Frame", G2L["42d"]);
G2L["431"]["BorderSizePixel"] = 0;
G2L["431"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["431"]["Size"] = UDim2.new(1, -7, 0, 2);
G2L["431"]["Position"] = UDim2.new(0, 7, 0, -2);
G2L["431"]["Name"] = [[SelectedIndicator]];
G2L["431"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption
G2L["432"] = Instance.new("Frame", G2L["406"]);
G2L["432"]["BorderSizePixel"] = 0;
G2L["432"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["432"]["Position"] = UDim2.new(0, 14, 0, 100);
G2L["432"]["Name"] = [[ImageIDOption]];
G2L["432"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption.Label
G2L["433"] = Instance.new("TextLabel", G2L["432"]);
G2L["433"]["TextWrapped"] = true;
G2L["433"]["TextStrokeTransparency"] = 0;
G2L["433"]["BorderSizePixel"] = 0;
G2L["433"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["433"]["TextSize"] = 10;
G2L["433"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["433"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["433"]["BackgroundTransparency"] = 1;
G2L["433"]["Size"] = UDim2.new(0, 70, 0, 25);
G2L["433"]["Text"] = [[Image ID]];
G2L["433"]["Name"] = [[Label]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption.TextBoxBorder
G2L["434"] = Instance.new("Frame", G2L["432"]);
G2L["434"]["BorderSizePixel"] = 0;
G2L["434"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["434"]["Size"] = UDim2.new(0, 85, 0, 3);
G2L["434"]["Position"] = UDim2.new(0, 61, 0, 17);
G2L["434"]["Name"] = [[TextBoxBorder]];
G2L["434"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption.TextBoxBorder.BottomBorder
G2L["435"] = Instance.new("Frame", G2L["434"]);
G2L["435"]["BorderSizePixel"] = 0;
G2L["435"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["435"]["Size"] = UDim2.new(1, 0, 0, 1);
G2L["435"]["Position"] = UDim2.new(0, 0, 1, -1);
G2L["435"]["Name"] = [[BottomBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption.TextBoxBorder.LeftBorder
G2L["436"] = Instance.new("Frame", G2L["434"]);
G2L["436"]["BorderSizePixel"] = 0;
G2L["436"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["436"]["Size"] = UDim2.new(0, 1, 1, 0);
G2L["436"]["Name"] = [[LeftBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption.TextBoxBorder.RightBorder
G2L["437"] = Instance.new("Frame", G2L["434"]);
G2L["437"]["BorderSizePixel"] = 0;
G2L["437"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["437"]["Size"] = UDim2.new(0, 1, 1, 0);
G2L["437"]["Position"] = UDim2.new(1, -1, 0, 0);
G2L["437"]["Name"] = [[RightBorder]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption.TextBoxBackground
G2L["438"] = Instance.new("Frame", G2L["432"]);
G2L["438"]["BorderSizePixel"] = 0;
G2L["438"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["438"]["Size"] = UDim2.new(0, 86, 0, 22);
G2L["438"]["Position"] = UDim2.new(0, 60, 0, -2);
G2L["438"]["Name"] = [[TextBoxBackground]];
G2L["438"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.ImageIDOption.TextBox
G2L["439"] = Instance.new("TextBox", G2L["432"]);
G2L["439"]["TextStrokeTransparency"] = 0.5;
G2L["439"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["439"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["439"]["BorderSizePixel"] = 0;
G2L["439"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["439"]["TextWrapped"] = true;
G2L["439"]["TextSize"] = 10;
G2L["439"]["TextScaled"] = true;
G2L["439"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 128);
G2L["439"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["439"]["Size"] = UDim2.new(0, 80, 0, 18);
G2L["439"]["Position"] = UDim2.new(0, 65, 0, -1);
G2L["439"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["439"]["Text"] = [[]];
G2L["439"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.AddButton
G2L["43a"] = Instance.new("Frame", G2L["406"]);
G2L["43a"]["Visible"] = false;
G2L["43a"]["BorderSizePixel"] = 0;
G2L["43a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43a"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["43a"]["Position"] = UDim2.new(0, 10, 0, 100);
G2L["43a"]["Name"] = [[AddButton]];
G2L["43a"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.AddButton.Button
G2L["43b"] = Instance.new("TextButton", G2L["43a"]);
G2L["43b"]["TextStrokeTransparency"] = 0.8;
G2L["43b"]["BorderSizePixel"] = 0;
G2L["43b"]["TextSize"] = 10;
G2L["43b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["43b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["43b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["43b"]["BackgroundTransparency"] = 0.45;
G2L["43b"]["Name"] = [[Button]];
G2L["43b"]["Text"] = [[ADD DECAL]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.AddButton.Shadow
G2L["43c"] = Instance.new("Frame", G2L["43a"]);
G2L["43c"]["ZIndex"] = 2;
G2L["43c"]["BorderSizePixel"] = 0;
G2L["43c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43c"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["43c"]["Position"] = UDim2.new(0, 0, 1, 0);
G2L["43c"]["Name"] = [[Shadow]];
G2L["43c"]["BackgroundTransparency"] = 0.3;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RemoveButton
G2L["43d"] = Instance.new("Frame", G2L["406"]);
G2L["43d"]["BorderSizePixel"] = 0;
G2L["43d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43d"]["Size"] = UDim2.new(1, -10, 0, 20);
G2L["43d"]["Position"] = UDim2.new(0, 10, 1, -35);
G2L["43d"]["Name"] = [[RemoveButton]];
G2L["43d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RemoveButton.Button
G2L["43e"] = Instance.new("TextButton", G2L["43d"]);
G2L["43e"]["TextStrokeTransparency"] = 0.8;
G2L["43e"]["BorderSizePixel"] = 0;
G2L["43e"]["TextSize"] = 10;
G2L["43e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["43e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["43e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["43e"]["BackgroundTransparency"] = 0.45;
G2L["43e"]["Name"] = [[Button]];
G2L["43e"]["Text"] = [[REMOVE DECAL]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.RemoveButton.Shadow
G2L["43f"] = Instance.new("Frame", G2L["43d"]);
G2L["43f"]["ZIndex"] = 2;
G2L["43f"]["BorderSizePixel"] = 0;
G2L["43f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43f"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["43f"]["Position"] = UDim2.new(0, 0, 1, 0);
G2L["43f"]["Name"] = [[Shadow]];
G2L["43f"]["BackgroundTransparency"] = 0.3;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTTextureToolGUI.SelectNote
G2L["440"] = Instance.new("TextLabel", G2L["406"]);
G2L["440"]["TextWrapped"] = true;
G2L["440"]["TextStrokeTransparency"] = 0.5;
G2L["440"]["BorderSizePixel"] = 0;
G2L["440"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["440"]["TextScaled"] = true;
G2L["440"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["440"]["TextSize"] = 14;
G2L["440"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["440"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["440"]["BackgroundTransparency"] = 1;
G2L["440"]["Size"] = UDim2.new(1, -10, 0, 15);
G2L["440"]["Visible"] = false;
G2L["440"]["Text"] = [[Select something to use this tool.]];
G2L["440"]["Name"] = [[SelectNote]];
G2L["440"]["Position"] = UDim2.new(0, 10, 0, 27);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI
G2L["441"] = Instance.new("Frame", G2L["77"]);
G2L["441"]["Active"] = true;
G2L["441"]["BorderSizePixel"] = 0;
G2L["441"]["Size"] = UDim2.new(0, 220, 0, 90);
G2L["441"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["441"]["Name"] = [[BTWeldToolGUI]];
G2L["441"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Title
G2L["442"] = Instance.new("Frame", G2L["441"]);
G2L["442"]["BorderSizePixel"] = 0;
G2L["442"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["442"]["Name"] = [[Title]];
G2L["442"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Title.ColorBar
G2L["443"] = Instance.new("Frame", G2L["442"]);
G2L["443"]["BorderSizePixel"] = 0;
G2L["443"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["443"]["Size"] = UDim2.new(1, -5, 0, 2);
G2L["443"]["Position"] = UDim2.new(0, 5, 0, -3);
G2L["443"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Title.Label
G2L["444"] = Instance.new("TextLabel", G2L["442"]);
G2L["444"]["TextWrapped"] = true;
G2L["444"]["TextStrokeTransparency"] = 0;
G2L["444"]["BorderSizePixel"] = 0;
G2L["444"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["444"]["TextSize"] = 10;
G2L["444"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["444"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["444"]["BackgroundTransparency"] = 1;
G2L["444"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["444"]["Text"] = [[WELD TOOL]];
G2L["444"]["Name"] = [[Label]];
G2L["444"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Title.F3XSignature
G2L["445"] = Instance.new("TextLabel", G2L["442"]);
G2L["445"]["TextWrapped"] = true;
G2L["445"]["TextStrokeTransparency"] = 0.9;
G2L["445"]["BorderSizePixel"] = 0;
G2L["445"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["445"]["TextSize"] = 14;
G2L["445"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["445"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["445"]["BackgroundTransparency"] = 1;
G2L["445"]["Size"] = UDim2.new(1, -10, 1, 0);
G2L["445"]["Text"] = [[F3X]];
G2L["445"]["Name"] = [[F3XSignature]];
G2L["445"]["Position"] = UDim2.new(0, 10, 0, 1);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Interface
G2L["446"] = Instance.new("Frame", G2L["441"]);
G2L["446"]["BorderSizePixel"] = 0;
G2L["446"]["Size"] = UDim2.new(1, -10, 0, 0);
G2L["446"]["Position"] = UDim2.new(0, 10, 0, 30);
G2L["446"]["Name"] = [[Interface]];
G2L["446"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Interface.WeldButton
G2L["447"] = Instance.new("TextButton", G2L["446"]);
G2L["447"]["TextStrokeTransparency"] = 0.85;
G2L["447"]["BorderSizePixel"] = 0;
G2L["447"]["TextSize"] = 10;
G2L["447"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["447"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["447"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["447"]["Size"] = UDim2.new(0.48, 0, 0, 25);
G2L["447"]["BackgroundTransparency"] = 0.4;
G2L["447"]["Name"] = [[WeldButton]];
G2L["447"]["Text"] = [[WELD TO LAST]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Interface.WeldButton.Shadow
G2L["448"] = Instance.new("Frame", G2L["447"]);
G2L["448"]["BorderSizePixel"] = 0;
G2L["448"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["448"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["448"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["448"]["Name"] = [[Shadow]];
G2L["448"]["BackgroundTransparency"] = 0.15;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Interface.BreakWeldsButton
G2L["449"] = Instance.new("TextButton", G2L["446"]);
G2L["449"]["TextStrokeTransparency"] = 0.85;
G2L["449"]["BorderSizePixel"] = 0;
G2L["449"]["TextSize"] = 10;
G2L["449"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["449"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["449"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["449"]["Size"] = UDim2.new(0.48, 0, 0, 25);
G2L["449"]["BackgroundTransparency"] = 0.4;
G2L["449"]["Name"] = [[BreakWeldsButton]];
G2L["449"]["Text"] = [[BREAK WELDS]];
G2L["449"]["Position"] = UDim2.new(0.52, 0, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Interface.BreakWeldsButton.Shadow
G2L["44a"] = Instance.new("Frame", G2L["449"]);
G2L["44a"]["BorderSizePixel"] = 0;
G2L["44a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["44a"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["44a"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["44a"]["Name"] = [[Shadow]];
G2L["44a"]["BackgroundTransparency"] = 0.15;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Changes
G2L["44b"] = Instance.new("Frame", G2L["441"]);
G2L["44b"]["BorderSizePixel"] = 0;
G2L["44b"]["Size"] = UDim2.new(1, -5, 0, 20);
G2L["44b"]["Position"] = UDim2.new(0, 5, 0, 70);
G2L["44b"]["Name"] = [[Changes]];
G2L["44b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Changes.ColorBar
G2L["44c"] = Instance.new("Frame", G2L["44b"]);
G2L["44c"]["BorderSizePixel"] = 0;
G2L["44c"]["BackgroundColor3"] = Color3.fromRGB(18, 18, 18);
G2L["44c"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["44c"]["Name"] = [[ColorBar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTWeldToolGUI.Changes.Text
G2L["44d"] = Instance.new("TextLabel", G2L["44b"]);
G2L["44d"]["TextWrapped"] = true;
G2L["44d"]["TextStrokeTransparency"] = 0.5;
G2L["44d"]["BorderSizePixel"] = 0;
G2L["44d"]["TextXAlignment"] = Enum.TextXAlignment.Right;
G2L["44d"]["TextSize"] = 10;
G2L["44d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["44d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["44d"]["BackgroundTransparency"] = 1;
G2L["44d"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["44d"]["Text"] = [[]];
G2L["44d"]["Name"] = [[Text]];
G2L["44d"]["Position"] = UDim2.new(0, 0, 0, 2);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications
G2L["44e"] = Instance.new("Frame", G2L["77"]);
G2L["44e"]["Visible"] = false;
G2L["44e"]["BorderSizePixel"] = 0;
G2L["44e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["44e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["44e"]["Size"] = UDim2.new(0, 300, 1, 0);
G2L["44e"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["44e"]["Name"] = [[Notifications]];
G2L["44e"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification
G2L["44f"] = Instance.new("Frame", G2L["44e"]);
G2L["44f"]["Visible"] = false;
G2L["44f"]["BorderSizePixel"] = 0;
G2L["44f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["44f"]["Size"] = UDim2.new(1, 0, 0, 65);
G2L["44f"]["Name"] = [[ToolUpdateNotification]];
G2L["44f"]["BackgroundTransparency"] = 0.7;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Bar
G2L["450"] = Instance.new("Frame", G2L["44f"]);
G2L["450"]["BorderSizePixel"] = 0;
G2L["450"]["BackgroundColor3"] = Color3.fromRGB(255, 171, 0);
G2L["450"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["450"]["Name"] = [[Bar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.OKButton
G2L["451"] = Instance.new("TextButton", G2L["44f"]);
G2L["451"]["BorderSizePixel"] = 0;
G2L["451"]["TextSize"] = 10;
G2L["451"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["451"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["451"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["451"]["Size"] = UDim2.new(0.5, 0, 0, 22);
G2L["451"]["BackgroundTransparency"] = 0.8;
G2L["451"]["Name"] = [[OKButton]];
G2L["451"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["451"]["Text"] = [[GOT IT]];
G2L["451"]["Position"] = UDim2.new(0, 0, 1, -22);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.HelpButton
G2L["452"] = Instance.new("TextButton", G2L["44f"]);
G2L["452"]["BorderSizePixel"] = 0;
G2L["452"]["TextSize"] = 10;
G2L["452"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["452"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["452"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["452"]["Size"] = UDim2.new(0.5, 0, 0, 22);
G2L["452"]["BackgroundTransparency"] = 0.8;
G2L["452"]["Name"] = [[HelpButton]];
G2L["452"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["452"]["Text"] = [[WHAT CAN I DO?]];
G2L["452"]["Position"] = UDim2.new(0.5, 0, 1, -22);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.ButtonSeparator
G2L["453"] = Instance.new("Frame", G2L["44f"]);
G2L["453"]["BorderSizePixel"] = 0;
G2L["453"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["453"]["Size"] = UDim2.new(0, 1, 0, 22);
G2L["453"]["Position"] = UDim2.new(0.5, 0, 1, -22);
G2L["453"]["Name"] = [[ButtonSeparator]];
G2L["453"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Notice
G2L["454"] = Instance.new("Frame", G2L["44f"]);
G2L["454"]["BorderSizePixel"] = 0;
G2L["454"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["454"]["Size"] = UDim2.new(1, 0, 1, -22);
G2L["454"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["454"]["Name"] = [[Notice]];
G2L["454"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Notice.TextLabel
G2L["455"] = Instance.new("TextLabel", G2L["454"]);
G2L["455"]["TextWrapped"] = true;
G2L["455"]["TextStrokeTransparency"] = 0.8;
G2L["455"]["BorderSizePixel"] = 0;
G2L["455"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["455"]["TextSize"] = 14;
G2L["455"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["455"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["455"]["BackgroundTransparency"] = 1;
G2L["455"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["455"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["455"]["Text"] = [[This version of Building Tools is outdated.]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Notice.NotificationSize
G2L["456"] = Instance.new("IntValue", G2L["454"]);
G2L["456"]["Name"] = [[NotificationSize]];
G2L["456"]["Value"] = 65;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Help
G2L["457"] = Instance.new("Frame", G2L["44f"]);
G2L["457"]["Visible"] = false;
G2L["457"]["BorderSizePixel"] = 0;
G2L["457"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["457"]["Size"] = UDim2.new(1, 0, 1, -22);
G2L["457"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["457"]["Name"] = [[Help]];
G2L["457"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Help.TextLabel
G2L["458"] = Instance.new("TextLabel", G2L["457"]);
G2L["458"]["TextWrapped"] = true;
G2L["458"]["TextStrokeTransparency"] = 0.8;
G2L["458"]["BorderSizePixel"] = 0;
G2L["458"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["458"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["458"]["TextSize"] = 14;
G2L["458"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["458"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["458"]["BackgroundTransparency"] = 1;
G2L["458"]["Size"] = UDim2.new(1, -20, 1, 0);
G2L["458"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["458"]["Text"] = [[Own this place? Simply reinsert the Building Tools model.]];
G2L["458"]["Position"] = UDim2.new(0, 20, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Help.NotificationSize
G2L["459"] = Instance.new("IntValue", G2L["457"]);
G2L["459"]["Name"] = [[NotificationSize]];
G2L["459"]["Value"] = 80;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.Help.TextLabel
G2L["45a"] = Instance.new("TextLabel", G2L["457"]);
G2L["45a"]["TextWrapped"] = true;
G2L["45a"]["TextStrokeTransparency"] = 0.8;
G2L["45a"]["BorderSizePixel"] = 0;
G2L["45a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["45a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["45a"]["TextSize"] = 14;
G2L["45a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["45a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["45a"]["BackgroundTransparency"] = 1;
G2L["45a"]["Size"] = UDim2.new(1, -20, 1, 0);
G2L["45a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45a"]["Text"] = [[Otherwise, tell the owner to do the above.]];
G2L["45a"]["Position"] = UDim2.new(0, 60, 0, 7);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.ToolUpdateNotification.[Component]
G2L["45b"] = Instance.new("ModuleScript", G2L["44f"]);
G2L["45b"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification
G2L["45c"] = Instance.new("Frame", G2L["44e"]);
G2L["45c"]["Visible"] = false;
G2L["45c"]["BorderSizePixel"] = 0;
G2L["45c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45c"]["Size"] = UDim2.new(1, 0, 0, 65);
G2L["45c"]["Name"] = [[PluginUpdateNotification]];
G2L["45c"]["BackgroundTransparency"] = 0.7;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.Bar
G2L["45d"] = Instance.new("Frame", G2L["45c"]);
G2L["45d"]["BorderSizePixel"] = 0;
G2L["45d"]["BackgroundColor3"] = Color3.fromRGB(255, 171, 0);
G2L["45d"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["45d"]["Name"] = [[Bar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.OKButton
G2L["45e"] = Instance.new("TextButton", G2L["45c"]);
G2L["45e"]["BorderSizePixel"] = 0;
G2L["45e"]["TextSize"] = 10;
G2L["45e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["45e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["45e"]["Size"] = UDim2.new(0.5, 0, 0, 22);
G2L["45e"]["BackgroundTransparency"] = 0.8;
G2L["45e"]["Name"] = [[OKButton]];
G2L["45e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45e"]["Text"] = [[GOT IT]];
G2L["45e"]["Position"] = UDim2.new(0, 0, 1, -22);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.HelpButton
G2L["45f"] = Instance.new("TextButton", G2L["45c"]);
G2L["45f"]["BorderSizePixel"] = 0;
G2L["45f"]["TextSize"] = 10;
G2L["45f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["45f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["45f"]["Size"] = UDim2.new(0.5, 0, 0, 22);
G2L["45f"]["BackgroundTransparency"] = 0.8;
G2L["45f"]["Name"] = [[HelpButton]];
G2L["45f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["45f"]["Text"] = [[WHAT CAN I DO?]];
G2L["45f"]["Position"] = UDim2.new(0.5, 0, 1, -22);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.ButtonSeparator
G2L["460"] = Instance.new("Frame", G2L["45c"]);
G2L["460"]["BorderSizePixel"] = 0;
G2L["460"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["460"]["Size"] = UDim2.new(0, 1, 0, 22);
G2L["460"]["Position"] = UDim2.new(0.5, 0, 1, -22);
G2L["460"]["Name"] = [[ButtonSeparator]];
G2L["460"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.Notice
G2L["461"] = Instance.new("Frame", G2L["45c"]);
G2L["461"]["BorderSizePixel"] = 0;
G2L["461"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["461"]["Size"] = UDim2.new(1, 0, 1, -22);
G2L["461"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["461"]["Name"] = [[Notice]];
G2L["461"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.Notice.TextLabel
G2L["462"] = Instance.new("TextLabel", G2L["461"]);
G2L["462"]["TextWrapped"] = true;
G2L["462"]["TextStrokeTransparency"] = 0.8;
G2L["462"]["BorderSizePixel"] = 0;
G2L["462"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["462"]["TextSize"] = 14;
G2L["462"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["462"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["462"]["BackgroundTransparency"] = 1;
G2L["462"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["462"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["462"]["Text"] = [[This version of Building Tools is outdated.]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.Notice.NotificationSize
G2L["463"] = Instance.new("IntValue", G2L["461"]);
G2L["463"]["Name"] = [[NotificationSize]];
G2L["463"]["Value"] = 65;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.Help
G2L["464"] = Instance.new("Frame", G2L["45c"]);
G2L["464"]["Visible"] = false;
G2L["464"]["BorderSizePixel"] = 0;
G2L["464"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["464"]["Size"] = UDim2.new(1, 0, 1, -22);
G2L["464"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["464"]["Name"] = [[Help]];
G2L["464"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.Help.TextLabel
G2L["465"] = Instance.new("TextLabel", G2L["464"]);
G2L["465"]["TextWrapped"] = true;
G2L["465"]["TextStrokeTransparency"] = 0.8;
G2L["465"]["BorderSizePixel"] = 0;
G2L["465"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["465"]["TextSize"] = 14;
G2L["465"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["465"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["465"]["BackgroundTransparency"] = 1;
G2L["465"]["Size"] = UDim2.new(1, -20, 1, 0);
G2L["465"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["465"]["Text"] = [[Go to Tools > Manage Plugins or Plugins > Manage Plugins to update plugins  :)]];
G2L["465"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.Help.NotificationSize
G2L["466"] = Instance.new("IntValue", G2L["464"]);
G2L["466"]["Name"] = [[NotificationSize]];
G2L["466"]["Value"] = 80;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.PluginUpdateNotification.[Component]
G2L["467"] = Instance.new("ModuleScript", G2L["45c"]);
G2L["467"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning
G2L["468"] = Instance.new("Frame", G2L["44e"]);
G2L["468"]["Visible"] = false;
G2L["468"]["BorderSizePixel"] = 0;
G2L["468"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["468"]["Size"] = UDim2.new(1, 0, 0, 80);
G2L["468"]["Name"] = [[HttpDisabledWarning]];
G2L["468"]["BackgroundTransparency"] = 0.7;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Bar
G2L["469"] = Instance.new("Frame", G2L["468"]);
G2L["469"]["BorderSizePixel"] = 0;
G2L["469"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 5);
G2L["469"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["469"]["Name"] = [[Bar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.OKButton
G2L["46a"] = Instance.new("TextButton", G2L["468"]);
G2L["46a"]["BorderSizePixel"] = 0;
G2L["46a"]["TextSize"] = 10;
G2L["46a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["46a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["46a"]["Size"] = UDim2.new(0.5, 0, 0, 22);
G2L["46a"]["BackgroundTransparency"] = 0.8;
G2L["46a"]["Name"] = [[OKButton]];
G2L["46a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46a"]["Text"] = [[GOT IT]];
G2L["46a"]["Position"] = UDim2.new(0, 0, 1, -22);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.HelpButton
G2L["46b"] = Instance.new("TextButton", G2L["468"]);
G2L["46b"]["BorderSizePixel"] = 0;
G2L["46b"]["TextSize"] = 10;
G2L["46b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["46b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46b"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["46b"]["Size"] = UDim2.new(0.5, 0, 0, 22);
G2L["46b"]["BackgroundTransparency"] = 0.8;
G2L["46b"]["Name"] = [[HelpButton]];
G2L["46b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46b"]["Text"] = [[WHAT CAN I DO?]];
G2L["46b"]["Position"] = UDim2.new(0.5, 0, 1, -22);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.ButtonSeparator
G2L["46c"] = Instance.new("Frame", G2L["468"]);
G2L["46c"]["BorderSizePixel"] = 0;
G2L["46c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46c"]["Size"] = UDim2.new(0, 1, 0, 22);
G2L["46c"]["Position"] = UDim2.new(0.5, 0, 1, -22);
G2L["46c"]["Name"] = [[ButtonSeparator]];
G2L["46c"]["BackgroundTransparency"] = 0.75;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Notice
G2L["46d"] = Instance.new("Frame", G2L["468"]);
G2L["46d"]["BorderSizePixel"] = 0;
G2L["46d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["46d"]["Size"] = UDim2.new(1, 0, 1, -22);
G2L["46d"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["46d"]["Name"] = [[Notice]];
G2L["46d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Notice.TextLabel
G2L["46e"] = Instance.new("TextLabel", G2L["46d"]);
G2L["46e"]["TextWrapped"] = true;
G2L["46e"]["TextStrokeTransparency"] = 0.8;
G2L["46e"]["BorderSizePixel"] = 0;
G2L["46e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["46e"]["TextSize"] = 14;
G2L["46e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["46e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["46e"]["BackgroundTransparency"] = 1;
G2L["46e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["46e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46e"]["Text"] = [[HttpService must be enabled for some features of Building Tools to work, including exporting.]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Notice.NotificationSize
G2L["46f"] = Instance.new("IntValue", G2L["46d"]);
G2L["46f"]["Name"] = [[NotificationSize]];
G2L["46f"]["Value"] = 80;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Help
G2L["470"] = Instance.new("Frame", G2L["468"]);
G2L["470"]["Visible"] = false;
G2L["470"]["BorderSizePixel"] = 0;
G2L["470"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["470"]["Size"] = UDim2.new(1, 0, 1, -22);
G2L["470"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["470"]["Name"] = [[Help]];
G2L["470"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Help.TextLabel
G2L["471"] = Instance.new("TextLabel", G2L["470"]);
G2L["471"]["TextWrapped"] = true;
G2L["471"]["TextStrokeTransparency"] = 0.8;
G2L["471"]["BorderSizePixel"] = 0;
G2L["471"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["471"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["471"]["TextSize"] = 14;
G2L["471"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["471"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["471"]["BackgroundTransparency"] = 1;
G2L["471"]["Size"] = UDim2.new(1, -20, 0.7, 0);
G2L["471"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["471"]["Text"] = [[Own this place? Edit it in Studio, and type in Game:GetService('HttpService').HttpEnabled=true in the command bar.]];
G2L["471"]["Position"] = UDim2.new(0, 10, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Help.TextLabel
G2L["472"] = Instance.new("TextLabel", G2L["470"]);
G2L["472"]["TextWrapped"] = true;
G2L["472"]["TextStrokeTransparency"] = 0.8;
G2L["472"]["BorderSizePixel"] = 0;
G2L["472"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["472"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["472"]["TextSize"] = 14;
G2L["472"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["472"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["472"]["BackgroundTransparency"] = 1;
G2L["472"]["Size"] = UDim2.new(1, -10, 0.3, 0);
G2L["472"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["472"]["Text"] = [[Otherwise, tell the owner to do the above.]];
G2L["472"]["Position"] = UDim2.new(0, 10, 0.65, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.Help.NotificationSize
G2L["473"] = Instance.new("IntValue", G2L["470"]);
G2L["473"]["Name"] = [[NotificationSize]];
G2L["473"]["Value"] = 110;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.HttpDisabledWarning.[Component]
G2L["474"] = Instance.new("ModuleScript", G2L["468"]);
G2L["474"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.UIListLayout
G2L["475"] = Instance.new("UIListLayout", G2L["44e"]);
G2L["475"]["Padding"] = UDim.new(0, 10);
G2L["475"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Notifications.[Component]
G2L["476"] = Instance.new("ModuleScript", G2L["44e"]);
G2L["476"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLineSegment
G2L["477"] = Instance.new("Frame", G2L["77"]);
G2L["477"]["BorderSizePixel"] = 0;
G2L["477"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["477"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["477"]["Size"] = UDim2.new(0, 50, 0, 1);
G2L["477"]["Position"] = UDim2.new(0, 300, 0, 100);
G2L["477"]["Name"] = [[SnapLineSegment]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLineSegment.PointMarkerA
G2L["478"] = Instance.new("Frame", G2L["477"]);
G2L["478"]["SizeConstraint"] = Enum.SizeConstraint.RelativeYY;
G2L["478"]["ZIndex"] = 3;
G2L["478"]["BorderSizePixel"] = 0;
G2L["478"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["478"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["478"]["Size"] = UDim2.new(0, 16, 0, 16);
G2L["478"]["Position"] = UDim2.new(0, 0, 0.5, 0);
G2L["478"]["Name"] = [[PointMarkerA]];
G2L["478"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLineSegment.PointMarkerA.CrossLine
G2L["479"] = Instance.new("Frame", G2L["478"]);
G2L["479"]["ZIndex"] = 3;
G2L["479"]["BorderSizePixel"] = 0;
G2L["479"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["479"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["479"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["479"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["479"]["Name"] = [[CrossLine]];
G2L["479"]["Rotation"] = 45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLineSegment.PointMarkerA.CrossLine
G2L["47a"] = Instance.new("Frame", G2L["478"]);
G2L["47a"]["ZIndex"] = 3;
G2L["47a"]["BorderSizePixel"] = 0;
G2L["47a"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["47a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["47a"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["47a"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["47a"]["Name"] = [[CrossLine]];
G2L["47a"]["Rotation"] = -45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.PointMarker
G2L["47b"] = Instance.new("Frame", G2L["77"]);
G2L["47b"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["47b"]["BorderSizePixel"] = 0;
G2L["47b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["47b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["47b"]["Size"] = UDim2.new(0.015, 0, 0.015, 0);
G2L["47b"]["Position"] = UDim2.new(0, 200, 0, 200);
G2L["47b"]["Name"] = [[PointMarker]];
G2L["47b"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.PointMarker.CrossLine
G2L["47c"] = Instance.new("Frame", G2L["47b"]);
G2L["47c"]["BorderSizePixel"] = 0;
G2L["47c"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["47c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["47c"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["47c"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["47c"]["Name"] = [[CrossLine]];
G2L["47c"]["Rotation"] = 45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.PointMarker.CrossLine
G2L["47d"] = Instance.new("Frame", G2L["47b"]);
G2L["47d"]["BorderSizePixel"] = 0;
G2L["47d"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["47d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["47d"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["47d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["47d"]["Name"] = [[CrossLine]];
G2L["47d"]["Rotation"] = -45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLine
G2L["47e"] = Instance.new("Frame", G2L["77"]);
G2L["47e"]["BorderSizePixel"] = 0;
G2L["47e"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["47e"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["47e"]["Size"] = UDim2.new(3, 0, 0, 1);
G2L["47e"]["Position"] = UDim2.new(0, 100, 0, 100);
G2L["47e"]["Name"] = [[SnapLine]];
G2L["47e"]["Rotation"] = -45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLine.SnapProgress
G2L["47f"] = Instance.new("Frame", G2L["47e"]);
G2L["47f"]["ZIndex"] = 2;
G2L["47f"]["BorderSizePixel"] = 0;
G2L["47f"]["BackgroundColor3"] = Color3.fromRGB(38, 136, 255);
G2L["47f"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["47f"]["Size"] = UDim2.new(0, 100, 2, 0);
G2L["47f"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["47f"]["Name"] = [[SnapProgress]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLine.PointMarker
G2L["480"] = Instance.new("Frame", G2L["47e"]);
G2L["480"]["SizeConstraint"] = Enum.SizeConstraint.RelativeXX;
G2L["480"]["ZIndex"] = 3;
G2L["480"]["BorderSizePixel"] = 0;
G2L["480"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["480"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["480"]["Size"] = UDim2.new(0.005, 0, 0.005, 0);
G2L["480"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["480"]["Name"] = [[PointMarker]];
G2L["480"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLine.PointMarker.CrossLine
G2L["481"] = Instance.new("Frame", G2L["480"]);
G2L["481"]["ZIndex"] = 3;
G2L["481"]["BorderSizePixel"] = 0;
G2L["481"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["481"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["481"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["481"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["481"]["Name"] = [[CrossLine]];
G2L["481"]["Rotation"] = 45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.SnapLine.PointMarker.CrossLine
G2L["482"] = Instance.new("Frame", G2L["480"]);
G2L["482"]["ZIndex"] = 3;
G2L["482"]["BorderSizePixel"] = 0;
G2L["482"]["BackgroundColor3"] = Color3.fromRGB(255, 127, 239);
G2L["482"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["482"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["482"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["482"]["Name"] = [[CrossLine]];
G2L["482"]["Rotation"] = -45;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker
G2L["483"] = Instance.new("Frame", G2L["77"]);
G2L["483"]["Active"] = true;
G2L["483"]["BorderSizePixel"] = 0;
G2L["483"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["483"]["Size"] = UDim2.new(0, 250, 0, 380);
G2L["483"]["Position"] = UDim2.new(0.5, -125, 0.5, -190);
G2L["483"]["Name"] = [[BTHSVColorPicker]];
G2L["483"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueSaturation
G2L["484"] = Instance.new("ImageButton", G2L["483"]);
G2L["484"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["484"]["Image"] = [[http://www.roblox.com/asset?id=141066192]];
G2L["484"]["Size"] = UDim2.new(0, 209, 0, 200);
G2L["484"]["Name"] = [[HueSaturation]];
G2L["484"]["BorderColor3"] = Color3.fromRGB(54, 54, 54);
G2L["484"]["Position"] = UDim2.new(0, 10, 0, 10);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueSaturation.Cursor
G2L["485"] = Instance.new("ImageLabel", G2L["484"]);
G2L["485"]["BorderSizePixel"] = 0;
G2L["485"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["485"]["Image"] = [[http://www.roblox.com/asset/?id=141186650]];
G2L["485"]["Size"] = UDim2.new(0, 16, 0, 16);
G2L["485"]["BackgroundTransparency"] = 1;
G2L["485"]["Name"] = [[Cursor]];
G2L["485"]["Position"] = UDim2.new(0, -8, 0, -8);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.Brightness
G2L["486"] = Instance.new("ImageButton", G2L["483"]);
G2L["486"]["BorderSizePixel"] = 0;
G2L["486"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["486"]["ZIndex"] = 2;
G2L["486"]["Image"] = [[http://www.roblox.com/asset/?id=141066196]];
G2L["486"]["Size"] = UDim2.new(0, 13, 0, 200);
G2L["486"]["BackgroundTransparency"] = 1;
G2L["486"]["Name"] = [[Brightness]];
G2L["486"]["BorderColor3"] = Color3.fromRGB(54, 54, 54);
G2L["486"]["Position"] = UDim2.new(0, 229, 0, 10);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.Brightness.ColorBG
G2L["487"] = Instance.new("Frame", G2L["486"]);
G2L["487"]["BorderSizePixel"] = 0;
G2L["487"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["487"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["487"]["Name"] = [[ColorBG]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.Brightness.Cursor
G2L["488"] = Instance.new("ImageLabel", G2L["486"]);
G2L["488"]["ZIndex"] = 2;
G2L["488"]["BorderSizePixel"] = 0;
G2L["488"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["488"]["Image"] = [[http://www.roblox.com/asset/?id=141186650]];
G2L["488"]["Size"] = UDim2.new(0, 16, 0, 16);
G2L["488"]["BackgroundTransparency"] = 1;
G2L["488"]["Name"] = [[Cursor]];
G2L["488"]["Position"] = UDim2.new(0, -2, 0, -8);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueOption
G2L["489"] = Instance.new("Frame", G2L["483"]);
G2L["489"]["BorderSizePixel"] = 0;
G2L["489"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["489"]["Size"] = UDim2.new(1, -25, 0, 34);
G2L["489"]["Position"] = UDim2.new(0, 10, 0, 218);
G2L["489"]["Name"] = [[HueOption]];
G2L["489"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueOption.Label
G2L["48a"] = Instance.new("TextLabel", G2L["489"]);
G2L["48a"]["TextWrapped"] = true;
G2L["48a"]["TextStrokeTransparency"] = 0.5;
G2L["48a"]["BorderSizePixel"] = 0;
G2L["48a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["48a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["48a"]["TextSize"] = 18;
G2L["48a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["48a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["48a"]["BackgroundTransparency"] = 1;
G2L["48a"]["Size"] = UDim2.new(0, 100, 1, 0);
G2L["48a"]["Text"] = [[Hue]];
G2L["48a"]["Name"] = [[Label]];
G2L["48a"]["Position"] = UDim2.new(0, 15, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueOption.Bar
G2L["48b"] = Instance.new("Frame", G2L["489"]);
G2L["48b"]["BorderSizePixel"] = 0;
G2L["48b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["48b"]["Size"] = UDim2.new(0, 3, 1, -4);
G2L["48b"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["48b"]["Name"] = [[Bar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueOption.Bar.Shadow
G2L["48c"] = Instance.new("Frame", G2L["48b"]);
G2L["48c"]["BorderSizePixel"] = 0;
G2L["48c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["48c"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["48c"]["Position"] = UDim2.new(0, 0, 1, -3);
G2L["48c"]["Name"] = [[Shadow]];
G2L["48c"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueOption.Input
G2L["48d"] = Instance.new("TextBox", G2L["489"]);
G2L["48d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["48d"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["48d"]["ZIndex"] = 2;
G2L["48d"]["BorderSizePixel"] = 0;
G2L["48d"]["TextSize"] = 10;
G2L["48d"]["Name"] = [[Input]];
G2L["48d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["48d"]["Size"] = UDim2.new(0, 50, 0, 26);
G2L["48d"]["Position"] = UDim2.new(0, 55, 0, 4);
G2L["48d"]["Text"] = [[360]];
G2L["48d"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.HueOption.Input.Background
G2L["48e"] = Instance.new("ImageLabel", G2L["48d"]);
G2L["48e"]["BorderSizePixel"] = 0;
G2L["48e"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["48e"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["48e"]["BackgroundTransparency"] = 1;
G2L["48e"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.SaturationOption
G2L["48f"] = Instance.new("Frame", G2L["483"]);
G2L["48f"]["BorderSizePixel"] = 0;
G2L["48f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["48f"]["Size"] = UDim2.new(1, -25, 0, 34);
G2L["48f"]["Position"] = UDim2.new(0, 10, 0, 255);
G2L["48f"]["Name"] = [[SaturationOption]];
G2L["48f"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.SaturationOption.Label
G2L["490"] = Instance.new("TextLabel", G2L["48f"]);
G2L["490"]["TextWrapped"] = true;
G2L["490"]["TextStrokeTransparency"] = 0.5;
G2L["490"]["BorderSizePixel"] = 0;
G2L["490"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["490"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["490"]["TextSize"] = 18;
G2L["490"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["490"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["490"]["BackgroundTransparency"] = 1;
G2L["490"]["Size"] = UDim2.new(0, 100, 1, 0);
G2L["490"]["Text"] = [[Saturation]];
G2L["490"]["Name"] = [[Label]];
G2L["490"]["Position"] = UDim2.new(0, 15, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.SaturationOption.Bar
G2L["491"] = Instance.new("Frame", G2L["48f"]);
G2L["491"]["BorderSizePixel"] = 0;
G2L["491"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["491"]["Size"] = UDim2.new(0, 3, 1, -4);
G2L["491"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["491"]["Name"] = [[Bar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.SaturationOption.Bar.Shadow
G2L["492"] = Instance.new("Frame", G2L["491"]);
G2L["492"]["BorderSizePixel"] = 0;
G2L["492"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["492"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["492"]["Position"] = UDim2.new(0, 0, 1, -3);
G2L["492"]["Name"] = [[Shadow]];
G2L["492"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.SaturationOption.Input
G2L["493"] = Instance.new("TextBox", G2L["48f"]);
G2L["493"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["493"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["493"]["ZIndex"] = 2;
G2L["493"]["BorderSizePixel"] = 0;
G2L["493"]["TextSize"] = 10;
G2L["493"]["Name"] = [[Input]];
G2L["493"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["493"]["Size"] = UDim2.new(0, 50, 0, 26);
G2L["493"]["Position"] = UDim2.new(0, 100, 0, 4);
G2L["493"]["Text"] = [[100%]];
G2L["493"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.SaturationOption.Input.Background
G2L["494"] = Instance.new("ImageLabel", G2L["493"]);
G2L["494"]["BorderSizePixel"] = 0;
G2L["494"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["494"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["494"]["BackgroundTransparency"] = 1;
G2L["494"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.BrightnessOption
G2L["495"] = Instance.new("Frame", G2L["483"]);
G2L["495"]["BorderSizePixel"] = 0;
G2L["495"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["495"]["Size"] = UDim2.new(1, -25, 0, 34);
G2L["495"]["Position"] = UDim2.new(0, 10, 0, 292);
G2L["495"]["Name"] = [[BrightnessOption]];
G2L["495"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.BrightnessOption.Label
G2L["496"] = Instance.new("TextLabel", G2L["495"]);
G2L["496"]["TextWrapped"] = true;
G2L["496"]["TextStrokeTransparency"] = 0.5;
G2L["496"]["BorderSizePixel"] = 0;
G2L["496"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["496"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["496"]["TextSize"] = 18;
G2L["496"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["496"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["496"]["BackgroundTransparency"] = 1;
G2L["496"]["Size"] = UDim2.new(0, 100, 1, 0);
G2L["496"]["Text"] = [[Brightness]];
G2L["496"]["Name"] = [[Label]];
G2L["496"]["Position"] = UDim2.new(0, 15, 0, 0);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.BrightnessOption.Bar
G2L["497"] = Instance.new("Frame", G2L["495"]);
G2L["497"]["BorderSizePixel"] = 0;
G2L["497"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["497"]["Size"] = UDim2.new(0, 3, 1, -4);
G2L["497"]["Position"] = UDim2.new(0, 0, 0, 2);
G2L["497"]["Name"] = [[Bar]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.BrightnessOption.Bar.Shadow
G2L["498"] = Instance.new("Frame", G2L["497"]);
G2L["498"]["BorderSizePixel"] = 0;
G2L["498"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["498"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["498"]["Position"] = UDim2.new(0, 0, 1, -3);
G2L["498"]["Name"] = [[Shadow]];
G2L["498"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.BrightnessOption.Input
G2L["499"] = Instance.new("TextBox", G2L["495"]);
G2L["499"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["499"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
G2L["499"]["ZIndex"] = 2;
G2L["499"]["BorderSizePixel"] = 0;
G2L["499"]["TextSize"] = 10;
G2L["499"]["Name"] = [[Input]];
G2L["499"]["FontFace"] = Font.new([[rbxasset://fonts/families/Arial.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["499"]["Size"] = UDim2.new(0, 50, 0, 26);
G2L["499"]["Position"] = UDim2.new(0, 100, 0, 4);
G2L["499"]["Text"] = [[100%]];
G2L["499"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.BrightnessOption.Input.Background
G2L["49a"] = Instance.new("ImageLabel", G2L["499"]);
G2L["49a"]["BorderSizePixel"] = 0;
G2L["49a"]["Image"] = [[http://www.roblox.com/asset/?id=127772502]];
G2L["49a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["49a"]["BackgroundTransparency"] = 1;
G2L["49a"]["Name"] = [[Background]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.ColorDisplay
G2L["49b"] = Instance.new("Frame", G2L["483"]);
G2L["49b"]["BorderSizePixel"] = 0;
G2L["49b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["49b"]["Size"] = UDim2.new(0, 60, 0, 103);
G2L["49b"]["Position"] = UDim2.new(0, 180, 0, 220);
G2L["49b"]["Name"] = [[ColorDisplay]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.ColorDisplay.Shadow
G2L["49c"] = Instance.new("Frame", G2L["49b"]);
G2L["49c"]["BorderSizePixel"] = 0;
G2L["49c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["49c"]["Size"] = UDim2.new(1, 0, 0, 3);
G2L["49c"]["Position"] = UDim2.new(0, 0, 1, -3);
G2L["49c"]["Name"] = [[Shadow]];
G2L["49c"]["BackgroundTransparency"] = 0.9;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.OkButton
G2L["49d"] = Instance.new("TextButton", G2L["483"]);
G2L["49d"]["TextStrokeTransparency"] = 0.85;
G2L["49d"]["BorderSizePixel"] = 0;
G2L["49d"]["TextSize"] = 18;
G2L["49d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["49d"]["BackgroundColor3"] = Color3.fromRGB(255, 163, 48);
G2L["49d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["49d"]["ZIndex"] = 2;
G2L["49d"]["Size"] = UDim2.new(0, 140, 0, 30);
G2L["49d"]["Name"] = [[OkButton]];
G2L["49d"]["Text"] = [[Ok]];
G2L["49d"]["Position"] = UDim2.new(0, 10, 0, 335);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.OkButton.Bevel
G2L["49e"] = Instance.new("Frame", G2L["49d"]);
G2L["49e"]["ZIndex"] = 2;
G2L["49e"]["BorderSizePixel"] = 0;
G2L["49e"]["BackgroundColor3"] = Color3.fromRGB(205, 130, 38);
G2L["49e"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["49e"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["49e"]["Name"] = [[Bevel]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.CancelButton
G2L["49f"] = Instance.new("TextButton", G2L["483"]);
G2L["49f"]["TextStrokeTransparency"] = 0.85;
G2L["49f"]["BorderSizePixel"] = 0;
G2L["49f"]["TextSize"] = 18;
G2L["49f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["49f"]["BackgroundColor3"] = Color3.fromRGB(255, 163, 48);
G2L["49f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["49f"]["ZIndex"] = 2;
G2L["49f"]["Size"] = UDim2.new(0, 80, 0, 30);
G2L["49f"]["BackgroundTransparency"] = 0.6;
G2L["49f"]["Name"] = [[CancelButton]];
G2L["49f"]["Text"] = [[Cancel]];
G2L["49f"]["Position"] = UDim2.new(0, 160, 0, 335);

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.CancelButton.Bevel
G2L["4a0"] = Instance.new("Frame", G2L["49f"]);
G2L["4a0"]["ZIndex"] = 2;
G2L["4a0"]["BorderSizePixel"] = 0;
G2L["4a0"]["BackgroundColor3"] = Color3.fromRGB(205, 130, 38);
G2L["4a0"]["Size"] = UDim2.new(1, 0, 0, 2);
G2L["4a0"]["Position"] = UDim2.new(0, 0, 1, -2);
G2L["4a0"]["Name"] = [[Bevel]];
G2L["4a0"]["BackgroundTransparency"] = 0.6;

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.BTHSVColorPicker.[Component]
G2L["4a1"] = Instance.new("ModuleScript", G2L["483"]);
G2L["4a1"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock
G2L["4a2"] = Instance.new("Folder", G2L["77"]);
G2L["4a2"]["Name"] = [[Dock]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Interfaces.Dock.[Component]
G2L["4a3"] = Instance.new("ModuleScript", G2L["4a2"]);
G2L["4a3"]["Name"] = [[[Component]]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries
G2L["4a4"] = Instance.new("Folder", G2L["5c"]);
G2L["4a4"]["Name"] = [[Libraries]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.SerializationV2
G2L["4a5"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4a5"]["Name"] = [[SerializationV2]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.SerializationV3
G2L["4a6"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4a6"]["Name"] = [[SerializationV3]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Region
G2L["4a7"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4a7"]["Name"] = [[Region]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.SupportLibrary
G2L["4a8"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4a8"]["Name"] = [[SupportLibrary]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Signal
G2L["4a9"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4a9"]["Name"] = [[Signal]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Make
G2L["4aa"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4aa"]["Name"] = [[Make]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Try
G2L["4ab"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4ab"]["Name"] = [[Try]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Cheer
G2L["4ac"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4ac"]["Name"] = [[Cheer]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Maid
G2L["4ad"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4ad"]["Name"] = [[Maid]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Handles
G2L["4ae"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4ae"]["Name"] = [[Handles]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.ArcHandles
G2L["4af"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4af"]["Name"] = [[ArcHandles]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.InstancePool
G2L["4b0"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4b0"]["Name"] = [[InstancePool]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Debug
G2L["4b1"] = Instance.new("ModuleScript", G2L["4a4"]);
G2L["4b1"]["Name"] = [[Debug]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Libraries.Debug.SortedArray
G2L["4b2"] = Instance.new("ModuleScript", G2L["4b1"]);
G2L["4b2"]["Name"] = [[SortedArray]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Version
G2L["4b3"] = Instance.new("StringValue", G2L["5c"]);
G2L["4b3"]["Name"] = [[Version]];
G2L["4b3"]["Value"] = [[3.0.2]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI
G2L["4b4"] = Instance.new("Folder", G2L["5c"]);
G2L["4b4"]["Name"] = [[UI]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ImageButton
G2L["4b5"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4b5"]["Name"] = [[ImageButton]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.TextLabel
G2L["4b6"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4b6"]["Name"] = [[TextLabel]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.Frame
G2L["4b7"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4b7"]["Name"] = [[Frame]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ImageLabel
G2L["4b8"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4b8"]["Name"] = [[ImageLabel]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.LoadingSpinner
G2L["4b9"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4b9"]["Name"] = [[LoadingSpinner]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.TextBox
G2L["4ba"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4ba"]["Name"] = [[TextBox]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.Explorer
G2L["4bb"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4bb"]["Name"] = [[Explorer]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.Explorer.ItemRow
G2L["4bc"] = Instance.new("ModuleScript", G2L["4bb"]);
G2L["4bc"]["Name"] = [[ItemRow]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.Explorer.ItemList
G2L["4bd"] = Instance.new("ModuleScript", G2L["4bb"]);
G2L["4bd"]["Name"] = [[ItemList]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScrollingFrame
G2L["4be"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4be"]["Name"] = [[ScrollingFrame]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD
G2L["4bf"] = Instance.new("ModuleScript", G2L["4b4"]);
G2L["4bf"]["Name"] = [[ScopeHUD]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.HotkeyTooltip
G2L["4c0"] = Instance.new("ModuleScript", G2L["4bf"]);
G2L["4c0"]["Name"] = [[HotkeyTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.HotkeyTooltip.AltTooltip
G2L["4c1"] = Instance.new("ModuleScript", G2L["4c0"]);
G2L["4c1"]["Name"] = [[AltTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.HotkeyTooltip.ScopeInTooltip
G2L["4c2"] = Instance.new("ModuleScript", G2L["4c0"]);
G2L["4c2"]["Name"] = [[ScopeInTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.HotkeyTooltip.ScopeLockTooltip
G2L["4c3"] = Instance.new("ModuleScript", G2L["4c0"]);
G2L["4c3"]["Name"] = [[ScopeLockTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.HotkeyTooltip.ScopeOutTooltip
G2L["4c4"] = Instance.new("ModuleScript", G2L["4c0"]);
G2L["4c4"]["Name"] = [[ScopeOutTooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.ScopeHierarchyItemButton
G2L["4c5"] = Instance.new("ModuleScript", G2L["4bf"]);
G2L["4c5"]["Name"] = [[ScopeHierarchyItemButton]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.ModeToggle
G2L["4c6"] = Instance.new("ModuleScript", G2L["4bf"]);
G2L["4c6"]["Name"] = [[ModeToggle]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.UI.ScopeHUD.ModeToggle.Tooltip
G2L["4c7"] = Instance.new("ModuleScript", G2L["4c6"]);
G2L["4c7"]["Name"] = [[Tooltip]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor
G2L["4c8"] = Instance.new("Folder", G2L["5c"]);
G2L["4c8"]["Name"] = [[Vendor]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact
G2L["4c9"] = Instance.new("ModuleScript", G2L["4c8"]);
G2L["4c9"]["Name"] = [[Roact]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Binding
G2L["4ca"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4ca"]["Name"] = [[Binding]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Binding.spec
G2L["4cb"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4cb"]["Name"] = [[Binding.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component
G2L["4cc"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4cc"]["Name"] = [[Component]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec
G2L["4cd"] = Instance.new("Folder", G2L["4c9"]);
G2L["4cd"]["Name"] = [[Component.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.context.spec
G2L["4ce"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4ce"]["Name"] = [[context.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.defaultProps.spec
G2L["4cf"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4cf"]["Name"] = [[defaultProps.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.didMount.spec
G2L["4d0"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d0"]["Name"] = [[didMount.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.didUpdate.spec
G2L["4d1"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d1"]["Name"] = [[didUpdate.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.extend.spec
G2L["4d2"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d2"]["Name"] = [[extend.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.getDerivedStateFromProps.spec
G2L["4d3"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d3"]["Name"] = [[getDerivedStateFromProps.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.getElementTraceback.spec
G2L["4d4"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d4"]["Name"] = [[getElementTraceback.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.init.spec
G2L["4d5"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d5"]["Name"] = [[init.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.render.spec
G2L["4d6"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d6"]["Name"] = [[render.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.setState.spec
G2L["4d7"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d7"]["Name"] = [[setState.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.shouldUpdate.spec
G2L["4d8"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d8"]["Name"] = [[shouldUpdate.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.validateProps.spec
G2L["4d9"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4d9"]["Name"] = [[validateProps.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.willUnmount.spec
G2L["4da"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4da"]["Name"] = [[willUnmount.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Component.spec.willUpdate.spec
G2L["4db"] = Instance.new("ModuleScript", G2L["4cd"]);
G2L["4db"]["Name"] = [[willUpdate.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.ComponentLifecyclePhase
G2L["4dc"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4dc"]["Name"] = [[ComponentLifecyclePhase]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Config
G2L["4dd"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4dd"]["Name"] = [[Config]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Config.spec
G2L["4de"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4de"]["Name"] = [[Config.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.ElementKind
G2L["4df"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4df"]["Name"] = [[ElementKind]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.ElementKind.spec
G2L["4e0"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e0"]["Name"] = [[ElementKind.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.ElementUtils
G2L["4e1"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e1"]["Name"] = [[ElementUtils]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.ElementUtils.spec
G2L["4e2"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e2"]["Name"] = [[ElementUtils.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.GlobalConfig
G2L["4e3"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e3"]["Name"] = [[GlobalConfig]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.GlobalConfig.spec
G2L["4e4"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e4"]["Name"] = [[GlobalConfig.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Logging
G2L["4e5"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e5"]["Name"] = [[Logging]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.None
G2L["4e6"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e6"]["Name"] = [[None]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.NoopRenderer
G2L["4e7"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e7"]["Name"] = [[NoopRenderer]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Portal
G2L["4e8"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4e8"]["Name"] = [[Portal]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PropMarkers
G2L["4e9"] = Instance.new("Folder", G2L["4c9"]);
G2L["4e9"]["Name"] = [[PropMarkers]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PropMarkers.Change
G2L["4ea"] = Instance.new("ModuleScript", G2L["4e9"]);
G2L["4ea"]["Name"] = [[Change]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PropMarkers.Change.spec
G2L["4eb"] = Instance.new("ModuleScript", G2L["4e9"]);
G2L["4eb"]["Name"] = [[Change.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PropMarkers.Children
G2L["4ec"] = Instance.new("ModuleScript", G2L["4e9"]);
G2L["4ec"]["Name"] = [[Children]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PropMarkers.Event
G2L["4ed"] = Instance.new("ModuleScript", G2L["4e9"]);
G2L["4ed"]["Name"] = [[Event]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PropMarkers.Event.spec
G2L["4ee"] = Instance.new("ModuleScript", G2L["4e9"]);
G2L["4ee"]["Name"] = [[Event.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PropMarkers.Ref
G2L["4ef"] = Instance.new("ModuleScript", G2L["4e9"]);
G2L["4ef"]["Name"] = [[Ref]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PureComponent
G2L["4f0"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f0"]["Name"] = [[PureComponent]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.PureComponent.spec
G2L["4f1"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f1"]["Name"] = [[PureComponent.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.RobloxRenderer
G2L["4f2"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f2"]["Name"] = [[RobloxRenderer]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.RobloxRenderer.spec
G2L["4f3"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f3"]["Name"] = [[RobloxRenderer.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.SingleEventManager
G2L["4f4"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f4"]["Name"] = [[SingleEventManager]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.SingleEventManager.spec
G2L["4f5"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f5"]["Name"] = [[SingleEventManager.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Symbol
G2L["4f6"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f6"]["Name"] = [[Symbol]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Symbol.spec
G2L["4f7"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f7"]["Name"] = [[Symbol.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Type
G2L["4f8"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f8"]["Name"] = [[Type]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.Type.spec
G2L["4f9"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4f9"]["Name"] = [[Type.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.assertDeepEqual
G2L["4fa"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4fa"]["Name"] = [[assertDeepEqual]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.assertDeepEqual.spec
G2L["4fb"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4fb"]["Name"] = [[assertDeepEqual.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.assign
G2L["4fc"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4fc"]["Name"] = [[assign]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.assign.spec
G2L["4fd"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4fd"]["Name"] = [[assign.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createElement
G2L["4fe"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4fe"]["Name"] = [[createElement]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createElement.spec
G2L["4ff"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["4ff"]["Name"] = [[createElement.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createFragment
G2L["500"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["500"]["Name"] = [[createFragment]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createFragment.spec
G2L["501"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["501"]["Name"] = [[createFragment.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createReconciler
G2L["502"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["502"]["Name"] = [[createReconciler]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createReconciler.spec
G2L["503"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["503"]["Name"] = [[createReconciler.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createReconcilerCompat
G2L["504"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["504"]["Name"] = [[createReconcilerCompat]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createReconcilerCompat.spec
G2L["505"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["505"]["Name"] = [[createReconcilerCompat.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createRef
G2L["506"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["506"]["Name"] = [[createRef]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createRef.spec
G2L["507"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["507"]["Name"] = [[createRef.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createSignal
G2L["508"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["508"]["Name"] = [[createSignal]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createSignal.spec
G2L["509"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["509"]["Name"] = [[createSignal.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createSpy
G2L["50a"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["50a"]["Name"] = [[createSpy]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.createSpy.spec
G2L["50b"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["50b"]["Name"] = [[createSpy.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.getDefaultInstanceProperty
G2L["50c"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["50c"]["Name"] = [[getDefaultInstanceProperty]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.getDefaultInstanceProperty.spec
G2L["50d"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["50d"]["Name"] = [[getDefaultInstanceProperty.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.init.spec
G2L["50e"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["50e"]["Name"] = [[init.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.internalAssert
G2L["50f"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["50f"]["Name"] = [[internalAssert]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.invalidSetStateMessages
G2L["510"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["510"]["Name"] = [[invalidSetStateMessages]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.oneChild
G2L["511"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["511"]["Name"] = [[oneChild]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.oneChild.spec
G2L["512"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["512"]["Name"] = [[oneChild.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.strict
G2L["513"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["513"]["Name"] = [[strict]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Vendor.Roact.strict.spec
G2L["514"] = Instance.new("ModuleScript", G2L["4c9"]);
G2L["514"]["Name"] = [[strict.spec]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.LibraryManager
G2L["515"] = Instance.new("ModuleScript", G2L["5c"]);
G2L["515"]["Name"] = [[LibraryManager]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.LibraryManager.F3X/Cheer@0.0.1
G2L["516"] = Instance.new("ModuleScript", G2L["515"]);
G2L["516"]["Name"] = [[F3X/Cheer@0.0.1]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.LibraryManager.F3X/Cheer@0.0.1.Metadata
G2L["517"] = Instance.new("ModuleScript", G2L["516"]);
G2L["517"]["Name"] = [[Metadata]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.LibraryManager.F3X/SupportLibrary@1.0.0
G2L["518"] = Instance.new("ModuleScript", G2L["515"]);
G2L["518"]["Name"] = [[F3X/SupportLibrary@1.0.0]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.LibraryManager.F3X/SupportLibrary@1.0.0.Metadata
G2L["519"] = Instance.new("ModuleScript", G2L["518"]);
G2L["519"]["Name"] = [[Metadata]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.LibraryManager.F3X/Try@1.0.0
G2L["51a"] = Instance.new("ModuleScript", G2L["515"]);
G2L["51a"]["Name"] = [[F3X/Try@1.0.0]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.LibraryManager.F3X/Try@1.0.0.Metadata
G2L["51b"] = Instance.new("ModuleScript", G2L["51a"]);
G2L["51b"]["Name"] = [[Metadata]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loader
G2L["51c"] = Instance.new("ModuleScript", G2L["5c"]);
G2L["51c"]["Name"] = [[Loader]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loader.ToolInitializer
G2L["51d"] = Instance.new("LocalScript", G2L["51c"]);
G2L["51d"]["Name"] = [[ToolInitializer]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loader.PluginInitializer
G2L["51e"] = Instance.new("Script", G2L["51c"]);
G2L["51e"]["Name"] = [[PluginInitializer]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools
G2L["51f"] = Instance.new("Folder", G2L["5c"]);
G2L["51f"]["Name"] = [[Tools]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Anchor
G2L["520"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["520"]["Name"] = [[Anchor]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Collision
G2L["521"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["521"]["Name"] = [[Collision]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Decorate
G2L["522"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["522"]["Name"] = [[Decorate]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Lighting
G2L["523"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["523"]["Name"] = [[Lighting]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Material
G2L["524"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["524"]["Name"] = [[Material]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Mesh
G2L["525"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["525"]["Name"] = [[Mesh]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Move
G2L["526"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["526"]["Name"] = [[Move]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Move.FreeDragging
G2L["527"] = Instance.new("ModuleScript", G2L["526"]);
G2L["527"]["Name"] = [[FreeDragging]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Move.HandleDragging
G2L["528"] = Instance.new("ModuleScript", G2L["526"]);
G2L["528"]["Name"] = [[HandleDragging]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Move.UIController
G2L["529"] = Instance.new("ModuleScript", G2L["526"]);
G2L["529"]["Name"] = [[UIController]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Move.Util
G2L["52a"] = Instance.new("ModuleScript", G2L["526"]);
G2L["52a"]["Name"] = [[Util]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.NewPart
G2L["52b"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["52b"]["Name"] = [[NewPart]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Paint
G2L["52c"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["52c"]["Name"] = [[Paint]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Paint.PaintHistoryRecord
G2L["52d"] = Instance.new("ModuleScript", G2L["52c"]);
G2L["52d"]["Name"] = [[PaintHistoryRecord]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Resize
G2L["52e"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["52e"]["Name"] = [[Resize]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Rotate
G2L["52f"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["52f"]["Name"] = [[Rotate]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Surface
G2L["530"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["530"]["Name"] = [[Surface]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Texture
G2L["531"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["531"]["Name"] = [[Texture]];

-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Tools.Weld
G2L["532"] = Instance.new("ModuleScript", G2L["51f"]);
G2L["532"]["Name"] = [[Weld]];

-- StarterGui.BestOne.HelpF
G2L["533"] = Instance.new("Frame", G2L["1"]);
G2L["533"]["Visible"] = false;
G2L["533"]["BorderSizePixel"] = 0;
G2L["533"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["533"]["Size"] = UDim2.new(0, 219, 0, 223);
G2L["533"]["Position"] = UDim2.new(0.42332, 0, 0.27328, 0);
G2L["533"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["533"]["Name"] = [[HelpF]];
G2L["533"]["BackgroundTransparency"] = 1;

-- StarterGui.BestOne.HelpF.TextLabel
G2L["534"] = Instance.new("TextLabel", G2L["533"]);
G2L["534"]["BorderSizePixel"] = 0;
G2L["534"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["534"]["TextSize"] = 14;
G2L["534"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["534"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["534"]["BackgroundTransparency"] = 1;
G2L["534"]["Size"] = UDim2.new(0, 178, 0, 35);
G2L["534"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["534"]["Text"] = [[Contact us on Dc]];
G2L["534"]["Position"] = UDim2.new(0.11416, 0, 0.07319, 0);

-- StarterGui.BestOne.HelpF.TextLabel
G2L["535"] = Instance.new("TextLabel", G2L["533"]);
G2L["535"]["BorderSizePixel"] = 0;
G2L["535"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["535"]["TextSize"] = 14;
G2L["535"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["535"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["535"]["BackgroundTransparency"] = 1;
G2L["535"]["Size"] = UDim2.new(0, 113, 0, 32);
G2L["535"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["535"]["Text"] = [[]];
G2L["535"]["Position"] = UDim2.new(0.26027, 0, 0.2287, 0);

-- StarterGui.BestOne.HelpF.TextLabel.LocalScript
G2L["536"] = Instance.new("LocalScript", G2L["535"]);


-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L["1c"]] = {
Closure = function()
    local script = G2L["1c"];


--You can change the respawn time by changing the "0" to another number.

--I did not steal this from another free model.

--I made this script myself.

end;
};
G2L_MODULES[G2L["67"]] = {
Closure = function()
    local script = G2L["67"];
-- References
SyncAPI = script.Parent;
Tool = SyncAPI.Parent;
Player = nil;

-- Libraries
Security = require(Tool.Core.Security);
RegionModule = require(Tool.Libraries.Region);
Support = require(Tool.Libraries.SupportLibrary);
Serialization = require(Tool.Libraries.SerializationV3);

-- Import services
Support.ImportServices();

-- Default options
Options = {
	DisallowLocked = false
}

-- Keep track of created items in memory to not lose them in garbage collection
CreatedInstances = {};
LastParents = {};

-- Determine whether we're in tool or plugin mode
ToolMode = (Tool.Parent:IsA 'Plugin') and 'Plugin' or 'Tool'

-- List of actions that could be requested
Actions = {

	['RecolorHandle'] = function (NewColor)
		-- Recolors the tool handle
		Tool.Handle.BrickColor = NewColor;
	end;

	['Clone'] = function (Items, Parent)
		-- Clones the given items

		-- Validate arguments
		assert(type(Items) == 'table', 'Invalid items')
		assert(typeof(Parent) == 'Instance', 'Invalid parent')
		assert(Security.IsLocationAllowed(Parent, Player), 'Permission denied for client')

		-- Check if items modifiable
		if not CanModifyItems(Items) then
			return {}
		end

		-- Check if parts intruding into private areas
		local Parts = GetPartsFromSelection(Items)
		if Security.ArePartsViolatingAreas(Parts, Player, false) then
			return {}
		end

		local Clones = {}

		-- Clone items
		for _, Item in pairs(Items) do
			local Clone = Item:Clone()
			Clone.Parent = Parent

			-- Register the clone
			table.insert(Clones, Clone)
			CreatedInstances[Item] = Item
		end

		-- Return the clones
		return Clones
	end;

	['CreatePart'] = function (PartType, Position, Parent)
		-- Creates a new part based on `PartType`

		-- Validate requested parent
		assert(typeof(Parent) == 'Instance', 'Invalid parent')
		assert(Security.IsLocationAllowed(Parent, Player), 'Permission denied for client')

		-- Create the part
		local NewPart = CreatePart(PartType);

		-- Position the part
		NewPart.CFrame = Position;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas({ NewPart }), Player);

		-- Make sure the player is allowed to create parts in the area
		if Security.ArePartsViolatingAreas({ NewPart }, Player, false, AreaPermissions) then
			return;
		end;

		-- Parent the part
		NewPart.Parent = Parent

		-- Register the part
		CreatedInstances[NewPart] = NewPart;

		-- Return the part
		return NewPart;
	end;

	['CreateGroup'] = function (Type, Parent, Items)
		-- Creates a new group of type `Type`

		local ValidGroupTypes = {
			Model = true,
			Folder = true
		}

		-- Validate arguments
		assert(ValidGroupTypes[Type], 'Invalid group type')
		assert(typeof(Parent) == 'Instance', 'Invalid parent')
		assert(Security.IsLocationAllowed(Parent, Player), 'Permission denied for client')

		-- Check if items selectable
		if not CanModifyItems(Items) then
			return
		end

		-- Check if parts intruding into private areas
		local Parts = GetPartsFromSelection(Items)
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player)
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return
		end

		-- Create group
		local Group = Instance.new(Type)

		-- Attach children
		for _, Item in pairs(Items) do
			Item.Parent = Group
		end

		-- Parent group
		Group.Parent = Parent

		-- Make joints
		if Type == 'Model' then
			Group:MakeJoints()
		elseif Type == 'Folder' then
			local Parts = Support.GetDescendantsWhichAreA(Group, 'BasePart')
			for _, Part in pairs(Parts) do
				Part:MakeJoints()
			end
		end

		-- Return the new group
		return Group

	end,

	['Ungroup'] = function (Groups)

		-- Validate arguments
		assert(type(Groups) == 'table', 'Invalid groups')

		-- Check if items modifiable
		if not CanModifyItems(Groups) then
			return
		end

		-- Check if parts intruding into private areas
		local Parts = GetPartsFromSelection(Groups)
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player)
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return
		end

		local Results = {}

		-- Check each group
		for Key, Group in ipairs(Groups) do
			assert(typeof(Group) == 'Instance', 'Invalid group')

			-- Track group children
			local Children = {}
			Results[Key] = Children

			-- Unpack group children into parent
			local NewParent = Group.Parent
			for _, Child in pairs(Group:GetChildren()) do
				LastParents[Child] = Group
				Children[#Children + 1] = Child
				Child.Parent = NewParent
				if Child:IsA 'BasePart' then
					Child:MakeJoints()
				elseif Child:IsA 'Folder' then
					local Parts = Support.GetDescendantsWhichAreA(Child, 'BasePart')
					for _, Part in pairs(Parts) do
						Part:MakeJoints()
					end
				end
			end

			-- Track removing group
			LastParents[Group] = Group.Parent
			CreatedInstances[Group] = Group

			-- Remove group
			Group.Parent = nil
		end

		return Results
	end,

	['SetParent'] = function (Items, Parent)

		-- Validate arguments
		assert(type(Items) == 'table', 'Invalid items')
		assert(type(Parent) == 'table' or typeof(Parent) == 'Instance', 'Invalid parent')

		-- Check if items modifiable
		if not CanModifyItems(Items) then
			return
		end

		-- Check if parts intruding into private areas
		local Parts = GetPartsFromSelection(Items)
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player)
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return
		end

		-- Move each item to different parent
		if type(Parent) == 'table' then
			for Key, Item in pairs(Items) do
				local Parent = Parent[Key]

				-- Check if parent allowed
				assert(Security.IsLocationAllowed(Parent, Player), 'Permission denied for client')

				-- Move item
				Item.Parent = Parent
				if Item:IsA 'BasePart' then
					Item:MakeJoints()
				elseif Item:IsA 'Folder' then
					local Parts = Support.GetDescendantsWhichAreA(Item, 'BasePart')
					for _, Part in pairs(Parts) do
						Part:MakeJoints()
					end
				end
			end

		-- Move to single parent
		elseif typeof(Parent) == 'Instance' then
			assert(Security.IsLocationAllowed(Parent, Player), 'Permission denied for client')

			-- Reparent items
			for _, Item in pairs(Items) do
				Item.Parent = Parent
				if Item:IsA 'BasePart' then
					Item:MakeJoints()
				elseif Item:IsA 'Folder' then
					local Parts = Support.GetDescendantsWhichAreA(Item, 'BasePart')
					for _, Part in pairs(Parts) do
						Part:MakeJoints()
					end
				end
			end
		end

	end,

	['SetName'] = function (Items, Name)

		-- Validate arguments
		assert(type(Items) == 'table', 'Invalid items')
		assert(type(Name) == 'table' or type(Name) == 'string', 'Invalid name')

		-- Check if items modifiable
		if not CanModifyItems(Items) then
			return
		end

		-- Check if parts intruding into private areas
		local Parts = GetPartsFromSelection(Items)
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player)
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return
		end

		-- Rename each item to a different name
		if type(Name) == 'table' then
			for Key, Item in pairs(Items) do
				local Name = Name[Key]
				Item.Name = Name
			end

		-- Rename to single name
		elseif type(Name) == 'string' then
			for _, Item in pairs(Items) do
				Item.Name = Name
			end
		end

	end,

	['Remove'] = function (Objects)
		-- Removes the given objects

		-- Get the relevant parts for each object, for permission checking
		local Parts = {};

		-- Go through the selection
		for _, Object in pairs(Objects) do

			-- Make sure the object still exists
			if Object then

				if Object:IsA 'BasePart' then
					table.insert(Parts, Object);

				elseif Object:IsA 'Smoke' or Object:IsA 'Fire' or Object:IsA 'Sparkles' or Object:IsA 'DataModelMesh' or Object:IsA 'Decal' or Object:IsA 'Texture' or Object:IsA 'Light' then
					table.insert(Parts, Object.Parent);

				elseif Object:IsA 'Model' or Object:IsA 'Folder' then
					Support.ConcatTable(Parts, Support.GetDescendantsWhichAreA(Object, 'BasePart'))
				end

			end;

		end;

		-- Check if items modifiable
		if not CanModifyItems(Objects) then
			return
		end

		-- Check if parts intruding into private areas
		if Security.ArePartsViolatingAreas(Parts, Player, true) then
			return
		end

		-- After confirming permissions, perform each removal
		for _, Object in pairs(Objects) do

			-- Store the part's current parent
			LastParents[Object] = Object.Parent;

			-- Register the object
			CreatedInstances[Object] = Object;

			-- Set the object's current parent to `nil`
			Object.Parent = nil;

		end;

	end;

	['UndoRemove'] = function (Objects)
		-- Restores the given removed objects to their last parents

		-- Get the relevant parts for each object, for permission checking
		local Parts = {};

		-- Go through the selection
		for _, Object in pairs(Objects) do

			-- Make sure the object still exists, and that its last parent is registered
			if Object and LastParents[Object] then

				if Object:IsA 'BasePart' then
					table.insert(Parts, Object);

				elseif Object:IsA 'Smoke' or Object:IsA 'Fire' or Object:IsA 'Sparkles' or Object:IsA 'DataModelMesh' or Object:IsA 'Decal' or Object:IsA 'Texture' or Object:IsA 'Light' then
					table.insert(Parts, Object.Parent);

				elseif Object:IsA 'Model' or Object:IsA 'Folder' then
					Support.ConcatTable(Parts, Support.GetDescendantsWhichAreA(Object, 'BasePart'))
				end

			end;

		end;

		-- Check if items modifiable
		if not CanModifyItems(Objects) then
			return
		end

		-- Check if parts intruding into private areas
		if Security.ArePartsViolatingAreas(Parts, Player, false) then
			return
		end

		-- After confirming permissions, perform each removal
		for _, Object in pairs(Objects) do

			-- Store the part's current parent
			local LastParent = LastParents[Object];
			LastParents[Object] = Object.Parent;

			-- Register the object
			CreatedInstances[Object] = Object;

			-- Set the object's parent to the last parent
			Object.Parent = LastParent;

			-- Make joints
			if Object:IsA 'BasePart' then
				Object:MakeJoints()
			else
				local Parts = Support.GetDescendantsWhichAreA(Object, 'BasePart')
				for _, Part in pairs(Parts) do
					Part:MakeJoints()
				end
			end

		end;

	end;

	['SyncMove'] = function (Changes)
		-- Updates parts server-side given their new CFrames

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				Change.InitialState = { Anchored = Change.Part.Anchored, CFrame = Change.Part.CFrame };
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Preserve joints
		for Part, Change in pairs(ChangeSet) do
			Change.Joints = PreserveJoints(Part, ChangeSet);
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do

			-- Stabilize the parts and maintain the original anchor state
			Part.Anchored = true;
			Part:BreakJoints();
			Part.Velocity = Vector3.new();
			Part.RotVelocity = Vector3.new();

			-- Set the part's CFrame
			Part.CFrame = Change.CFrame;

		end;

		-- Make sure the player is authorized to move parts into this area
		if Security.ArePartsViolatingAreas(Parts, Player, false, AreaPermissions) then

			-- Revert changes if unauthorized destination
			for Part, Change in pairs(ChangeSet) do
				Part.CFrame = Change.InitialState.CFrame;
			end;

		end;

		-- Restore the parts' original states
		for Part, Change in pairs(ChangeSet) do
			Part:MakeJoints();
			RestoreJoints(Change.Joints);
			Part.Anchored = Change.InitialState.Anchored;
		end;

	end;

	['SyncResize'] = function (Changes)
		-- Updates parts server-side given their new sizes and CFrames

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				Change.InitialState = { Anchored = Change.Part.Anchored, Size = Change.Part.Size, CFrame = Change.Part.CFrame };
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do

			-- Stabilize the parts and maintain the original anchor state
			Part.Anchored = true;
			Part:BreakJoints();
			Part.Velocity = Vector3.new();
			Part.RotVelocity = Vector3.new();

			-- Set the part's size and CFrame
			Part.Size = Change.Size;
			Part.CFrame = Change.CFrame;

		end;

		-- Make sure the player is authorized to move parts into this area
		if Security.ArePartsViolatingAreas(Parts, Player, false, AreaPermissions) then

			-- Revert changes if unauthorized destination
			for Part, Change in pairs(ChangeSet) do
				Part.Size = Change.InitialState.Size;
				Part.CFrame = Change.InitialState.CFrame;
			end;

		end;

		-- Restore the parts' original states
		for Part, Change in pairs(ChangeSet) do
			Part:MakeJoints();
			Part.Anchored = Change.InitialState.Anchored;
		end;

	end;

	['SyncRotate'] = function (Changes)
		-- Updates parts server-side given their new CFrames

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				Change.InitialState = { Anchored = Change.Part.Anchored, CFrame = Change.Part.CFrame };
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Preserve joints
		for Part, Change in pairs(ChangeSet) do
			Change.Joints = PreserveJoints(Part, ChangeSet);
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do

			-- Stabilize the parts and maintain the original anchor state
			Part.Anchored = true;
			Part:BreakJoints();
			Part.Velocity = Vector3.new();
			Part.RotVelocity = Vector3.new();

			-- Set the part's CFrame
			Part.CFrame = Change.CFrame;

		end;

		-- Make sure the player is authorized to move parts into this area
		if Security.ArePartsViolatingAreas(Parts, Player, false, AreaPermissions) then

			-- Revert changes if unauthorized destination
			for Part, Change in pairs(ChangeSet) do
				Part.CFrame = Change.InitialState.CFrame;
			end;

		end;

		-- Restore the parts' original states
		for Part, Change in pairs(ChangeSet) do
			Part:MakeJoints();
			RestoreJoints(Change.Joints);
			Part.Anchored = Change.InitialState.Anchored;
		end;

	end;

	['SyncColor'] = function (Changes)
		-- Updates parts server-side given their new colors

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do

			-- Set the part's color
			Part.Color = Change.Color;

			-- If this part is a union, set its UsePartColor state
			if Part.ClassName == 'UnionOperation' then
				Part.UsePartColor = Change.UnionColoring;
			end;

		end;

	end;

	['SyncSurface'] = function (Changes)
		-- Updates parts server-side given their new surfaces

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do

			-- Apply each surface change
			for Surface, SurfaceType in pairs(Change.Surfaces) do
				Part[Surface .. 'Surface'] = SurfaceType;
			end;

		end;

	end;

	['CreateLights'] = function (Changes)
		-- Creates lights in the given parts

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Make a list of allowed light type requests
		local AllowedLightTypes = { PointLight = true, SurfaceLight = true, SpotLight = true };

		-- Keep track of the newly created lights
		local Lights = {};

		-- Create each light
		for Part, Change in pairs(ChangeSet) do

			-- Make sure the requested light type is valid
			if AllowedLightTypes[Change.LightType] then

				-- Create the light
				local Light = Instance.new(Change.LightType, Part);
				table.insert(Lights, Light);

				-- Register the light
				CreatedInstances[Light] = Light;

			end;

		end;

		-- Return the new lights
		return Lights;

	end;

	['SyncLighting'] = function (Changes)
		-- Updates aspects of the given selection's lights

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Make a list of allowed light type requests
		local AllowedLightTypes = { PointLight = true, SurfaceLight = true, SpotLight = true };

		-- Update each part's lights
		for Part, Change in pairs(ChangeSet) do

			-- Make sure that the light type requested is valid
			if AllowedLightTypes[Change.LightType] then

				-- Grab the part's light
				local Light = Support.GetChildOfClass(Part, Change.LightType);

				-- Make sure the light exists
				if Light then

					-- Make the requested changes
					if Change.Range ~= nil then
						Light.Range = Change.Range;
					end;
					if Change.Brightness ~= nil then
						Light.Brightness = Change.Brightness;
					end;
					if Change.Color ~= nil then
						Light.Color = Change.Color;
					end;
					if Change.Shadows ~= nil then
						Light.Shadows = Change.Shadows;
					end;
					if Change.Face ~= nil then
						Light.Face = Change.Face;
					end;
					if Change.Angle ~= nil then
						Light.Angle = Change.Angle;
					end;

				end;

			end;

		end;

	end;

	['CreateDecorations'] = function (Changes)
		-- Creates decorations in the given parts

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Make a list of allowed decoration type requests
		local AllowedDecorationTypes = { Smoke = true, Fire = true, Sparkles = true };

		-- Keep track of the newly created decorations
		local Decorations = {};

		-- Create each decoration
		for Part, Change in pairs(ChangeSet) do

			-- Make sure the requested decoration type is valid
			if AllowedDecorationTypes[Change.DecorationType] then

				-- Create the decoration
				local Decoration = Instance.new(Change.DecorationType, Part);
				table.insert(Decorations, Decoration);

				-- Register the decoration
				CreatedInstances[Decoration] = Decoration;

			end;

		end;

		-- Return the new decorations
		return Decorations;

	end;

	['SyncDecorate'] = function (Changes)
		-- Updates aspects of the given selection's decorations

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Make a list of allowed decoration type requests
		local AllowedDecorationTypes = { Smoke = true, Fire = true, Sparkles = true };

		-- Update each part's decorations
		for Part, Change in pairs(ChangeSet) do

			-- Make sure that the decoration type requested is valid
			if AllowedDecorationTypes[Change.DecorationType] then

				-- Grab the part's decoration
				local Decoration = Support.GetChildOfClass(Part, Change.DecorationType);

				-- Make sure the decoration exists
				if Decoration then

					-- Make the requested changes
					if Change.Color ~= nil then
						Decoration.Color = Change.Color;
					end;
					if Change.Opacity ~= nil then
						Decoration.Opacity = Change.Opacity;
					end;
					if Change.RiseVelocity ~= nil then
						Decoration.RiseVelocity = Change.RiseVelocity;
					end;
					if Change.Size ~= nil then
						Decoration.Size = Change.Size;
					end;
					if Change.Heat ~= nil then
						Decoration.Heat = Change.Heat;
					end;
					if Change.SecondaryColor ~= nil then
						Decoration.SecondaryColor = Change.SecondaryColor;
					end;
					if Change.SparkleColor ~= nil then
						Decoration.SparkleColor = Change.SparkleColor;
					end;

				end;

			end;

		end;

	end;

	['CreateMeshes'] = function (Changes)
		-- Creates meshes in the given parts

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Keep track of the newly created meshes
		local Meshes = {};

		-- Create each mesh
		for Part, Change in pairs(ChangeSet) do

			-- Create the mesh
			local Mesh = Instance.new('SpecialMesh', Part);
			table.insert(Meshes, Mesh);

			-- Register the mesh
			CreatedInstances[Mesh] = Mesh;

		end;

		-- Return the new meshes
		return Meshes;

	end;

	['SyncMesh'] = function (Changes)
		-- Updates aspects of the given selection's meshes

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Update each part's meshes
		for Part, Change in pairs(ChangeSet) do

			-- Grab the part's mesh
			local Mesh = Support.GetChildOfClass(Part, 'SpecialMesh');

			-- Make sure the mesh exists
			if Mesh then

				-- Make the requested changes
				if Change.VertexColor ~= nil then
					Mesh.VertexColor = Change.VertexColor;
				end;
				if Change.MeshType ~= nil then
					Mesh.MeshType = Change.MeshType;
				end;
				if Change.Scale ~= nil then
					Mesh.Scale = Change.Scale;
				end;
				if Change.Offset ~= nil then
					Mesh.Offset = Change.Offset;
				end;
				if Change.MeshId ~= nil then
					Mesh.MeshId = Change.MeshId;
				end;
				if Change.TextureId ~= nil then
					Mesh.TextureId = Change.TextureId;
				end;

			end;

		end;

	end;

	['CreateTextures'] = function (Changes)
		-- Creates textures in the given parts

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Make a list of allowed texture type requests
		local AllowedTextureTypes = { Texture = true, Decal = true };

		-- Keep track of the newly created textures
		local Textures = {};

		-- Create each texture
		for Part, Change in pairs(ChangeSet) do

			-- Make sure the requested light type is valid
			if AllowedTextureTypes[Change.TextureType] then

				-- Create the texture
				local Texture = Instance.new(Change.TextureType, Part);
				Texture.Face = Change.Face;
				table.insert(Textures, Texture);

				-- Register the texture
				CreatedInstances[Texture] = Texture;

			end;

		end;

		-- Return the new textures
		return Textures;

	end;

	['SyncTexture'] = function (Changes)
		-- Updates aspects of the given selection's textures

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Make a list of allowed texture type requests
		local AllowedTextureTypes = { Texture = true, Decal = true };

		-- Update each part's textures
		for Part, Change in pairs(ChangeSet) do

			-- Make sure that the texture type requested is valid
			if AllowedTextureTypes[Change.TextureType] then

				-- Get the right textures within the part
				for _, Texture in pairs(Part:GetChildren()) do
					if Texture.ClassName == Change.TextureType and Texture.Face == Change.Face then

						-- Perform the changes
						if Change.Texture ~= nil then
							Texture.Texture = Change.Texture;
						end;
						if Change.Transparency ~= nil then
							Texture.Transparency = Change.Transparency;
						end;
						if Change.StudsPerTileU ~= nil then
							Texture.StudsPerTileU = Change.StudsPerTileU;
						end;
						if Change.StudsPerTileV ~= nil then
							Texture.StudsPerTileV = Change.StudsPerTileV;
						end;

					end;
				end;

			end;

		end;

	end;

	['SyncAnchor'] = function (Changes)
		-- Updates parts server-side given their new anchor status

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do
			Part.Anchored = Change.Anchored;
		end;

	end;

	['SyncCollision'] = function (Changes)
		-- Updates parts server-side given their new collision status

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do
			Part.CanCollide = Change.CanCollide;
		end;

	end;

	['SyncMaterial'] = function (Changes)
		-- Updates parts server-side given their new material

		-- Grab a list of every part we're attempting to modify
		local Parts = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				table.insert(Parts, Change.Part);
			end;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Reorganize the changes
		local ChangeSet = {};
		for _, Change in pairs(Changes) do
			if Change.Part then
				ChangeSet[Change.Part] = Change;
			end;
		end;

		-- Perform each change
		for Part, Change in pairs(ChangeSet) do
			if Change.Material ~= nil then
				Part.Material = Change.Material;
			end;
			if Change.Transparency ~= nil then
				Part.Transparency = Change.Transparency;
			end;
			if Change.Reflectance ~= nil then
				Part.Reflectance = Change.Reflectance;
			end;
		end;

	end;

	['CreateWelds'] = function (Parts, TargetPart)
		-- Creates welds for the given parts to the target part

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to perform changes to these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		local Welds = {};

		-- Create the welds
		for _, Part in pairs(Parts) do

			-- Make sure we're not welding this part to itself
			if Part ~= TargetPart then

				-- Calculate the offset of the part from the target part
				local Offset = Part.CFrame:toObjectSpace(TargetPart.CFrame);

				-- Create the weld
				local Weld = Instance.new('Weld');
				Weld.Name = 'BTWeld';
				Weld.Part0 = TargetPart;
				Weld.Part1 = Part;
				Weld.C1 = Offset;
				Weld.Archivable = true;
				Weld.Parent = TargetPart;

				-- Register the weld
				CreatedInstances[Weld] = Weld;
				table.insert(Welds, Weld);

			end;

		end;

		-- Return the welds created
		return Welds;
	end;

	['RemoveWelds'] = function (Welds)
		-- Removes the given welds

		local Parts = {};

		-- Go through each weld
		for _, Weld in pairs(Welds) do

			-- Make sure each given weld is valid
			if Weld.ClassName ~= 'Weld' then
				return;
			end;

			-- Collect the relevant parts for this weld
			table.insert(Parts, Weld.Part0);
			table.insert(Parts, Weld.Part1);

		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		local WeldsRemoved = 0;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Go through each weld
		for _, Weld in pairs(Welds) do

			-- Check the permissions on each weld-related part
			local Part0Unauthorized = Security.ArePartsViolatingAreas({ Weld.Part0 }, Player, true, AreaPermissions);
			local Part1Unauthorized = Security.ArePartsViolatingAreas({ Weld.Part1 }, Player, true, AreaPermissions);

			-- If at least one of the involved parts is authorized, remove the weld
			if not Part0Unauthorized or not Part1Unauthorized then

				-- Register the weld
				CreatedInstances[Weld] = Weld;
				LastParents[Weld] = Weld.Parent;
				WeldsRemoved = WeldsRemoved + 1;

				-- Remove the weld
				Weld.Parent = nil;

			end;

		end;

		-- Return the number of welds removed
		return WeldsRemoved;
	end;

	['UndoRemovedWelds'] = function (Welds)
		-- Restores the given removed welds

		local Parts = {};

		-- Go through each weld
		for _, Weld in pairs(Welds) do

			-- Make sure each given weld is valid
			if Weld.ClassName ~= 'Weld' then
				return;
			end;

			-- Make sure each weld has its old parent registered
			if not LastParents[Weld] then
				return;
			end;

			-- Collect the relevant parts for this weld
			table.insert(Parts, Weld.Part0);
			table.insert(Parts, Weld.Part1);

		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Go through each weld
		for _, Weld in pairs(Welds) do

			-- Check the permissions on each weld-related part
			local Part0Unauthorized = Security.ArePartsViolatingAreas({ Weld.Part0 }, Player, false, AreaPermissions);
			local Part1Unauthorized = Security.ArePartsViolatingAreas({ Weld.Part0 }, Player, false, AreaPermissions);

			-- If at least one of the involved parts is authorized, restore the weld
			if not Part0Unauthorized or not Part1Unauthorized then

				-- Store the part's current parent
				local LastParent = LastParents[Weld];
				LastParents[Weld] = Weld.Parent;

				-- Register the weld
				CreatedInstances[Weld] = Weld;

				-- Set the weld's parent to the last parent
				Weld.Parent = LastParent;

			end;

		end;

	end;

	['Export'] = function (Parts)
		-- Serializes, exports, and returns ID for importing given parts

		-- Offload action to server-side if API is running locally
		if RunService:IsClient() and not RunService:IsStudio() then
			return SyncAPI.ServerEndpoint:InvokeServer('Export', Parts);
		end;

		-- Ensure valid selection
		assert(type(Parts) == 'table', 'Invalid item table');

		-- Ensure there are items to export
		if #Parts == 0 then
			return;
		end;

		-- Ensure parts are selectable
		if not CanModifyItems(Parts) then
			return;
		end;

		-- Cache up permissions for all private areas
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player);

		-- Make sure the player is allowed to access these parts
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return;
		end;

		-- Get all descendants of the parts
		local Items = Support.CloneTable(Parts);
		for _, Part in pairs(Parts) do
			Support.ConcatTable(Items, Part:GetDescendants());
		end;

		-- After confirming permissions, serialize parts
		local SerializedBuildData = Serialization.SerializeModel(Items);

		-- Push serialized data to server
		local Response = HttpService:JSONDecode(
			HttpService:PostAsync(
				'http://f3xteam.com/bt/export',
				HttpService:JSONEncode { data = SerializedBuildData, version = 3, userId = (Player and Player.UserId) },
				Enum.HttpContentType.ApplicationJson,
				true
			)
		);

		-- Return creation ID on success
		if Response.success then
			return Response.id;
		else
			error('Export failed due to server-side error', 2);
		end;

	end;

	['IsHttpServiceEnabled'] = function ()
		-- Returns whether HttpService is enabled

		-- Offload action to server-side if API is running locally
		if RunService:IsClient() and not RunService:IsStudio() then
			return SyncAPI.ServerEndpoint:InvokeServer('IsHttpServiceEnabled');
		end;

		-- For in-game tool, return cached status if available
		if ToolMode == 'Tool' and (IsHttpServiceEnabled ~= nil) then
			return IsHttpServiceEnabled;
		end;

		-- Perform test HTTP request
		local Success, Error = pcall(function ()
			return HttpService:GetAsync('http://google.com');
		end);

		-- Determine whether HttpService is enabled
		if not Success and Error:match 'Http requests are not enabled' then
			IsHttpServiceEnabled = false;
		elseif Success then
			IsHttpServiceEnabled = true;
		end;

		-- Return HttpService status
		return IsHttpServiceEnabled;

	end;

	['ExtractMeshFromAsset'] = function (AssetId)
		-- Returns the first found mesh in the given asset

		-- Offload action to server-side if API is running locally
		if RunService:IsClient() and not RunService:IsStudio() then
			return SyncAPI.ServerEndpoint:InvokeServer('ExtractMeshFromAsset', AssetId);
		end;

		-- Ensure valid asset ID is given
		assert(type(AssetId) == 'number', 'Invalid asset ID');

		-- Return parsed response from API
		return HttpService:JSONDecode(
			HttpService:GetAsync('http://f3xteam.com/bt/getFirstMeshData/' .. AssetId)
		);

	end;

	['ExtractImageFromDecal'] = function (DecalAssetId)
		-- Returns the first image found in the given decal asset

		-- Offload action to server-side if API is running locally
		if RunService:IsClient() and not RunService:IsStudio() then
			return SyncAPI.ServerEndpoint:InvokeServer('ExtractImageFromDecal', DecalAssetId);
		end;

		-- Return direct response from the API
		return HttpService:GetAsync('http://f3xteam.com/bt/getDecalImageID/' .. DecalAssetId);

	end;

	['SetMouseLockEnabled'] = function (Enabled)
		-- Sets whether mouse lock is enabled for the current player

		-- Offload action to server-side if API is running locally
		if RunService:IsClient() and not RunService:IsStudio() then
			return SyncAPI.ServerEndpoint:InvokeServer('SetMouseLockEnabled', Enabled);
		end;

		-- Set whether mouse lock is enabled
		Player.DevEnableMouseLock = Enabled;

	end;

	['SetLocked'] = function (Items, Locked)
		-- Locks or unlocks the specified parts

		-- Validate arguments
		assert(type(Items) == 'table', 'Invalid items')
		assert(type(Locked) == 'table' or type(Locked) == 'boolean', 'Invalid lock state')

		-- Check if items modifiable
		if not CanModifyItems(Items) then
			return
		end

		-- Check if parts intruding into private areas
		local Parts = GetPartsFromSelection(Items)
		local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Parts), Player)
		if Security.ArePartsViolatingAreas(Parts, Player, true, AreaPermissions) then
			return
		end

		-- Set each item to a different lock state
		if type(Locked) == 'table' then
			for Key, Item in pairs(Items) do
				local Locked = Locked[Key]
				Item.Locked = Locked
			end

		-- Set to single lock state
		elseif type(Locked) == 'boolean' then
			for _, Item in pairs(Items) do
				Item.Locked = Locked
			end
		end

	end

}

function CanModifyItems(Items)
	-- Returns whether the items can be modified

	-- Check each item
	for _, Item in pairs(Items) do

		-- Catch items that cannot be reached
		local ItemAllowed = Security.IsItemAllowed(Item, Player)
		local LastParentKnown = LastParents[Item]
		if not (ItemAllowed or LastParentKnown) then
			return false
		end

		-- Catch locked parts
		if Options.DisallowLocked and (Item:IsA 'BasePart') and Item.Locked then
			return false
		end

	end

	-- Return true if all items modifiable
	return true

end

function GetPartsFromSelection(Selection)
	local Parts = {}

	-- Get parts from selection
	for _, Item in pairs(Selection) do
		if Item:IsA 'BasePart' then
			Parts[#Parts + 1] = Item

		-- Get parts within other items
		else
			for _, Descendant in pairs(Item:GetDescendants()) do
				if Descendant:IsA 'BasePart' then
					Parts[#Parts + 1] = Descendant
				end
			end
		end
	end

	-- Return parts
	return Parts
end

-- References to reduce indexing time
local GetConnectedParts = Instance.new('Part').GetConnectedParts;
local GetChildren = script.GetChildren;

function GetPartJoints(Part, Whitelist)
	-- Returns any manual joints involving `Part`

	local Joints = {};

	-- Get joints stored inside `Part`
	for Joint, JointParent in pairs(SearchJoints(Part, Part, Whitelist)) do
		Joints[Joint] = JointParent;
	end;

	-- Get joints stored inside connected parts
	for _, ConnectedPart in pairs(GetConnectedParts(Part)) do
		for Joint, JointParent in pairs(SearchJoints(ConnectedPart, Part, Whitelist)) do
			Joints[Joint] = JointParent;
		end;
	end;

	-- Return all found joints
	return Joints;

end;

-- Types of joints to assume should be preserved
local ManualJointTypes = Support.FlipTable { 'Weld', 'ManualWeld', 'ManualGlue', 'Motor', 'Motor6D' };

function SearchJoints(Haystack, Part, Whitelist)
	-- Searches for and returns manual joints in `Haystack` involving `Part` and other parts in `Whitelist`

	local Joints = {};

	-- Search the haystack for joints involving `Part`
	for _, Item in pairs(GetChildren(Haystack)) do

		-- Check if this item is a manual, intentional joint
		if ManualJointTypes[Item.ClassName] and
		   (Whitelist[Item.Part0] and Whitelist[Item.Part1]) then

			-- Save joint and state if intentional
			Joints[Item] = Item.Parent;

		end;

	end;

	-- Return the found joints
	return Joints;

end;

function RestoreJoints(Joints)
	-- Restores the joints from the given `Joints` data

	-- Restore each joint
	for Joint, JointParent in pairs(Joints) do
		Joint.Parent = JointParent;
	end;

end;

function PreserveJoints(Part, Whitelist)
	-- Preserves and returns intentional joints of `Part` connecting parts in `Whitelist`

	-- Get the part's joints
	local Joints = GetPartJoints(Part, Whitelist);

	-- Save the joints from being broken
	for Joint in pairs(Joints) do
		Joint.Parent = nil;
	end;

	-- Return the joints
	return Joints;

end;

function CreatePart(PartType)
	-- Creates and returns new part based on `PartType` with sensible defaults

	local NewPart

	if PartType == 'Normal' then
		NewPart = Instance.new('Part')
		NewPart.Size = Vector3.new(4, 1, 2)

	elseif PartType == 'Truss' then
		NewPart = Instance.new('TrussPart')

	elseif PartType == 'Wedge' then
		NewPart = Instance.new('WedgePart')
		NewPart.Size = Vector3.new(4, 1, 2)

	elseif PartType == 'Corner' then
		NewPart = Instance.new('CornerWedgePart')

	elseif PartType == 'Cylinder' then
		NewPart = Instance.new('Part')
		NewPart.Shape = 'Cylinder'
		NewPart.Size = Vector3.new(2, 2, 2)

	elseif PartType == 'Ball' then
		NewPart = Instance.new('Part')
		NewPart.Shape = 'Ball'

	elseif PartType == 'Seat' then
		NewPart = Instance.new('Seat')
		NewPart.Size = Vector3.new(4, 1, 2)

	elseif PartType == 'Vehicle Seat' then
		NewPart = Instance.new('VehicleSeat')
		NewPart.Size = Vector3.new(4, 1, 2)

	elseif PartType == 'Spawn' then
		NewPart = Instance.new('SpawnLocation')
		NewPart.Size = Vector3.new(4, 1, 2)
	end

	-- Make part surfaces smooth
	NewPart.TopSurface = Enum.SurfaceType.Smooth;
	NewPart.BottomSurface = Enum.SurfaceType.Smooth;

	-- Make sure the part is anchored
	NewPart.Anchored = true

	return NewPart
end

-- Keep current player updated in tool mode
if ToolMode == 'Tool' then

	-- Set current player if in backpack
	if Tool.Parent and Tool.Parent:IsA 'Backpack' then
		Player = Tool.Parent.Parent;

	-- Set current player if in character
	elseif Tool.Parent and Tool.Parent:IsA 'Model' then
		Player = Players:GetPlayerFromCharacter(Tool.Parent);

	-- Clear `Player` if not in possession of a player
	else
		Player = nil;
	end;

	-- Stay updated with latest player operating the tool
	Tool.AncestryChanged:Connect(function (Child, Parent)

		-- Ensure tool's parent changed
		if Child ~= Tool then
			return;
		end;

		-- Set `Player` to player of the backpack the tool is in
		if Parent and Parent:IsA 'Backpack' then
			Player = Parent.Parent;

		-- Set `Player` to player of the character holding the tool
		elseif Parent and Parent:IsA 'Model' then
			Player = Players:GetPlayerFromCharacter(Parent);

		-- Clear `Player` if tool is not parented to a player
		else
			Player = nil;
		end;

	end);

end;

-- Provide an interface into the module
return {

	-- Provide access to internal options
	Options = Options;

	-- Provide client actions API
	PerformAction = function (Client, ActionName, ...)

		-- Make sure the action exists
		local Action = Actions[ActionName];
		if not Action then
			return;
		end;

		-- Ensure client is current player in tool mode
		if ToolMode == 'Tool' then
			assert(Player and (Client == Player), 'Permission denied for client');
		end;

		-- Execute valid actions
		return Action(...);

	end;

};
end;
};
G2L_MODULES[G2L["6f"]] = {
Closure = function()
    local script = G2L["6f"];
Assets = {
	DarkSlantedRectangle	= 'rbxassetid://127774197';
	LightSlantedRectangle	= 'rbxassetid://127772502';
	ExpandArrow				= 'rbxassetid://134367382';
	UndoActiveDecal			= 'rbxassetid://141741408';
	UndoInactiveDecal		= 'rbxassetid://142074557';
	RedoActiveDecal			= 'rbxassetid://141741327';
	RedoInactiveDecal		= 'rbxassetid://142074553';
	DeleteActiveDecal		= 'rbxassetid://141896298';
	DeleteInactiveDecal		= 'rbxassetid://142074644';
	ExportActiveDecal		= 'rbxassetid://141741337';
	ExportInactiveDecal		= 'rbxassetid://142074569';
	CloneActiveDecal		= 'rbxassetid://142073926';
	CloneInactiveDecal		= 'rbxassetid://142074563';
	PluginIcon				= 'rbxassetid://142287521';
	GroupLockIcon			= 'rbxassetid://175396862';
	GroupUnlockIcon			= 'rbxassetid://160408836';
	GroupUpdateOKIcon		= 'rbxassetid://164421681';
	GroupUpdateIcon			= 'rbxassetid://160402908';
	CheckedCheckbox			= 'rbxassetid://401518893';
	UncheckedCheckbox		= 'rbxassetid://401518903';
	SemicheckedCheckbox		= 'rbxassetid://404298168';
	AnchorIcon				= 'rbxassetid://141741323';
	CollisionIcon			= 'rbxassetid://141809596';
	DecorateIcon			= 'rbxassetid://141741412';
	LightingIcon			= 'rbxassetid://141741341';
	MaterialIcon			= 'rbxassetid://141809090';
	MeshIcon				= 'rbxassetid://141806786';
	MoveIcon				= 'rbxassetid://141741366';
	NewPartIcon				= 'rbxassetid://141741393';
	PaintIcon				= 'rbxassetid://141741444';
	ResizeIcon				= 'rbxassetid://141794324';
	RotateIcon				= 'rbxassetid://141807775';
	SurfaceIcon				= 'rbxassetid://141803491';
	TextureIcon				= 'rbxassetid://141805275';
	WeldIcon				= 'rbxassetid://141741418';
	ExplorerDockIcon		= 'rbxassetid://2326621485';
};

return Assets;
end;
};
G2L_MODULES[G2L["70"]] = {
Closure = function()
    local script = G2L["70"];
Tool = script.Parent;
Plugin = (Tool.Parent:IsA 'Plugin') and Tool.Parent or nil

-- Detect mode
Mode = Plugin and 'Plugin' or 'Tool';

-- Load tool completely
local Indicator = Tool:WaitForChild 'Loaded';
while not Indicator.Value do
	Indicator.Changed:Wait();
end;

-- Modules
Security = require(script.Security)
History = require(script.History)
Selection = require(script.Selection)
Targeting = require(script.Targeting)

-- Libraries
Region = require(Tool.Libraries.Region)
Signal = require(Tool.Libraries.Signal)
Support = require(Tool.Libraries.SupportLibrary)
Cheer = require(Tool.Libraries.Cheer)
Try = require(Tool.Libraries.Try)
Make = require(Tool.Libraries.Make)
local Roact = require(Tool.Vendor:WaitForChild 'Roact')
local Maid = require(Tool.Libraries:WaitForChild 'Maid')

-- References
Support.ImportServices();
SyncAPI = Tool.SyncAPI;
Player = Players.LocalPlayer;
local RunService = game:GetService('RunService')

-- Preload assets
Assets = require(Tool.Assets)

-- Core events
ToolChanged = Signal.new()

function EquipTool(Tool)
	-- Equips and switches to the given tool

	-- Unequip current tool
	if CurrentTool and CurrentTool.Equipped then
		CurrentTool:Unequip();
		CurrentTool.Equipped = false;
	end;

	-- Set `Tool` as current
	CurrentTool = Tool;
	CurrentTool.Equipped = true;

	-- Fire relevant events
	ToolChanged:Fire(Tool);

	-- Equip the tool
	Tool:Equip();

end;

function RecolorHandle(Color)
	SyncAPI:Invoke('RecolorHandle', Color);
end;

-- Theme UI to current tool
ToolChanged:Connect(function (Tool)
	coroutine.wrap(RecolorHandle)(Tool.Color);
	coroutine.wrap(Selection.RecolorOutlines)(Tool.Color);
end);

-- Core hotkeys
Hotkeys = {};

function AssignHotkey(Hotkey, Callback)
	-- Assigns the given hotkey to `Callback`

	-- Standardize enum-described hotkeys
	if type(Hotkey) == 'userdata' then
		Hotkey = { Hotkey };

	-- Standardize string-described hotkeys
	elseif type(Hotkey) == 'string' then
		Hotkey = { Enum.KeyCode[Hotkey] };

	-- Standardize string table-described hotkeys
	elseif type(Hotkey) == 'table' then
		for Index, Key in ipairs(Hotkey) do
			if type(Key) == 'string' then
				Hotkey[Index] = Enum.KeyCode[Key];
			end;
		end;
	end;

	-- Register the hotkey
	table.insert(Hotkeys, { Keys = Hotkey, Callback = Callback });

end;

function EnableHotkeys()
	-- Begins to listen for hotkey triggering

	-- Listen for pressed keys
	Connections.Hotkeys = Support.AddUserInputListener('Began', 'Keyboard', false, function (Input)
		local _PressedKeys = Support.GetListMembers(UserInputService:GetKeysPressed(), 'KeyCode');

		-- Filter out problematic keys
		local PressedKeys = {};
		local FilteredKeys = Support.FlipTable { 'LeftAlt', 'W', 'S', 'A', 'D', 'Space' };
		for _, Key in ipairs(_PressedKeys) do
			if not FilteredKeys[Key.Name] then
				table.insert(PressedKeys, Key);
			end;
		end;

		-- Count pressed keys
		local KeyCount = #PressedKeys;

		-- Prioritize hotkeys based on # of required keys
		table.sort(Hotkeys, function (A, B)
			if #A.Keys > #B.Keys then
				return true;
			end;
		end);

		-- Identify matching hotkeys
		for _, Hotkey in ipairs(Hotkeys) do
			if KeyCount == #Hotkey.Keys then

				-- Get the hotkey's key index
				local Keys = Support.FlipTable(Hotkey.Keys)
				local MatchingKeys = 0;

				-- Check matching pressed keys
				for _, PressedKey in pairs(PressedKeys) do
					if Keys[PressedKey] then
						MatchingKeys = MatchingKeys + 1;
					end;
				end;

				-- Trigger the first matching hotkey's callback
				if MatchingKeys == KeyCount then
					Hotkey.Callback();
					break;
				end;

			end;
		end;
	end);

end;

Enabling = Signal.new()
Disabling = Signal.new()
Enabled = Signal.new()
Disabled = Signal.new()

function Enable(Mouse)

	-- Ensure tool is disabled or disabling, and not already enabling
	if (IsEnabled and not IsDisabling) or IsEnabling then
		return;

	-- If tool is disabling, enable it once fully disabled
	elseif IsDisabling then
		Disabled:Wait();
		return Enable(Mouse);
	end;

	-- Indicate that tool is enabling
	IsEnabling = true;
	Enabling:Fire();

	-- Update the core mouse
	getfenv(0).Mouse = Mouse;

	-- Use default mouse behavior
	UserInputService.MouseBehavior = Enum.MouseBehavior.Default;

	-- Disable mouse lock in tool mode
	if Mode == 'Tool' then
		coroutine.resume(coroutine.create(function ()
			SyncAPI:Invoke('SetMouseLockEnabled', false)
		end))
	end

	-- Wait for UI to initialize asynchronously
	while not UI do
		wait(0.1);
	end;

	-- Show UI
	UI.Parent = UIContainer;

	-- Display startup notifications
	if not StartupNotificationsDisplayed then
		Cheer(Tool.Interfaces.Notifications, UI).Start(getfenv(0));
		StartupNotificationsDisplayed = true;
	end;

	-- Start systems
	EnableHotkeys();
	Targeting:EnableTargeting()
	Selection.EnableOutlines();
	Selection.EnableMultiselectionHotkeys();

	-- Sync studio selection in
	if Mode == 'Plugin' then
		local LastSelectionChangeHandle
		Connections.StudioSelectionListener = SelectionService.SelectionChanged:Connect(function ()
			local SelectionChangeHandle = {}
			LastSelectionChangeHandle = SelectionChangeHandle

			-- Replace selection if it hasn't changed in a heartbeat
			RunService.Heartbeat:Wait()
			if LastSelectionChangeHandle == SelectionChangeHandle then
				Selection.Replace(SelectionService:Get(), false)
			end
		end)
	end

	-- Equip current tool
	EquipTool(CurrentTool or require(Tool.Tools.Move));

	-- Indicate that tool is now enabled
	IsEnabled = true;
	IsEnabling = false;
	Enabled:Fire();

end;

function Disable()

	-- Ensure tool is enabled or enabling, and not already disabling
	if (not IsEnabled and not IsEnabling) or IsDisabling then
		return;

	-- If tool is enabling, disable it once fully enabled
	elseif IsEnabling then
		Enabled:Wait();
		return Disable();
	end;

	-- Indicate that tool is now disabling
	IsDisabling = true;
	Disabling:Fire();

	-- Reenable mouse lock option in tool mode
	if Mode == 'Tool' then
		coroutine.resume(coroutine.create(function ()
			SyncAPI:Invoke('SetMouseLockEnabled', true)
		end))
	end

	-- Hide UI
	if UI then
		UI.Parent = script;
	end;

	-- Unequip current tool
	if CurrentTool then
		CurrentTool:Unequip();
		CurrentTool.Equipped = false;
	end;

	-- Clear temporary connections
	ClearConnections();

	-- Indicate that tool is now disabled
	IsEnabled = false;
	IsDisabling = false;
	Disabled:Fire();

end;


-- Core connections
Connections = {};

function ClearConnections()
	-- Clears and disconnects temporary connections
	for Index, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[Index] = nil;
	end;
end;

function InitializeUI()
	-- Sets up the UI

	-- Ensure UI has not yet been initialized
	if UI then
		return;
	end;

	-- Create the root UI
	UI = Instance.new('ScreenGui')
	UI.Name = 'Building Tools by F3X (UI)'

	-- Set up dock
	Dock = Cheer(Tool.Interfaces.Dock, UI).Start(getfenv(0));

	-- Clean up UI on tool teardown
	UIMaid = Maid.new()
	Tool.AncestryChanged:Connect(function (Item, Parent)
		if Parent == nil then
			UIMaid:Destroy()
		end
	end)

	-- Register explorer button on dock
	ExplorerDockButton = Dock.AddSelectionButton(Assets.ExplorerDockIcon, 'EXPLORER\n(Shift + H)')
	ExplorerDockButton.Activated:Connect(ToggleExplorer)
	ExplorerDockButton.ImageTransparency = 0.66

end;

local UIElements = Tool:WaitForChild 'UI'
local ExplorerTemplate = require(UIElements:WaitForChild 'Explorer')

function ToggleExplorer()
	if not ExplorerVisible then
		OpenExplorer()
	else
		CloseExplorer()
	end
end

function OpenExplorer()

	-- Ensure explorer not already open
	if ExplorerHandle then
		return
	end

	-- Initialize explorer
	Explorer = Roact.createElement(ExplorerTemplate, {
		Core = getfenv(0),
		Close = CloseExplorer,
		Scope = Targeting.Scope
	})

	-- Mount explorer
	ExplorerHandle = Roact.mount(Explorer, UI, 'Explorer')
	ExplorerVisible = true

	-- Unmount explorer on tool cleanup
	UIMaid.Explorer = Support.Call(Roact.unmount, ExplorerHandle)
	UIMaid.ExplorerScope = Targeting.ScopeChanged:Connect(function (Scope)
		local UpdatedProps = Support.Merge({}, Explorer.props, { Scope = Scope })
		local UpdatedExplorer = Roact.createElement(ExplorerTemplate, UpdatedProps)
		ExplorerHandle = Roact.update(ExplorerHandle, UpdatedExplorer)
	end)

	-- Update dock
	ExplorerDockButton.ImageTransparency = 0

end

function CloseExplorer()

	-- Clean up explorer
	UIMaid.Explorer = nil
	UIMaid.ExplorerScope = nil
	ExplorerHandle = nil
	ExplorerVisible = nil

	-- Update dock
	ExplorerDockButton.ImageTransparency = 0.66

end

-- Create scope HUD when tool opens
coroutine.wrap(function ()
	Enabled:Wait()

	-- Create scope HUD
	local ScopeHUDTemplate = require(UIElements:WaitForChild 'ScopeHUD')
	local ScopeHUD = Roact.createElement(ScopeHUDTemplate, {
		Core = getfenv(0);
	})

	-- Mount scope HUD
	Roact.mount(ScopeHUD, UI, 'ScopeHUD')
end)()

-- Register explorer pane toggling hotkeys
AssignHotkey({ 'LeftShift', 'H' }, ToggleExplorer)
AssignHotkey({ 'RightShift', 'H' }, ToggleExplorer)

-- Enable tool or plugin
if Mode == 'Plugin' then

	-- Set the UI root
	UIContainer = CoreGui;

	-- Create the toolbar button
	PluginButton = Plugin:CreateToolbar('Building Tools by F3X'):CreateButton(
		'Building Tools by F3X',
		'Building Tools by F3X',
		Assets.PluginIcon
	);

	-- Connect the button to the system
	PluginButton.Click:Connect(function ()
		PluginEnabled = not PluginEnabled;
		PluginButton:SetActive(PluginEnabled);

		-- Toggle the tool
		if PluginEnabled then
			Plugin:Activate(true);
			Enable(Plugin:GetMouse());
		else
			Disable();
		end;
	end);

	-- Disable the tool upon plugin deactivation
	Plugin.Deactivation:Connect(Disable);

	-- Sync Studio selection to internal selection
	Selection.Changed:Connect(function ()
		SelectionService:Set(Selection.Items);
	end);

	-- Sync internal selection to Studio selection on enabling
	Enabling:Connect(function ()
		Selection.Replace(SelectionService:Get());
	end);

	-- Roughly sync Studio history to internal history (API lacking necessary functionality)
	History.Changed:Connect(function ()
		ChangeHistoryService:SetWaypoint 'Building Tools by F3X';
	end);

elseif Mode == 'Tool' then

	-- Set the UI root
	UIContainer = Player:WaitForChild 'PlayerGui';

	-- Connect the tool to the system
	Tool.Equipped:Connect(Enable);
	Tool.Unequipped:Connect(Disable);

	-- Disable the tool if not parented
	if not Tool.Parent then
		Disable();
	end;

	-- Disable the tool automatically if not equipped or in backpack
	Tool.AncestryChanged:Connect(function (Item, Parent)
		if not Parent or not (Parent:IsA 'Backpack' or (Parent:IsA 'Model' and Players:GetPlayerFromCharacter(Parent))) then
			Disable();
		end;
	end);

end;

-- Assign hotkeys for undoing (left or right shift + Z)
AssignHotkey({ 'LeftShift', 'Z' }, History.Undo);
AssignHotkey({ 'RightShift', 'Z' }, History.Undo);

-- Assign hotkeys for redoing (left or right shift + Y)
AssignHotkey({ 'LeftShift', 'Y' }, History.Redo);
AssignHotkey({ 'RightShift', 'Y' }, History.Redo);

-- If in-game, enable ctrl hotkeys for undoing and redoing
if Mode == 'Tool' then
	AssignHotkey({ 'LeftControl', 'Z' }, History.Undo);
	AssignHotkey({ 'RightControl', 'Z' }, History.Undo);
	AssignHotkey({ 'LeftControl', 'Y' }, History.Redo);
	AssignHotkey({ 'RightControl', 'Y' }, History.Redo);
end;

local function GetDepthFromAncestor(Item, Ancestor)
	-- Returns the depth of `Item` from `Ancestor`

	local Depth = 0

	-- Go through ancestry until reaching `Ancestor`
	while Item ~= Ancestor do
		Depth = Depth + 1
		Item = Item.Parent
	end

	-- Return depth
	return Depth
end

local function GetHighestParent(Items)
	local HighestItem, HighestItemDepth

	-- Calculate depth of each item & keep highest
	for _, Item in ipairs(Items) do
		local Depth = GetDepthFromAncestor(Item, game)
		if (not HighestItemDepth) or (Depth < HighestItemDepth) then
			HighestItem = Item
			HighestItemDepth = Depth
		end
	end

	-- Return parent of highest item
	return HighestItem and HighestItem.Parent or nil
end

function CloneSelection()
	-- Clones selected parts

	-- Make sure that there are items in the selection
	if #Selection.Items == 0 then
		return;
	end;

	-- Send the cloning request to the server
	local Clones = SyncAPI:Invoke('Clone', Selection.Items, GetHighestParent(Selection.Items))

	-- Put together the history record
	local HistoryRecord = {
		Clones = Clones;

		Unapply = function (HistoryRecord)
			-- Reverts this change

			-- Deselect the clones
			Selection.Remove(HistoryRecord.Clones, false);

			-- Remove the clones
			SyncAPI:Invoke('Remove', HistoryRecord.Clones);

		end;

		Apply = function (HistoryRecord)
			-- Reapplies this change

			-- Restore the clones
			SyncAPI:Invoke('UndoRemove', HistoryRecord.Clones);

		end;

	};

	-- Register the history record
	History.Add(HistoryRecord);

	-- Select the clones
	Selection.Replace(Clones);

	-- Flash the outlines of the new parts
	coroutine.wrap(Selection.FlashOutlines)();

end;

function DeleteSelection()
	-- Deletes selected items

	-- Put together the history record
	local HistoryRecord = {
		Parts = Support.CloneTable(Selection.Items);

		Unapply = function (HistoryRecord)
			-- Reverts this change

			-- Restore the parts
			SyncAPI:Invoke('UndoRemove', HistoryRecord.Parts);

			-- Select the restored parts
			Selection.Replace(HistoryRecord.Parts);

		end;

		Apply = function (HistoryRecord)
			-- Applies this change

			-- Deselect the parts
			Selection.Remove(HistoryRecord.Parts, false);

			-- Remove the parts
			SyncAPI:Invoke('Remove', HistoryRecord.Parts);

		end;

	};

	-- Deselect parts before deleting
	Selection.Remove(HistoryRecord.Parts, false);

	-- Perform the removal
	SyncAPI:Invoke('Remove', HistoryRecord.Parts);

	-- Register the history record
	History.Add(HistoryRecord);

end;

-- Assign hotkeys for cloning (left or right shift + c)
AssignHotkey({ 'LeftShift', 'C' }, CloneSelection);
AssignHotkey({ 'RightShift', 'C' }, CloneSelection);

-- Assign hotkeys for deletion (left or right shift + X)
AssignHotkey({ 'LeftShift', 'X' }, DeleteSelection);
AssignHotkey({ 'RightShift', 'X' }, DeleteSelection);

-- If in-game, enable ctrl hotkeys for cloning and deleting
if Mode == 'Tool' then
	AssignHotkey({ 'LeftControl', 'C' }, CloneSelection);
	AssignHotkey({ 'RightControl', 'C' }, CloneSelection);
	AssignHotkey({ 'LeftControl', 'X' }, DeleteSelection);
	AssignHotkey({ 'RightControl', 'X' }, DeleteSelection);
end;

-- Assign hotkeys for prism selection
AssignHotkey({ 'LeftShift', 'K' }, Targeting.PrismSelect);
AssignHotkey({ 'RightShift', 'K' }, Targeting.PrismSelect);

-- If in-game, enable ctrl hotkeys for prism selection
if Mode == 'Tool' then
	AssignHotkey({ 'LeftControl', 'K' }, Targeting.PrismSelect);
	AssignHotkey({ 'RightControl', 'K' }, Targeting.PrismSelect);
end;

-- Assign hotkeys for sibling selection
AssignHotkey({ 'LeftBracket' }, Support.Call(Targeting.SelectSiblings, false, true));
AssignHotkey({ 'LeftShift', 'LeftBracket' }, Support.Call(Targeting.SelectSiblings, false, false));
AssignHotkey({ 'RightShift', 'LeftBracket' }, Support.Call(Targeting.SelectSiblings, false, false));

-- Assign hotkeys for selection clearing
AssignHotkey({ 'LeftShift', 'R' }, Support.Call(Selection.Clear, true));
AssignHotkey({ 'RightShift', 'R' }, Support.Call(Selection.Clear, true));

-- If in-game, enable ctrl hotkeys for sibling selection & selection clearing
if Mode == 'Tool' then
	AssignHotkey({ 'LeftControl', 'LeftBracket' }, Support.Call(Targeting.SelectSiblings, false, false));
	AssignHotkey({ 'RightControl', 'LeftBracket' }, Support.Call(Targeting.SelectSiblings, false, false));
	AssignHotkey({ 'LeftControl', 'R' }, Support.Call(Selection.Clear, true));
	AssignHotkey({ 'RightControl', 'R' }, Support.Call(Selection.Clear, true));
end;

function GroupSelection(GroupType)
	-- Groups the selected items

	-- Create history record
	local HistoryRecord = {
		Items = Support.CloneTable(Selection.Items),
		CurrentParents = Support.GetListMembers(Selection.Items, 'Parent')
	}

	function HistoryRecord:Unapply()
		SyncAPI:Invoke('SetParent', self.Items, self.CurrentParents)
		SyncAPI:Invoke('Remove', { self.NewParent })
		Selection.Replace(self.Items)
	end

	function HistoryRecord:Apply()
		SyncAPI:Invoke('UndoRemove', { self.NewParent })
		SyncAPI:Invoke('SetParent', self.Items, self.NewParent)
		Selection.Replace({ self.NewParent })
	end

	-- Perform group creation
	HistoryRecord.NewParent = SyncAPI:Invoke('CreateGroup', GroupType,
		GetHighestParent(HistoryRecord.Items),
		HistoryRecord.Items
	)

	-- Register history record
	History.Add(HistoryRecord)

	-- Select new group
	Selection.Replace({ HistoryRecord.NewParent })

end

function UngroupSelection()
	-- Ungroups the selected groups

	-- Create history record
	local HistoryRecord = {
		Selection = Selection.Items
	}

	function HistoryRecord:Unapply()
		SyncAPI:Invoke('UndoRemove', self.Groups)

		-- Reparent children
		for GroupId, Items in ipairs(self.GroupChildren) do
			coroutine.resume(coroutine.create(function ()
				SyncAPI:Invoke('SetParent', Items, self.Groups[GroupId])
			end))
		end

		-- Reselect groups
		Selection.Replace(self.Selection)
	end

	function HistoryRecord:Apply()

		-- Get groups from selection
		self.Groups = {}
		for _, Item in ipairs(self.Selection) do
			if Item:IsA 'Model' or Item:IsA 'Folder' then
				self.Groups[#self.Groups + 1] = Item
			end
		end

		-- Perform ungrouping
		self.GroupParents = Support.GetListMembers(self.Groups, 'Parent')
		self.GroupChildren = SyncAPI:Invoke('Ungroup', self.Groups)

		-- Get unpacked children
		local UnpackedChildren = Support.CloneTable(self.Selection)
		for GroupId, Children in pairs(self.GroupChildren) do
			for _, Child in ipairs(Children) do
				UnpackedChildren[#UnpackedChildren + 1] = Child
			end
		end

		-- Select unpacked items
		Selection.Replace(UnpackedChildren)

	end

	-- Perform action
	HistoryRecord:Apply()

	-- Register history record
	History.Add(HistoryRecord)

end

-- Assign grouping hotkeys
AssignHotkey({ 'LeftShift', 'G' }, Support.Call(GroupSelection, 'Model'))
AssignHotkey({ 'RightShift', 'G' }, Support.Call(GroupSelection, 'Model'))
AssignHotkey({ 'LeftShift', 'F' }, Support.Call(GroupSelection, 'Folder'))
AssignHotkey({ 'RightShift', 'F' }, Support.Call(GroupSelection, 'Folder'))
AssignHotkey({ 'LeftShift', 'U' }, UngroupSelection)
AssignHotkey({ 'RightShift', 'U' }, UngroupSelection)

function GetPartsFromSelection(Selection)
	local Parts = {}

	-- Get parts from selection
	for _, Item in pairs(Selection) do
		if Item:IsA 'BasePart' then
			Parts[#Parts + 1] = Item

		-- Get parts within other items
		else
			for _, Descendant in pairs(Item:GetDescendants()) do
				if Descendant:IsA 'BasePart' then
					Parts[#Parts + 1] = Descendant
				end
			end
		end
	end

	-- Return parts
	return Parts
end

function IsSelectable(Items)
	-- Returns whether `Items` can be selected

	-- Check each item
	for _, Item in pairs(Items) do

		-- Ensure item exists and is not locked
		if (not Item) or (not Item.Parent) or (Item:IsA 'BasePart' and Item.Locked) then
			return false
		end

		-- Ensure item can be modified
		if not Security.IsItemAllowed(Item, Player) then
			return false
		end
	end

	-- Check if parts intruding into private areas
	local Parts = GetPartsFromSelection(Items)
	if Security.ArePartsViolatingAreas(Parts, Player, true) then
		return false
	end

	-- If no checks fail, items are selectable
	return true

end

function ExportSelection()
	-- Exports the selected parts

	-- Make sure that there are items in the selection
	if #Selection.Items == 0 then
		return;
	end;

	-- Start an export dialog
	local Dialog = Cheer(Tool.Interfaces.ExportDialog, UI).Start();

	-- Send the exporting request to the server
	Try(SyncAPI.Invoke, SyncAPI, 'Export', Selection.Items)

	-- Display creation ID on success
	:Then(function (CreationId)
		Dialog.SetResult(CreationId);
		print('[Building Tools by F3X] Uploaded Export:', CreationId);
	end)

	-- Display error messages on failure
	:Catch('Http requests are not enabled', function ()
		Dialog.SetError('Please enable HTTP requests');
	end)
	:Catch('Export failed due to server-side error', function ()
		Dialog.SetError('An error occurred, try again');
	end)
	:Catch('Post data too large', function ()
		Dialog.SetError('Try splitting up your build');
	end)
	:Catch(function (Error, Stack, Attempt)
		Dialog.SetError('An unknown error occurred, try again')
		warn('❌ [Building Tools by F3X] Failed to export selection', '\n\nError:\n', Error, '\n\nStack:\n', Stack);
	end);

end;

-- Assign hotkey for exporting selection
AssignHotkey({ 'LeftShift', 'P' }, ExportSelection);
AssignHotkey({ 'RightShift', 'P' }, ExportSelection);

-- If in-game, enable ctrl hotkeys for exporting
if Mode == 'Tool' then
	AssignHotkey({ 'LeftControl', 'P' }, ExportSelection);
	AssignHotkey({ 'RightControl', 'P' }, ExportSelection);
end;

function IsVersionOutdated()
	-- Returns whether this version of Building Tools is out of date

	-- Check most recent version number
	local AssetInfo = MarketplaceService:GetProductInfo(142785488, Enum.InfoType.Asset);
	local LatestMajorVersion, LatestMinorVersion, LatestPatchVersion = AssetInfo.Description:match '%[Version: ([0-9]+)%.([0-9]+)%.([0-9]+)%]';
	local CurrentMajorVersion, CurrentMinorVersion, CurrentPatchVersion = Tool.Version.Value:match '([0-9]+)%.([0-9]+)%.([0-9]+)';

	-- Convert version data into numbers
	local LatestMajorVersion, LatestMinorVersion, LatestPatchVersion =
		tonumber(LatestMajorVersion), tonumber(LatestMinorVersion), tonumber(LatestPatchVersion);
	local CurrentMajorVersion, CurrentMinorVersion, CurrentPatchVersion =
		tonumber(CurrentMajorVersion), tonumber(CurrentMinorVersion), tonumber(CurrentPatchVersion);

	-- Determine whether current version is outdated
	if LatestMajorVersion > CurrentMajorVersion then
		return true;
	elseif LatestMajorVersion == CurrentMajorVersion then
		if LatestMinorVersion > CurrentMinorVersion then
			return true;
		elseif LatestMinorVersion == CurrentMinorVersion then
			return LatestPatchVersion > CurrentPatchVersion;
		end;
	end;

	-- Return an up-to-date status if not oudated
	return false;

end;

function ToggleSwitch(CurrentButtonName, SwitchContainer)
	-- Toggles between the buttons in a switch

	-- Reset all buttons
	for _, Button in pairs(SwitchContainer:GetChildren()) do

		-- Make sure to not mistake the option label for a button
		if Button.Name ~= 'Label' then

			-- Set appearance to disabled
			Button.SelectedIndicator.BackgroundTransparency = 1;
			Button.Background.Image = Assets.LightSlantedRectangle;

		end;

	end;

	-- Make sure there's a new current button
	if CurrentButtonName then

		-- Get the current button
		local CurrentButton = SwitchContainer[CurrentButtonName];

		-- Set the current button's appearance to enabled
		CurrentButton.SelectedIndicator.BackgroundTransparency = 0;
		CurrentButton.Background.Image = Assets.DarkSlantedRectangle;

	end;
end;

-- References to reduce indexing time
local GetConnectedParts = Instance.new('Part').GetConnectedParts;
local GetChildren = script.GetChildren;

function GetPartJoints(Part, Whitelist)
	-- Returns any manual joints involving `Part`

	local Joints = {};

	-- Get joints stored inside `Part`
	for Joint, JointParent in pairs(SearchJoints(Part, Part, Whitelist)) do
		Joints[Joint] = JointParent;
	end;

	-- Get joints stored inside connected parts
	for _, ConnectedPart in pairs(GetConnectedParts(Part)) do
		for Joint, JointParent in pairs(SearchJoints(ConnectedPart, Part, Whitelist)) do
			Joints[Joint] = JointParent;
		end;
	end;

	-- Return all found joints
	return Joints;

end;

-- Types of joints to assume should be preserved
local ManualJointTypes = Support.FlipTable { 'Weld', 'ManualWeld', 'ManualGlue', 'Motor', 'Motor6D' };

function SearchJoints(Haystack, Part, Whitelist)
	-- Searches for and returns manual joints in `Haystack` involving `Part` and other parts in `Whitelist`

	local Joints = {};

	-- Search the haystack for joints involving `Part`
	for _, Item in pairs(GetChildren(Haystack)) do

		-- Check if this item is a manual, intentional joint
		if ManualJointTypes[Item.ClassName] and
		   (Whitelist[Item.Part0] and Whitelist[Item.Part1]) then

			-- Save joint and state if intentional
			Joints[Item] = Item.Parent;

		end;

	end;

	-- Return the found joints
	return Joints;

end;

function RestoreJoints(Joints)
	-- Restores the joints from the given `Joints` data

	-- Restore each joint
	for Joint, JointParent in pairs(Joints) do
		Joint.Parent = JointParent;
	end;

end;

function PreserveJoints(Part, Whitelist)
	-- Preserves and returns intentional joints of `Part` connecting parts in `Whitelist`

	-- Get the part's joints
	local Joints = GetPartJoints(Part, Whitelist);

	-- Save the joints from being broken
	for Joint in pairs(Joints) do
		Joint.Parent = nil;
	end;

	-- Return the joints
	return Joints;

end;

-- Initialize the UI
InitializeUI();

-- Return core
return getfenv(0);
end;
};
G2L_MODULES[G2L["71"]] = {
Closure = function()
    local script = G2L["71"];
-- Libraries
Core = require(script.Parent);
Support = Core.Support;

SnapTracking = {};
SnapTracking.Enabled = false;
SnapTracking.TrackCorners = true;
SnapTracking.TrackFaceCentroids = true;
SnapTracking.TrackEdgeMidpoints = true;

function SnapTracking.StartTracking(Callback)
	-- Starts displaying the given target's snap point nearest to the mouse, calls back every time a new point is approached

	-- Make sure tracking isn't already on
	if SnapTracking.Enabled then
		SnapTracking.StopTracking();
	end;

	-- Indicate that tracking is now enabled
	SnapTracking.Enabled = true;

	-- Disable selection
	Core.Targeting.CancelSelecting();

	-- Start the UI
	SnapTracking.StartUI();

	-- Store callback to send changes in current snapping point
	SnapTracking.SetCallback(Callback);

	-- Start tracking mouse movement
	function UpdateTrackingTarget(Input)

		-- Blacklist the player's character and the items in `TargetBlacklist`
		local TargetBlacklist = Support.ConcatTable(
			{ Player and Player.Character },
			SnapTracking.TargetBlacklist or {}
		);

		-- Find the current target part and point
		local TargetRay = Workspace.CurrentCamera:ScreenPointToRay(Input.Position.X, Input.Position.Y);
		local TargetPart, TargetPoint, TargetNormal, TargetMaterial = Workspace:FindPartOnRayWithIgnoreList(
			Ray.new(TargetRay.Origin, TargetRay.Direction * 5000),
			TargetBlacklist
		);

		-- Make sure a target part exists
		if not TargetPart then
			return;
		end;

		-- Check with any snapping target filter
		if SnapTracking.TargetFilter and not SnapTracking.TargetFilter(TargetPart) then
			return;
		end;

		-- Set the current target for snap point tracking
		SnapTracking.MousePoint = TargetPoint;
		SnapTracking.SetTrackingTarget(TargetPart);

	end;

	-- Update the tracking and UI to the current mouse and proximity state
	if not SnapTracking.CustomMouseTracking then
		SnapTracking.MouseTracking = Support.AddUserInputListener('Changed', 'MouseMovement', false, UpdateTrackingTarget);
		UpdateTrackingTarget({ Position = Vector2.new(Core.Mouse.X, Core.Mouse.Y) });
		SnapTracking.Update();
	end;

end;

function SnapTracking.SetCallback(Callback)
	-- Sets the function that is called back whenever a new snap point is in focus
	SnapTracking.Callback = Callback;
end;

function SnapTracking.StartUI()
	-- Creates the point marking UI
	SnapTracking.PointMarker = Core.Tool.Interfaces.PointMarker:Clone();
	SnapTracking.PointMarker.Parent = Core.UI;
end;

function SnapTracking.ClearUI()
	-- Removes the point marking UI

	-- Make sure tracking is currently enabled
	if not SnapTracking.Enabled then
		return;
	end;

	-- Remove the point marker UI
	SnapTracking.PointMarker:Destroy();
	SnapTracking.PointMarker = nil;

end;

function SnapTracking.Update()
	-- Updates the current closest point, reflects it on UI, calls callback function

	-- Make sure tracking is currently enabled
	if not SnapTracking.Enabled then
		return;
	end;

	-- Calculate the closest point
	local ClosestPoint = SnapTracking.GetClosestPoint();

	-- Inform the callback function
	SnapTracking.Callback(ClosestPoint);

	-- Update the point marker UI
	SnapTracking.UpdateUI(ClosestPoint);

end;

function SnapTracking.UpdateUI(Point)
	-- Updates the point marker UI to reflect the position of the current closest snap point

	-- Make sure tracking is enabled, and that the UI has started
	if not SnapTracking.Enabled or not SnapTracking.PointMarker then
		return;
	end;

	-- Make sure there's actually a point that needs to be marked, or hide the point marker
	if not Point then
		SnapTracking.PointMarker.Visible = false;
		return;
	end;

	-- Map the point's position on the screen
	local PointPosition, PointVisible = Workspace.CurrentCamera:WorldToScreenPoint(Point.p);

	-- Move the point marker UI to the point's position on the screen
	SnapTracking.PointMarker.Visible = PointVisible;
	SnapTracking.PointMarker.Position = UDim2.new(0, PointPosition.X, 0, PointPosition.Y);

end;

function SnapTracking.SetTrackingTarget(NewTarget)
	-- Sets the target part whose snapping points' proximity we are tracking
	SnapTracking.Target = NewTarget;
	SnapTracking.Update();
end;

function SnapTracking.GetClosestPoint()
	-- Find the current nearest snapping point for the target, update the GUI

	-- Make sure there's a target part to track, and a current mouse position to calculate proximity relative to
	if not SnapTracking.Target or not SnapTracking.MousePoint then
		return nil;
	end;

	local SnappingPoints = {};
	local SnappingPointProximity = {};

	-- Get the current target's snapping points
	local PartCFrame = SnapTracking.Target.CFrame;
	local PartSize = SnapTracking.Target.Size / 2;
	local SizeX, SizeY, SizeZ = PartSize.X, PartSize.Y, PartSize.Z;

	-- Filter based on snapping point options
	if SnapTracking.TrackCorners then
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, SizeY, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, SizeY, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, -SizeY, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, SizeY, -SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, SizeY, -SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, -SizeY, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, -SizeY, -SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, -SizeY, -SizeZ));
	end;
	if SnapTracking.TrackEdgeMidpoints then
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, SizeY, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, 0, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, SizeY, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, SizeY, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, 0, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, -SizeY, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, -SizeY, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, 0, -SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, SizeY, -SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, -SizeY, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, 0, -SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, -SizeY, -SizeZ));
	end;
	if SnapTracking.TrackFaceCentroids then
		table.insert(SnappingPoints, PartCFrame * CFrame.new(SizeX, 0, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, 0, SizeZ));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, SizeY, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(-SizeX, 0, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, -SizeY, 0));
		table.insert(SnappingPoints, PartCFrame * CFrame.new(0, 0, -SizeZ));
	end;

	-- Calculate proximity of each snapping point to the mouse
	for SnappingPointKey, SnappingPoint in ipairs(SnappingPoints) do
		SnappingPointProximity[SnappingPointKey] = (SnapTracking.MousePoint - SnappingPoint.p).magnitude;
	end;

	-- Sort out the closest snapping point
	local ClosestPointKey = 1;
	for PointKey, Proximity in pairs(SnappingPointProximity) do
		if Proximity < SnappingPointProximity[ClosestPointKey] then
			ClosestPointKey = PointKey;
		end;
	end;

	-- Return the closest point
	return SnappingPoints[ClosestPointKey];
end;

function SnapTracking.StopTracking()
	-- Stops tracking the current closest snapping point, cleans up

	-- Clear the previous tracking target, and callback
	SnapTracking.Target = nil;
	SnapTracking.Callback = nil;

	-- Reset snapping point options
	SnapTracking.TrackFaceCentroids = true;
	SnapTracking.TrackEdgeMidpoints = true;
	SnapTracking.TrackCorners = true;
	SnapTracking.TargetFilter = nil;
	SnapTracking.TargetBlacklist = {};

	-- Make sure we're currently tracking
	if not SnapTracking.Enabled then
		return;
	end;

	-- Stop tracking the mouse and its proximity to snapping points
	SnapTracking.MouseTracking:Disconnect();
	SnapTracking.MouseTracking = nil;

	-- Clear the point marker UI from the screen
	SnapTracking.ClearUI();

	-- Indicate that tracking is no longer enabled
	SnapTracking.Enabled = false;

end;

return SnapTracking;
end;
};
G2L_MODULES[G2L["72"]] = {
Closure = function()
    local script = G2L["72"];
local Core = require(script.Parent);
local Support = Core.Support;

-- Initialize module
local BoundingBoxModule = {};

-- Initialize internal module state
local StaticParts = {};
local StaticPartsIndex = {};
local StaticPartMonitors = {};
local RecalculateStaticExtents = true;
local AggregatingStaticParts = false;
local StaticPartAggregators = {};
local PotentialPartMonitors = {};

function BoundingBoxModule.StartBoundingBox(HandleAttachmentCallback)
	-- Creates and starts a selection bounding box

	-- Make sure there isn't already a bounding box
	if BoundingBoxEnabled then
		return;
	end;

	-- Indicate that the bounding box is enabled
	BoundingBoxEnabled = true;

	-- Create the box
	BoundingBox = Core.Make 'Part' {
		Name = 'BTBoundingBox';
		CanCollide = false;
		Transparency = 1;
		Anchored = true;
		Locked = true;
		Parent = Core.UI;
	};

	-- Make the mouse ignore it
	Core.Mouse.TargetFilter = BoundingBox;

	-- Make sure to calculate our static extents
	RecalculateStaticExtents = true;
	StartAggregatingStaticParts();

	-- Store handle attachment callback
	BoundingBoxHandleCallback = HandleAttachmentCallback;

	-- Begin the bounding box's updater
	BoundingBoxModule.UpdateBoundingBox();
	BoundingBoxUpdater = Support.ScheduleRecurringTask(BoundingBoxModule.UpdateBoundingBox, 0.05);

	-- Attach handles if requested
	if BoundingBoxHandleCallback then
		BoundingBoxHandleCallback(BoundingBox);
	end;

end;

function BoundingBoxModule.GetBoundingBox()
	-- Returns the current bounding box

	-- Get and return bounding box
	return BoundingBox;

end;

function IsPhysicsStatic()
	-- Returns whether the game's physics are active or static

	-- Determine value if not yet cached
	if _IsPhysicsStatic == nil then
		_IsPhysicsStatic = (Core.Mode == 'Plugin') and (Workspace.DistributedGameTime == 0);
	end;

	-- Return cached value
	return _IsPhysicsStatic;

end;

function BoundingBoxModule.UpdateBoundingBox()
	-- Updates the bounding box to fit the selection's extents

	-- Make sure the bounding box is enabled
	if not BoundingBoxEnabled then
		return;
	end;

	-- If the bounding box is inactive, and should now be active, update it
	if InactiveBoundingBox and #Core.Selection.Parts > 0 then
		BoundingBox = InactiveBoundingBox;
		InactiveBoundingBox = nil;
		BoundingBoxHandleCallback(BoundingBox);

	-- If the bounding box is active, and there are no parts, disable it
	elseif BoundingBox and #Core.Selection.Parts == 0 then
		InactiveBoundingBox = BoundingBox;
		BoundingBox = nil;
		BoundingBoxHandleCallback(BoundingBox);
		return;

	-- Don't try to update the bounding box if there are no parts
	elseif #Core.Selection.Parts == 0 then
		return;
	end;

	-- Recalculate the extents of static items as needed only
	if RecalculateStaticExtents then
		BoundingBoxModule.StaticExtents = BoundingBoxModule.CalculateExtents(StaticParts, nil, true);
		RecalculateStaticExtents = false;
	end;

	-- Update the bounding box
	local BoundingBoxSize, BoundingBoxCFrame = BoundingBoxModule.CalculateExtents(Core.Selection.Parts, BoundingBoxModule.StaticExtents);
	BoundingBox.Size = BoundingBoxSize;
	BoundingBox.CFrame = BoundingBoxCFrame;

end;

function BoundingBoxModule.ClearBoundingBox()
	-- Clears the selection bounding box

	-- Make sure there's a bounding box
	if not BoundingBoxEnabled then
		return;
	end;

	-- If there's a bounding box updater, stop it
	if BoundingBoxUpdater then
		BoundingBoxUpdater:Stop();
		BoundingBoxUpdater = nil;
	end;

	-- Stop tracking static parts
	StopAggregatingStaticParts();

	-- Delete the bounding box
	if BoundingBox then
		BoundingBox:Destroy();
		BoundingBox = nil;
	elseif InactiveBoundingBox then
		InactiveBoundingBox:Destroy();
		InactiveBoundingBox = nil;
	end;

	-- Mark the bounding box as disabled
	BoundingBoxEnabled = false;

	-- Clear the bounding box handle callback
	BoundingBoxHandleCallback(nil);
	BoundingBoxHandleCallback = nil;

end;

function AddStaticParts(Parts)
	-- Adds the static parts to the list for state tracking

	-- Add each given part
	for _, Part in pairs(Parts) do

		-- Ensure part isn't already indexed, and verify it is static
		if not StaticPartsIndex[Part] and (IsPhysicsStatic() or Part.Anchored) then

			-- Add part to static index
			StaticPartsIndex[Part] = true;

			-- Monitor static part for changes
			AddStaticPartMonitor(Part);

		end;

	end;

	-- Update the static parts list
	StaticParts = Support.Keys(StaticPartsIndex);

	-- Recalculate static extents to include added parts
	RecalculateStaticExtents = true;

end;

function AddStaticPartMonitor(Part)
	-- Monitors the given part to track when it is no longer static

	-- Ensure part is static and isn't already monitored
	if not StaticPartsIndex[Part] or StaticPartMonitors[Part] then
		return;
	end;

	-- Start monitoring part for changes
	StaticPartMonitors[Part] = Part.Changed:Connect(function (Property)

		-- Trigger static extent recalculations on position or size changes
		if Property == 'CFrame' or Property == 'Size' then
			RecalculateStaticExtents = true;

		-- Remove part from static index if it becomes mobile
		elseif Property == 'Anchored' and not IsPhysicsStatic() and not Part.Anchored then
			RemoveStaticParts { Part };
		end;

	end);

end;

function RemoveStaticParts(Parts)
	-- Removes the given parts from the static parts index

	-- Remove each given part
	for _, Part in pairs(Parts) do

		-- Remove part from static parts index
		StaticPartsIndex[Part] = nil;

		-- Clean up the part's change monitors
		if StaticPartMonitors[Part] then
			StaticPartMonitors[Part]:Disconnect();
			StaticPartMonitors[Part] = nil;
		end;

	end;

	-- Update the static parts list
	StaticParts = Support.Keys(StaticPartsIndex);

	-- Recalculate static extents to exclude removed parts
	RecalculateStaticExtents = true;

end;

function StartAggregatingStaticParts()
	-- Begins to look for and identify static parts

	-- Add current qualifying parts to static parts index
	AddStaticParts(Core.Selection.Parts);

	-- Watch for parts that become static
	for _, Part in ipairs(Core.Selection.Parts) do
		AddPotentialPartMonitor(Part);
	end;

	-- Watch newly selected parts
	table.insert(StaticPartAggregators, Core.Selection.PartsAdded:Connect(function (Parts)

		-- Add qualifying parts to static parts index
		AddStaticParts(Parts);

		-- Watch for parts that become anchored
		for _, Part in pairs(Parts) do
			AddPotentialPartMonitor(Part);
		end;

	end));

	-- Remove deselected parts from static parts index
	table.insert(StaticPartAggregators, Core.Selection.PartsRemoved:Connect(function (Parts)
		RemoveStaticParts(Parts);
		for _, Part in pairs(Parts) do
			if PotentialPartMonitors[Part] then
				PotentialPartMonitors[Part]:Disconnect();
				PotentialPartMonitors[Part] = nil;
			end;
		end;
	end));

end;

function BoundingBoxModule.RecalculateStaticExtents()
	-- Sets flag indicating that extents of static items should be recalculated

	-- Set flag to trigger recalculation on the next step in the update loop
	RecalculateStaticExtents = true;

end;

function AddPotentialPartMonitor(Part)
	-- Monitors the given part to track when it becomes static

	-- Ensure part is not already monitored
	if PotentialPartMonitors[Part] then
		return;
	end;

	-- Create anchored state change monitor
	PotentialPartMonitors[Part] = Part.Changed:Connect(function (Property)
		if Property == 'Anchored' and Part.Anchored then
			AddStaticParts { Part };
		end;
	end);

end;

function BoundingBoxModule.PauseMonitoring()
	-- Disables part monitors

	-- Disconnect all potential part monitors
	for Part, Monitor in pairs(PotentialPartMonitors) do
		Monitor:Disconnect();
		PotentialPartMonitors[Part] = nil;
	end;

	-- Disconnect all static part monitors
	for Part, Monitor in pairs(StaticPartMonitors) do
		Monitor:Disconnect();
		StaticPartMonitors[Part] = nil;
	end;

	-- Stop update loop
	if BoundingBoxUpdater then
		BoundingBoxUpdater:Stop();
		BoundingBoxUpdater = nil;
	end;

end;

function BoundingBoxModule.ResumeMonitoring()
	-- Starts update loop and part monitors for selected and indexed parts

	-- Ensure bounding box is enabled
	if not BoundingBoxEnabled then
		return;
	end;

	-- Start static part monitors
	for StaticPart in pairs(StaticPartsIndex) do
		AddStaticPartMonitor(StaticPart);
	end;

	-- Start potential part monitors
	for _, Part in ipairs(Core.Selection.Parts) do
		AddPotentialPartMonitor(Part);
	end;

	-- Start update loop
	if not BoundingBoxUpdater then
		BoundingBoxUpdater = Support.ScheduleRecurringTask(BoundingBoxModule.UpdateBoundingBox, 0.05);
	end;

end;

function StopAggregatingStaticParts()
	-- Stops looking for static parts, clears unnecessary data

	-- Disconnect all aggregators
	for AggregatorKey, Aggregator in pairs(StaticPartAggregators) do
		Aggregator:Disconnect();
		StaticPartAggregators[AggregatorKey] = nil;
	end;

	-- Remove all static part monitors
	for MonitorKey, Monitor in pairs(StaticPartMonitors) do
		Monitor:Disconnect();
		StaticPartMonitors[MonitorKey] = nil;
	end;

	-- Remove all potential part monitors
	for MonitorKey, Monitor in pairs(PotentialPartMonitors) do
		Monitor:Disconnect();
		PotentialPartMonitors[MonitorKey] = nil;
	end;

	-- Clear all static part information
	StaticParts = {};
	StaticPartsIndex = {};
	BoundingBoxModule.StaticExtents = nil;

end;

-- Create shortcuts to avoid intensive lookups
local CFrame_new = CFrame.new;
local table_insert = table.insert;
local CFrame_toWorldSpace = CFrame.new().toWorldSpace;
local math_min = math.min;
local math_max = math.max;
local unpack = unpack;

function BoundingBoxModule.CalculateExtents(Items, StaticExtents, ExtentsOnly)
	-- Returns the size and position of a box covering all items in `Items`

	-- Ensure there are items
	if #Items == 0 then
		return;
	end;

	-- Get initial extents data for comparison
	local ComparisonBaseMin = StaticExtents and StaticExtents.Min or Items[1].Position;
	local ComparisonBaseMax = StaticExtents and StaticExtents.Max or Items[1].Position;
	local MinX, MinY, MinZ = ComparisonBaseMin.X, ComparisonBaseMin.Y, ComparisonBaseMin.Z;
	local MaxX, MaxY, MaxZ = ComparisonBaseMax.X, ComparisonBaseMax.Y, ComparisonBaseMax.Z;

	-- Go through each part in `Items`
	for _, Part in pairs(Items) do

		-- Avoid re-calculating for static parts
		if not ((IsPhysicsStatic() or Part.Anchored) and StaticExtents) then

			-- Get shortcuts to part data
			local PartCFrame = Part.CFrame;
			local PartSize = Part.Size / 2;
			local SizeX, SizeY, SizeZ = PartSize.X, PartSize.Y, PartSize.Z;

			local Corner;
			local XPoints, YPoints, ZPoints = {}, {}, {};

			Corner = PartCFrame * CFrame_new(SizeX, SizeY, SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			Corner = PartCFrame * CFrame_new(-SizeX, SizeY, SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			Corner = PartCFrame * CFrame_new(SizeX, -SizeY, SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			Corner = PartCFrame * CFrame_new(SizeX, SizeY, -SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			Corner = PartCFrame * CFrame_new(-SizeX, SizeY, -SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			Corner = PartCFrame * CFrame_new(-SizeX, -SizeY, SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			Corner = PartCFrame * CFrame_new(SizeX, -SizeY, -SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			Corner = PartCFrame * CFrame_new(-SizeX, -SizeY, -SizeZ);
			table_insert(XPoints, Corner.x);
			table_insert(YPoints, Corner.y);
			table_insert(ZPoints, Corner.z);

			-- Reduce gathered points to min/max extents
			MinX = math_min(MinX, unpack(XPoints));
			MinY = math_min(MinY, unpack(YPoints));
			MinZ = math_min(MinZ, unpack(ZPoints));
			MaxX = math_max(MaxX, unpack(XPoints));
			MaxY = math_max(MaxY, unpack(YPoints));
			MaxZ = math_max(MaxZ, unpack(ZPoints));

		end;

	end;

	-- Calculate the extents
	local Extents = {
		Min = Vector3.new(MinX, MinY, MinZ),
		Max = Vector3.new(MaxX, MaxY, MaxZ);
	};

	-- Only return extents if requested
	if ExtentsOnly then
		return Extents;
	end;

	-- Calculate the bounding box size
	local Size = Vector3.new(
		MaxX - MinX,
		MaxY - MinY,
		MaxZ - MinZ
	);

	-- Calculate the bounding box center
	local Position = CFrame.new(
		MinX + (MaxX - MinX) / 2,
		MinY + (MaxY - MinY) / 2,
		MinZ + (MaxZ - MinZ) / 2
	);

	-- Return the size and position
	return Size, Position;

end;

return BoundingBoxModule;
end;
};
G2L_MODULES[G2L["73"]] = {
Closure = function()
    local script = G2L["73"];
local Tool = script.Parent.Parent
local History = require(script.Parent.History)

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local Signal = require(Libraries:WaitForChild 'Signal')
local Maid = require(Libraries:WaitForChild 'Maid')
local Make = require(Libraries:WaitForChild 'Make')
local InstancePool = require(Libraries:WaitForChild 'InstancePool')

-- Core selection system
Selection = {}
Selection.Items = {}
Selection.ItemIndex = {}
Selection.Parts = {}
Selection.PartIndex = {}
Selection.Outlines = {}
Selection.Color = BrickColor.new 'Cyan'
Selection.Multiselecting = false
Selection.Maid = Maid.new()

-- Events to listen to selection changes
Selection.ItemsAdded = Signal.new()
Selection.ItemsRemoved = Signal.new()
Selection.PartsAdded = Signal.new()
Selection.PartsRemoved = Signal.new()
Selection.FocusChanged = Signal.new()
Selection.Cleared = Signal.new()
Selection.Changed = Signal.new()

function Selection.IsSelected(Item)
	-- Returns whether `Item` is selected or not

	-- Check and return item presence in index
	return Selection.ItemIndex[Item];

end;

local function CollectParts(Item, Table)
	-- Adds parts found in `Item` to `Table`

	-- Collect parts
	if Item:IsA 'BasePart' then
		Table[#Table + 1] = Item

	-- Collect parts inside of groups
	else
		local Items = Item:GetDescendants()
		for _, Item in ipairs(Items) do
			if Item:IsA 'BasePart' then
				Table[#Table + 1] = Item
			end
		end
	end
end

function Selection.Add(Items, RegisterHistory)
	-- Adds the given items to the selection

	-- Get core API
	local Core = GetCore();

	-- Go through and validate each given item
	local SelectableItems = {};
	for _, Item in pairs(Items) do

		-- Make sure each item is valid and not already selected
		if Item.Parent and (not Selection.ItemIndex[Item]) then
			table.insert(SelectableItems, Item);
		end;

	end;

	local OldSelection = Selection.Items;

	-- Track parts in new selection
	local Parts = {}

	-- Go through the valid new selection items
	for _, Item in pairs(SelectableItems) do

		-- Add each valid item to the selection
		Selection.ItemIndex[Item] = true;
		CreateSelectionBoxes(Item)

		-- Create maid for cleaning up item listeners
		local ItemMaid = Maid.new()
		Selection.Maid[Item] = ItemMaid

		-- Deselect items that are destroyed
		ItemMaid.RemovalListener = Item.AncestryChanged:Connect(function (Object, Parent)
			if Parent == nil then
				Selection.Remove({ Item })
			end
		end)

		-- Collect parts within item
		CollectParts(Item, Parts)

		-- Listen for new parts in groups
		local IsGroup = not Item:IsA 'BasePart' or nil
		ItemMaid.NewParts = IsGroup and Item.DescendantAdded:Connect(function (Descendant)
			if Descendant:IsA 'BasePart' then
				local NewRefCount = (Selection.PartIndex[Descendant] or 0) + 1
				Selection.PartIndex[Descendant] = NewRefCount
				Selection.Parts = Support.Keys(Selection.PartIndex)
				if NewRefCount == 1 then
					Selection.PartsAdded:Fire { Descendant }
				end
			end
		end)
		ItemMaid.RemovingParts = IsGroup and Item.DescendantRemoving:Connect(function (Descendant)
			if Selection.PartIndex[Descendant] then
				local NewRefCount = (Selection.PartIndex[Descendant] or 0) - 1
				Selection.PartIndex[Descendant] = (NewRefCount > 0) and NewRefCount or nil
				if NewRefCount == 0 then
					Selection.Parts = Support.Keys(Selection.PartIndex)
					Selection.PartsRemoved:Fire { Descendant }
				end
			end
		end)

	end

	-- Update selected item list
	Selection.Items = Support.Keys(Selection.ItemIndex);

	-- Create a history record for this selection change, if requested
	if RegisterHistory and #SelectableItems > 0 then
		TrackSelectionChange(OldSelection);
	end;

	-- Register references to new parts
	local NewParts = {}
	for _, Part in pairs(Parts) do
		local NewRefCount = (Selection.PartIndex[Part] or 0) + 1
		Selection.PartIndex[Part] = NewRefCount
		if NewRefCount == 1 then
			NewParts[#NewParts + 1] = Part
		end
	end

	-- Update parts list
	if #NewParts > 0 then
		Selection.Parts = Support.Keys(Selection.PartIndex)
		Selection.PartsAdded:Fire(NewParts)
	end

	-- Fire relevant events
	if #SelectableItems > 0 then
		Selection.ItemsAdded:Fire(SelectableItems)
		Selection.Changed:Fire()
	end

end;

function Selection.Remove(Items, RegisterHistory)
	-- Removes the given items from the selection

	-- Go through and validate each given item
	local DeselectableItems = {};
	for _, Item in pairs(Items) do

		-- Make sure each item is actually selected
		if Selection.IsSelected(Item) then
			table.insert(DeselectableItems, Item);
		end;

	end;

	local OldSelection = Selection.Items;

	-- Track parts in removing selection
	local Parts = {}

	-- Go through the valid deselectable items
	for _, Item in pairs(DeselectableItems) do

		-- Remove item from selection
		Selection.ItemIndex[Item] = nil;
		RemoveSelectionBoxes(Item)

		-- Stop tracking item's parts
		Selection.Maid[Item] = nil

		-- Get parts associated with item
		CollectParts(Item, Parts)

	end;

	-- Update selected item list
	Selection.Items = Support.Keys(Selection.ItemIndex);

	-- Create a history record for this selection change, if requested
	if RegisterHistory and #DeselectableItems > 0 then
		TrackSelectionChange(OldSelection);
	end;

	-- Clear references to removing parts
	local RemovingParts = {}
	for _, Part in pairs(Parts) do
		local NewRefCount = (Selection.PartIndex[Part] or 0) - 1
		Selection.PartIndex[Part] = (NewRefCount > 0) and NewRefCount or nil
		if NewRefCount == 0 then
			RemovingParts[#RemovingParts + 1] = Part
		end
	end

	-- Update parts list
	if #RemovingParts > 0 then
		Selection.Parts = Support.Keys(Selection.PartIndex)
		Selection.PartsRemoved:Fire(RemovingParts)
	end

	-- Fire relevant events
	if #DeselectableItems > 0 then
		Selection.ItemsRemoved:Fire(DeselectableItems)
		Selection.Changed:Fire()
	end

end;

function Selection.Clear(RegisterHistory)
	-- Clears all items from selection

	-- Remove all selected items
	Selection.Remove(Selection.Items, RegisterHistory);

	-- Fire relevant events
	Selection.Cleared:Fire();

end;

function Selection.Replace(Items, RegisterHistory)
	-- Replaces the current selection with the given new items

	-- Save old selection reference for history
	local OldSelection = Selection.Items;

	-- Find new items
	local NewItems = {}
	for _, Item in ipairs(Items) do
		if not Selection.ItemIndex[Item] then
			table.insert(NewItems, Item)
		end
	end

	-- Find removing items
	local RemovingItems = {}
	local NewItemIndex = Support.FlipTable(Items)
	for _, Item in ipairs(Selection.Items) do
		if not NewItemIndex[Item] then
			table.insert(RemovingItems, Item)
		end
	end

	-- Update selection
	if #RemovingItems > 0 then
		Selection.Remove(RemovingItems, false)
	end
	if #NewItems > 0 then
		Selection.Add(NewItems, false)
	end

	-- Create a history record for this selection change, if requested
	if RegisterHistory then
		TrackSelectionChange(OldSelection);
	end;

end;

local function IsVisible(Item)
	return Item:IsA 'Model' or Item:IsA 'BasePart'
end

local function GetVisibleFocus(Item)
	-- Returns a visible focus representing the item

	-- Return nil if no focus
	if not Item then
		return nil
	end

	-- Return focus if it's visible
	if IsVisible(Item) then
		return Item

	-- Return first visible item within focus if not visible itself
	elseif Item then
		return Item:FindFirstChildWhichIsA('BasePart') or
			Item:FindFirstChildWhichIsA('Model') or
			Item:FindFirstChildWhichIsA('BasePart', true) or
			Item:FindFirstChildWhichIsA('Model', true)
	end
end

function Selection.SetFocus(Item)
	-- Selects `Item` as the focused selection item

	-- Ensure focus has changed
	local Focus = GetVisibleFocus(Item)
	if Selection.Focus == Focus then
		return
	end

	-- Set new focus item
	Selection.Focus = Focus

	-- Fire relevant events
	Selection.FocusChanged:Fire(Focus)

end

function FocusOnLastSelectedPart()
	-- Sets the last part of the selection as the focus

	-- If selection is empty, clear the focus
	if #Selection.Items == 0 then
		Selection.SetFocus(nil);

	-- Otherwise, focus on the last part in the selection
	else
		Selection.SetFocus(Selection.Items[#Selection.Items]);
	end;

end;

-- Listen for changes to the selection and keep the focus updated
Selection.Changed:Connect(FocusOnLastSelectedPart);

function GetCore()
	-- Returns the core API
	return require(script.Parent);
end;

local function GetVisibleChildren(Item, Table)
	local Table = Table or {}

	-- Search for visible items recursively
	for _, Item in pairs(Item:GetChildren()) do
		if IsVisible(Item) then
			Table[#Table + 1] = Item
		else
			GetVisibleChildren(Item, Table)
		end
	end

	-- Return visible items
	return Table
end

-- Create target box pool
local SelectionBoxPool = InstancePool.new(60, function ()
	return Make 'SelectionBox' {
		Name = 'BTSelectionBox',
		Parent = GetCore().UI,
		LineThickness = 0.025,
		Transparency = 0.5,
		Color = Selection.Color
	}
end)

-- Define target box cleanup routine
function SelectionBoxPool.Cleanup(SelectionBox)
	SelectionBox.Adornee = nil
	SelectionBox.Visible = nil
end

function CreateSelectionBoxes(Item)
	-- Creates selection boxes for the given item

	-- Only create selection boxes if in tool mode
	if GetCore().Mode ~= 'Tool' then
		return;
	end;

	-- Ensure selection boxes don't already exist for item
	if Selection.Outlines[Item] then
		return
	end

	-- Get targetable items
	local Items = Support.FlipTable { Item }
	if not IsVisible(Item) then
		Items = Support.FlipTable(GetVisibleChildren(Item))
	end

	-- Create selection box for each targetable item
	local SelectionBoxes = {}
	for Item in pairs(Items) do

		-- Create the selection box
		local SelectionBox = SelectionBoxPool:Get()
		SelectionBox.Adornee = Item
		SelectionBox.Visible = true

		-- Register the outline
		SelectionBoxes[Item] = SelectionBox

	end

	-- Register selection boxes for this item
	Selection.Outlines[Item] = SelectionBoxes

end;

function RemoveSelectionBoxes(Item)
	-- Removes the given item's selection boxes

	-- Only proceed if outlines exist for item
	local SelectionBoxes = Selection.Outlines[Item]
	if not SelectionBoxes then
		return
	end

	-- Remove each item's outline
	for _, SelectionBox in pairs(SelectionBoxes) do
		SelectionBoxPool:Release(SelectionBox)
	end

	-- Clear list of outlines for item
	Selection.Outlines[Item] = nil

end

function Selection.RecolorOutlines(Color)
	-- Updates selection outline colors

	-- Set `Color` as the new color
	Selection.Color = Color;

	-- Recolor existing outlines
	for Outline in pairs(SelectionBoxPool.All) do
		Outline.Color = Selection.Color;
	end;

end;

function Selection.RecolorOutline(Item, Color)
	-- Updates outline colors for `Item`

	-- Make sure `Item` has outlines
	local Outlines = Selection.Outlines[Item]
	if not Outlines then
		return
	end

	-- Recolor all outlines for item
	for VisibleItem, Outline in pairs(Outlines) do
		Outline.Color = Color
	end
end

function Selection.FlashOutlines()
	-- Flashes selection outlines for emphasis

	-- Fade in from complete to normal transparency
	for Transparency = 1, 0.5, -0.1 do

		-- Update each outline
		for Outline in pairs(SelectionBoxPool.InUse) do
			Outline.Transparency = Transparency;
		end;

		-- Fade over time
		wait(0.1);

	end;

end;

function Selection.EnableMultiselectionHotkeys()
	-- Enables hotkeys for multiselecting

	-- Determine multiselection hotkeys
	local Hotkeys = Support.FlipTable { 'LeftShift', 'RightShift', 'LeftControl', 'RightControl' };

	-- Get core API
	local Core = GetCore();

	-- Listen for matching key presses
	Core.Connections.MultiselectionHotkeys = Support.AddUserInputListener('Began', 'Keyboard', false, function (Input)
		if Hotkeys[Input.KeyCode.Name] then
			Selection.Multiselecting = true;
		end;
	end);

	-- Listen for matching key releases
	Core.Connections.MultiselectingReleaseHotkeys = Support.AddUserInputListener('Ended', 'Keyboard', true, function (Input)

		-- Get currently pressed keys
		local PressedKeys = Support.GetListMembers(Support.GetListMembers(Game:GetService('UserInputService'):GetKeysPressed(), 'KeyCode'), 'Name');

		-- Continue multiselection if a hotkey is still pressed
		for _, PressedKey in pairs(PressedKeys) do
			if Hotkeys[PressedKey] then
				return;
			end;
		end;

		-- Disable multiselection if matching key not found
		Selection.Multiselecting = false;

	end);

end;

function Selection.EnableOutlines()
	-- Enables selection outlines

	-- Create outlines for each item
	for Item in pairs(Selection.ItemIndex) do
		CreateSelectionBoxes(Item)
	end
end

function Selection.HideOutlines()
	-- Hides selection outlines

	-- Remove every item's outlines
	for Item in pairs(Selection.Outlines) do
		RemoveSelectionBoxes(Item)
	end
end

function TrackSelectionChange(OldSelection)
	-- Registers a history record for a change in the selection

	-- Avoid overwriting history for selection actions
	if History.Index ~= #History.Stack then
		return;
	end;

	-- Add the history record
	History.Add({

		Before = OldSelection;
		After = Selection.Items;

		Unapply = function (HistoryRecord)
			-- Reverts this change

			-- Restore the old selection
			Selection.Replace(HistoryRecord.Before);

		end;

		Apply = function (HistoryRecord)
			-- Reapplies this change

			-- Restore the new selection
			Selection.Replace(HistoryRecord.After);

		end;
	});

end;

return Selection;
end;
};
G2L_MODULES[G2L["74"]] = {
Closure = function()
    local script = G2L["74"];
local Tool = script.Parent.Parent
local Workspace = game:GetService 'Workspace'
local UserInputService = game:GetService 'UserInputService'
local ContextActionService = game:GetService 'ContextActionService'
local Selection = require(script.Parent.Selection);

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local Signal = require(Libraries:WaitForChild 'Signal')
local Make = require(Libraries:WaitForChild 'Make')
local InstancePool = require(Libraries:WaitForChild 'InstancePool')

TargetingModule = {};
TargetingModule.TargetingMode = 'Scoped'
TargetingModule.TargetingModeChanged = Signal.new()
TargetingModule.Scope = Workspace
TargetingModule.IsScopeLocked = true
TargetingModule.TargetChanged = Signal.new()
TargetingModule.ScopeChanged = Signal.new()
TargetingModule.ScopeTargetChanged = Signal.new()
TargetingModule.ScopeLockChanged = Signal.new()

function TargetingModule:EnableTargeting()
	-- 	Begin targeting parts from the mouse

	-- Get core API
	local Core = GetCore();
	local Connections = Core.Connections;

	-- Create reference to mouse
	Mouse = Core.Mouse;

	-- Listen for target changes
	Connections.Targeting = Mouse.Move:Connect(function ()
		self:UpdateTarget(self.Scope)
	end)

	-- Listen for target clicks
	Connections.Selecting = Mouse.Button1Up:Connect(self.SelectTarget)

	-- Listen for sibling selection middle clicks
	Connections.SiblingSelecting = Support.AddUserInputListener('Began', 'MouseButton3', true, function ()
		self.SelectSiblings(Mouse.Target, not Selection.Multiselecting)
	end);

	-- Listen for 2D selection
	Connections.RectSelectionStarted = Mouse.Button1Down:Connect(self.StartRectangleSelecting);
	Connections.RectSelectionFinished = Support.AddUserInputListener('Ended', 'MouseButton1', true, self.FinishRectangleSelecting);

	-- Hide target box when tool is unequipped
	Connections.HideTargetBoxOnDisable = Core.Disabling:Connect(self.HighlightTarget);

	-- Cancel any ongoing selection when tool is unequipped
	Connections.CancelSelectionOnDisable = Core.Disabling:Connect(self.CancelRectangleSelecting);

	-- Enable scope selection
	self:EnableScopeSelection()

	-- Enable automatic scope resetting
	self:EnableScopeAutoReset()

	-- Enable targeting mode hotkeys
	self:BindTargetingModeHotkeys()

end;

function TargetingModule:SetScope(Scope)
	if self.Scope ~= Scope then
		self.Scope = Scope
		self.ScopeChanged:Fire(Scope)
	end
end

local function IsVisible(Item)
	return Item:IsA 'Model' or Item:IsA 'BasePart'
end

local function IsTargetable(Item)
	return Item:IsA 'Model' or
		Item:IsA 'BasePart' or
		Item:IsA 'Tool' or
		Item:IsA 'Accessory' or
		Item:IsA 'Accoutrement'
end

--- Returns the target within the current scope based on the current targeting mode.
-- @param Target Which part is being targeted directly
-- @param Scope The current scope to search for the target in
-- @returns Instance | nil
function TargetingModule:FindTargetInScope(Target, Scope)

	-- Return `nil` if no target, or if scope is unset
	if not (Target and Scope) then
		return nil
	end

	-- If in direct targeting mode, return target
	if self.TargetingMode == 'Direct' and (Target:IsDescendantOf(Scope)) then
		return Target
	end

	-- Search for ancestor of target directly within scope
	local TargetChain = { Target }
	while Target and (Target.Parent ~= Scope) do
		table.insert(TargetChain, 1, Target.Parent)
		Target = Target.Parent
	end

	-- Return targetable ancestor closest to scope
	for Index, Target in ipairs(TargetChain) do
		if IsTargetable(Target) then
			return Target
		end
	end

end

function TargetingModule:UpdateTarget(Scope, Force)
	local Scope = Scope or self.Scope

	-- Get target
	local NewTarget = Mouse.Target
	local NewScopeTarget = self:FindTargetInScope(NewTarget, Scope)

	-- Register whether target has changed
	if (self.LastTarget == NewTarget) and (not Force) then
		return NewTarget, NewScopeTarget
	else
		self.LastTarget = NewTarget
		self.TargetChanged:Fire(NewTarget)
	end

	-- Make sure target is selectable
	local Core = GetCore()
	if not Core.IsSelectable({ NewTarget }) then
		self.HighlightTarget(nil)
		self.LastTarget = nil
		self.LastScopeTarget = nil
		self.TargetChanged:Fire(nil)
		self.ScopeTargetChanged:Fire(nil)
		return
	end

	-- Register whether scope target has changed
	if (self.LastScopeTarget == NewScopeTarget) and (not Force) then
		return NewTarget, NewScopeTarget
	else
		self.LastScopeTarget = NewScopeTarget
		self.ScopeTargetChanged:Fire(NewScopeTarget)
	end

	-- Update scope target highlight
	if not Core.Selection.IsSelected(NewScopeTarget) then
		self.HighlightTarget(NewScopeTarget)
	end

	-- Return new targets
	return NewTarget, NewScopeTarget
end

local function GetVisibleChildren(Item, Table)
	local Table = Table or {}

	-- Search for visible items recursively
	for _, Item in pairs(Item:GetChildren()) do
		if IsVisible(Item) then
			Table[#Table + 1] = Item
		else
			GetVisibleChildren(Item, Table)
		end
	end

	-- Return visible items
	return Table
end

-- Create target box pool
local TargetBoxPool = InstancePool.new(60, function ()
	return Make 'SelectionBox' {
		Name = 'BTTargetBox',
		Parent = GetCore().UI,
		LineThickness = 0.025,
		Transparency = 0.5,
		Color = BrickColor.new 'Institutional white'
	}
end)

-- Define target box cleanup routine
function TargetBoxPool.Cleanup(TargetBox)
	TargetBox.Adornee = nil
	TargetBox.Visible = nil
end

function TargetingModule.HighlightTarget(Target)

	-- Clear previous target boxes
	TargetBoxPool:ReleaseAll()

	-- Make sure target exists
	if not Target then
		return
	end

	-- Get targetable items
	local Items = Support.FlipTable { Target }
	if not IsVisible(Target) then
		Items = Support.FlipTable(GetVisibleChildren(Target))
	end

	-- Focus target boxes on target
	for Target in pairs(Items) do
		local TargetBox = TargetBoxPool:Get()
		TargetBox.Adornee = Target
		TargetBox.Visible = true
	end

end;

local function IsAncestorSelected(Item)
	while Item and (Item ~= TargetingModule.Scope) do
		if Selection.IsSelected(Item) then
			return true
		else
			Item = Item.Parent
		end
	end
end

function TargetingModule.SelectTarget(Force)
	local Scope = TargetingModule.Scope

	-- Update target
	local Target, ScopeTarget = TargetingModule:UpdateTarget(Scope, true)

	-- Ensure target selection isn't cancelled
	if not Force and SelectionCancelled then
		SelectionCancelled = false;
		return;
	end;

	-- Focus on clicked, selected item
	if not Selection.Multiselecting and (Selection.IsSelected(ScopeTarget) or IsAncestorSelected(ScopeTarget)) then
		Selection.SetFocus(ScopeTarget)
		return;
	end;

	-- Clear selection if invalid target selected
	if not GetCore().IsSelectable({ Target }) then
		Selection.Clear(true);
		return;
	end;

	-- Unselect clicked, selected item if multiselection is enabled
	if Selection.Multiselecting and Selection.IsSelected(ScopeTarget) then
		Selection.Remove({ ScopeTarget }, true)
		return
	end

	-- Add to selection if multiselecting
	if Selection.Multiselecting then
		Selection.Add({ ScopeTarget }, true)
		Selection.SetFocus(ScopeTarget)

	-- Replace selection if not multiselecting
	else
		Selection.Replace({ ScopeTarget }, true)
		Selection.SetFocus(ScopeTarget)
	end

end;

function TargetingModule.SelectSiblings(Part, ReplaceSelection)
	-- Selects all parts under the same parent as `Part`

	-- If a part is not specified, assume the currently focused part
	local Part = Part or Selection.Focus;

	-- Ensure the part exists and its parent is not Workspace
	if not Part or Part.Parent == TargetingModule.Scope then
		return;
	end;

	-- Get the focused item's siblings
	local Siblings = Support.GetDescendantsWhichAreA(Part.Parent, 'BasePart')

	-- Ensure items are selectable
	if not GetCore().IsSelectable(Siblings) then
		return
	end

	-- Add to or replace selection
	if ReplaceSelection then
		Selection.Replace(Siblings, true);
	else
		Selection.Add(Siblings, true);
	end;

end;

function TargetingModule.StartRectangleSelecting()

	-- Ensure selection isn't cancelled
	if SelectionCancelled then
		return;
	end;

	-- Mark where rectangle selection started
	RectangleSelectStart = Vector2.new(Mouse.X, Mouse.Y);

	-- Track mouse while rectangle selecting
	GetCore().Connections.WatchRectangleSelection = Mouse.Move:Connect(function ()

		-- If rectangle selecting, update rectangle
		if RectangleSelecting then
			TargetingModule.UpdateSelectionRectangle();

		-- Watch for potential rectangle selections
		elseif RectangleSelectStart and (Vector2.new(Mouse.X, Mouse.Y) - RectangleSelectStart).magnitude >= 10 then
			RectangleSelecting = true;
			SelectionCancelled = true;
		end;

	end);

end;

function TargetingModule.UpdateSelectionRectangle()

	-- Ensure rectangle selection is ongoing
	if not RectangleSelecting then
		return;
	end;

	-- Get core API
	local Core = GetCore();

	-- Create selection rectangle
	if not SelectionRectangle then
		SelectionRectangle = Make 'Frame' {
			Name = 'SelectionRectangle',
			Parent = Core.UI,
			BackgroundColor3 = Color3.fromRGB(100, 100, 100),
			BorderColor3 = Color3.new(0, 0, 0),
			BackgroundTransparency = 0.5,
			BorderSizePixel = 1
		};
	end;

	local StartPoint = Vector2.new(
		math.min(RectangleSelectStart.X, Mouse.X),
		math.min(RectangleSelectStart.Y, Mouse.Y)
	);
	local EndPoint = Vector2.new(
		math.max(RectangleSelectStart.X, Mouse.X),
		math.max(RectangleSelectStart.Y, Mouse.Y)
	);

	-- Update size and position
	SelectionRectangle.Parent = Core.UI;
	SelectionRectangle.Position = UDim2.new(0, StartPoint.X, 0, StartPoint.Y);
	SelectionRectangle.Size = UDim2.new(0, EndPoint.X - StartPoint.X, 0, EndPoint.Y - StartPoint.Y);

end;

function TargetingModule.CancelRectangleSelecting()

	-- Prevent potential rectangle selections
	RectangleSelectStart = nil;

	-- Clear ongoing rectangle selection
	RectangleSelecting = false;

	-- Clear rectangle selection watcher
	local Connections = GetCore().Connections;
	if Connections.WatchRectangleSelection then
		Connections.WatchRectangleSelection:Disconnect();
		Connections.WatchRectangleSelection = nil;
	end;

	-- Clear rectangle UI
	if SelectionRectangle then
		SelectionRectangle.Parent = nil;
	end;

end;

function TargetingModule.CancelSelecting()
	SelectionCancelled = true;
	TargetingModule.CancelRectangleSelecting();
end;

function TargetingModule.FinishRectangleSelecting()
	local Core = GetCore()

	local RectangleSelecting = RectangleSelecting;
	local RectangleSelectStart = RectangleSelectStart;

	-- Clear rectangle selection
	TargetingModule.CancelRectangleSelecting();

	-- Ensure rectangle selection is ongoing
	if not RectangleSelecting then
		return;
	end;

	-- Ensure a targeting scope is set
	if not TargetingModule.Scope then
		return
	end

	-- Get rectangle dimensions
	local StartPoint = Vector2.new(
		math.min(RectangleSelectStart.X, Mouse.X),
		math.min(RectangleSelectStart.Y, Mouse.Y)
	);
	local EndPoint = Vector2.new(
		math.max(RectangleSelectStart.X, Mouse.X),
		math.max(RectangleSelectStart.Y, Mouse.Y)
	);

	local SelectableItems = {};

	-- Find items that lie within the rectangle
	local ScopeParts = Support.GetDescendantsWhichAreA(TargetingModule.Scope, 'BasePart')
	for _, Part in pairs(ScopeParts) do
		local ScreenPoint, OnScreen = Workspace.CurrentCamera:WorldToScreenPoint(Part.Position)
		if OnScreen then
			local LeftCheck = ScreenPoint.X >= StartPoint.X
			local RightCheck = ScreenPoint.X <= EndPoint.X
			local TopCheck = ScreenPoint.Y >= StartPoint.Y
			local BottomCheck = ScreenPoint.Y <= EndPoint.Y
			if (LeftCheck and RightCheck and TopCheck and BottomCheck) and Core.IsSelectable({ Part }) then
				local ScopeTarget = TargetingModule:FindTargetInScope(Part, TargetingModule.Scope)
				SelectableItems[ScopeTarget] = true
			end
		end
	end

	-- Add to selection if multiselecting
	if Selection.Multiselecting then
		Selection.Add(Support.Keys(SelectableItems), true)

	-- Replace selection if not multiselecting
	else
		Selection.Replace(Support.Keys(SelectableItems), true)
	end;

end;

function TargetingModule.PrismSelect()
	-- Selects parts in the currently selected parts

	-- Ensure parts are selected
	if #Selection.Items == 0 then
		return;
	end;

	-- Get core API
	local Core = GetCore();

	-- Get region for selection items and find potential parts
	local Extents = require(Core.Tool.Core.BoundingBox).CalculateExtents(Selection.Items, nil, true);
	local Region = Region3.new(Extents.Min, Extents.Max);
	local PotentialParts = Workspace:FindPartsInRegion3WithIgnoreList(Region, Selection.Items, math.huge);

	-- Enable collision on all potential parts
	local OriginalState = {};
	for _, PotentialPart in pairs(PotentialParts) do
		OriginalState[PotentialPart] = { Anchored = PotentialPart.Anchored, CanCollide = PotentialPart.CanCollide };
		PotentialPart.Anchored = true;
		PotentialPart.CanCollide = true;
	end;

	local Parts = {};

	-- Find all parts intersecting with selection
	for _, Part in pairs(Selection.Items) do
		local TouchingParts = Part:GetTouchingParts();
		for _, TouchingPart in pairs(TouchingParts) do
			if not Selection.IsSelected(TouchingPart) then
				Parts[TouchingPart] = true;
			end;
		end;
	end;

	-- Restore all potential parts' original states
	for PotentialPart, State in pairs(OriginalState) do
		PotentialPart.CanCollide = State.CanCollide;
		PotentialPart.Anchored = State.Anchored;
	end;

	-- Delete the selection parts
	Core.DeleteSelection();

	-- Select all found parts
	Selection.Replace(Support.Keys(Parts), true);

end;

function TargetingModule:EnableScopeSelection()
	-- Enables the scope selection interface

	-- Set up state
	local Scoping = false
	local InitialScope = nil

	local function HandleScopeInput(Action, State, Input)
		if State.Name == 'Begin' then
			local IsAltPressed = UserInputService:IsKeyDown 'LeftAlt' or
				UserInputService:IsKeyDown 'RightAlt'
			local IsShiftPressed = UserInputService:IsKeyDown 'LeftShift' or
				UserInputService:IsKeyDown 'RightShift'

			-- If Alt is pressed, begin scoping
			if (not Scoping) and (Input.KeyCode.Name:match 'Alt') then
				Scoping = self.Scope
				InitialScope = self.Scope

				-- Set new scope to current scope target
				local Target, ScopeTarget = self:UpdateTarget(self.Scope, true)
				if Target ~= ScopeTarget then
					self:SetScope(ScopeTarget or self.Scope)
					self:UpdateTarget(self.Scope, true)
					self.IsScopeLocked = false
					self.ScopeLockChanged:Fire(false)
					Scoping = self.Scope
				end

			-- If Alt-Shift-Z is pressed, exit current scope
			elseif Scoping and IsAltPressed and IsShiftPressed and (Input.KeyCode.Name == 'Z') then
				local NewScope = self.Scope.Parent or InitialScope
				if GetCore().Security.IsLocationAllowed(NewScope, GetCore().Player) then
					self:SetScope(NewScope)
					self:UpdateTarget(self.Scope, true)
					self.IsScopeLocked = false
					self.ScopeLockChanged:Fire(false)
					Scoping = self.Scope
				end
				return Enum.ContextActionResult.Sink

			-- If Alt-Z is pressed, enter scope of current target
			elseif Scoping and IsAltPressed and (Input.KeyCode.Name == 'Z') then
				local Target, ScopeTarget = self:UpdateTarget(self.Scope, true)
				if Target ~= ScopeTarget then
					self:SetScope(ScopeTarget or self.Scope)
					self:UpdateTarget(self.Scope, true)
					self.IsScopeLocked = false
					self.ScopeLockChanged:Fire(false)
					Scoping = self.Scope
				end
				return Enum.ContextActionResult.Sink

			-- If Alt-F is pressed, stay in current scope
			elseif Scoping and IsAltPressed and (Input.KeyCode.Name == 'F') then
				Scoping = true
				self.IsScopeLocked = true
				self.ScopeLockChanged:Fire(true)
				return Enum.ContextActionResult.Sink
			end

		-- Disable scoping on Alt release
		elseif State.Name == 'End' then
			if Scoping and (Input.KeyCode.Name:match 'Alt') then
				if self.Scope == Scoping then
					self:SetScope(InitialScope)
					self.IsScopeLocked = true
					self.ScopeLockChanged:Fire(true)
				end
				self:UpdateTarget(self.Scope, true)
				Scoping = nil
				InitialScope = nil
			end
		end

		-- If window focus changes, reset and disable scoping
		if Scoping and Input.UserInputType.Name == 'Focus' then
			if self.Scope == Scoping then
				self:SetScope(InitialScope)
				self.IsScopeLocked = true
				self.ScopeLockChanged:Fire(true)
			end
			self:UpdateTarget(self.Scope, true)
			Scoping = nil
			InitialScope = nil
		end

		-- Pass all non-sunken input to next handler
		return Enum.ContextActionResult.Pass
	end

	-- Enable scoping interface
	ContextActionService:BindAction('BT: Scope', HandleScopeInput, false,
		Enum.KeyCode.LeftAlt,
		Enum.KeyCode.RightAlt,
		Enum.KeyCode.Z,
		Enum.KeyCode.F,
		Enum.UserInputType.Focus
	)

	-- Disable scoping interface when tool disables
	GetCore().Disabling:Connect(function ()
		ContextActionService:UnbindAction('BT: Scope')
	end)

end

function TargetingModule:EnableScopeAutoReset()
	-- Enables automatic scope resetting (when scope becomes invalid)

	local LastScopeListener, LastScopeAncestry

	-- Listen to changes in scope
	GetCore().UIMaid.ScopeReset = self.ScopeChanged:Connect(function (Scope)

		-- Clear last scope listener
		LastScopeListener = LastScopeListener and LastScopeListener:Disconnect()

		-- Only listen to new scope if defined
		if not Scope then
			return
		end

		-- Capture new scope's ancestry
		LastScopeAncestry = {}
		local Ancestor = Scope.Parent
		while Ancestor:IsDescendantOf(Workspace) do
			table.insert(LastScopeAncestry, Ancestor)
			Ancestor = Ancestor.Parent
		end

		-- Reset scope when scope is gone
		LastScopeListener = Scope.AncestryChanged:Connect(function (_, Parent)
			if Parent == nil then

				-- Get next parent in ancestry
				local NextScopeInAncestry
				if LastScopeAncestry then
					for _, Parent in ipairs(LastScopeAncestry) do
						if Parent:IsDescendantOf(Workspace) then
							NextScopeInAncestry = Parent
							break
						end
					end
				end

				-- Set next scope
				if NextScopeInAncestry then
					self:SetScope(NextScopeInAncestry)
				else
					self:SetScope(Workspace, true)
				end

			-- Capture scope ancestry when it changes
			else
				LastScopeAncestry = {}
				local Ancestor = Scope.Parent
				while Ancestor:IsDescendantOf(Workspace) do
					table.insert(LastScopeAncestry, Ancestor)
					Ancestor = Ancestor.Parent
				end
			end
		end)

	end)
end

--- Switches to the specified targeting mode.
-- @returns void
function TargetingModule:SetTargetingMode(NewTargetingMode)
	if (NewTargetingMode == 'Scoped') or (NewTargetingMode == 'Direct') then
		self.TargetingMode = NewTargetingMode
		self.TargetingModeChanged:Fire(NewTargetingMode)
	else
		error('Invalid targeting mode', 2)
	end
end

--- Toggles between targeting modes.
-- @returns void
function TargetingModule:ToggleTargetingMode()
	if self.TargetingMode == 'Scoped' then
		self:SetTargetingMode('Direct')
	elseif self.TargetingMode == 'Direct' then
		self:SetTargetingMode('Scoped')
	end
end

--- Installs listener for targeting mode toggling hotkeys.
-- @returns void
function TargetingModule:BindTargetingModeHotkeys()
	local function Callback(Action, State, Input)
		if (State.Name == 'End') then
			return Enum.ContextActionResult.Pass
		end

		-- Ensure shift is held
		local KeysPressed = UserInputService:GetKeysPressed()
		local IsShiftHeld = Input:IsModifierKeyDown(Enum.ModifierKey.Shift)
		if (#KeysPressed ~= 2) or (not IsShiftHeld) then
			return Enum.ContextActionResult.Pass
		end

		-- Toggle between targeting modes
		self:ToggleTargetingMode()
		self:UpdateTarget(nil, true)

		-- Sink input
		return Enum.ContextActionResult.Sink
	end

	-- Install listener for T key
	ContextActionService:BindAction('BT: Toggle Targeting Mode', Callback, false, Enum.KeyCode.T)

	-- Unbind hotkey when tool is disabled
	local Core = GetCore()
	Core.Connections.UnbindTargetingModeHotkeys = Core.Disabling:Connect(function ()
		ContextActionService:UnbindAction('BT: Toggle Targeting Mode')
	end)
end

function GetCore()
	return require(script.Parent);
end;

return TargetingModule;
end;
};
G2L_MODULES[G2L["75"]] = {
Closure = function()
    local script = G2L["75"];
local Tool = script.Parent.Parent

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Signal = require(Libraries:WaitForChild 'Signal')

History = {

	-- Record stack
	Stack = {},

	-- Current position in record stack
	Index = 0,

	-- History change event
	Changed = Signal.new()

};

function History.Undo()
	-- Unapplies the previous record in stack

	-- Stay within boundaries
	if History.Index - 1 < 0 then
		return;
	end;

	-- Get the history record, unapply it
	local Record = History.Stack[History.Index];
	Record:Unapply();

	-- Update the index
	History.Index = History.Index - 1;

	-- Fire the Changed event
	History.Changed:Fire();

end;

function History.Redo()
	-- Applies the next record in stack

	-- Stay within boundaries
	if History.Index + 1 > #History.Stack then
		return;
	end;

	-- Update the index
	History.Index = History.Index + 1;

	-- Get the history record and apply it
	local Record = History.Stack[History.Index];
	Record:Apply();

	-- Fire the Changed event
	History.Changed:Fire();

end;

function History.Add(Record)
	-- Adds new history record to stack

	-- Update the index
	History.Index = History.Index + 1;

	-- Register the new history record
	History.Stack[History.Index] = Record;

	-- Clear history ahead
	for Index = History.Index + 1, #History.Stack do
		History.Stack[Index] = nil;
	end;

	-- Fire the Changed event
	History.Changed:Fire();

end;

return History;
end;
};
G2L_MODULES[G2L["76"]] = {
Closure = function()
    local script = G2L["76"];
-- Services
MarketplaceService = Game:GetService 'MarketplaceService';
HttpService = Game:GetService 'HttpService';
Workspace = Game:GetService 'Workspace';

-- References
Tool = script.Parent.Parent
Libraries = Tool:WaitForChild 'Libraries'
Support = require(Libraries:WaitForChild 'SupportLibrary')
RegionModule = require(Libraries:WaitForChild 'Region')

-- Determine whether we're in tool or plugin mode
local ToolMode = (Tool.Parent:IsA 'Plugin') and 'Plugin' or 'Tool'

-- Initialize the security module
Security = {};

-- The distance above the area-defining part that counts as part of the area
Security.AreaHeight = 500;

-- Whether to allow building outside of private areas
Security.AllowPublicBuilding = true;

-- Allowed locations in the hierarchy (descendants of which are authorized)
Security.AllowedLocations = { Workspace };

-- Track the enabling of areas
Security.Areas = Workspace:FindFirstChild('[Private Building Areas]');
Workspace.ChildAdded:Connect(function (Child)
	if not Security.Areas and Child.Name == '[Private Building Areas]' then
		Security.Areas = Child;
	end;
end);
Workspace.ChildRemoved:Connect(function (Child)
	if Security.Areas and Child.Name == '[Private Building Areas]' then
		Security.Areas = nil;
	end;
end);

function Security.IsAreaAuthorizedForPlayer(Area, Player)
	-- Returns whether `Player` has permission to manipulate parts in this area

	-- Ensure area has permissions
	local Permissions = Area:FindFirstChild '[Permissions]';
	if not Permissions then
		return;
	else
		Permissions = require(Permissions);
	end;

	-- Ensure permissions are set up
	if not Permissions then
		return;
	end;

	-- Search for authorizing permission
	for _, Permission in pairs(Permissions) do

		-- Check group permissions
		if Permission.Type == 'Group' then

			-- Check player's group membership
			local PlayerInGroup = Player:IsInGroup(Permission.GroupId);

			-- If no specific rank is required, authorize
			if PlayerInGroup and not Permission.Ranks then
				return true;

			-- If specific rank is required, check player rank
			elseif PlayerInGroup and Permission.Ranks then
				local Symbol, RankNumber = tostring(Permission.Ranks):match('([<>]?=?)([0-9]+)');
				local PlayerRank = Player:GetRankInGroup(Permission.GroupId);
				RankNumber = tonumber(RankNumber);

				-- Check the player rank
				if not Symbol and (PlayerRank == RankNumber) then
					return true;
				elseif Symbol == '=' and (PlayerRank == RankNumber) then
					return true;
				elseif Symbol == '>' and (PlayerRank > RankNumber) then
					return true;
				elseif Symbol == '<' and (PlayerRank < RankNumber) then
					return true;
				elseif Symbol == '>=' and (PlayerRank >= RankNumber) then
					return true;
				elseif Symbol == '<=' and (PlayerRank <= RankNumber) then
					return true;
				end;
			end;

		-- Check player permissions
		elseif Permission.Type == 'Player' then
			if (Player.userId == Permission.PlayerId) or (Player.Name == Permission.PlayerName) then
				return true;
			end;

		-- Check owner permissions
		elseif Permission.Type == 'Owner' then
			if (Player.userId == Permission.PlayerId) or (Player.Name == Permission.PlayerName) then
				return true;
			end;

		-- Check auto-permissions
		elseif Permission.Type == 'Anybody' then
			return true;

		-- Check friend permissions
		elseif Permission.Type == 'Friends' then
			if Player:IsFriendsWith(Permission.PlayerId) then
				return true;
			end;

		-- Check asset permissions
		elseif Permission.Type == 'Asset' then
			if MarketplaceService:PlayerOwnsAsset(Player, Permission.AssetId) then
				return true;
			end;

		-- Check team permissions
		elseif Permission.Type == 'Team' then
			if Permission.Team and Player.Team == Permission.Team then
				return true;
			elseif Permission.TeamColor and Player.Team and Player.Team.TeamColor == Permission.TeamColor then
				return true;
			elseif Permission.TeamName and Player.Team and Player.Team.Name == Permission.TeamName then
				return true;
			end;
		
		-- Check BC permissions
		elseif Permission.Type == 'NoBC' then
			if Player.MembershipType == Enum.MembershipType.None then
				return true;
			end;
		elseif Permission.Type == 'AnyBC' then
			if Player.MembershipType ~= Enum.MembershipType.None then
				return true;
			end;
		elseif Permission.Type == 'BC' then
			if Player.MembershipType == Enum.MembershipType.BuildersClub then
				return true;
			end;
		elseif Permission.Type == 'TBC' then
			if Player.MembershipType == Enum.MembershipType.TurboBuildersClub then
				return true;
			end;
		elseif Permission.Type == 'OBC' then
			if Player.MembershipType == Enum.MembershipType.OutrageousBuildersClub then
				return true;
			end;

		-- Check custom permissions
		elseif Permission.Type == 'Callback' then
			return Permission.Callback(Player);
		end;

	end;

	-- If the player passes none of these conditions, deny access
	return false;
end;

function Security.IsItemAllowed(Item, Player)
	-- Returns whether instance `Item` can be accessed

	-- Ensure `Item` is a part or a model
	local IsItemClassAllowed = (Item:IsA 'BasePart' and not Item:IsA 'Terrain') or
		(Item:IsA 'Model' and not Item:IsA 'Workspace') or
		Item:IsA 'Folder' or
		Item:IsA 'Smoke' or
		Item:IsA 'Fire' or
		Item:IsA 'Sparkles' or
		Item:IsA 'DataModelMesh' or
		Item:IsA 'Decal' or
		Item:IsA 'Texture' or
		Item:IsA 'Light'
	if not IsItemClassAllowed then
		return false
	end

	-- Check if `Item` descendants from any allowed location
	for _, AllowedLocation in pairs(Security.AllowedLocations) do
		if Item:IsDescendantOf(AllowedLocation) then
			return true
		end
	end

	-- Deny if `Item` is not a descendant of any allowed location
	return false

end

function Security.IsLocationAllowed(Location, Player)
	-- Returns whether location `Location` can be accessed

	-- Check if within allowed locations
	for _, AllowedLocation in pairs(Security.AllowedLocations) do
		if (AllowedLocation == Location) or Location:IsDescendantOf(AllowedLocation) then
			return true
		end
	end

	-- Deny if not within allowed locations
	return false
end

function Security.AreAreasEnabled()
	-- Returns whether areas are enabled

	-- Base whether areas are enabled depending on area container presence and tool mode
	if Security.Areas and (ToolMode == 'Tool') then
		return true;
	else
		return false;
	end;
end;

function Security.ArePartsViolatingAreas(Parts, Player, ExemptPartial, AreaPermissions)
	-- Returns whether the given parts are inside any unauthorized areas

	-- Make sure area security is being enforced
	if not Security.AreAreasEnabled() then
		return false;
	end;

	-- If no parts, no violations exist
	if not next(Parts) then
		return false
	end

	-- Make sure there is a permissions cache
	AreaPermissions = AreaPermissions or {};

	-- Check which areas the parts are in
	local Areas, RegionMap = Security.GetSelectionAreas(Parts, true);

	-- Check authorization for each relevant area
	for _, Area in pairs(Areas) do

		-- Determine authorization if not in given permissions cache
		if AreaPermissions[Area] == nil then
			AreaPermissions[Area] = Security.IsAreaAuthorizedForPlayer(Area, Player);
		end;

		-- If unauthorized and partial violations aren't exempt, declare violation
		if not ExemptPartial and AreaPermissions[Area] == false then
			return true;
		end;

		-- If authorized and partial violations are allowed, check if all parts match area
		if ExemptPartial and AreaPermissions[Area] then

			-- Get parts matched to this area
			for Region, RegionParts in pairs(RegionMap) do
				if Region.Area == Area then

					-- If all parts are on this authorized area, call off any violation
					if Support.CountKeys(Parts) == #RegionParts then
						return false
					end

				end
			end

		end;

	end;

	-- If not in a private area, determine violation based on public building policy
	if #Areas == 0 then
		return not Security.AllowPublicBuilding;

	-- If authorization for a partial violation-exempt check on an area failed, indicate a violation
	elseif ExemptPartial then
		return true;

	-- If in authorized areas, determine violation based on public building policy compliance
	elseif RegionMap and not Security.AllowPublicBuilding then

		-- Check area residence of each part's corner
		local PartCornerCompliance = {};
		for AreaRegion, Parts in pairs(RegionMap) do
			for _, Part in pairs(Parts) do
				PartCornerCompliance[Part] = PartCornerCompliance[Part] or 0;

				-- Track the number of corners that `Part` has in this region
				for _, Corner in pairs(Support.GetPartCorners(Part)) do
					if AreaRegion:CastPoint(Corner.p) then
						PartCornerCompliance[Part] = PartCornerCompliance[Part] + 1;
					end;
				end;

			end;
		end;

		-- Ensure all corners of the part are contained within areas
		for _, CornersContained in pairs(PartCornerCompliance) do
			if CornersContained ~= 8 then
				return true;
			end;
		end;

	end;

	-- If no violations occur, indicate no violations
	return false;
end;

function Security.GetSelectionAreas(Selection, ReturnMap)
	-- Returns a list of areas that the selection of parts is in

	-- Make sure areas are enabled
	if not Security.AreAreasEnabled() then
		return {};
	end;

	-- Start a map if requested
	local Map = ReturnMap and {} or nil;

	-- Check each area to find out if any of the parts are within
	local Areas = {};
	for _, Area in pairs(Security.Areas:GetChildren()) do

		-- Get all parts from the selection within this area
		local Region = RegionModule.new(
			Area.CFrame * CFrame.new(0, Security.AreaHeight / 2 - Area.Size.Y / 2, 0),
			Vector3.new(Area.Size.X, Security.AreaHeight + Area.Size.Y, Area.Size.Z)
		);
		Region.Area = Area
		local ContainedParts = Region:CastParts(Selection);

		-- If parts are in this area, remember the area
		if #ContainedParts > 0 then
			table.insert(Areas, Area);

			-- Map out the parts for each area region
			if Map then
				Map[Region] = ContainedParts;
			end;
		end;

	end;

	-- Return the areas where any of the given parts exist
	return Areas, Map;
end;

function Security.GetPermissions(Areas, Player)
	-- Returns a cache of the current player's authorization to the given areas

	-- Make sure security is enabled
	if not Security.AreAreasEnabled() then
		return;
	end;

	-- Build the cache of permissions for each area
	local Cache = {};
	for _, Area in pairs(Areas) do
		Cache[Area] = Security.IsAreaAuthorizedForPlayer(Area, Player);
	end;

	-- Return the permissions cache
	return Cache;
end;

return Security;
end;
};
G2L_MODULES[G2L["9d"]] = {
Closure = function()
    local script = G2L["9d"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTExportDialog', View);

function Component.Start()

	-- Show the view
	View.Visible = true;

	-- Animate opening
	View.Loading.Size = UDim2.new(1, 0, 0, 0);
	View.Loading:TweenSize(UDim2.new(1, 0, 0, 80), nil, nil, 0.25);

	-- Enable close buttons
	Cheer.Bind(View.Close.Button, Component.Close);
	Cheer.Bind(View.Loading.CloseButton, Component.Close);

	-- Return component for chaining
	return Component;

end;

function Component.Close()
	-- Closes the dialog

	-- Destroy the view
	View:Destroy();

end;

function Component.SetError(Error)
	-- Sets the dialog error

	-- Set error text
	View.Loading.TextLabel.Text = Error;

end;

function Component.SetResult(Result)
	-- Sets the dialog result

	-- Hide loading message
	View.Loading.Visible = false;	

	-- Set result text
	View.Info.CreationID.Text = Result;

	-- Animate opening for result UI
	View.Info.Size = UDim2.new(1, 0, 0, 0);
	View.Info.Visible = true;
	View.Info:TweenSize(UDim2.new(1, 0, 0, 75), nil, nil, 0.25);
	View.Tip.Size = UDim2.new(1, 0, 0, 0);
	View.Tip.Visible = true;
	View.Tip:TweenSize(UDim2.new(1, 0, 0, 30), nil, nil, 0.25);
	View.Close.Size = UDim2.new(1, 0, 0, 0);
	View.Close.Visible = true;
	View.Close:TweenSize(UDim2.new(1, 0, 0, 20), nil, nil, 0.25);

end;

return Component;
end;
};
G2L_MODULES[G2L["154"]] = {
Closure = function()
    local script = G2L["154"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('Tooltip', View);

local Connections = {};

function Component.Start(Text)

	-- Hide the view
	View.Visible = false;

	-- Set the tooltip text
	View.Text = Text;

	-- Show the tooltip on hover
	Connections.ShowOnEnter = Support.AddGuiInputListener(View.Parent, 'Began', 'MouseMovement', true, Component.Show);
	Connections.HideOnLeave = Support.AddGuiInputListener(View.Parent, 'Ended', 'MouseMovement', true, Component.Hide);

	-- Clear connections when the component is removed
	Cheer.Bind(Component.OnRemove, ClearConnections);

	-- Return component for chaining
	return Component;

end;

function Component.Show()
	View.Size = UDim2.new(0, View.TextBounds.X + 10, 0, View.TextBounds.Y + 10);
	View.Position = UDim2.new(0.5, -View.AbsoluteSize.X / 2, 1, 3);
	View.Visible = true;
end;

function Component.Hide()
	View.Visible = false;
end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

return Component;
end;
};
G2L_MODULES[G2L["1b7"]] = {
Closure = function()
    local script = G2L["1b7"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Import services
Support.ImportServices();

-- Create component
local Component = Cheer.CreateComponent('BTToolInformationManager', View);

function Component.Start(Core)

	-- Save reference to core API
	getfenv(1).Core = Core;

	-- Return component for chaining
	return Component;

end;

function Component.RegisterSection(SectionName)
	-- Registers triggers for the given section

	-- Get section
	local Section = Component.GetSection(SectionName);

	-- Reset fade timer on hover
	Cheer.Bind(Section.MouseEnter, function ()
		if Component.CurrentSection == Section then
			Component.CurrentFadeTimer = false;
		end;
	end);

	-- Start fade time on unhover
	Cheer.Bind(Section.MouseLeave, function ()
		Component.StartFadeTimer(true);
	end);

end;

function Component.StartFadeTimer(Override)
	-- Creates timer to disappear current section after 2 seconds unless overridden

	if Component.CurrentFadeTimer == false and not Override then
		return;
	end;

	-- Generate unique trigger ID
	local TriggerId = HttpService:GenerateGUID();

	-- Register timer
	Component.CurrentFadeTimer = TriggerId;

	-- Start timer
	Delay(2, function ()
		if Component.CurrentFadeTimer == TriggerId then
			Component.HideCurrentSection();
		end;
	end);

end;

function Component.StartShowTimer(SectionName)
	-- Creates timer to show content after hovering for over half a second

	-- Only override current section if also triggered by hover
	if Component.LastTrigger == 'Click' then
		return;
	end;

	-- Generate unique trigger ID
	local TriggerId = HttpService:GenerateGUID();

	-- Register timer
	Component.CurrentShowTimer = TriggerId;

	-- Start timer
	Delay(0.25, function ()
		if Component.CurrentShowTimer == TriggerId then
			Component.ShowSection(SectionName, 'Hover');
			Component.StartFadeTimer();
		end;
	end);

end;

function Component.ProcessHover(Tool, SectionName)

	-- Only override current section if also triggered by hover
	if Component.LastTrigger == 'Click' then
		return;
	end;

	wait();

	-- Start a show timer
	Component.StartShowTimer(SectionName);

end;

function Component.ShowSection(SectionName, TriggerType)

	-- Hide any current section
	Component.HideCurrentSection();

	-- Get section
	local Section = Component.GetSection(SectionName);

	-- Set new current section
	Component.CurrentSection = Section;
	Component.LastTrigger = TriggerType;

	-- Show the new section
	Section.Visible = true;

end;

function Component.ProcessUnhover(Tool, SectionName)

	-- Clear any other show timer
	Component.CurrentShowTimer = nil;

	-- Only override current section if triggered by a hover
	if Component.LastTrigger == 'Click' then
		return;
	end;

	-- Get section
	local Section = Component.GetSection(SectionName);

	-- Disappear after 2 seconds unless overridden
	if Component.CurrentSection == Section then
		Component.StartFadeTimer();
	end;

end;

function Component.ProcessClick(Tool, SectionName)

	-- Show the new section
	Component.ShowSection(SectionName, 'Click');

	-- Disappear after 2 seconds unless overridden
	Component.StartFadeTimer();

end;

function Component.HideCurrentSection()

	-- Ensure there is a current section
	if not Component.CurrentSection then
		return;
	end;

	-- Hide section
	Component.CurrentSection.Visible = false;

	-- Disable section fade timer if any
	Component.CurrentFadeTimer = nil;

	-- Unregister current section
	Component.CurrentSection = nil;
	Component.LastTrigger = nil;

end;

function Component.GetSection(SectionName)

	-- Return the information section with the given name
	return View:FindFirstChild(SectionName);

end;

return Component;
end;
};
G2L_MODULES[G2L["1bb"]] = {
Closure = function()
    local script = G2L["1bb"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTTooltip', View);

local Connections = {};

function Component.Start()

	-- Hide the view
	View.Visible = false;

	-- Show the tooltip on hover
	Connections.ShowOnEnter = Support.AddGuiInputListener(View.Parent, 'Began', 'MouseMovement', true, Component.Show);
	Connections.HideOnLeave = Support.AddGuiInputListener(View.Parent, 'Ended', 'MouseMovement', true, Component.Hide);

	-- Clear connections when the component is removed
	Component.OnRemove:connect(ClearConnections);

	-- Return component for chaining
	return Component;

end;

function Component.Show()
	View.Visible = true;
end;

function Component.Hide()
	View.Visible = false;
end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

return Component.Start();
end;
};
G2L_MODULES[G2L["1bf"]] = {
Closure = function()
    local script = G2L["1bf"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDock', View, true);

function Component.Start(Core)

	-- Show the view
	View.Visible = true;

	-- Store core API reference
	getfenv(1).Core = Core;

	-- Create selection buttons
	local UndoButton = Component.AddSelectionButton(Core.Assets.UndoInactiveDecal, 'UNDO\n(Shift + Z)');
	local RedoButton = Component.AddSelectionButton(Core.Assets.RedoInactiveDecal, 'REDO\n(Shift + Y)');
	local DeleteButton = Component.AddSelectionButton(Core.Assets.DeleteInactiveDecal, 'DELETE\n(Shift + X)');
	local ExportButton = Component.AddSelectionButton(Core.Assets.ExportInactiveDecal, 'EXPORT\n(Shift + P)');
	local CloneButton = Component.AddSelectionButton(Core.Assets.CloneInactiveDecal, 'CLONE\n(Shift + C)');

	-- Connect selection buttons to core systems
	Cheer.Bind(UndoButton, Core.History.Undo);
	Cheer.Bind(RedoButton, Core.History.Redo);
	Cheer.Bind(CloneButton, Core.CloneSelection);
	Cheer.Bind(DeleteButton, Core.DeleteSelection);
	Cheer.Bind(ExportButton, Core.ExportSelection);

	-- Highlight history selection buttons according to state
	Cheer.Bind(Core.History.Changed, function ()
		UndoButton.Image = (Core.History.Index == 0) and Core.Assets.UndoInactiveDecal or Core.Assets.UndoActiveDecal;
		RedoButton.Image = (Core.History.Index == #Core.History.Stack) and Core.Assets.RedoInactiveDecal or Core.Assets.RedoActiveDecal;
	end);

	-- Highlight clone/delete/export buttons according to selection state
	Cheer.Bind(Core.Selection.Changed, function ()
		CloneButton.Image = (#Core.Selection.Items == 0) and Core.Assets.CloneInactiveDecal or Core.Assets.CloneActiveDecal;
		DeleteButton.Image = (#Core.Selection.Items == 0) and Core.Assets.DeleteInactiveDecal or Core.Assets.DeleteActiveDecal;
		ExportButton.Image = (#Core.Selection.Items == 0) and Core.Assets.ExportInactiveDecal or Core.Assets.ExportActiveDecal;
	end);

	-- Highlight current tools
	Cheer.Bind(Core.ToolChanged, function ()
		for Tool, Button in pairs(Component.ToolButtons) do
			Button.BackgroundTransparency = (Tool == Core.CurrentTool) and 0 or 1;
		end;
	end);

	-- Toggle help section on help button click
	Cheer.Bind(View.InfoButtons.HelpButton, function ()
		Cheer(View.ToolInformation).HideCurrentSection();
		View.HelpInfo.Visible = not View.HelpInfo.Visible;
	end);

	-- Start tool information section manager
	Cheer(View.ToolInformation).Start(Core);

	-- Return component for chaining
	return Component;

end;

function Component.AddSelectionButton(InitialIcon, Tooltip)

	-- Create the button
	local Button = View.SelectionButton:Clone();
	local Index = #View.SelectionButtons:GetChildren();
	Button.Parent = View.SelectionButtons;
	Button.Image = InitialIcon;
	Button.Visible = true;

	-- Position the button
	Button.Position = UDim2.new(Index % 2 * 0.5, 0, 0, Button.AbsoluteSize.Y * math.floor(Index / 2));

	-- Add a tooltip to the button
	Cheer(View.Tooltip, Button).Start(Tooltip);

	-- Return the button
	return Button;

end;

Component.ToolButtons = {};

function Component.AddToolButton(Icon, Hotkey, Tool, InfoSection)

	-- Create the button
	local Button = View.ToolButton:Clone();
	local Index = #View.ToolButtons:GetChildren();
	Button.Parent = View.ToolButtons;
	Button.BackgroundColor3 = Tool.Color and Tool.Color.Color or Color3.new(0, 0, 0);
	Button.BackgroundTransparency = (Core.CurrentTool == Tool) and 0 or 1;
	Button.Image = Icon;
	Button.Visible = true;
	Button.Hotkey.Text = Hotkey;

	-- Register the button
	Component.ToolButtons[Tool] = Button;

	-- Trigger tool when button is pressed
	Cheer.Bind(Button, Support.Call(Core.EquipTool, Tool));

	-- Register information section
	Cheer(View.ToolInformation).RegisterSection(InfoSection);

	-- Trigger information section on interactions with button
	Support.AddGuiInputListener(Button, 'Began', {'MouseButton1'}, false, function ()
		Cheer(View.ToolInformation).ProcessClick(Tool, InfoSection)
	end)
	Support.AddGuiInputListener(Button, 'Began', {'MouseMovement'}, false, function ()
		Cheer(View.ToolInformation).ProcessHover(Tool, InfoSection)
	end)
	Support.AddGuiInputListener(Button, 'Ended', {'MouseMovement'}, true, function ()
		Cheer(View.ToolInformation).ProcessUnhover(Tool, InfoSection)
	end)

	-- Time how long each press on the button lasts
	local TouchStart = nil
	Support.AddGuiInputListener(Button, 'Began', {'Touch'}, false, function ()
		local Timestamp = tick()
		TouchStart = Timestamp
		wait(0.5)

		-- Trigger tool info if still touching after delay
		if TouchStart == Timestamp then
			Cheer(View.ToolInformation).ProcessClick(Tool, InfoSection)
		end
	end)
	Support.AddGuiInputListener(Button, 'Ended', {'Touch'}, true, function ()
		TouchStart = nil
	end)

	-- Position the button
	Button.Position = UDim2.new(Index % 2 * 0.5, 0, 0, Button.AbsoluteSize.Y * math.floor(Index / 2));

	-- Return the button
	return Button;

end;

-- Indicate readiness
Component.Ready = true;

return Component;
end;
};
G2L_MODULES[G2L["1ee"]] = {
Closure = function()
    local script = G2L["1ee"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["227"]] = {
Closure = function()
    local script = G2L["227"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["24f"]] = {
Closure = function()
    local script = G2L["24f"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["26d"]] = {
Closure = function()
    local script = G2L["26d"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["2e6"]] = {
Closure = function()
    local script = G2L["2e6"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["3f8"]] = {
Closure = function()
    local script = G2L["3f8"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["402"]] = {
Closure = function()
    local script = G2L["402"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["414"]] = {
Closure = function()
    local script = G2L["414"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDropdown', View);

function Component.Start(Options, CurrentOption, Callback)

	-- Toggle options when clicked
	Cheer.Bind(View, Component.Toggle);

	-- Draw the component with the given options
	Component.Draw(Options, CurrentOption, Callback);

	-- Return component for chaining
	return Component;

end;

function Component.Toggle()
	-- Toggles the visibility of the dropdown options

	-- Show each option button open or closed
	local Buttons = View.Options:GetChildren();
	for _, Button in pairs(Buttons) do
		Button.Visible = not Button.Visible;
	end;

end;

function Component.SetOption(Option)
	-- Draws the current option into the dropdown

	-- Set the label
	View.CurrentOption.Text = Option:upper();

end;

function Component.Draw(Options, CurrentOption, Callback)
	-- Draws the dropdown with the given data

	-- Clear existing buttons
	View.Options:ClearAllChildren();

	-- Create a button for each option
	for Index, Option in ipairs(Options) do

		-- Create the button
		local Button = View.OptionButton:Clone();
		Button.Parent = View.Options;
		Button.OptionLabel.Text = Option:upper();
		Button.MouseButton1Click:Connect(function ()
			Callback(Option);
			Component.SetOption(Option);
			Component.Toggle();
		end);

		-- Position the button
		Button.Position = UDim2.new(
			math.ceil(Index / 9) - 1, Button.Position.X.Offset + (math.ceil(Index / 9) * -1) + 1,
			(Index % 9 == 0 and 9 or Index % 9) * Button.Size.Y.Scale, Button.Position.Y.Offset
		);

	end;

	-- Show the view
	View.Visible = true;

end;

return Component;
end;
};
G2L_MODULES[G2L["45b"]] = {
Closure = function()
    local script = G2L["45b"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTNotificationDialog', View);

function Component.Start(OnExpandCallback)

	-- Destroy dialog on OK button click
	Cheer.Bind(View.OKButton, function ()
		View:Destroy();
	end);

	-- Open help section on button click
	Cheer.Bind(View.HelpButton, function ()

		-- Expand OK button
		View.HelpButton:Destroy();
		View.ButtonSeparator:Destroy();
		View.OKButton:TweenSize(UDim2.new(1, 0, 0, 22), nil, nil, 0.2);

		-- Replace notice with help section
		View.Notice:Destroy();
		View.Help.Visible = true;
		View:TweenSize(
			UDim2.new(View.Size.X.Scale, View.Size.X.Offset, View.Size.Y.Scale, View.Help.NotificationSize.Value),
			nil, nil, 0.2, false, OnExpandCallback
		);

	end);

	-- Show dialog
	View.Visible = true;

	-- Return component for chaining
	return Component;

end;

return Component;
end;
};
G2L_MODULES[G2L["467"]] = {
Closure = function()
    local script = G2L["467"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTNotificationDialog', View);

function Component.Start(OnExpandCallback)

	-- Destroy dialog on OK button click
	Cheer.Bind(View.OKButton, function ()
		View:Destroy();
	end);

	-- Open help section on button click
	Cheer.Bind(View.HelpButton, function ()

		-- Expand OK button
		View.HelpButton:Destroy();
		View.ButtonSeparator:Destroy();
		View.OKButton:TweenSize(UDim2.new(1, 0, 0, 22), nil, nil, 0.2);

		-- Replace notice with help section
		View.Notice:Destroy();
		View.Help.Visible = true;
		View:TweenSize(
			UDim2.new(View.Size.X.Scale, View.Size.X.Offset, View.Size.Y.Scale, View.Help.NotificationSize.Value),
			nil, nil, 0.2, false, OnExpandCallback
		);

	end);

	-- Show dialog
	View.Visible = true;

	-- Return component for chaining
	return Component;

end;

return Component;
end;
};
G2L_MODULES[G2L["474"]] = {
Closure = function()
    local script = G2L["474"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTNotificationDialog', View);

function Component.Start(OnExpandCallback)

	-- Destroy dialog on OK button click
	Cheer.Bind(View.OKButton, function ()
		View:Destroy();
	end);

	-- Open help section on button click
	Cheer.Bind(View.HelpButton, function ()

		-- Expand OK button
		View.HelpButton:Destroy();
		View.ButtonSeparator:Destroy();
		View.OKButton:TweenSize(UDim2.new(1, 0, 0, 22), nil, nil, 0.2);

		-- Replace notice with help section
		View.Notice:Destroy();
		View.Help.Visible = true;
		View:TweenSize(
			UDim2.new(View.Size.X.Scale, View.Size.X.Offset, View.Size.Y.Scale, View.Help.NotificationSize.Value),
			nil, nil, 0.2, false, OnExpandCallback
		);

	end);

	-- Show dialog
	View.Visible = true;

	-- Return component for chaining
	return Component;

end;

return Component;
end;
};
G2L_MODULES[G2L["476"]] = {
Closure = function()
    local script = G2L["476"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTNotificationsManager', View);

function Component.Start(Core)

	-- Display update notification if tool is outdated
	if Core.IsVersionOutdated() then
		if Core.Mode == 'Plugin' then
			Cheer(View.PluginUpdateNotification).Start(Component.AdjustLayout);
		elseif Core.Mode == 'Tool' then
			Cheer(View.ToolUpdateNotification).Start(Component.AdjustLayout);
		end;
	end;

	-- Display HttpEnabled warning if HttpService is disabled
	if not Core.SyncAPI:Invoke('IsHttpServiceEnabled') then
		Cheer(View.HttpDisabledWarning).Start(Component.AdjustLayout);
	end;

	-- Adjust layout
	View.UIListLayout:ApplyLayout();

	-- Animate opening
	View.Position = UDim2.new(0.5, 0, 1.5, 0);
	View.Visible = true;
	View:TweenPosition(UDim2.new(0.5, 0, 0.5, 0), nil, nil, 0.2);

	-- Destroy notifications container on tool unequip
	spawn(function ()
		Core.Disabling:Wait();
		View:Destroy();
	end);

	-- Return component for chaining
	return Component;

end;

function Component.AdjustLayout()
	View.UIListLayout:ApplyLayout();
end;

return Component;
end;
};
G2L_MODULES[G2L["4a1"]] = {
Closure = function()
    local script = G2L["4a1"];
-- Load libraries
while not _G.GetLibraries do wait() end;
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

local View = script.Parent;
local Component = Cheer.CreateComponent('BTHSVColorPicker', View);

local Connections = {};

function Component.Start(InitialColor, Callback, SelectionPreventionCallback, PreviewCallback)

	-- Show the UI
	View.Visible = true;

	-- Start the color
	InitialColor = InitialColor or Color3.new(1, 1, 1);
	Hue, Saturation, Brightness = Color3.toHSV(InitialColor);
	Hue, Saturation, Brightness = Cheer.Link(Hue), Cheer.Link(Saturation), Cheer.Link(Brightness);

	-- Connect direct inputs to color setting
	Cheer.Bind(View.HueOption.Input, { Cheer.Clamp(0, 360), Cheer.Divide(360) }, Hue);
	Cheer.Bind(View.SaturationOption.Input, { Cheer.Clamp(0, 100), Cheer.Divide(100) }, Saturation);
	Cheer.Bind(View.BrightnessOption.Input, { Cheer.Clamp(0, 100), Cheer.Divide(100) }, Brightness);

	-- Connect color to inputs
	Cheer.Bind(Hue, { Cheer.Multiply(360), Cheer.Round(0) }, View.HueOption.Input):Trigger();
	Cheer.Bind(Saturation, { Cheer.Multiply(100), Cheer.Round(0), tostring, Cheer.Append('%') }, View.SaturationOption.Input):Trigger();
	Cheer.Bind(Brightness, { Cheer.Multiply(100), Cheer.Round(0), tostring, Cheer.Append('%') }, View.BrightnessOption.Input):Trigger();

	-- Connect color to color display
	Cheer.Bind(Hue, UpdateDisplay):Trigger();
	Cheer.Bind(Saturation, UpdateDisplay):Trigger();
	Cheer.Bind(Brightness, UpdateDisplay):Trigger();

	-- Connect mouse to interactive picker
	Connections.TrackColor = Support.AddGuiInputListener(View.HueSaturation, 'Began', 'MouseButton1', true, Support.Call(StartTrackingMouse, 'HS'));
	Connections.TrackBrightness = Support.AddGuiInputListener(View.Brightness, 'Began', 'MouseButton1', true, Support.Call(StartTrackingMouse, 'B'));
	Connections.StopTrackingMouse = Support.AddUserInputListener('Ended', 'MouseButton1', true, StopTrackingMouse);

	-- Connect OK button to finish color picking
	Cheer.Bind(View.OkButton, function ()

		-- Clear any preview
		if PreviewCallback then
			PreviewCallback();
		end;

		-- Remove the UI
		View:Destroy();

		-- Return the selected color
		Callback(Color3.fromHSV(#Hue, #Saturation, #Brightness));

	end);

	-- Connect cancel button to clear preview and remove UI
	Cheer.Bind(View.CancelButton, function () if PreviewCallback then PreviewCallback() end; View:Destroy(); end);

	-- Store reference to callbacks
	Component.SelectionPreventionCallback = SelectionPreventionCallback;
	Component.PreviewCallback = PreviewCallback;

	-- Clear connections when the component is removed
	Cheer.Bind(Component.OnRemove, ClearConnections);

end;

function StartTrackingMouse(TrackingType)

	-- Only start tracking if not already tracking
	if Connections.MouseTracking then
		return;
	end;

	-- Watch mouse movement and adjust current color
	Connections.MouseTracking = Support.AddUserInputListener('Changed', 'MouseMovement', true, function (Input)

		-- Track for hue-saturation
		if TrackingType == 'HS' then
			Hue('Update', Support.Clamp((Input.Position.X - View.HueSaturation.AbsolutePosition.X) / View.HueSaturation.AbsoluteSize.X, 0, 1));
			Saturation('Update', 1 - Support.Clamp((Input.Position.Y - View.HueSaturation.AbsolutePosition.Y) / View.HueSaturation.AbsoluteSize.Y, 0, 1));

		-- Track for brightness
		elseif TrackingType == 'B' then
			Brightness('Update', 1 - Support.Clamp((Input.Position.Y - View.Brightness.AbsolutePosition.Y) / View.Brightness.AbsoluteSize.Y, 0, 1));
		end;

	end);

	-- Prevent selection if a callback to do so is provided
	if Component.SelectionPreventionCallback then
		Component.SelectionPreventionCallback();
	end;

end;

function StopTrackingMouse()
	-- Releases any tracking

	-- Ensure ongoing tracking
	if not Connections.MouseTracking then
		return;
	end;

	-- Disable any current tracking
	Connections.MouseTracking:Disconnect();
	Connections.MouseTracking = nil;

end;

function UpdateDisplay()
	-- Updates the display based on the current color

	-- Get current color
	local CurrentColor = Color3.fromHSV(#Hue, #Saturation, #Brightness);

	-- Update the color display
	View.ColorDisplay.BackgroundColor3 = CurrentColor;
	View.HueOption.Bar.BackgroundColor3 = CurrentColor;
	View.SaturationOption.Bar.BackgroundColor3 = CurrentColor;
	View.BrightnessOption.Bar.BackgroundColor3 = CurrentColor;

	-- Update the interactive color picker
	View.HueSaturation.Cursor.Position = UDim2.new(
		#Hue, View.HueSaturation.Cursor.Position.X.Offset,
		1 - #Saturation, View.HueSaturation.Cursor.Position.Y.Offset
	);

	-- Update the interactive brightness picker
	View.Brightness.ColorBG.BackgroundColor3 = CurrentColor;
	View.Brightness.Cursor.Position = UDim2.new(
		View.Brightness.Cursor.Position.X.Scale, View.Brightness.Cursor.Position.X.Offset,
		1 - #Brightness, View.Brightness.Cursor.Position.Y.Offset
	);

	-- Update the preview if enabled
	if Component.PreviewCallback then
		Component.PreviewCallback(CurrentColor);
	end;

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

return Component;
end;
};
G2L_MODULES[G2L["4a3"]] = {
Closure = function()
    local script = G2L["4a3"];
local View = script.Parent;
while not _G.GetLibraries do wait() end;

-- Load libraries
local Support, Cheer = _G.GetLibraries(
	'F3X/SupportLibrary@^1.0.0',
	'F3X/Cheer@^0.0.0'
);

-- Create component
local Component = Cheer.CreateComponent('BTDock', View, true);

function Component.Start(Core)

	-- Show the view
	View.Visible = true;

	-- Store core API reference
	getfenv(1).Core = Core;

	-- Create selection buttons
	local UndoButton = Component.AddSelectionButton(Core.Assets.UndoInactiveDecal, 'UNDO\n(Shift + Z)');
	local RedoButton = Component.AddSelectionButton(Core.Assets.RedoInactiveDecal, 'REDO\n(Shift + Y)');
	local DeleteButton = Component.AddSelectionButton(Core.Assets.DeleteInactiveDecal, 'DELETE\n(Shift + X)');
	local ExportButton = Component.AddSelectionButton(Core.Assets.ExportInactiveDecal, 'EXPORT\n(Shift + P)');
	local CloneButton = Component.AddSelectionButton(Core.Assets.CloneInactiveDecal, 'CLONE\n(Shift + C)');

	-- Connect selection buttons to core systems
	Cheer.Bind(UndoButton, Core.History.Undo);
	Cheer.Bind(RedoButton, Core.History.Redo);
	Cheer.Bind(CloneButton, Core.CloneSelection);
	Cheer.Bind(DeleteButton, Core.DeleteSelection);
	Cheer.Bind(ExportButton, Core.ExportSelection);

	-- Highlight history selection buttons according to state
	Cheer.Bind(Core.History.Changed, function ()
		UndoButton.Image = (Core.History.Index == 0) and Core.Assets.UndoInactiveDecal or Core.Assets.UndoActiveDecal;
		RedoButton.Image = (Core.History.Index == #Core.History.Stack) and Core.Assets.RedoInactiveDecal or Core.Assets.RedoActiveDecal;
	end);

	-- Highlight clone/delete/export buttons according to selection state
	Cheer.Bind(Core.Selection.Changed, function ()
		CloneButton.Image = (#Core.Selection.Items == 0) and Core.Assets.CloneInactiveDecal or Core.Assets.CloneActiveDecal;
		DeleteButton.Image = (#Core.Selection.Items == 0) and Core.Assets.DeleteInactiveDecal or Core.Assets.DeleteActiveDecal;
		ExportButton.Image = (#Core.Selection.Items == 0) and Core.Assets.ExportInactiveDecal or Core.Assets.ExportActiveDecal;
	end);

	-- Highlight current tools
	Cheer.Bind(Core.ToolChanged, function ()
		for Tool, Button in pairs(Component.ToolButtons) do
			Button.BackgroundTransparency = (Tool == Core.CurrentTool) and 0 or 1;
		end;
	end);

	-- Toggle help section on help button click
	Cheer.Bind(View.InfoButtons.HelpButton, function ()
		Cheer(View.ToolInformation).HideCurrentSection();
		View.HelpInfo.Visible = not View.HelpInfo.Visible;
	end);

	-- Start tool information section manager
	Cheer(View.ToolInformation).Start(Core);

	-- Return component for chaining
	return Component;

end;

function Component.AddSelectionButton(InitialIcon, Tooltip)

	-- Create the button
	local Button = View.SelectionButton:Clone();
	local Index = #View.SelectionButtons:GetChildren();
	Button.Parent = View.SelectionButtons;
	Button.Image = InitialIcon;
	Button.Visible = true;

	-- Position the button
	Button.Position = UDim2.new(Index % 2 * 0.5, 0, 0, Button.AbsoluteSize.Y * math.floor(Index / 2));

	-- Add a tooltip to the button
	Cheer(View.Tooltip, Button).Start(Tooltip);

	-- Return the button
	return Button;

end;

Component.ToolButtons = {};

function Component.AddToolButton(Icon, Hotkey, Tool, InfoSection)

	-- Create the button
	local Button = View.ToolButton:Clone();
	local Index = #View.ToolButtons:GetChildren();
	Button.Parent = View.ToolButtons;
	Button.BackgroundColor3 = Tool.Color and Tool.Color.Color or Color3.new(0, 0, 0);
	Button.BackgroundTransparency = (Core.CurrentTool == Tool) and 0 or 1;
	Button.Image = Icon;
	Button.Visible = true;
	Button.Hotkey.Text = Hotkey;

	-- Register the button
	Component.ToolButtons[Tool] = Button;

	-- Trigger tool when button is pressed
	Cheer.Bind(Button, Support.Call(Core.EquipTool, Tool));

	-- Register information section
	Cheer(View.ToolInformation).RegisterSection(InfoSection);

	-- Trigger information section on interactions with button
	Support.AddGuiInputListener(Button, 'Began', {'MouseButton1'}, false, function ()
		Cheer(View.ToolInformation).ProcessClick(Tool, InfoSection)
	end)
	Support.AddGuiInputListener(Button, 'Began', {'MouseMovement'}, false, function ()
		Cheer(View.ToolInformation).ProcessHover(Tool, InfoSection)
	end)
	Support.AddGuiInputListener(Button, 'Ended', {'MouseMovement'}, true, function ()
		Cheer(View.ToolInformation).ProcessUnhover(Tool, InfoSection)
	end)

	-- Time how long each press on the button lasts
	local TouchStart = nil
	Support.AddGuiInputListener(Button, 'Began', {'Touch'}, false, function ()
		local Timestamp = tick()
		TouchStart = Timestamp
		wait(0.5)

		-- Trigger tool info if still touching after delay
		if TouchStart == Timestamp then
			Cheer(View.ToolInformation).ProcessClick(Tool, InfoSection)
		end
	end)
	Support.AddGuiInputListener(Button, 'Ended', {'Touch'}, true, function ()
		TouchStart = nil
	end)

	-- Position the button
	Button.Position = UDim2.new(Index % 2 * 0.5, 0, 0, Button.AbsoluteSize.Y * math.floor(Index / 2));

	-- Return the button
	return Button;

end;

-- Indicate readiness
Component.Ready = true;

return Component;
end;
};
G2L_MODULES[G2L["4a5"]] = {
Closure = function()
    local script = G2L["4a5"];
Serialization = {};

-- Import services
local Tool = script.Parent.Parent
local Support = require(Tool.Libraries.SupportLibrary);
Support.ImportServices();

local Types = {
	Part = 0,
	WedgePart = 1,
	CornerWedgePart = 2,
	VehicleSeat = 3,
	Seat = 4,
	TrussPart = 5,
	SpecialMesh = 6,
	Texture = 7,
	Decal = 8,
	PointLight = 9,
	SpotLight = 10,
	SurfaceLight = 11,
	Smoke = 12,
	Fire = 13,
	Sparkles = 14,
	Model = 15
};

local DefaultNames = {
	Part = 'Part',
	WedgePart = 'Wedge',
	CornerWedgePart = 'CornerWedge',
	VehicleSeat = 'VehicleSeat',
	Seat = 'Seat',
	TrussPart = 'Truss',
	SpecialMesh = 'Mesh',
	Texture = 'Texture',
	Decal = 'Decal',
	PointLight = 'PointLight',
	SpotLight = 'SpotLight',
	SurfaceLight = 'SurfaceLight',
	Smoke = 'Smoke',
	Fire = 'Fire',
	Sparkles = 'Sparkles',
	Model = 'Model'
};

function Serialization.SerializeModel(Items)
	-- Returns a serialized version of the given model

	-- Filter out non-serializable items in `Items`
	local SerializableItems = {};
	for Index, Item in ipairs(Items) do
		table.insert(SerializableItems, Types[Item.ClassName] and Item or nil);
	end;
	Items = SerializableItems;

	-- Get a snapshot of the content
	local Keys = Support.FlipTable(Items);

	local Data = {};
	Data.Version = 2;
	Data.Items = {};

	-- Serialize each item in the model
	for Index, Item in pairs(Items) do

		if Item:IsA 'BasePart' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Size.X;
			Datum[5] = Item.Size.Y;
			Datum[6] = Item.Size.Z;
			Support.ConcatTable(Datum, { Item.CFrame:components() });
			Datum[19] = Item.BrickColor.Number;
			Datum[20] = Item.Material.Value;
			Datum[21] = Item.Anchored and 1 or 0;
			Datum[22] = Item.CanCollide and 1 or 0;
			Datum[23] = Item.Reflectance;
			Datum[24] = Item.Transparency;
			Datum[25] = Item.TopSurface.Value;
			Datum[26] = Item.BottomSurface.Value;
			Datum[27] = Item.FrontSurface.Value;
			Datum[28] = Item.BackSurface.Value;
			Datum[29] = Item.LeftSurface.Value;
			Datum[30] = Item.RightSurface.Value;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Part' then
			local Datum = Data.Items[Index];
			Datum[31] = Item.Shape.Value;
		end;

		if Item.ClassName == 'VehicleSeat' then
			local Datum = Data.Items[Index];
			Datum[31] = Item.MaxSpeed;
			Datum[32] = Item.Torque;
			Datum[33] = Item.TurnSpeed;
		end;

		if Item.ClassName == 'TrussPart' then
			local Datum = Data.Items[Index];
			Datum[31] = Item.Style.Value;
		end;

		if Item.ClassName == 'SpecialMesh' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.MeshType.Value;
			Datum[5] = Item.MeshId;
			Datum[6] = Item.TextureId;
			Datum[7] = Item.Offset.X;
			Datum[8] = Item.Offset.Y;
			Datum[9] = Item.Offset.Z;
			Datum[10] = Item.Scale.X;
			Datum[11] = Item.Scale.Y;
			Datum[12] = Item.Scale.Z;
			Datum[13] = Item.VertexColor.X;
			Datum[14] = Item.VertexColor.Y;
			Datum[15] = Item.VertexColor.Z;
			Data.Items[Index] = Datum;
		end;

		if Item:IsA 'Decal' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Texture;
			Datum[5] = Item.Transparency;
			Datum[6] = Item.Face.Value;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Texture' then
			local Datum = Data.Items[Index];
			Datum[7] = Item.StudsPerTileU;
			Datum[8] = Item.StudsPerTileV;
		end;

		if Item:IsA 'Light' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Brightness;
			Datum[5] = Item.Color.r;
			Datum[6] = Item.Color.g;
			Datum[7] = Item.Color.b;
			Datum[8] = Item.Enabled and 1 or 0;
			Datum[9] = Item.Shadows and 1 or 0;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'PointLight' then
			local Datum = Data.Items[Index];
			Datum[10] = Item.Range;
		end;

		if Item.ClassName == 'SpotLight' then
			local Datum = Data.Items[Index];
			Datum[10] = Item.Range;
			Datum[11] = Item.Angle;
			Datum[12] = Item.Face.Value;
		end;

		if Item.ClassName == 'SurfaceLight' then
			local Datum = Data.Items[Index];
			Datum[10] = Item.Range;
			Datum[11] = Item.Angle;
			Datum[12] = Item.Face.Value;
		end;

		if Item.ClassName == 'Smoke' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Enabled and 1 or 0;
			Datum[5] = Item.Color.r;
			Datum[6] = Item.Color.g;
			Datum[7] = Item.Color.b;
			Datum[8] = Item.Size;
			Datum[9] = Item.RiseVelocity;
			Datum[10] = Item.Opacity;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Fire' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Enabled and 1 or 0;
			Datum[5] = Item.Color.r;
			Datum[6] = Item.Color.g;
			Datum[7] = Item.Color.b;
			Datum[8] = Item.SecondaryColor.r;
			Datum[9] = Item.SecondaryColor.g;
			Datum[10] = Item.SecondaryColor.b;
			Datum[11] = Item.Heat;
			Datum[12] = Item.Size;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Sparkles' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Enabled and 1 or 0;
			Datum[5] = Item.SparkleColor.r;
			Datum[6] = Item.SparkleColor.g;
			Datum[7] = Item.SparkleColor.b;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Model' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.PrimaryPart and Keys[Item.PrimaryPart] or 0;
			Data.Items[Index] = Datum;
		end;

		-- Spread the workload over time to avoid locking up the CPU
		if Index % 100 == 0 then
			wait(0.01);
		end;

	end;

	-- Return the serialized data
	return HttpService:JSONEncode(Data);

end;

function Serialization.InflateBuildData(Data)
	-- Returns an inflated version of the given build data

	local Build = {};
	local Instances = {};

	-- Create each instance
	for Index, Datum in ipairs(Data.Items) do

		-- Inflate BaseParts
		if Datum[1] == Types.Part
			or Datum[1] == Types.WedgePart
			or Datum[1] == Types.CornerWedgePart
			or Datum[1] == Types.VehicleSeat
			or Datum[1] == Types.Seat
			or Datum[1] == Types.TrussPart
		then
			local Item = Instance.new(Support.FindTableOccurrence(Types, Datum[1]));
			Item.Size = Vector3.new(unpack(Support.Slice(Datum, 4, 6)));
			Item.CFrame = CFrame.new(unpack(Support.Slice(Datum, 7, 18)));
			Item.BrickColor = BrickColor.new(Datum[19]);
			Item.Material = Datum[20];
			Item.Anchored = Datum[21] == 1;
			Item.CanCollide = Datum[22] == 1;
			Item.Reflectance = Datum[23];
			Item.Transparency = Datum[24];
			Item.TopSurface = Datum[25];
			Item.BottomSurface = Datum[26];
			Item.FrontSurface = Datum[27];
			Item.BackSurface = Datum[28];
			Item.LeftSurface = Datum[29];
			Item.RightSurface = Datum[30];

			-- Register the part
			Instances[Index] = Item;
		end;

		-- Inflate specific Part properties
		if Datum[1] == Types.Part then
			local Item = Instances[Index];
			Item.Shape = Datum[31];
		end;

		-- Inflate specific VehicleSeat properties
		if Datum[1] == Types.VehicleSeat then
			local Item = Instances[Index];
			Item.MaxSpeed = Datum[31];
			Item.Torque = Datum[32];
			Item.TurnSpeed = Datum[33];
		end;

		-- Inflate specific TrussPart properties
		if Datum[1] == Types.TrussPart then
			local Item = Instances[Index];
			Item.Style = Datum[31];
		end;

		-- Inflate SpecialMesh instances
		if Datum[1] == Types.SpecialMesh then
			local Item = Instance.new('SpecialMesh');
			Item.MeshType = Datum[4];
			Item.MeshId = Datum[5];
			Item.TextureId = Datum[6];
			Item.Offset = Vector3.new(unpack(Support.Slice(Datum, 7, 9)));
			Item.Scale = Vector3.new(unpack(Support.Slice(Datum, 10, 12)));
			Item.VertexColor = Vector3.new(unpack(Support.Slice(Datum, 13, 15)));

			-- Register the mesh
			Instances[Index] = Item;
		end;

		-- Inflate Decal instances
		if Datum[1] == Types.Decal or Datum[1] == Types.Texture then
			local Item = Instance.new(Support.FindTableOccurrence(Types, Datum[1]));
			Item.Texture = Datum[4];
			Item.Transparency = Datum[5];
			Item.Face = Datum[6];

			-- Register the Decal
			Instances[Index] = Item;
		end;

		-- Inflate specific Texture properties
		if Datum[1] == Types.Texture then
			local Item = Instances[Index];
			Item.StudsPerTileU = Datum[7];
			Item.StudsPerTileV = Datum[8];
		end;

		-- Inflate Light instances
		if Datum[1] == Types.PointLight
			or Datum[1] == Types.SpotLight
			or Datum[1] == Types.SurfaceLight
		then
			local Item = Instance.new(Support.FindTableOccurrence(Types, Datum[1]));
			Item.Brightness = Datum[4];
			Item.Color = Color3.new(unpack(Support.Slice(Datum, 5, 7)));
			Item.Enabled = Datum[8] == 1;
			Item.Shadows = Datum[9] == 1;

			-- Register the light
			Instances[Index] = Item;
		end;

		-- Inflate specific PointLight properties
		if Datum[1] == Types.PointLight then
			local Item = Instances[Index];
			Item.Range = Datum[10];
		end;

		-- Inflate specific SpotLight properties
		if Datum[1] == Types.SpotLight then
			local Item = Instances[Index];
			Item.Range = Datum[10];
			Item.Angle = Datum[11];
			Item.Face = Datum[12];
		end;

		-- Inflate specific SurfaceLight properties
		if Datum[1] == Types.SurfaceLight then
			local Item = Instances[Index];
			Item.Range = Datum[10];
			Item.Angle = Datum[11];
			Item.Face = Datum[12];
		end;

		-- Inflate Smoke instances
		if Datum[1] == Types.Smoke then
			local Item = Instance.new('Smoke');
			Item.Enabled = Datum[4] == 1;
			Item.Color = Color3.new(unpack(Support.Slice(Datum, 5, 7)));
			Item.Size = Datum[8];
			Item.RiseVelocity = Datum[9];
			Item.Opacity = Datum[10];

			-- Register the smoke
			Instances[Index] = Item;
		end;

		-- Inflate Fire instances
		if Datum[1] == Types.Fire then
			local Item = Instance.new('Fire');
			Item.Enabled = Datum[4] == 1;
			Item.Color = Color3.new(unpack(Support.Slice(Datum, 5, 7)));
			Item.SecondaryColor = Color3.new(unpack(Support.Slice(Datum, 8, 10)));
			Item.Heat = Datum[11];
			Item.Size = Datum[12];

			-- Register the fire
			Instances[Index] = Item;
		end;

		-- Inflate Sparkles instances
		if Datum[1] == Types.Sparkles then
			local Item = Instance.new('Sparkles');
			Item.Enabled = Datum[4] == 1;
			Item.SparkleColor = Color3.new(unpack(Support.Slice(Datum, 5, 7)));

			-- Register the instance
			Instances[Index] = Item;
		end;

		-- Inflate Model instances
		if Datum[1] == Types.Model then
			local Item = Instance.new('Model');

			-- Register the model
			Instances[Index] = Item;
		end;

	end;

	-- Set object values on each instance
	for Index, Datum in pairs(Data.Items) do

		-- Get the item's instance
		local Item = Instances[Index];

		-- Set each item's parent and name
		if Item and Datum[1] <= 15 then
			Item.Name = (Datum[3] == '') and DefaultNames[Item.ClassName] or Datum[3];
			if Datum[2] == 0 then
				table.insert(Build, Item);
			else
				Item.Parent = Instances[Datum[2]];
			end;
		end;

		-- Set model primary parts
		if Item and Datum[1] == 15 then
			Item.PrimaryPart = (Datum[4] ~= 0) and Instances[Datum[4]] or nil;
		end;

	end;

	-- Return the model
	return Build;

end;

-- Return the API
return Serialization;
end;
};
G2L_MODULES[G2L["4a6"]] = {
Closure = function()
    local script = G2L["4a6"];
Serialization = {};

-- Import services
local Tool = script.Parent.Parent
local Support = require(Tool.Libraries.SupportLibrary);
Support.ImportServices();

local Types = {
	Part = 0,
	WedgePart = 1,
	CornerWedgePart = 2,
	VehicleSeat = 3,
	Seat = 4,
	TrussPart = 5,
	SpecialMesh = 6,
	Texture = 7,
	Decal = 8,
	PointLight = 9,
	SpotLight = 10,
	SurfaceLight = 11,
	Smoke = 12,
	Fire = 13,
	Sparkles = 14,
	Model = 15,
	Folder = 18
};

local DefaultNames = {
	Part = 'Part',
	WedgePart = 'Wedge',
	CornerWedgePart = 'CornerWedge',
	VehicleSeat = 'VehicleSeat',
	Seat = 'Seat',
	TrussPart = 'Truss',
	SpecialMesh = 'Mesh',
	Texture = 'Texture',
	Decal = 'Decal',
	PointLight = 'PointLight',
	SpotLight = 'SpotLight',
	SurfaceLight = 'SurfaceLight',
	Smoke = 'Smoke',
	Fire = 'Fire',
	Sparkles = 'Sparkles',
	Model = 'Model',
	Folder = 'Folder'
};

function Serialization.SerializeModel(Items)
	-- Returns a serialized version of the given model

	-- Filter out non-serializable items in `Items`
	local SerializableItems = {};
	for Index, Item in ipairs(Items) do
		table.insert(SerializableItems, Types[Item.ClassName] and Item or nil);
	end;
	Items = SerializableItems;

	-- Get a snapshot of the content
	local Keys = Support.FlipTable(Items);

	local Data = {};
	Data.Version = 3;
	Data.Items = {};

	-- Serialize each item in the model
	for Index, Item in pairs(Items) do

		if Item:IsA 'BasePart' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Size.X;
			Datum[5] = Item.Size.Y;
			Datum[6] = Item.Size.Z;
			Support.ConcatTable(Datum, { Item.CFrame:components() });
			Datum[19] = Item.Color.r;
			Datum[20] = Item.Color.g;
			Datum[21] = Item.Color.b;
			Datum[22] = Item.Material.Value;
			Datum[23] = Item.Anchored and 1 or 0;
			Datum[24] = Item.CanCollide and 1 or 0;
			Datum[25] = Item.Reflectance;
			Datum[26] = Item.Transparency;
			Datum[27] = Item.TopSurface.Value;
			Datum[28] = Item.BottomSurface.Value;
			Datum[29] = Item.FrontSurface.Value;
			Datum[30] = Item.BackSurface.Value;
			Datum[31] = Item.LeftSurface.Value;
			Datum[32] = Item.RightSurface.Value;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Part' then
			local Datum = Data.Items[Index];
			Datum[33] = Item.Shape.Value;
		end;

		if Item.ClassName == 'VehicleSeat' then
			local Datum = Data.Items[Index];
			Datum[33] = Item.MaxSpeed;
			Datum[34] = Item.Torque;
			Datum[35] = Item.TurnSpeed;
		end;

		if Item.ClassName == 'TrussPart' then
			local Datum = Data.Items[Index];
			Datum[33] = Item.Style.Value;
		end;

		if Item.ClassName == 'SpecialMesh' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.MeshType.Value;
			Datum[5] = Item.MeshId;
			Datum[6] = Item.TextureId;
			Datum[7] = Item.Offset.X;
			Datum[8] = Item.Offset.Y;
			Datum[9] = Item.Offset.Z;
			Datum[10] = Item.Scale.X;
			Datum[11] = Item.Scale.Y;
			Datum[12] = Item.Scale.Z;
			Datum[13] = Item.VertexColor.X;
			Datum[14] = Item.VertexColor.Y;
			Datum[15] = Item.VertexColor.Z;
			Data.Items[Index] = Datum;
		end;

		if Item:IsA 'Decal' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Texture;
			Datum[5] = Item.Transparency;
			Datum[6] = Item.Face.Value;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Texture' then
			local Datum = Data.Items[Index];
			Datum[7] = Item.StudsPerTileU;
			Datum[8] = Item.StudsPerTileV;
		end;

		if Item:IsA 'Light' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Brightness;
			Datum[5] = Item.Color.r;
			Datum[6] = Item.Color.g;
			Datum[7] = Item.Color.b;
			Datum[8] = Item.Enabled and 1 or 0;
			Datum[9] = Item.Shadows and 1 or 0;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'PointLight' then
			local Datum = Data.Items[Index];
			Datum[10] = Item.Range;
		end;

		if Item.ClassName == 'SpotLight' then
			local Datum = Data.Items[Index];
			Datum[10] = Item.Range;
			Datum[11] = Item.Angle;
			Datum[12] = Item.Face.Value;
		end;

		if Item.ClassName == 'SurfaceLight' then
			local Datum = Data.Items[Index];
			Datum[10] = Item.Range;
			Datum[11] = Item.Angle;
			Datum[12] = Item.Face.Value;
		end;

		if Item.ClassName == 'Smoke' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Enabled and 1 or 0;
			Datum[5] = Item.Color.r;
			Datum[6] = Item.Color.g;
			Datum[7] = Item.Color.b;
			Datum[8] = Item.Size;
			Datum[9] = Item.RiseVelocity;
			Datum[10] = Item.Opacity;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Fire' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Enabled and 1 or 0;
			Datum[5] = Item.Color.r;
			Datum[6] = Item.Color.g;
			Datum[7] = Item.Color.b;
			Datum[8] = Item.SecondaryColor.r;
			Datum[9] = Item.SecondaryColor.g;
			Datum[10] = Item.SecondaryColor.b;
			Datum[11] = Item.Heat;
			Datum[12] = Item.Size;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Sparkles' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.Enabled and 1 or 0;
			Datum[5] = Item.SparkleColor.r;
			Datum[6] = Item.SparkleColor.g;
			Datum[7] = Item.SparkleColor.b;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Model' then
			local Datum = {};
			Datum[1] = Types[Item.ClassName];
			Datum[2] = Keys[Item.Parent] or 0;
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name;
			Datum[4] = Item.PrimaryPart and Keys[Item.PrimaryPart] or 0;
			Data.Items[Index] = Datum;
		end;

		if Item.ClassName == 'Folder' then
			local Datum = {}
			Datum[1] = Types[Item.ClassName]
			Datum[2] = Keys[Item.Parent] or 0
			Datum[3] = Item.Name == DefaultNames[Item.ClassName] and '' or Item.Name
			Data.Items[Index] = Datum
		end

		-- Spread the workload over time to avoid locking up the CPU
		if Index % 100 == 0 then
			wait(0.01);
		end;

	end;

	-- Return the serialized data
	return HttpService:JSONEncode(Data);

end;

function Serialization.InflateBuildData(Data)
	-- Returns an inflated version of the given build data

	local Build = {};
	local Instances = {};

	-- Create each instance
	for Index, Datum in ipairs(Data.Items) do

		-- Inflate BaseParts
		if Datum[1] == Types.Part
			or Datum[1] == Types.WedgePart
			or Datum[1] == Types.CornerWedgePart
			or Datum[1] == Types.VehicleSeat
			or Datum[1] == Types.Seat
			or Datum[1] == Types.TrussPart
		then
			local Item = Instance.new(Support.FindTableOccurrence(Types, Datum[1]));
			Item.Size = Vector3.new(unpack(Support.Slice(Datum, 4, 6)));
			Item.CFrame = CFrame.new(unpack(Support.Slice(Datum, 7, 18)));
			Item.Color = Color3.new(Datum[19], Datum[20], Datum[21]);
			Item.Material = Datum[22];
			Item.Anchored = Datum[23] == 1;
			Item.CanCollide = Datum[24] == 1;
			Item.Reflectance = Datum[25];
			Item.Transparency = Datum[26];
			Item.TopSurface = Datum[27];
			Item.BottomSurface = Datum[28];
			Item.FrontSurface = Datum[29];
			Item.BackSurface = Datum[30];
			Item.LeftSurface = Datum[31];
			Item.RightSurface = Datum[32];

			-- Register the part
			Instances[Index] = Item;
		end;

		-- Inflate specific Part properties
		if Datum[1] == Types.Part then
			local Item = Instances[Index];
			Item.Shape = Datum[33];
		end;

		-- Inflate specific VehicleSeat properties
		if Datum[1] == Types.VehicleSeat then
			local Item = Instances[Index];
			Item.MaxSpeed = Datum[33];
			Item.Torque = Datum[34];
			Item.TurnSpeed = Datum[35];
		end;

		-- Inflate specific TrussPart properties
		if Datum[1] == Types.TrussPart then
			local Item = Instances[Index];
			Item.Style = Datum[33];
		end;

		-- Inflate SpecialMesh instances
		if Datum[1] == Types.SpecialMesh then
			local Item = Instance.new('SpecialMesh');
			Item.MeshType = Datum[4];
			Item.MeshId = Datum[5];
			Item.TextureId = Datum[6];
			Item.Offset = Vector3.new(unpack(Support.Slice(Datum, 7, 9)));
			Item.Scale = Vector3.new(unpack(Support.Slice(Datum, 10, 12)));
			Item.VertexColor = Vector3.new(unpack(Support.Slice(Datum, 13, 15)));

			-- Register the mesh
			Instances[Index] = Item;
		end;

		-- Inflate Decal instances
		if Datum[1] == Types.Decal or Datum[1] == Types.Texture then
			local Item = Instance.new(Support.FindTableOccurrence(Types, Datum[1]));
			Item.Texture = Datum[4];
			Item.Transparency = Datum[5];
			Item.Face = Datum[6];

			-- Register the Decal
			Instances[Index] = Item;
		end;

		-- Inflate specific Texture properties
		if Datum[1] == Types.Texture then
			local Item = Instances[Index];
			Item.StudsPerTileU = Datum[7];
			Item.StudsPerTileV = Datum[8];
		end;

		-- Inflate Light instances
		if Datum[1] == Types.PointLight
			or Datum[1] == Types.SpotLight
			or Datum[1] == Types.SurfaceLight
		then
			local Item = Instance.new(Support.FindTableOccurrence(Types, Datum[1]));
			Item.Brightness = Datum[4];
			Item.Color = Color3.new(unpack(Support.Slice(Datum, 5, 7)));
			Item.Enabled = Datum[8] == 1;
			Item.Shadows = Datum[9] == 1;

			-- Register the light
			Instances[Index] = Item;
		end;

		-- Inflate specific PointLight properties
		if Datum[1] == Types.PointLight then
			local Item = Instances[Index];
			Item.Range = Datum[10];
		end;

		-- Inflate specific SpotLight properties
		if Datum[1] == Types.SpotLight then
			local Item = Instances[Index];
			Item.Range = Datum[10];
			Item.Angle = Datum[11];
			Item.Face = Datum[12];
		end;

		-- Inflate specific SurfaceLight properties
		if Datum[1] == Types.SurfaceLight then
			local Item = Instances[Index];
			Item.Range = Datum[10];
			Item.Angle = Datum[11];
			Item.Face = Datum[12];
		end;

		-- Inflate Smoke instances
		if Datum[1] == Types.Smoke then
			local Item = Instance.new('Smoke');
			Item.Enabled = Datum[4] == 1;
			Item.Color = Color3.new(unpack(Support.Slice(Datum, 5, 7)));
			Item.Size = Datum[8];
			Item.RiseVelocity = Datum[9];
			Item.Opacity = Datum[10];

			-- Register the smoke
			Instances[Index] = Item;
		end;

		-- Inflate Fire instances
		if Datum[1] == Types.Fire then
			local Item = Instance.new('Fire');
			Item.Enabled = Datum[4] == 1;
			Item.Color = Color3.new(unpack(Support.Slice(Datum, 5, 7)));
			Item.SecondaryColor = Color3.new(unpack(Support.Slice(Datum, 8, 10)));
			Item.Heat = Datum[11];
			Item.Size = Datum[12];

			-- Register the fire
			Instances[Index] = Item;
		end;

		-- Inflate Sparkles instances
		if Datum[1] == Types.Sparkles then
			local Item = Instance.new('Sparkles');
			Item.Enabled = Datum[4] == 1;
			Item.SparkleColor = Color3.new(unpack(Support.Slice(Datum, 5, 7)));

			-- Register the instance
			Instances[Index] = Item;
		end;

		-- Inflate Model instances
		if Datum[1] == Types.Model then
			local Item = Instance.new('Model');

			-- Register the model
			Instances[Index] = Item;
		end;

		-- Inflate Folder instances
		if Datum[1] == Types.Folder then
			local Item = Instance.new('Folder')

			-- Register the folder
			Instances[Index] = Item
		end

	end;

	-- Set object values on each instance
	for Index, Datum in pairs(Data.Items) do

		-- Get the item's instance
		local Item = Instances[Index];

		-- Set each item's parent and name
		if Item and Datum[1] <= 18 then
			Item.Name = (Datum[3] == '') and DefaultNames[Item.ClassName] or Datum[3];
			if Datum[2] == 0 then
				table.insert(Build, Item);
			else
				Item.Parent = Instances[Datum[2]];
			end;
		end;

		-- Set model primary parts
		if Item and Datum[1] == 15 then
			Item.PrimaryPart = (Datum[4] ~= 0) and Instances[Datum[4]] or nil;
		end;

	end;

	-- Return the model
	return Build;

end;

-- Return the API
return Serialization;
end;
};
G2L_MODULES[G2L["4a7"]] = {
Closure = function()
    local script = G2L["4a7"];
--[[
By AxisAngle, (Trey Reynolds)
Documentation
http://www.roblox.com/item.aspx?id=227509468

Region constructors:
	Region Region.new(CFrame RegionCFrame, Vector3 RegionSize)
		>Returns a new Region object

	Region Region.FromPart(Instance Part)
		>Returns a new Region objects


Region methods:
	table Region:Cast([Instance or table Ignore])
		>Returns all parts in the Region, ignoring the Ignore

	bool Region:CastPart(Instance Part)
		>Returns true if Part is within Region, false otherwise

	table Region:CastParts(table Parts)
		>Returns a table of all parts within the region

	bool Region:CastPoint(Vector3 Point)
		>Returns true if Point intersects Region, false otherwise

	bool Region:CastSphere(Vector3 SphereCenter, number SphereRadius)
		>Returns true if Sphere intersects Region, false otherwise

	bool Region:CastBox(CFrame BoxCFrame, Vector3 BoxSize)
		>Returns true if Box intersects Region, false otherwise



Region properties: (Regions are mutable)
	CFrame	CFrame
	Vector3	Size
	Region3	Region3



Region functions:
	Region3 Region.Region3BoundingBox(CFrame BoxCFrame, Vector3 BoxSize)
		>Returns the enclosing boundingbox of Box

	table Region.FindAllPartsInRegion3(Region3 Region3, [Instance or table Ignore])
		>Returns all parts within a Region3 of any size

	bool Region.BoxPointCollision(CFrame BoxCFrame, Vector3 BoxSize, Vector3 Point)
		>Returns true if the Point is intersecting the Box, false otherwise

	bool Region.BoxSphereCollision(CFrame BoxCFrame, Vector3 BoxSize, Vector3 SphereCenter, number SphereRadius)
		>Returns true if the Sphere is intersecting the Box, false otherwise

	bool Region.BoxCollision(CFrame Box0CFrame, Vector3 Box0Size, CFrame Box1CFrame, Vector3 Box1Size, [bool AssumeTrue])
		>Returns true if the boxes are intersecting, false otherwise
		If AssumeTrue is left blank, it does the full check to see if Box0 is intersecting Box1
		If AssumeTrue is true, it skips the heavy check and assumes that any part that could possibly be in the Region is
		If AssumeTrue is false, it skips the heavy check and assumes that any part that could possible be outside the Region is
	
	bool Region.CastPoint(Vector3 Point, [Instance or table Ignore])
		>Returns true if the point intersects a part, false otherwise
]]

local Region={}



local BoxPointCollision do
	local VecDiv=CFrame.new().pointToObjectSpace--Right Division, yo.
	function BoxPointCollision(CFrame,Size,Point)
		local Relative	=VecDiv(CFrame, Point)
		local sx,sy,sz	=Size.x/2,Size.y/2,Size.z/2
		local rx,ry,rz	=Relative.x,Relative.y,Relative.z
		return			rx*rx<sx*sx and ry*ry<sy*sy and rz*rz<sz*sz
	end
end



local BoxSphereCollision do
	local VecDiv=CFrame.new().pointToObjectSpace--Right Division, yo.
	function BoxSphereCollision(CFrame,Size,Center,Radius)
		local Relative	=VecDiv(CFrame,Center)
		local sx,sy,sz	=Size.x/2,Size.y/2,Size.z/2
		local rx,ry,rz	=Relative.x,Relative.y,Relative.z
		local dx		=rx>sx and rx-sx--Faster than if statement
						or rx<-sx and rx+sx
						or 0
		local dy		=ry>sy and ry-sy
						or ry<-sy and ry+sy
						or 0
		local dz		=rz>sz and rz-sz
						or rz<-sz and rz+sz
						or 0
		return dx*dx+dy*dy+dz*dz<Radius*Radius
	end
end



--There's a reason why this hasn't been done before by ROBLOX users (as far as I know)
--It's really mathy, really long, and really confusing.
--0.000033 seconds is the worst, 0.000018 looks like the average case.
--Also I ran out of local variables so I had to redo everything so that I could reuse the names lol.
--So don't even try to read it.
local BoxCollision do
	local components=CFrame.new().components
	function BoxCollision(CFrame0,Size0,CFrame1,Size1,AssumeTrue)
		local	m00,m01,m02,
				m03,m04,m05,
				m06,m07,m08,
				m09,m10,m11	=components(CFrame0)
		local	m12,m13,m14,
				m15,m16,m17,
				m18,m19,m20,
				m21,m22,m23	=components(CFrame1)
		local	m24,m25,m26	=Size0.x/2,Size0.y/2,Size0.z/2
		local	m27,m28,m29	=Size1.x/2,Size1.y/2,Size1.z/2
		local	m30,m31,m32	=m12-m00,m13-m01,m14-m02
		local	m00			=m03*m30+m06*m31+m09*m32
		local	m01			=m04*m30+m07*m31+m10*m32
		local	m02			=m05*m30+m08*m31+m11*m32
		local	m12			=m15*m30+m18*m31+m21*m32
		local	m13			=m16*m30+m19*m31+m22*m32
		local	m14			=m17*m30+m20*m31+m23*m32
		local	m30			=m12>m27 and m12-m27
							or m12<-m27 and m12+m27
							or 0
		local	m31			=m13>m28 and m13-m28
							or m13<-m28 and m13+m28
							or 0
		local	m32			=m14>m29 and m14-m29
							or m14<-m29 and m14+m29
							or 0
		local	m33			=m00>m24 and m00-m24
							or m00<-m24 and m00+m24
							or 0
		local	m34			=m01>m25 and m01-m25
							or m01<-m25 and m01+m25
							or 0
		local	m35			=m02>m26 and m02-m26
							or m02<-m26 and m02+m26
							or 0
		local	m36			=m30*m30+m31*m31+m32*m32
		local	m30			=m33*m33+m34*m34+m35*m35
		local	m31			=m24<m25 and (m24<m26 and m24 or m26)
							or (m25<m26 and m25 or m26)
		local	m32			=m27<m28 and (m27<m29 and m27 or m29)
							or (m28<m29 and m28 or m29)
		if m36<m31*m31 or m30<m32*m32 then
			return true
		elseif m36>m24*m24+m25*m25+m26*m26 or m30>m27*m27+m28*m28+m29*m29 then
			return false
		elseif AssumeTrue==nil then
			--LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOL
			--(This is how you tell if something was made by Axis Angle)
			local m30=m03*m15+m06*m18+m09*m21
			local m31=m03*m16+m06*m19+m09*m22
			local m32=m03*m17+m06*m20+m09*m23
			local m03=m04*m15+m07*m18+m10*m21
			local m06=m04*m16+m07*m19+m10*m22
			local m09=m04*m17+m07*m20+m10*m23
			local m04=m05*m15+m08*m18+m11*m21
			local m07=m05*m16+m08*m19+m11*m22
			local m10=m05*m17+m08*m20+m11*m23
			local m05=m29*m29
			local m08=m27*m27
			local m11=m28*m28
			local m15=m24*m30
			local m16=m25*m03
			local m17=m26*m04
			local m18=m24*m31
			local m19=m25*m06
			local m20=m26*m07
			local m21=m24*m32
			local m22=m25*m09
			local m23=m26*m10
			local m33=m15+m16+m17-m12;if m33*m33<m08 then local m34=m18+m19+m20-m13;if m34*m34<m11 then local m35=m21+m22+m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m33=-m15+m16+m17-m12;if m33*m33<m08 then local m34=-m18+m19+m20-m13;if m34*m34<m11 then local m35=-m21+m22+m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m33=m15-m16+m17-m12;if m33*m33<m08 then local m34=m18-m19+m20-m13;if m34*m34<m11 then local m35=m21-m22+m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m33=-m15-m16+m17-m12;if m33*m33<m08 then local m34=-m18-m19+m20-m13;if m34*m34<m11 then local m35=-m21-m22+m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m33=m15+m16-m17-m12;if m33*m33<m08 then local m34=m18+m19-m20-m13;if m34*m34<m11 then local m35=m21+m22-m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m33=-m15+m16-m17-m12;if m33*m33<m08 then local m34=-m18+m19-m20-m13;if m34*m34<m11 then local m35=-m21+m22-m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m33=m15-m16-m17-m12;if m33*m33<m08 then local m34=m18-m19-m20-m13;if m34*m34<m11 then local m35=m21-m22-m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m33=-m15-m16-m17-m12;if m33*m33<m08 then local m34=-m18-m19-m20-m13;if m34*m34<m11 then local m35=-m21-m22-m23-m14;if m35*m35<m05 then return true;end;end;end;
			local m12=m24*m24
			local m13=m25*m25
			local m14=m26*m26
			local m15=m27*m04
			local m16=m28*m07
			local m17=m27*m30
			local m18=m28*m31
			local m19=m27*m03
			local m20=m28*m06
			local m21=m29*m10
			local m22=m29*m32
			local m23=m29*m09
			local m35=(m02-m26+m15+m16)/m10;if m35*m35<m05 then local m33=m00+m17+m18-m35*m32;if m33*m33<m12 then local m34=m01+m19+m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26+m15+m16)/m10;if m35*m35<m05 then local m33=m00+m17+m18-m35*m32;if m33*m33<m12 then local m34=m01+m19+m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26-m15+m16)/m10;if m35*m35<m05 then local m33=m00-m17+m18-m35*m32;if m33*m33<m12 then local m34=m01-m19+m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26-m15+m16)/m10;if m35*m35<m05 then local m33=m00-m17+m18-m35*m32;if m33*m33<m12 then local m34=m01-m19+m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26+m15-m16)/m10;if m35*m35<m05 then local m33=m00+m17-m18-m35*m32;if m33*m33<m12 then local m34=m01+m19-m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26+m15-m16)/m10;if m35*m35<m05 then local m33=m00+m17-m18-m35*m32;if m33*m33<m12 then local m34=m01+m19-m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26-m15-m16)/m10;if m35*m35<m05 then local m33=m00-m17-m18-m35*m32;if m33*m33<m12 then local m34=m01-m19-m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26-m15-m16)/m10;if m35*m35<m05 then local m33=m00-m17-m18-m35*m32;if m33*m33<m12 then local m34=m01-m19-m20-m35*m09;if m34*m34<m13 then return true;end;end;end;
			local m35=(m00-m24+m17+m18)/m32;if m35*m35<m05 then local m33=m01+m19+m20-m35*m09;if m33*m33<m13 then local m34=m02+m15+m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24+m17+m18)/m32;if m35*m35<m05 then local m33=m01+m19+m20-m35*m09;if m33*m33<m13 then local m34=m02+m15+m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24-m17+m18)/m32;if m35*m35<m05 then local m33=m01-m19+m20-m35*m09;if m33*m33<m13 then local m34=m02-m15+m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24-m17+m18)/m32;if m35*m35<m05 then local m33=m01-m19+m20-m35*m09;if m33*m33<m13 then local m34=m02-m15+m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24+m17-m18)/m32;if m35*m35<m05 then local m33=m01+m19-m20-m35*m09;if m33*m33<m13 then local m34=m02+m15-m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24+m17-m18)/m32;if m35*m35<m05 then local m33=m01+m19-m20-m35*m09;if m33*m33<m13 then local m34=m02+m15-m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24-m17-m18)/m32;if m35*m35<m05 then local m33=m01-m19-m20-m35*m09;if m33*m33<m13 then local m34=m02-m15-m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24-m17-m18)/m32;if m35*m35<m05 then local m33=m01-m19-m20-m35*m09;if m33*m33<m13 then local m34=m02-m15-m16-m35*m10;if m34*m34<m14 then return true;end;end;end;
			local m35=(m01-m25+m19+m20)/m09;if m35*m35<m05 then local m33=m02+m15+m16-m35*m10;if m33*m33<m14 then local m34=m00+m17+m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25+m19+m20)/m09;if m35*m35<m05 then local m33=m02+m15+m16-m35*m10;if m33*m33<m14 then local m34=m00+m17+m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25-m19+m20)/m09;if m35*m35<m05 then local m33=m02-m15+m16-m35*m10;if m33*m33<m14 then local m34=m00-m17+m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25-m19+m20)/m09;if m35*m35<m05 then local m33=m02-m15+m16-m35*m10;if m33*m33<m14 then local m34=m00-m17+m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25+m19-m20)/m09;if m35*m35<m05 then local m33=m02+m15-m16-m35*m10;if m33*m33<m14 then local m34=m00+m17-m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25+m19-m20)/m09;if m35*m35<m05 then local m33=m02+m15-m16-m35*m10;if m33*m33<m14 then local m34=m00+m17-m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25-m19-m20)/m09;if m35*m35<m05 then local m33=m02-m15-m16-m35*m10;if m33*m33<m14 then local m34=m00-m17-m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25-m19-m20)/m09;if m35*m35<m05 then local m33=m02-m15-m16-m35*m10;if m33*m33<m14 then local m34=m00-m17-m18-m35*m32;if m34*m34<m12 then return true;end;end;end;
			local m35=(m02-m26+m16+m21)/m04;if m35*m35<m08 then local m33=m00+m18+m22-m35*m30;if m33*m33<m12 then local m34=m01+m20+m23-m35*m03;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26+m16+m21)/m04;if m35*m35<m08 then local m33=m00+m18+m22-m35*m30;if m33*m33<m12 then local m34=m01+m20+m23-m35*m03;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26-m16+m21)/m04;if m35*m35<m08 then local m33=m00-m18+m22-m35*m30;if m33*m33<m12 then local m34=m01-m20+m23-m35*m03;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26-m16+m21)/m04;if m35*m35<m08 then local m33=m00-m18+m22-m35*m30;if m33*m33<m12 then local m34=m01-m20+m23-m35*m03;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26+m16-m21)/m04;if m35*m35<m08 then local m33=m00+m18-m22-m35*m30;if m33*m33<m12 then local Axi=m01+m20-m23-m35*m03;if Axi*Axi<m13 then return true;end;end;end;
			local m35=(m02+m26+m16-m21)/m04;if m35*m35<m08 then local m33=m00+m18-m22-m35*m30;if m33*m33<m12 then local sAn=m01+m20-m23-m35*m03;if sAn*sAn<m13 then return true;end;end;end;
			local m35=(m02-m26-m16-m21)/m04;if m35*m35<m08 then local m33=m00-m18-m22-m35*m30;if m33*m33<m12 then local gle=m01-m20-m23-m35*m03;if gle*gle<m13 then return true;end;end;end;
			local m35=(m02+m26-m16-m21)/m04;if m35*m35<m08 then local m33=m00-m18-m22-m35*m30;if m33*m33<m12 then local m34=m01-m20-m23-m35*m03;if m34*m34<m13 then return true;end;end;end;
			local m35=(m00-m24+m18+m22)/m30;if m35*m35<m08 then local m33=m01+m20+m23-m35*m03;if m33*m33<m13 then local m34=m02+m16+m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24+m18+m22)/m30;if m35*m35<m08 then local m33=m01+m20+m23-m35*m03;if m33*m33<m13 then local m34=m02+m16+m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24-m18+m22)/m30;if m35*m35<m08 then local m33=m01-m20+m23-m35*m03;if m33*m33<m13 then local m34=m02-m16+m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24-m18+m22)/m30;if m35*m35<m08 then local m33=m01-m20+m23-m35*m03;if m33*m33<m13 then local m34=m02-m16+m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24+m18-m22)/m30;if m35*m35<m08 then local m33=m01+m20-m23-m35*m03;if m33*m33<m13 then local m34=m02+m16-m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24+m18-m22)/m30;if m35*m35<m08 then local m33=m01+m20-m23-m35*m03;if m33*m33<m13 then local m34=m02+m16-m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24-m18-m22)/m30;if m35*m35<m08 then local m33=m01-m20-m23-m35*m03;if m33*m33<m13 then local m34=m02-m16-m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24-m18-m22)/m30;if m35*m35<m08 then local m33=m01-m20-m23-m35*m03;if m33*m33<m13 then local m34=m02-m16-m21-m35*m04;if m34*m34<m14 then return true;end;end;end;
			local m35=(m01-m25+m20+m23)/m03;if m35*m35<m08 then local m33=m02+m16+m21-m35*m04;if m33*m33<m14 then local m34=m00+m18+m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25+m20+m23)/m03;if m35*m35<m08 then local m33=m02+m16+m21-m35*m04;if m33*m33<m14 then local m34=m00+m18+m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25-m20+m23)/m03;if m35*m35<m08 then local m33=m02-m16+m21-m35*m04;if m33*m33<m14 then local m34=m00-m18+m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25-m20+m23)/m03;if m35*m35<m08 then local m33=m02-m16+m21-m35*m04;if m33*m33<m14 then local m34=m00-m18+m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25+m20-m23)/m03;if m35*m35<m08 then local m33=m02+m16-m21-m35*m04;if m33*m33<m14 then local m34=m00+m18-m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25+m20-m23)/m03;if m35*m35<m08 then local m33=m02+m16-m21-m35*m04;if m33*m33<m14 then local m34=m00+m18-m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25-m20-m23)/m03;if m35*m35<m08 then local m33=m02-m16-m21-m35*m04;if m33*m33<m14 then local m34=m00-m18-m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25-m20-m23)/m03;if m35*m35<m08 then local m33=m02-m16-m21-m35*m04;if m33*m33<m14 then local m34=m00-m18-m22-m35*m30;if m34*m34<m12 then return true;end;end;end;
			local m35=(m02-m26+m21+m15)/m07;if m35*m35<m11 then local m33=m00+m22+m17-m35*m31;if m33*m33<m12 then local m34=m01+m23+m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26+m21+m15)/m07;if m35*m35<m11 then local m33=m00+m22+m17-m35*m31;if m33*m33<m12 then local m34=m01+m23+m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26-m21+m15)/m07;if m35*m35<m11 then local m33=m00-m22+m17-m35*m31;if m33*m33<m12 then local m34=m01-m23+m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26-m21+m15)/m07;if m35*m35<m11 then local m33=m00-m22+m17-m35*m31;if m33*m33<m12 then local m34=m01-m23+m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26+m21-m15)/m07;if m35*m35<m11 then local m33=m00+m22-m17-m35*m31;if m33*m33<m12 then local m34=m01+m23-m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26+m21-m15)/m07;if m35*m35<m11 then local m33=m00+m22-m17-m35*m31;if m33*m33<m12 then local m34=m01+m23-m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02-m26-m21-m15)/m07;if m35*m35<m11 then local m33=m00-m22-m17-m35*m31;if m33*m33<m12 then local m34=m01-m23-m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m02+m26-m21-m15)/m07;if m35*m35<m11 then local m33=m00-m22-m17-m35*m31;if m33*m33<m12 then local m34=m01-m23-m19-m35*m06;if m34*m34<m13 then return true;end;end;end;
			local m35=(m00-m24+m22+m17)/m31;if m35*m35<m11 then local m33=m01+m23+m19-m35*m06;if m33*m33<m13 then local m34=m02+m21+m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24+m22+m17)/m31;if m35*m35<m11 then local m33=m01+m23+m19-m35*m06;if m33*m33<m13 then local m34=m02+m21+m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24-m22+m17)/m31;if m35*m35<m11 then local m33=m01-m23+m19-m35*m06;if m33*m33<m13 then local m34=m02-m21+m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24-m22+m17)/m31;if m35*m35<m11 then local m33=m01-m23+m19-m35*m06;if m33*m33<m13 then local m34=m02-m21+m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24+m22-m17)/m31;if m35*m35<m11 then local m33=m01+m23-m19-m35*m06;if m33*m33<m13 then local m34=m02+m21-m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24+m22-m17)/m31;if m35*m35<m11 then local m33=m01+m23-m19-m35*m06;if m33*m33<m13 then local m34=m02+m21-m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00-m24-m22-m17)/m31;if m35*m35<m11 then local m33=m01-m23-m19-m35*m06;if m33*m33<m13 then local m34=m02-m21-m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m00+m24-m22-m17)/m31;if m35*m35<m11 then local m33=m01-m23-m19-m35*m06;if m33*m33<m13 then local m34=m02-m21-m15-m35*m07;if m34*m34<m14 then return true;end;end;end;
			local m35=(m01-m25+m23+m19)/m06;if m35*m35<m11 then local m33=m02+m21+m15-m35*m07;if m33*m33<m14 then local m34=m00+m22+m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25+m23+m19)/m06;if m35*m35<m11 then local m33=m02+m21+m15-m35*m07;if m33*m33<m14 then local m34=m00+m22+m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25-m23+m19)/m06;if m35*m35<m11 then local m33=m02-m21+m15-m35*m07;if m33*m33<m14 then local m34=m00-m22+m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25-m23+m19)/m06;if m35*m35<m11 then local m33=m02-m21+m15-m35*m07;if m33*m33<m14 then local m34=m00-m22+m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25+m23-m19)/m06;if m35*m35<m11 then local m33=m02+m21-m15-m35*m07;if m33*m33<m14 then local m34=m00+m22-m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25+m23-m19)/m06;if m35*m35<m11 then local m33=m02+m21-m15-m35*m07;if m33*m33<m14 then local m34=m00+m22-m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01-m25-m23-m19)/m06;if m35*m35<m11 then local m33=m02-m21-m15-m35*m07;if m33*m33<m14 then local m34=m00-m22-m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			local m35=(m01+m25-m23-m19)/m06;if m35*m35<m11 then local m33=m02-m21-m15-m35*m07;if m33*m33<m14 then local m34=m00-m22-m17-m35*m31;if m34*m34<m12 then return true;end;end;end;
			return false
		else
			return AssumeTrue
		end
	end
end


local setmetatable	=setmetatable
local components	=CFrame.new().components
local Workspace		=Workspace
local type			=type
local IsA			=game.IsA
local r3			=Region3.new
local v3			=Vector3.new



local function Region3BoundingBox(CFrame,Size)
 	local	x,y,z,
			xx,yx,zx,
			xy,yy,zy,
			xz,yz,zz=components(CFrame)
	local	sx,sy,sz=Size.x/2,Size.y/2,Size.z/2
	local	px		=sx*(xx<0 and -xx or xx)
					+sy*(yx<0 and -yx or yx)
					+sz*(zx<0 and -zx or zx)
	local	py		=sx*(xy<0 and -xy or xy)
					+sy*(yy<0 and -yy or yy)
					+sz*(zy<0 and -zy or zy)
	local	pz		=sx*(xz<0 and -xz or xz)
					+sy*(yz<0 and -yz or yz)
					+sz*(zz<0 and -zz or zz)
	return			r3(v3(x-px,y-py,z-pz),v3(x+px,y+py,z+pz))
end



local function FindAllPartsInRegion3(Region3, Ignore)
	local Ignore = (type(Ignore) == 'table') and Ignore or { Ignore }
	return Workspace:FindPartsInRegion3WithIgnoreList(Region3, Ignore, math.huge)
end



local function CastPoint(Region,Point)
	return BoxPointCollision(Region.CFrame,Region.Size,Point)
end



local function CastSphere(Region,Center,Radius)
	return BoxSphereCollision(Region.CFrame,Region.Size,Center,Radius)
end



local function CastBox(Region,CFrame,Size)
	return BoxCollision(Region.CFrame,Region.Size,CFrame,Size)
end



local function CastPart(Region,Part)
	local result = BoxCollision(Region.CFrame,Region.Size,Part.CFrame,Part.Size);
	return result;
end



local function CastParts(Region,Parts)
	local Inside={}
	for i=1,#Parts do
		if CastPart(Region,Parts[i]) then
			Inside[#Inside+1]=Parts[i]
		end
	end
	return Inside
end



local function Cast(Region,Ignore)
	local Inside={}
	local Parts=FindAllPartsInRegion3(Region.Region3,Ignore)
	for i=1,#Parts do
		if CastPart(Region,Parts[i]) then
			Inside[#Inside+1]=Parts[i]
		end
	end
	return Inside
end



local function NewRegion(CFrame,Size)
	local Object	={
		CFrame		=CFrame;
		Size		=Size;
		Region3		=Region3BoundingBox(CFrame,Size);
		Cast		=Cast;
		CastPart	=CastPart;
		CastParts	=CastParts;
		CastPoint	=CastPoint;
		CastSphere	=CastSphere;
		CastBox		=CastBox;
					}
	return			setmetatable({},{
		__index=Object;
		__newindex=function(_,Index,Value)
			Object[Index]=Value
			Object.Region3=Region3BoundingBox(Object.CFrame,Object.Size)
		end;
					})
end



Region.Region3BoundingBox	=Region3BoundingBox
Region.FindAllPartsInRegion3=FindAllPartsInRegion3
Region.BoxPointCollision	=BoxPointCollision
Region.BoxSphereCollision	=BoxSphereCollision
Region.BoxCollision			=BoxCollision
Region.new					=NewRegion
function Region.FromPart(Part)
	return NewRegion(Part.CFrame,Part.Size)
end

return Region
end;
};
G2L_MODULES[G2L["4a8"]] = {
Closure = function()
    local script = G2L["4a8"];
SupportLibrary = {};

function SupportLibrary.FindTableOccurrences(Haystack, Needle)
	-- Returns the positions of instances of `needle` in table `haystack`

	local Positions = {};

	-- Add any indexes from `Haystack` that are `Needle`
	for Index, Value in pairs(Haystack) do
		if Value == Needle then
			table.insert(Positions, Index);
		end;
	end;

	return Positions;
end;

function SupportLibrary.FindTableOccurrence(Haystack, Needle)
	-- Returns one occurrence of `Needle` in `Haystack`

	-- Search for the first instance of `Needle` found and return it
	for Index, Value in pairs(Haystack) do
		if Value == Needle then
			return Index;
		end;
	end;

	-- If no occurrences exist, return `nil`
	return nil;

end;

function SupportLibrary.IsInTable(Haystack, Needle)
	-- Returns whether the given `Needle` can be found within table `Haystack`

	-- Go through every value in `Haystack` and return whether `Needle` is found
	for _, Value in pairs(Haystack) do
		if Value == Needle then
			return true;
		end;
	end;

	-- If no instances were found, return false
	return false;
end;

function SupportLibrary.DoTablesMatch(A, B)
	-- Returns whether the values of tables A and B are the same

	-- Check B table differences
	for Index in pairs(A) do
		if A[Index] ~= B[Index] then
			return false;
		end;
	end;

	-- Check A table differences
	for Index in pairs(B) do
		if B[Index] ~= A[Index] then
			return false;
		end;
	end;

	-- Return true if no differences
	return true;
end;

function SupportLibrary.Round(Number, Places)
	-- Returns `Number` rounded to the given number of decimal places (from lua-users)

	-- Ensure that `Number` is a number
	if type(Number) ~= 'number' then
		return;
	end;

	-- Round the number
	local Multiplier = 10 ^ (Places or 0);
	local RoundedNumber = math.floor(Number * Multiplier + 0.5) / Multiplier;

	-- Return the rounded number
	return RoundedNumber;
end;

function SupportLibrary.CloneTable(Table)
	-- Returns a copy of `Table`

	local ClonedTable = {};

	-- Copy all values into `ClonedTable`
	for Key, Value in pairs(Table) do
		ClonedTable[Key] = Value;
	end;

	-- Return the clone
	return ClonedTable;
end;

function SupportLibrary.Merge(Target, ...)
	-- Copies members of the given tables into the specified target table

	local Tables = { ... }

	-- Copy members from each table into target
	for TableOrder, Table in ipairs(Tables) do
		for Key, Value in pairs(Table) do
			Target[Key] = Value
		end
	end

	-- Return target
	return Target
end

-- Create symbol representing a blank value
local Blank = newproxy(true)
SupportLibrary.Blank = Blank
getmetatable(Blank).__tostring = function ()
	return 'Symbol(Blank)'
end

function SupportLibrary.MergeWithBlanks(Target, ...)
	-- Copies members of the given tables into the specified target table, including blank values

	local Tables = { ... }

	-- Copy members from each table into target
	for TableOrder, Table in ipairs(Tables) do
		for Key, Value in pairs(Table) do
			if Value == Blank then
				Target[Key] = nil
			else
				Target[Key] = Value
			end
		end
	end

	-- Return target
	return Target
end

function SupportLibrary.GetAllDescendants(Parent)
	-- Recursively gets all the descendants of `Parent` and returns them

	local Descendants = {};

	for _, Child in pairs(Parent:GetChildren()) do

		-- Add the direct descendants of `Parent`
		table.insert(Descendants, Child);

		-- Add the descendants of each child
		for _, Subchild in pairs(SupportLibrary.GetAllDescendants(Child)) do
			table.insert(Descendants, Subchild);
		end;

	end;

	return Descendants;
end;

function SupportLibrary.GetDescendantsWhichAreA(Object, Class)
	-- Returns descendants of `Object` which match `Class`

	local Matches = {}

	-- Check each descendant
	for _, Descendant in pairs(Object:GetDescendants()) do
		if Descendant:IsA(Class) then
			Matches[#Matches + 1] = Descendant
		end
	end

	-- Return matches
	return Matches

end

function SupportLibrary.FilterArray(Array, Callback)
	-- Returns a filtered copy of `Array` based on the filter `Callback`

	local FilteredArray = {}

	-- Add items from `Array` that `Callback` returns `true` on
	for Key, Value in ipairs(Array) do
		if Callback(Value, Key) then
			table.insert(FilteredArray, Value)
		end
	end

	return FilteredArray
end

function SupportLibrary.FilterMap(Map, Callback)
	-- Returns a filtered copy of `Map` based on the filter `Callback`

	local FilteredMap = {}

	-- Add items from `Map` that `Callback` returns `true` on
	for Key, Value in ipairs(Map) do
		if Callback(Value, Key) then
			FilteredMap[Key] = Value
		end
	end

	return FilteredMap
end

function SupportLibrary.GetDescendantCount(Parent)
	-- Recursively gets a count of all the descendants of `Parent` and returns them

	local Count = 0;

	for _, Child in pairs(Parent:GetChildren()) do

		-- Count the direct descendants of `Parent`
		Count = Count + 1;

		-- Count and add the descendants of each child
		Count = Count + SupportLibrary.GetDescendantCount(Child);

	end;

	return Count;
end;

function SupportLibrary.CloneParts(Parts)
	-- Returns a table of cloned `Parts`

	local Clones = {};

	-- Copy the parts into `Clones`
	for Index, Part in pairs(Parts) do
		Clones[Index] = Part:Clone();
	end;

	return Clones;
end;

function SupportLibrary.SplitString(String, Delimiter)
	-- Returns a table of string `String` split by pattern `Delimiter`

	local StringParts = {};
	local Pattern = ('([^%s]+)'):format(Delimiter);

	-- Capture each separated part
	String:gsub(Pattern, function (Part)
		table.insert(StringParts, Part);
	end);

	return StringParts;
end;

function SupportLibrary.GetChildOfClass(Parent, ClassName, Inherit)
	-- Returns the first child of `Parent` that is of class `ClassName`
	-- or nil if it couldn't find any

	-- Look for a child of `Parent` of class `ClassName` and return it
	if not Inherit then
		for _, Child in pairs(Parent:GetChildren()) do
			if Child.ClassName == ClassName then
				return Child;
			end;
		end;
	else
		for _, Child in pairs(Parent:GetChildren()) do
			if Child:IsA(ClassName) then
				return Child;
			end;
		end;
	end;

	return nil;
end;

function SupportLibrary.GetChildrenOfClass(Parent, ClassName, Inherit)
	-- Returns a table containing the children of `Parent` that are
	-- of class `ClassName`

	local Matches = {};

	if not Inherit then
		for _, Child in pairs(Parent:GetChildren()) do
			if Child.ClassName == ClassName then
				table.insert(Matches, Child);
			end;
		end;
	else
		for _, Child in pairs(Parent:GetChildren()) do
			if Child:IsA(ClassName) then
				table.insert(Matches, Child);
			end;
		end;
	end;

	return Matches;
end;

function SupportLibrary.HSVToRGB(Hue, Saturation, Value)
	-- Returns the RGB equivalent of the given HSV-defined color
	-- (adapted from some code found around the web)

	-- If it's achromatic, just return the value
	if Saturation == 0 then
		return Value;
	end;

	-- Get the hue sector
	local HueSector = math.floor(Hue / 60);
	local HueSectorOffset = (Hue / 60) - HueSector;

	local P = Value * (1 - Saturation);
	local Q = Value * (1 - Saturation * HueSectorOffset);
	local T = Value * (1 - Saturation * (1 - HueSectorOffset));

	if HueSector == 0 then
		return Value, T, P;
	elseif HueSector == 1 then
		return Q, Value, P;
	elseif HueSector == 2 then
		return P, Value, T;
	elseif HueSector == 3 then
		return P, Q, Value;
	elseif HueSector == 4 then
		return T, P, Value;
	elseif HueSector == 5 then
		return Value, P, Q;
	end;
end;

function SupportLibrary.RGBToHSV(Red, Green, Blue)
	-- Returns the HSV equivalent of the given RGB-defined color
	-- (adapted from some code found around the web)

	local Hue, Saturation, Value;

	local MinValue = math.min(Red, Green, Blue);
	local MaxValue = math.max(Red, Green, Blue);

	Value = MaxValue;

	local ValueDelta = MaxValue - MinValue;

	-- If the color is not black
	if MaxValue ~= 0 then
		Saturation = ValueDelta / MaxValue;

	-- If the color is purely black
	else
		Saturation = 0;
		Hue = -1;
		return Hue, Saturation, Value;
	end;

	if Red == MaxValue then
		Hue = (Green - Blue) / ValueDelta;
	elseif Green == MaxValue then
		Hue = 2 + (Blue - Red) / ValueDelta;
	else
		Hue = 4 + (Red - Green) / ValueDelta;
	end;

	Hue = Hue * 60;
	if Hue < 0 then
		Hue = Hue + 360;
	end;

	return Hue, Saturation, Value;
end;

function SupportLibrary.IdentifyCommonItem(Items)
	-- Returns the common item in table `Items`, or `nil` if
	-- they vary

	local CommonItem = nil;

	for ItemIndex, Item in pairs(Items) do

		-- Set the initial item to compare against
		if ItemIndex == 1 then
			CommonItem = Item;

		-- Check if this item is the same as the rest
		else
			-- If it isn't the same, there is no common item, so just stop right here
			if Item ~= CommonItem then
				return nil;
			end;
		end;

	end;

	-- Return the common item
	return CommonItem;
end;

function SupportLibrary.IdentifyCommonProperty(Items, Property)
	-- Returns the common `Property` value in the instances given in `Items`

	local PropertyVariations = {};

	-- Capture all the variations of the property value
	for _, Item in pairs(Items) do
		table.insert(PropertyVariations, Item[Property]);
	end;

	-- Return the common property value
	return SupportLibrary.IdentifyCommonItem(PropertyVariations);

end;

function SupportLibrary.GetPartCorners(Part)
	-- Returns a table of the given part's corners' CFrames

	-- Make references to functions called a lot for efficiency
	local Insert = table.insert;
	local ToWorldSpace = CFrame.new().toWorldSpace;
	local NewCFrame = CFrame.new;

	-- Get info about the part
	local PartCFrame = Part.CFrame;
	local SizeX, SizeY, SizeZ = Part.Size.x / 2, Part.Size.y / 2, Part.Size.z / 2;

	-- Get each corner
	local Corners = {};
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(SizeX, SizeY, SizeZ)));
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(-SizeX, SizeY, SizeZ)));
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(SizeX, -SizeY, SizeZ)));
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(SizeX, SizeY, -SizeZ)));
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(-SizeX, SizeY, -SizeZ)));
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(-SizeX, -SizeY, SizeZ)));
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(SizeX, -SizeY, -SizeZ)));
	Insert(Corners, ToWorldSpace(PartCFrame, NewCFrame(-SizeX, -SizeY, -SizeZ)));

	return Corners;
end;

function SupportLibrary.ImportServices()
	-- Adds references to common services into the calling environment

	-- Get the calling environment
	local CallingEnvironment = getfenv(2);

	-- Add the services
	CallingEnvironment.Workspace = Game:GetService 'Workspace';
	CallingEnvironment.Players = Game:GetService 'Players';
	CallingEnvironment.MarketplaceService = Game:GetService 'MarketplaceService';
	CallingEnvironment.ContentProvider = Game:GetService 'ContentProvider';
	CallingEnvironment.SoundService = Game:GetService 'SoundService';
	CallingEnvironment.UserInputService = Game:GetService 'UserInputService';
	CallingEnvironment.SelectionService = Game:GetService 'Selection';
	CallingEnvironment.CoreGui = Game:GetService 'CoreGui';
	CallingEnvironment.HttpService = Game:GetService 'HttpService';
	CallingEnvironment.ChangeHistoryService = Game:GetService 'ChangeHistoryService';
	CallingEnvironment.ReplicatedStorage = Game:GetService 'ReplicatedStorage';
	CallingEnvironment.GroupService = Game:GetService 'GroupService';
	CallingEnvironment.ServerScriptService = Game:GetService 'ServerScriptService';
	CallingEnvironment.ServerStorage = Game:GetService 'ServerStorage';
	CallingEnvironment.StarterGui = Game:GetService 'StarterGui';
	CallingEnvironment.RunService = Game:GetService 'RunService';
end;

function SupportLibrary.GetListMembers(List, MemberName)
	-- Gets the given member for each object in the given list table

	local Members = {}

	-- Collect the member values for each item in the list
	for Key, Item in ipairs(List) do
		Members[Key] = Item[MemberName]
	end

	-- Return the members
	return Members

end

function SupportLibrary.GetMemberMap(List, MemberName)
	-- Maps the given items' specified members to each item

	local Map = {}

	-- Collect member values
	for Key, Item in ipairs(List) do
		Map[Item] = Item[MemberName]
	end

	-- Return map
	return Map

end

function SupportLibrary.AddUserInputListener(InputState, InputTypeFilter, CatchAll, Callback)
	-- Connects to the given user input event and takes care of standard boilerplate code

	-- Create input type whitelist
	local InputTypes = {}
	if type(InputTypeFilter) == 'string' then
		InputTypes[InputTypeFilter] = true
	elseif type(InputTypeFilter) == 'table' then
		InputTypes = SupportLibrary.FlipTable(InputTypeFilter)
	end

	-- Create a UserInputService listener based on the given `InputState`
	return Game:GetService('UserInputService')['Input' .. InputState]:Connect(function (Input, GameProcessedEvent)

		-- Make sure this input was not captured by the client (unless `CatchAll` is enabled)
		if GameProcessedEvent and not CatchAll then
			return;
		end;

		-- Make sure this is the right input type
		if not InputTypes[Input.UserInputType.Name] then
			return;
		end;

		-- Make sure any key input did not occur while typing into a UI
		if InputType == Enum.UserInputType.Keyboard and Game:GetService('UserInputService'):GetFocusedTextBox() then
			return;
		end;

		-- Call back upon passing all conditions
		Callback(Input);

	end);

end;

function SupportLibrary.AddGuiInputListener(Gui, InputState, InputTypeFilter, CatchAll, Callback)
	-- Connects to the given GUI user input event and takes care of standard boilerplate code

	-- Create input type whitelist
	local InputTypes = {}
	if type(InputTypeFilter) == 'string' then
		InputTypes[InputTypeFilter] = true
	elseif type(InputTypeFilter) == 'table' then
		InputTypes = SupportLibrary.FlipTable(InputTypeFilter)
	end

	-- Create a UserInputService listener based on the given `InputState`
	return Gui['Input' .. InputState]:Connect(function (Input, GameProcessedEvent)

		-- Make sure this input was not captured by the client (unless `CatchAll` is enabled)
		if GameProcessedEvent and not CatchAll then
			return;
		end;

		-- Make sure this is the right input type
		if not InputTypes[Input.UserInputType.Name] then
			return;
		end;

		-- Call back upon passing all conditions
		Callback(Input);

	end);

end;

function SupportLibrary.AreKeysPressed(...)
	-- Returns whether the given keys are pressed

	local RequestedKeysPressed = 0;

	-- Get currently pressed keys
	local PressedKeys = SupportLibrary.GetListMembers(Game:GetService('UserInputService'):GetKeysPressed(), 'KeyCode');

	-- Go through each requested key
	for _, Key in pairs({ ... }) do

		-- Count requested keys that are pressed
		if SupportLibrary.IsInTable(PressedKeys, Key) then
			RequestedKeysPressed = RequestedKeysPressed + 1;
		end;

	end;

	-- Return whether all the requested keys are pressed or not
	return RequestedKeysPressed == #{...};

end;

function SupportLibrary.ConcatTable(TargetTable, ...)
	-- Inserts all values from given source tables into target

	local SourceTables = { ... }

	-- Insert values from each source table into target
	for TableOrder, SourceTable in ipairs(SourceTables) do
		for Key, Value in ipairs(SourceTable) do
			table.insert(TargetTable, Value)
		end
	end

	-- Return the destination table
	return TargetTable
end

function SupportLibrary.ClearTable(Table)
	-- Clears out every value in `Table`

	-- Clear each index
	for Index in pairs(Table) do
		Table[Index] = nil;
	end;

	-- Return the given table
	return Table;
end;

function SupportLibrary.Values(Table)
	-- Returns all the values in the given table

	local Values = {};

	-- Go through each key and get each value
	for _, Value in pairs(Table) do
		table.insert(Values, Value);
	end;

	-- Return the values
	return Values;
end;

function SupportLibrary.Keys(Table)
	-- Returns all the keys in the given table

	local Keys = {};

	-- Go through each key and get each value
	for Key in pairs(Table) do
		table.insert(Keys, Key);
	end;

	-- Return the values
	return Keys;
end;

function SupportLibrary.Call(Function, ...)
	-- Returns a callback to `Function` with the given arguments
	local Args = { ... }
	return function (...)
		return Function(unpack(
			SupportLibrary.ConcatTable({}, Args, { ... })
		))
	end
end

function SupportLibrary.Trim(String)
	-- Returns a trimmed version of `String` (adapted from code from lua-users)
	return (String:gsub("^%s*(.-)%s*$", "%1"));
end

function SupportLibrary.ChainCall(...)
	-- Returns function that passes arguments through given functions and returns the final result

	-- Get the given chain of functions
	local Chain = { ... };

	-- Return the chaining function
	return function (...)

		-- Get arguments
		local Arguments = { ... };

		-- Go through each function and store the returned data to reuse in the next function's arguments 
		for _, Function in ipairs(Chain) do
			Arguments = { Function(unpack(Arguments)) };
		end;

		-- Return the final returned data
		return unpack(Arguments);

	end;

end;

function SupportLibrary.CountKeys(Table)
	-- Returns the number of keys in `Table`

	local Count = 0;

	-- Count each key
	for _ in pairs(Table) do
		Count = Count + 1;
	end;

	-- Return the count
	return Count;

end;

function SupportLibrary.Slice(Table, Start, End)
	-- Returns values from `Start` to `End` in `Table`

	local Slice = {};

	-- Go through the given indices
	for Index = Start, End do
		table.insert(Slice, Table[Index]);
	end;

	-- Return the slice
	return Slice;

end;

function SupportLibrary.FlipTable(Table)
	-- Returns a table with keys and values in `Table` swapped

	local FlippedTable = {};

	-- Flip each key and value
	for Key, Value in pairs(Table) do
		FlippedTable[Value] = Key;
	end;

	-- Return the flipped table
	return FlippedTable;

end;

function SupportLibrary.ScheduleRecurringTask(TaskFunction, Interval)
	-- Repeats `Task` every `Interval` seconds until stopped

	-- Create a task object
	local Task = {

		-- A switch determining if it's running or not
		Running = true;

		-- A function to stop this task
		Stop = function (Task)
			Task.Running = false;
		end;

		-- References to the task function and set interval
		TaskFunction = TaskFunction;
		Interval = Interval;

	};

	coroutine.wrap(function (Task)

		-- Repeat the task
		while wait(Task.Interval) and Task.Running do
			Task.TaskFunction();
		end;

	end)(Task);

	-- Return the task object
	return Task;

end;

function SupportLibrary.Loop(Interval, Function, ...)
	-- Calls the given function repeatedly at the specified interval until stopped

	local Args = { ... }

	-- Create state
	local Running = true
	local Stop = function ()
		Running = nil
	end

	-- Start loop
	coroutine.wrap(function ()
		while wait(Interval) and Running do
			Function(unpack(Args))
		end
	end)()

	-- Return stopping callback
	return Stop
end

function SupportLibrary.Clamp(Number, Minimum, Maximum)
	-- Returns the given number, clamped according to the provided min/max

	-- Clamp the number
	if Minimum and Number < Minimum then
		Number = Minimum;
	elseif Maximum and Number > Maximum then
		Number = Maximum;
	end;

	-- Return the clamped number
	return Number;

end;

function SupportLibrary.ReverseTable(Table)
	-- Returns a new table with values in the opposite order

	local ReversedTable = {};

	-- Copy each value at the opposite key
	for Index, Value in ipairs(Table) do
		ReversedTable[#Table - Index + 1] = Value;
	end;

	-- Return the reversed table
	return ReversedTable;

end;

function SupportLibrary.CreateConsecutiveCallDeferrer(MaxInterval)
	-- Returns a callback for determining whether to execute consecutive calls

	local LastCallTime
	local function ShouldExecuteCall()

		-- Mark latest call time
		local CallTime = tick()
		LastCallTime = CallTime

		-- Indicate whether call still latest
		wait(MaxInterval)
		return LastCallTime == CallTime

	end

	-- Return callback
	return ShouldExecuteCall

end

return SupportLibrary;
end;
};
G2L_MODULES[G2L["4a9"]] = {
Closure = function()
    local script = G2L["4a9"];
--- Lua-side duplication of the API of events on Roblox objects.
-- Signals are needed for to ensure that for local events objects are passed by
-- reference rather than by value where possible, as the BindableEvent objects
-- always pass signal arguments by value, meaning tables will be deep copied.
-- Roblox's deep copy method parses to a non-lua table compatable format.
-- @classmod Signal

local Signal = {}
Signal.__index = Signal
Signal.ClassName = "Signal"

--- Constructs a new signal.
-- @constructor Signal.new()
-- @treturn Signal
function Signal.new()
	local self = setmetatable({}, Signal)

	self._bindableEvent = Instance.new("BindableEvent")
	self._argData = nil
	self._argCount = nil -- Prevent edge case of :Fire("A", nil) --> "A" instead of "A", nil

	return self
end

--- Fire the event with the given arguments. All handlers will be invoked. Handlers follow
-- Roblox signal conventions.
-- @param ... Variable arguments to pass to handler
-- @treturn nil
function Signal:Fire(...)
	self._argData = {...}
	self._argCount = select("#", ...)
	self._bindableEvent:Fire()
	self._argData = nil
	self._argCount = nil
end

--- Connect a new handler to the event. Returns a connection object that can be disconnected.
-- @tparam function handler Function handler called with arguments passed when `:Fire(...)` is called
-- @treturn Connection Connection object that can be disconnected
function Signal:Connect(handler)
	if not (type(handler) == "function") then
		error(("connect(%s)"):format(typeof(handler)), 2)
	end

	return self._bindableEvent.Event:Connect(function()
		handler(unpack(self._argData, 1, self._argCount))
	end)
end

--- Wait for fire to be called, and return the arguments it was given.
-- @treturn ... Variable arguments from connection
function Signal:Wait()
	self._bindableEvent.Event:Wait()
	assert(self._argData, "Missing arg data, likely due to :TweenSize/Position corrupting threadrefs.")
	return unpack(self._argData, 1, self._argCount)
end

--- Disconnects all connected events to the signal. Voids the signal as unusable.
-- @treturn nil
function Signal:Destroy()
	if self._bindableEvent then
		self._bindableEvent:Destroy()
		self._bindableEvent = nil
	end

	self._argData = nil
	self._argCount = nil
end

return Signal
end;
};
G2L_MODULES[G2L["4aa"]] = {
Closure = function()
    local script = G2L["4aa"];
-- Callable Instance.new wrapper
-- @readme https://github.com/RoStrap/Helper#make
-- @author Validark

return function(InstanceType)
	return function(Table, ...)
		local Object = Instance.new(InstanceType)
		local Parent = Table.Parent
	
		if Parent then
			Table.Parent = nil
		end
	
		for Property, Value in next, Table do
			if type(Property) == "number" then
				Value.Parent = Object
			else
				Object[Property] = Value
			end
		end
	
		if Parent then
			Object.Parent = Parent
		end
	
		if ... then
			local Objects = {...}
			for a = 1, #Objects do
				local Object = Object:Clone()
				for Property, Value in next, Objects[a] do
					if type(Property) == "number" then
						Value.Parent = Object
					else
						Object[Property] = Value
					end
				end
				Object.Parent = not Object.Parent and Parent
				Objects[a] = Object
			end
			return Object, unpack(Objects)
		else
			return Object
		end
	end
end
end;
};
G2L_MODULES[G2L["4ab"]] = {
Closure = function()
    local script = G2L["4ab"];
-- A library for controlling the flow of error-prone, interdependent functions
-- @readme https://github.com/F3XTeam/RBX-Try-Library/blob/master/README.md

-- Define default Attempt properties
local Attempt = {};
Attempt.RetryCount = 0;
Attempt._IsAttempt = true;
Attempt.__index = Attempt;

-- Return attempt debugging ID when converted to string
function Attempt:__tostring()
	return self.Id:gsub('table', 'Attempt');
end;

-- Result-packaging helper function
local function PackageProtectedCall(...)
	return ..., { select(2, ...) };
end;

local function IsAttempt(Object)
	-- Returns whether given object is an attempt

	-- Get object metatable
	local ObjectMetatable = getmetatable(Object);

	-- Return whether metatable indicates object is an attempt
	return ObjectMetatable and ObjectMetatable._IsAttempt or false;

end;

local function Try(Function, ...)
	-- Creates, starts, and returns a new attempt

	-- Initialize new attempt
	local self = {};
	self.Id = tostring(self);
	setmetatable(self, Attempt);

	-- Run and return attempt for chaining
	return self:Execute(Function, { ... });

end;

function Attempt:Execute(Function, Arguments)
	-- Executes function with given arguments, saves results in attempt

	-- Capture function execution results
	local Success, Results = PackageProtectedCall(pcall(Function, unpack(Arguments)));

	-- Update attempt state with execution information
	self.Function = Function;
	self.Arguments = Arguments;
	self.Success = Success;
	self.Results = Results;

	-- Get stack trace and start list of skipped operations on failure
	if not Success then
		self.Stack = debug.traceback();
		self.Skips = {};
	end;

	-- Return attempt for chaining
	return self;

end;

function Attempt:Then(Callback)
	-- Passes attempt results to callback, and returns attempt for chaining

	-- Enter new attempt context if received
	local FirstArgument = self.Results[1];
	if self.Success and IsAttempt(FirstArgument) then
		self = FirstArgument;
	end;

	-- Skip callback if attempt failed
	if not self.Success then
		self.Skips[#self.Skips + 1] = Callback;
		return self;
	end;

	-- Execute callback with results of last attempt
	self:Execute(Callback, self.Results);

	-- Return attempt for chaining
	return self;

end;

function Attempt:Catch(...)
	-- Passes errors in failed attempt to given callback, returns attempt for chaining

	-- Enter new attempt context if received
	local FirstArgument = self.Results[1];
	if self.Success and IsAttempt(FirstArgument) then
		self = FirstArgument;
	end;

	-- Skip catching if attempt succeeded
	if self.Success or self.Handled then
		return self;
	end;

	-- Get arguments
	local Arguments = { ... };

	-- Get predicate count and callback
	local PredicateCount = #Arguments - 1;
	local Callback = Arguments[PredicateCount + 1];

	-- Track catching operation for future retry attempts
	self.Skips[#self.Skips + 1] = Arguments;

	-- Get attempt error
	local Error = self.Results[1];
	local HandleError = false;

	-- Handle any error if no predicates specified
	if PredicateCount == 0 then
		HandleError = true;

	-- Handle matching error if predicates specified
	elseif type(Error) == 'string' then
		for PredicateId = 1, PredicateCount do
			if Error:match(Arguments[PredicateId]) then
				HandleError = true;
				break;
			end;
		end;
	end;

	-- Attempt passing error to callback, and return attempt on success
	if HandleError then
		return Try(Callback, Error, self.Stack, self):Then(function ()
			self.Handled = true;
			return self;
		end);
	end;

	-- Return attempt for chaining
	return self;

end;

function Attempt:Retry()
	-- Retries attempt from first failure, applies skipped operations, and returns resulting attempt

	-- Skip retrying if attempt succeeded
	if self.Success then
		return;
	end;

	-- Get skips after attempt failure
	local Skips = self.Skips;

	-- Reset attempt for reexecution
	self.Handled = nil;
	self.Skips = nil;
	self.Stack = nil;

	-- Increment retry counter
	self.RetryCount = self.RetryCount + 1;

	-- Retry attempt
	self:Execute(self.Function, self.Arguments);

	-- Reset retry counter if retry succeded
	if self.Success then
		self.RetryCount = nil;
	end;

	-- Apply skipped operations
	for SkipIndex = 1, #Skips do
		local Skip = Skips[SkipIndex];
		local SkipMetatable = getmetatable(Skip);

		-- Apply callables as `then` operations
		if type(Skip) == 'function' or (SkipMetatable and SkipMetatable.__call) then
			self = self:Then(Skip);

		-- Apply non-callables as `catch` operations
		else
			self = self:Catch(unpack(Skip));
		end;
	end;

	-- Return attempt for chaining
	return self;

end;

return Try;
end;
};
G2L_MODULES[G2L["4ac"]] = {
Closure = function()
    local script = G2L["4ac"];
local Support = require(script.Parent:WaitForChild 'SupportLibrary')
local Signal = require(script.Parent:WaitForChild 'Signal')

local Cheer = {};

function Cheer.WaitFor(View)
	-- Waits until the given view fully loads

	-- Get the component's total descendant count
	local TotalCount = (View:WaitForChild 'CheerDescendantCount').Value;

	-- Check if the loaded descendant count matches the total
	if Support.GetDescendantCount(View) >= TotalCount then
		return View;
	end;

	-- Wait for the loaded descendant count to reach its total
	while Support.GetDescendantCount(View) ~= TotalCount do
		wait(0.1);
	end;

	-- Return the component
	return View;

end;

function Cheer.LoadComponent(View)

	-- Execute ModuleScript-based components
	local ComponentModule = View:FindFirstChild '[Component]';
	if ComponentModule and ComponentModule.ClassName == 'ModuleScript' then
		require(ComponentModule);
	end;

	-- Get components list
	local Components = Cheer.GetCheerData().Components;

	-- Wait for component to register
	while not Components[View] do
		Cheer.GetCheerData().ComponentRegistered:Wait();
	end;

	-- Wait for component to be ready
	local Component = Components[View];
	while not Component.Ready do
		wait(0.1);
	end;

	-- Return the view's component
	return Components[View];

end;

function Cheer.FromTemplate(View, Parent)

	-- Clone and parent the component view
	local Component = View:Clone();
	Component.Parent = Parent;

	-- Load and return the component
	return Cheer.LoadComponent(Component);

end;

function Cheer.GetCheerData()
	-- Returns or initializes the game's Cheer data container

	-- Initialize Cheer data if nonexistent
	if not _G.CheerData then

		-- Create global data container
		_G.CheerData = {
			Components = {},
			ComponentRegistered = Signal.new()
		};

		-- Enable new components' OnRemove event
		Cheer.GetCheerData().ComponentRegistered:Connect(function (Name, View)
			local OnRemove = Cheer(View).OnRemove;

			-- Fire `OnRemove` upon deletion
			View.AncestryChanged:Connect(function (Item, Parent)
				if Parent == nil then
					OnRemove:Fire();
				end;
			end);
		end);

	end;

	-- Return Cheer data
	return _G.CheerData;

end;

function Cheer.CreateComponent(Name, RootView, ManualReadiness)

	-- Ensure root view is provided
	if typeof(RootView) ~= 'Instance' then
		return;
	end;

	-- Create signal indicating component removal
	local OnRemove = Signal.new();

	-- Create component
	local Component = { View = RootView, Name = Name, OnRemove = OnRemove, Ready = not ManualReadiness };

	-- Register component
	Cheer.GetCheerData().Components[RootView] = Component;
	Cheer.GetCheerData().ComponentRegistered:Fire(Name, RootView);

	-- Return the component
	return Component;

end;

function Cheer.Bind(Source, ...)

	local Args = { ... };
	local Filters, Destination = {};

	-- Parse arguments
	if #Args == 2 then
		Filters, Destination = ...;
	elseif #Args == 1 then
		Destination = ...;
	end;

	-- Create filter chain
	local Filter = Support.ChainCall(unpack(Filters));

	-- Create destinations list
	local Destinations = (typeof(Destination) == 'table') and Destination or { Destination };

	local function CallDestination(...)

		-- Call each destination
		for _, Destination in ipairs(Destinations) do

			-- If `Destination` is a function, call it
			if typeof(Destination) == 'function' then
				Destination(Filter(...));

			-- If `Destination` is a link, update its structure
			elseif (typeof(Destination) == 'userdata') and pcall(function () return #Destination; end) then
				Destination('Update', Filter(...));

			-- If `Destination` is a TextBox, update it if not focused
			elseif (typeof(Destination) == 'Instance') and Destination:IsA 'TextBox' and not Destination:IsFocused() then
				Destination.Text = Filter(...);

			-- If `Destination` is a TextLabel, update it
			elseif (typeof(Destination) == 'Instance') and Destination:IsA 'TextLabel' then
				Destination.Text = Filter(...);

			-- If `Destination` is a value instance, update it
			elseif (typeof(Destination) == 'Instance') and Destination.ClassName:match('Value$') then
				Destination.Value = Filter(...);
			end;

		end;

	end;

	-- Create a controller for the binding
	local Binding = {};

	function Binding.Trigger()
		-- Manually triggers a source data call to the destination

		-- If `Source` is a link
		if typeof(Source == 'userdata') and pcall(function () return #Source; end) then
			CallDestination(#Source);

		-- If `Source` is a text box
		elseif (typeof(Source) == 'Instance') and Source:IsA 'TextBox' then
			CallDestination(Source.Text);

		-- If `Source` is a button
		elseif (typeof(Source) == 'Instance') and Source:IsA 'GuiButton' then
			CallDestination();

		-- If `Source` is a value instance
		elseif (typeof(Source) == 'Instance') and Source.ClassName:match('Value$') then
			CallDestination(Source.Value);
		end;

		-- Return the binding
		return Binding;

	end;

	-- If `Source` is a link
	if typeof(Source) == 'userdata' and pcall(function () return #Source; end) then

		-- Subscribe to changes in the linked data
		local Subscription = Source('Subscribe', function (Change)
			CallDestination(#Source);
		end);

		-- Provide unbind method
		Binding.Unbind = function ()
			Subscription:Unsubscribe();
		end;

	-- If `Source` is an event
	elseif (typeof(Source) == 'RBXScriptSignal') or (typeof(Source) == 'table' and Source.Wait and Source.Connect) then

		-- Watch for the event firing
		local Connection = Source:Connect(function (...)
			CallDestination(...);
		end);

		-- Provide unbind method
		Binding.Unbind = function ()
			Connection:Disconnect();
		end;

	-- If `Source` is a TextBox
	elseif (typeof(Source) == 'Instance') and Source:IsA 'TextBox' then

		-- Watch for text box submitting
		local Connection = Source.FocusLost:Connect(function (EnterPressed)
			if EnterPressed then
				CallDestination(Source.Text);
			end;
		end);

		-- Provide unbind method
		Binding.Unbind = function ()
			Connection:Disconnect();
		end;

	-- If `Source` is a GUI button
	elseif (typeof(Source) == 'Instance') and Source:IsA 'GuiButton' then

		-- Watch for button clicking
		local Connection = Source.MouseButton1Click:Connect(function ()
			CallDestination();
		end);

		-- Provide unbind method
		Binding.Unbind = function ()
			Connection:Disconnect();
		end;

	-- If `Source` is a Value instance
	elseif (typeof(Source) == 'Instance') and Source.ClassName:match('Value$') then

		-- Watch for value changing
		local Connection = Source.Changed:Connect(function (Value)
			CallDestination(Value);
		end);

		-- Provide unbind method
		Binding.Unbind = function ()
			Connection:Disconnect();
		end;

	end;

	-- Attempt to get the calling script
	local Script = getfenv(2).script;

	-- Disable the binding if the script is removed
	if type(Script) == 'userdata' then
		Script.AncestryChanged:Connect(function (_, Parent)
			if Parent == nil then
				Binding.Unbind();
			end;
		end);
	end;

	-- Return the binding controller
	return Binding;

end;

function Cheer.Link(Structure)
	-- Returns a link to the given structure

	-- Create the link
	local Link = newproxy(true);
	local LinkMetatable = getmetatable(Link);

	-- Keep track of change subscriptions
	local LinkSubscriptions = {};
	local LinkDifferenceStream = Signal.new();

	function LinkMetatable.__index(Link, Index)
		-- Create sublinks for each requested subpath
		return Cheer.CreateSublink(Link, Index);
	end;

	function LinkMetatable.__newindex(Link, Key, Value)
		-- Patch a new value into the requested subpath

		-- Form path for change
		local Path = -Link;
		table.insert(Path, Key);

		-- Trigger patch
		Link('Patch', { Path = Path, Value = Value });

	end;

	function LinkMetatable.__len(Link)
		-- Return data when called with #
		return Structure; 
	end;

	local function Update(UpdatedStructure)
		-- Processes differences in structure updates and triggers subscribers

		-- Get the differences
		local Differences = Cheer.GetStructureDiff(Structure, UpdatedStructure);

		-- Set the updated structure as current
		Structure = UpdatedStructure;

		-- Trigger subscribers
		for _, Difference in ipairs(Differences) do
			LinkDifferenceStream:Fire(Difference);
		end;

	end;

	local function Set(UpdatedStructure)
		-- Replaces the entire structure and triggers top-level subscribers

		-- Replace structure
		Structure = UpdatedStructure;

		-- Trigger subscribers
		LinkDifferenceStream:Fire({
			Path = {},
			Value = UpdatedStructure
		});

	end;

	local function Patch(Difference)
		-- Processes difference into structure and triggers subscribers

		-- Patch root structure directly
		if #Difference.Path == 0 then
			Structure = Difference.Value;
			LinkDifferenceStream:Fire(Difference);
			return;
		end;

		-- Separate target from path
		local Path = Support.Slice(Difference.Path, 1, #Difference.Path - 1);
		local Target = Difference.Path[#Difference.Path];

		-- Patch at target point
		local Point = Link('Get', Path);
		Point[Target] = Difference.Value;

		-- Trigger subscribers
		LinkDifferenceStream:Fire(Difference);

	end;

	function LinkMetatable.__call(Link, Type, ...)

		-- Return subdata from sublinks
		if Type == 'Get' then
			local Path = ...;

			-- Return `nil` if anchor structure is `nil`
			if not Structure then
				return nil;
			end;

			-- Start at the anchor structure
			local Position = Structure;

			-- Travel recursively through the structure by the given path
			for _, Index in ipairs(Path) do
				Position = Position[Index];
			end;

			-- Return the final position in the structure subdata
			return Position;

		-- Store subscription callbacks to subpaths
		elseif Type == 'Subscribe' then
			local Callback, Path = ...;
			local Path = Path or -Link;

			-- Connect and react to relevant events in difference stream
			local Connection = LinkDifferenceStream:Connect(function (Difference)
				if Cheer.DoesPathMatch(Difference.Path, Path, true) then
					Callback(Difference);
				end;
			end);

			-- Create the subscription registration
			local Subscription = {
				Path = Path,
				Connection = Connection
			};

			function Subscription.Unsubscribe()
				-- Provide function to remove subscription

				-- Disable difference stream connection
				Connection:Disconnect();

				-- Unregister subscription
				LinkSubscriptions[Subscription] = nil;

			end;

			-- Attempt to get the calling script
			local Script = getfenv(2).script;

			-- Disconnect the subscription if the script is removed
			if type(Script) == 'userdata' then
				Script.AncestryChanged:Connect(function (_, Parent)
					if Parent == nil then
						Subscription:Unsubscribe();
					end;
				end);
			end;

			-- Add and return the subscription
			LinkSubscriptions[Subscription] = true;
			return Subscription;

		-- Return path requests
		elseif Type == 'GetPath' then
			return ...;

		-- Process update requests
		elseif Type == 'Update' then
			Update(...);

		-- Process set requests
		elseif Type == 'Set' then
			Set(...);

		-- Process patching requests
		elseif Type == 'Patch' then
			Patch(...);

		-- Process member iteration requests
		elseif Type == 'All' then
			local Member = ... or Link;

			-- Set initial order
			local Order = Support.Keys(#Member);
			local OrderIndex = Support.FlipTable(Order);
			local OrderModifier = nil;

			return function (Modifier, Key)
				-- Iterate or accept modifiers

				-- Apply new order modifiers
				if Modifier and Modifier.Type == 'Sort' and Modifier ~= OrderModifier then

					-- Sort values by `Modifier.Field`, based on value type
					table.sort(Order, function (A, B)

						-- Get values at keys `A` and `B`
						local A, B = #Member[A][Modifier.Field], #Member[B][Modifier.Field];

						-- Compare string values
						if type(A) == 'string' and type(B) == 'string' then
							return A:lower() < B:lower();

						-- Compare number values
						elseif type(A) == 'number' and type(B) == 'number' then
							return A < B;
						end;

					end);

					-- Reverse table order if sort is decreasing
					if Modifier.Direction == 'Decreasing' then
						Order = Support.ReverseTable(Order);
					end;

					-- Update order index
					OrderIndex = Support.FlipTable(Order);

					-- Indicate modifier has been applied
					OrderModifier = Modifier;

				end;

				-- Get or initiate current key
				local Key = not Key and Order[1] or (OrderIndex[Key] and Order[OrderIndex[Key] + 1]);

				-- Return value
				return Key, Key and (#Member[Key] and Member[Key]), Key and OrderIndex[Key];

			end;

		end;
	end;

	function LinkMetatable.__unm(Link)
		-- Returns the link's raw path
		return {};
	end;
	
	-- Return the link object
	return Link;

end;

function Cheer.CreateSublink(AnchorLink, Index)
	-- Returns a sublink for the given anchor link's index

	-- Create the sublink
	local Link = newproxy(true);
	local LinkMetatable = getmetatable(Link);

	function LinkMetatable.__index(Link, Index)
		-- Create sublinks for each requested subpath
		return Cheer.CreateSublink(Link, Index);
	end;

	function LinkMetatable.__call(Link, Type, ...)

		-- Requests data from the anchor link
		if Type == 'Get' or Type == 'GetPath' then
			local Path = ... or {};

			-- Skip pathbuilding when index is nil
			if not Index then
				return nil;
			end;

			-- Register this sublink pass into the path
			table.insert(Path, 1, Index);

			-- Pass the built path so far to the anchor link
			return AnchorLink(Type, Path);

		-- Requests a subscription from the anchor structure
		elseif Type == 'Subscribe' then
			local Callback, Path = ...;
			return AnchorLink('Subscribe', Callback, Path or -Link)

		-- Requests a member iterator from the anchor link
		elseif Type == 'All' then
			local Member = ... or Link;
			return AnchorLink('All', Member);
		
		-- Requests a patch from the anchor link
		elseif Type == 'Patch' then
			local Difference = ...;
			return AnchorLink('Patch', Difference);
		end;

	end;

	function LinkMetatable.__unm(Link)
		-- Returns the link's raw path
		return Link('GetPath');
	end;

	function LinkMetatable.__len(Link)
		-- Returns subdata from anchor structure when called with #
		return Link('Get');
	end;

	function LinkMetatable.__newindex(Link, Key, Value)
		-- Patch a new value into the requested subpath

		-- Form path for change
		local Path = -Link;
		table.insert(Path, Key);

		-- Trigger patch
		Link('Patch', { Path = Path, Value = Value });

	end;

	-- Return the sublink object
	return Link;

end;

function Cheer.GetStructureDiff(A, B, Path)
	-- Returns differences in structure B from A, with optional `Path` table for location-tracking

	local Differences = {};

	-- Keep track of reviewed indices in structure A
	local ReviewedIndices = {};

	-- For non-tables, compare differences directly
	if type(A) ~= 'table' or type(B) ~= 'table' then
		if A ~= B then
			table.insert(Differences, {
				Path = {},
				Value = B
			});
		end;
		return Differences;
	end;

	-- Go through all indices in A
	for Index in pairs(A) do

		-- Mark the index as reviewed
		ReviewedIndices[Index] = true;

		-- Compare table differences
		if type(A[Index]) == 'table' and type(B[Index]) == 'table' then

			-- Keep track of the search path
			local Path = Path and Support.CloneTable(Path) or {};
			table.insert(Path, Index);

			-- Take note of any differences
			Support.ConcatTable(Differences, Cheer.GetStructureDiff(A[Index], B[Index], Path));

		-- Compare other differences and take note of their path
		elseif A[Index] ~= B[Index] then
			table.insert(Differences, {
				Path = Support.ConcatTable(Path and Support.CloneTable(Path) or {}, { Index }),
				Value = B[Index]
			});

		end;

	end;

	-- Go through all unreviewed indices in B
	for Index in pairs(B) do
		if not ReviewedIndices[Index] then

			-- Take note of differences and their path
			table.insert(Differences, {
				Path = Support.ConcatTable(Path and Support.CloneTable(Path) or {}, { Index }),
				Value = B[Index];
			});

		end;
	end;

	-- Return the differences
	return Differences;

end;

function Cheer.DoesPathMatch(Path, Test, Propagate)
	-- Returns whether the test path matches `Path`, optionally propagating up

	-- Go through the test path's indices and ensure they're in `Path` (otherwise fail)
	for Index, PathIndex in ipairs(Test) do
		if Path[Index] ~= Test[Index] then
			return false;
		end;
	end;

	-- If paths aren't of same length but match so far, pass if propagating
	if #Test ~= #Path then
		return Propagate and true or false;
	end;

	-- If it's an exact match, pass
	return true;

end;

function Cheer.Clamp(Minimum, Maximum)
	-- Returns a Cheer filter clamping the passed numbers with the given parameters

	return function (...)

		local Args = { ... };
		local FilteredArgs = {};

		for Index, Arg in ipairs(Args) do

			-- Clamp each argument
			if Arg and Minimum and Arg < Minimum then
				Arg = Minimum;
			elseif Arg and Maximum and Arg > Maximum then
				Arg = Maximum;
			end;

			-- Index the filtered argument
			FilteredArgs[Index] = Arg;

		end;

		-- Return the filtered arguments
		return unpack(FilteredArgs);

	end;

end;

function Cheer.Divide(Divisor)
	-- Returns a Cheer filter dividing the passed numbers by the given `Divisor`

	return function (...)

		local Args = { ... };
		local FilteredArgs = {};

		for Index, Arg in ipairs(Args) do

			-- Divide each argument
			Arg = Arg / Divisor;

			-- Index the filtered argument
			FilteredArgs[Index] = Arg;

		end;

		-- Return the filtered arguments
		return unpack(FilteredArgs);

	end;

end;

function Cheer.Multiply(Multiplier)
	-- Returns a Cheer filter multiplying the passed numbers by the given `Multiplier`

	return function (...)

		local Args = { ... };
		local FilteredArgs = {};

		for Index, Arg in ipairs(Args) do

			-- Multiply each argument
			Arg = Arg * Multiplier;

			-- Index the filtered argument
			FilteredArgs[Index] = Arg;

		end;

		-- Return the filtered arguments
		return unpack(FilteredArgs);

	end;

end;

function Cheer.Append(String)
	-- Returns a Cheer filter appending `String` to the passed strings

	return function (...)

		local Args = { ... };
		local FilteredArgs = {};

		for Index, Arg in ipairs(Args) do

			-- Append to each string
			Arg = Arg .. String;

			-- Index the filtered argument
			FilteredArgs[Index] = Arg;

		end;

		-- Return the filtered arguments
		return unpack(FilteredArgs);

	end;

end;

function Cheer.Round(Places)
	-- Returns a Cheer filter which rounds passed numbers to the given number of decimal places

	return function (...)

		local Args = { ... };
		local FilteredArgs = {};

		for Index, Arg in ipairs(Args) do

			-- Round each number
			Arg = Support.Round(Arg, Places);

			-- Index the filtered argument
			FilteredArgs[Index] = Arg;

		end;

		-- Return the filtered arguments
		return unpack(FilteredArgs);

	end;

end;

function Cheer.Return(...)
	-- Returns a Cheer filter which returns the given arguments

	-- Store passed args
	local Args = { ... };

	-- Return passed args when called
	return function ()
		return unpack(Args);
	end;

end;

function Cheer.ToBoolean(...)
	-- Cheer filter returning boolean equivalents of passed arguments

	local Args = { ... };

	-- Process each argument
	for Index, Arg in ipairs(Args) do

		-- Convert the argument
		Args[Index] = not (not Args);

	end;

	-- Return the filtered arguments
	return unpack(Args);

end;

function Cheer.Matches(...)
	-- Returns a Cheer filter which returns whether the passed arguments match the given arguments

	-- Store passed args
	local TargetArgs = { ... };

	-- Return match result when called
	return function (...)
		local Args = { ... };

		-- Check each argument against the target arguments
		for ArgIndex, TargetArg in ipairs(TargetArgs) do
			if Args[ArgIndex] ~= TargetArg then

				-- Return a mismatch result at first mismatch
				return false;

			end;
		end;

		-- Return a matching result if no mismatches
		return true;
	end;

end;

function Cheer.Set(Object, Member)
	-- Returns a Cheer destination which sets member `Member` of `Object` to passed value

	return function (Value)
		Object[Member] = Value;
	end;

end;

-- Provide iteration sorting modifiers
Cheer.Sorted = setmetatable({}, {

	-- Allow increasing sort modifiers
	__add = function (Self, SortingField)
		return { Type = 'Sort', Field = SortingField, Direction = 'Increasing' };
	end;

	-- Allow decreasing sort modifiers
	__sub = function (Self, SortingField)
		return { Type = 'Sort', Field = SortingField, Direction = 'Decreasing' };
	end;

});

setmetatable(Cheer, {

	-- Enable syntactic sugar for loading components
	__call = function (Cheer, ...)

		local ArgCount = #{...};

		-- Direct loading
		if ArgCount == 1 then
			return Cheer.LoadComponent(...);

		-- Template instance loading
		elseif ArgCount == 2 then
			return Cheer.FromTemplate(...);
		end;

	end;

});

return Cheer;
end;
};
G2L_MODULES[G2L["4ad"]] = {
Closure = function()
    local script = G2L["4ad"];
---	Manages the cleaning of events and other things.
-- Useful for encapsulating state and make deconstructors easy
-- @classmod Maid
-- @see Signal

local Maid = {}
Maid.ClassName = "Maid"

--- Returns a new Maid object
-- @constructor Maid.new()
-- @treturn Maid
function Maid.new()
	local self = {}

	self._tasks = {}

	return setmetatable(self, Maid)
end

--- Returns Maid[key] if not part of Maid metatable
-- @return Maid[key] value
function Maid:__index(index)
	if Maid[index] then
		return Maid[index]
	else
		return self._tasks[index]
	end
end

--- Add a task to clean up
-- @usage
-- Maid[key] = (function)         Adds a task to perform
-- Maid[key] = (event connection) Manages an event connection
-- Maid[key] = (Maid)             Maids can act as an event connection, allowing a Maid to have other maids to clean up.
-- Maid[key] = (Object)           Maids can cleanup objects with a `Destroy` method
-- Maid[key] = nil                Removes a named task. If the task is an event, it is disconnected. If it is an object, it is destroyed.
function Maid:__newindex(index, newTask)
	if Maid[index] ~= nil then
		error(("'%s' is reserved"):format(tostring(index)), 2)
	end

	local tasks = self._tasks
	local oldTask = tasks[index]
	tasks[index] = newTask

	if oldTask then
		if type(oldTask) == "function" then
			oldTask()
		elseif typeof(oldTask) == "RBXScriptConnection" then
			oldTask:Disconnect()
		elseif oldTask.Destroy then
			oldTask:Destroy()
		end
	end
end

--- Same as indexing, but uses an incremented number as a key.
-- @param task An item to clean
-- @treturn number taskId
function Maid:GiveTask(task)
	assert(task)
	local taskId = #self._tasks+1
	self[taskId] = task
	return taskId
end

--- Cleans up all tasks.
-- @alias Destroy
function Maid:DoCleaning()
	local tasks = self._tasks

	-- Disconnect all events first as we know this is safe
	for index, task in pairs(tasks) do
		if typeof(task) == "RBXScriptConnection" then
			tasks[index] = nil
			task:Disconnect()
		end
	end

	-- Clear out tasks table completely, even if clean up tasks add more tasks to the maid
	local index, task = next(tasks)
	while task ~= nil do
		tasks[index] = nil
		if type(task) == "function" then
			task()
		elseif typeof(task) == "RBXScriptConnection" then
			task:Disconnect()
		elseif task.Destroy then
			task:Destroy()
		end
		index, task = next(tasks)
	end
end

--- Alias for DoCleaning()
-- @function Destroy
Maid.Destroy = Maid.DoCleaning

return Maid
end;
};
G2L_MODULES[G2L["4ae"]] = {
Closure = function()
    local script = G2L["4ae"];
local RunService = game:GetService 'RunService'
local Workspace = game:GetService 'Workspace'
local Players = game:GetService 'Players'
local ContextActionService = game:GetService 'ContextActionService'
local UserInputService = game:GetService 'UserInputService'
local GuiService = game:GetService 'GuiService'

-- Libraries
local Maid = require(script.Parent:WaitForChild 'Maid')
local Support = require(script.Parent:WaitForChild 'SupportLibrary')

-- Create class
local Handles = {}
Handles.__index = Handles

function Handles.new(Options)
    local self = setmetatable({}, Handles)

    -- Create maid for cleanup on destroyal
    self.Maid = Maid.new()

    -- Create UI container
    local Gui = Instance.new('ScreenGui')
    self.Gui = Gui
    Gui.Name = 'BTHandles'
    Gui.IgnoreGuiInset = true
    self.Maid.Gui = Gui

    -- Create interface
    self.IsMouseAvailable = UserInputService.MouseEnabled
    self:CreateHandles(Options)

    -- Get camera and viewport information
    self.Camera = Workspace.CurrentCamera
    self.GuiInset = GuiService:GetGuiInset()

    -- Get list of ignorable handle obstacles
    self.ObstacleBlacklistIndex = Support.FlipTable(Options.ObstacleBlacklist or {})
    self.ObstacleBlacklist = Support.Keys(self.ObstacleBlacklistIndex)

    -- Enable handle
    self:SetAdornee(Options.Adornee)
    self.Gui.Parent = Options.Parent

    -- Return new handles
    return self
end

function Handles:CreateHandles(Options)
    self.Handles = {}
    self.HandleStates = {}

    -- Generate a handle for each side
    for _, Side in ipairs(Enum.NormalId:GetEnumItems()) do

        -- Create handle
        local Handle = Instance.new('ImageButton')
        Handle.Name = Side.Name
        Handle.Image = 'rbxassetid://2347145012'
        Handle.ImageColor3 = Options.Color
        Handle.ImageTransparency = 0.33
        Handle.AnchorPoint = Vector2.new(0.5, 0.5)
        Handle.BackgroundTransparency = 1
        Handle.BorderSizePixel = 0
        Handle.ZIndex = 1

        -- Create handle dot
        local HandleDot = Handle:Clone()
        HandleDot.Active = false
        HandleDot.Size = UDim2.new(0, 4, 0, 4)
        HandleDot.Position = UDim2.new(0.5, 0, 0.5, 0)
        HandleDot.Parent = Handle
        HandleDot.ZIndex = 0

        -- Create maid for handle cleanup
        local HandleMaid = Maid.new()
        self.Maid[Side.Name] = HandleMaid

        -- Add handle hover effect
        HandleMaid.HoverStart = Handle.MouseEnter:Connect(function ()
            Handle.ImageTransparency = 0
        end)
        HandleMaid.HoverEnd = Handle.MouseLeave:Connect(function ()
            Handle.ImageTransparency = 0.33
        end)

        -- Listen for handle interactions on click
        HandleMaid.DragStart = Handle.MouseButton1Down:Connect(function (X, Y)
            local HandleState = self.HandleStates[Handle]
            local HandlePlane = HandleState.PlaneNormal
            local HandleNormal = HandleState.HandleNormal
            local HandleWorldPoint = HandleState.HandleCFrame.Position
            local HandleAxisLine = (HandleState.HandleViewportPosition - HandleState.AdorneeViewportPosition).Unit

            -- Project viewport aim point onto 2D handle axis line
            local AimAdorneeViewportOffset = Vector2.new(X, Y) - HandleState.AdorneeViewportPosition
            local MappedViewportPointOnAxis = HandleAxisLine:Dot(AimAdorneeViewportOffset) * HandleAxisLine +
                HandleState.AdorneeViewportPosition

            -- Map projected viewport aim point onto 3D handle axis line
            local AimRay = self.Camera:ViewportPointToRay(MappedViewportPointOnAxis.X, MappedViewportPointOnAxis.Y)
            local AimDistance = (HandleWorldPoint - AimRay.Origin):Dot(HandlePlane) / AimRay.Direction:Dot(HandlePlane)
            local AimWorldPoint = (AimDistance * AimRay.Direction) + AimRay.Origin

            -- Calculate dragging distance offset
            local DragDistanceOffset = HandleNormal:Dot(AimWorldPoint - HandleWorldPoint)

            -- Run drag start callback
            if Options.OnDragStart then
                Options.OnDragStart()
            end

            local function ProcessDragChange(AimScreenPoint)
                local HandleAxisLine = (HandleState.HandleViewportPosition - HandleState.AdorneeViewportPosition).Unit

                -- Project screen aim point onto 2D handle axis line
                local AdorneeScreenPosition = HandleState.AdorneeViewportPosition - self.GuiInset
                local AimAdorneeScreenOffset = Vector2.new(AimScreenPoint.X, AimScreenPoint.Y) - AdorneeScreenPosition
                local MappedScreenPointOnAxis = HandleAxisLine:Dot(AimAdorneeScreenOffset) * HandleAxisLine +
                    AdorneeScreenPosition

                -- Map projected screen aim point onto 3D handle axis line
                local AimRay = self.Camera:ScreenPointToRay(MappedScreenPointOnAxis.X, MappedScreenPointOnAxis.Y)
                local AimDistance = (HandleWorldPoint - AimRay.Origin):Dot(HandlePlane) / AimRay.Direction:Dot(HandlePlane)
                local AimWorldPoint = (AimDistance * AimRay.Direction) + AimRay.Origin

                -- Calculate distance dragged
                local DragDistance = HandleNormal:Dot(AimWorldPoint - HandleWorldPoint) - DragDistanceOffset

                -- Run drag step callback
                if Options.OnDrag then
                    Options.OnDrag(Side, DragDistance)
                end

            end

            -- Create maid for dragging cleanup
            local DragMaid = Maid.new()
            HandleMaid.Dragging = DragMaid

            -- Perform dragging when aiming anywhere (except handle)
            DragMaid.Drag = Support.AddUserInputListener('Changed', {'MouseMovement', 'Touch'}, true, function (Input)
                ProcessDragChange(Input.Position)
            end)

            -- Perform dragging while aiming at handle
            DragMaid.InHandleDrag = Handle.MouseMoved:Connect(function (X, Y)
                local AimScreenPoint = Vector2.new(X, Y) - self.GuiInset
                ProcessDragChange(AimScreenPoint)
            end)

            -- Finish dragging when input ends
            DragMaid.DragEnd = Support.AddUserInputListener('Ended', {'MouseButton1', 'Touch'}, true, function (Input)
                HandleMaid.Dragging = nil
            end)

            -- Fire callback when dragging ends
            DragMaid.Callback = function ()
                coroutine.wrap(Options.OnDragEnd)()
            end

        end)

        -- Finish dragging when input ends while aiming at handle
        HandleMaid.InHandleDragEnd = Handle.MouseButton1Up:Connect(function ()
            HandleMaid.Dragging = nil
        end)

        -- Save handle
        Handle.Parent = self.Gui
        self.Handles[Side.Name] = Handle

    end

end

function Handles:Hide()

    -- Make sure handles are enabled
    if not self.Running then
        return self
    end

    -- Pause updating
    self:Pause()

    -- Hide UI
    self.Gui.Enabled = false

end

function Handles:Pause()
    self.Running = false
end

local function IsFirstPerson(Camera)
    return (Camera.CFrame.p - Camera.Focus.p).magnitude <= 0.6
end

function Handles:Resume()

    -- Make sure handles are disabled
    if self.Running then
        return self
    end

    -- Allow handles to run
    self.Running = true

    -- Keep handle positions updated
    for Side, Handle in pairs(self.Handles) do
        local UnitVector = Vector3.FromNormalId(Side)
        coroutine.wrap(function ()
            while self.Running do
                self:UpdateHandle(Handle, UnitVector)
                RunService.RenderStepped:Wait()
            end
        end)()
    end

    -- Ignore character whenever character enters first person
    if Players.LocalPlayer then
        coroutine.wrap(function ()
            while self.Running do
                local FirstPerson = IsFirstPerson(self.Camera)
                local Character = Players.LocalPlayer.Character
                if Character then
                    self.ObstacleBlacklistIndex[Character] = FirstPerson and true or nil
                    self.ObstacleBlacklist = Support.Keys(self.ObstacleBlacklistIndex)
                end
                wait(0.2)
            end
        end)()
    end

    -- Show UI
    self.Gui.Enabled = true

end

function Handles:SetAdornee(Item)
    -- Return self for chaining

    -- Save new adornee
    self.Adornee = Item
    self.IsAdorneeModel = Item and (Item:IsA 'Model') or nil

    -- Resume handles
    if Item then
        self:Resume()
    else
        self:Hide()
    end

    -- Return handles for chaining
    return self

end

local function WorldToViewportPoint(Camera, Position)

    -- Get viewport position for point
    local ViewportPoint, Visible = Camera:WorldToViewportPoint(Position)
    local CameraDepth = ViewportPoint.Z
    ViewportPoint = Vector2.new(ViewportPoint.X, ViewportPoint.Y)

    -- Adjust position if point is behind camera
    if CameraDepth < 0 then
        ViewportPoint = Camera.ViewportSize - ViewportPoint
    end

    -- Return point and visibility
    return ViewportPoint, CameraDepth, Visible

end

function Handles:BlacklistObstacle(Obstacle)
    if Obstacle then
        self.ObstacleBlacklistIndex[Obstacle] = true
        self.ObstacleBlacklist = Support.Keys(self.ObstacleBlacklistIndex)
    end
end

function Handles:UpdateHandle(Handle, SideUnitVector)
    local Camera = self.Camera

    -- Hide handles if not attached to an adornee
    if not self.Adornee then
        Handle.Visible = false
        return
    end

    -- Get adornee CFrame and size
    local AdorneeCFrame = self.IsAdorneeModel and
        self.Adornee:GetModelCFrame() or
        self.Adornee.CFrame
    local AdorneeSize = self.IsAdorneeModel and
        self.Adornee:GetModelSize() or
        self.Adornee.Size

    -- Calculate radius of adornee extents along axis
    local AdorneeRadius = (AdorneeSize * SideUnitVector / 2).magnitude
    local SideCFrame = AdorneeCFrame * CFrame.new(AdorneeRadius * SideUnitVector)
    local AdorneeViewportPoint, AdorneeCameraDepth = WorldToViewportPoint(Camera, SideCFrame.p)
    local StudWidth = 2 * math.tan(math.rad(Camera.FieldOfView) / 2) * AdorneeCameraDepth
    local StudsPerPixel = StudWidth / Camera.ViewportSize.X
    local HandlePadding = math.max(1, StudsPerPixel * 14) * (self.IsMouseAvailable and 1 or 1.6)
    local PaddedRadius = AdorneeRadius + 2 * HandlePadding

    -- Calculate CFrame of the handle's side
    local HandleCFrame = AdorneeCFrame * CFrame.new(PaddedRadius * SideUnitVector)
    local HandleNormal = (HandleCFrame.p - AdorneeCFrame.p).unit
    local HandleViewportPoint, HandleCameraDepth, HandleVisible = WorldToViewportPoint(Camera, HandleCFrame.p)

    -- Display handle if side is visible to the camera
    Handle.Visible = HandleVisible

    -- Calculate handle size (12 px, or at least 0.5 studs)
    local StudWidth = 2 * math.tan(math.rad(Camera.FieldOfView) / 2) * HandleCameraDepth
    local PixelsPerStud = Camera.ViewportSize.X / StudWidth
    local HandleSize = math.max(12, 0.5 * PixelsPerStud) * (self.IsMouseAvailable and 1 or 1.6)
    Handle.Size = UDim2.new(0, HandleSize, 0, HandleSize)

    -- Calculate where handles will appear on the screen
    Handle.Position = UDim2.new(
        0, HandleViewportPoint.X,
        0, HandleViewportPoint.Y
    )

    -- Calculate where handles will appear in the world
    local HandlePlaneNormal = (Handle.Name == 'Top' or Handle.Name == 'Bottom') and
        AdorneeCFrame.LookVector or
        AdorneeCFrame.UpVector

    -- Save handle position
    local HandleState = self.HandleStates[Handle] or {}
    self.HandleStates[Handle] = HandleState
    HandleState.PlaneNormal = HandlePlaneNormal
    HandleState.HandleCFrame = HandleCFrame
    HandleState.HandleNormal = HandleNormal
    HandleState.AdorneeViewportPosition = AdorneeViewportPoint
    HandleState.HandleViewportPosition = HandleViewportPoint
    
    -- Hide handles if obscured by a non-blacklisted part
    local HandleRay = Camera:ViewportPointToRay(HandleViewportPoint.X, HandleViewportPoint.Y)
    local TargetRay = Ray.new(HandleRay.Origin, HandleRay.Direction * (HandleCameraDepth - 0.25))
    local Target, TargetPoint = Workspace:FindPartOnRayWithIgnoreList(TargetRay, self.ObstacleBlacklist)
    if Target then
        Handle.ImageTransparency = 1
    elseif Handle.ImageTransparency == 1 then
        Handle.ImageTransparency = 0.33
    end

end

function Handles:Destroy()

    -- Pause updating
    self.Running = nil

    -- Clean up resources
    self.Maid:Destroy()

end

return Handles
end;
};
G2L_MODULES[G2L["4af"]] = {
Closure = function()
    local script = G2L["4af"];
local RunService = game:GetService 'RunService'
local Workspace = game:GetService 'Workspace'
local Players = game:GetService 'Players'
local ContextActionService = game:GetService 'ContextActionService'
local UserInputService = game:GetService 'UserInputService'
local GuiService = game:GetService 'GuiService'

-- Libraries
local Maid = require(script.Parent:WaitForChild 'Maid')
local Support = require(script.Parent:WaitForChild 'SupportLibrary')

-- Create class
local ArcHandles = {}
ArcHandles.__index = ArcHandles

-- Mapping side handles to axes
ArcHandles.SideToAxis = {
    Top = 'Z',
    Bottom = 'Z',
    Left = 'Y',
    Right = 'Y',
    Front = 'X',
    Back = 'X'
}
ArcHandles.AxisToSide = {
    X = 'Front',
    Y = 'Right',
    Z = 'Top'
}

-- Colors for axis circles
ArcHandles.AxisColors = {
    X = Color3.new(1, 0, 0),
    Y = Color3.new(0, 1, 0),
    Z = Color3.new(0, 0, 1)
}

-- Number of lines used to draw axis circles
ArcHandles.CircleSlices = 60

function ArcHandles.new(Options)
    local self = setmetatable({}, ArcHandles)

    -- Create maid for cleanup on destroyal
    self.Maid = Maid.new()

    -- Create UI container
    local Gui = Instance.new('ScreenGui')
    self.Gui = Gui
    Gui.Name = 'BTArcHandles'
    Gui.IgnoreGuiInset = true
    self.Maid.Gui = Gui

    -- Create interface
    self.IsMouseAvailable = UserInputService.MouseEnabled
    self:CreateCircles()
    self:CreateHandles(Options)

    -- Get camera and viewport information
    self.Camera = Workspace.CurrentCamera
    self.GuiInset = GuiService:GetGuiInset()

    -- Get list of ignorable handle obstacles
    self.ObstacleBlacklistIndex = Support.FlipTable(Options.ObstacleBlacklist or {})
    self.ObstacleBlacklist = Support.Keys(self.ObstacleBlacklistIndex)

    -- Enable handles
    self:SetAdornee(Options.Adornee)
    self.Gui.Parent = Options.Parent

    -- Return new handles
    return self
end

function ArcHandles:CreateCircles()
    
    -- Create folder to contain circles
    local CircleFolder = Instance.new('Folder')
    CircleFolder.Name = 'AxisCircles'
    CircleFolder.Parent = self.Gui
    local Circles = {}
    self.AxisCircles = Circles

    -- Determine angle for each circle slice
    local CircleSliceAngle = 2 * math.pi / self.CircleSlices

    -- Set up each axis
    for _, Axis in ipairs(Enum.Axis:GetEnumItems()) do
        local AxisColor = self.AxisColors[Axis.Name]

        -- Create container for circle
        local Circle = Instance.new('Folder', CircleFolder)
        Circle.Name = Axis.Name
        local Lines = {}
        Circles[Axis.Name] = Lines

        -- Create lines for circle
        for i = 1, self.CircleSlices do
            local Line = Instance.new 'CylinderHandleAdornment'
            Line.Transparency = 0.4
            Line.Color3 = AxisColor
            Line.Radius = 0
            Line.Height = 0
            Line.Parent = Circle
            Lines[i] = Line
        end
    end

end

function ArcHandles:CreateHandles(Options)

    -- Create folder to contain handles
    local HandlesFolder = Instance.new('Folder')
    HandlesFolder.Name = 'Handles'
    HandlesFolder.Parent = self.Gui
    self.Handles = {}
    self.HandleStates = {}

    -- Generate a handle for each side
    for _, Side in ipairs(Enum.NormalId:GetEnumItems()) do

        -- Get axis information
        local Axis = self.SideToAxis[Side.Name]
        local AxisColor = self.AxisColors[Axis]

        -- Create handle
        local Handle = Instance.new('ImageButton')
        Handle.Name = Side.Name
        Handle.Image = 'rbxassetid://2347145012'
        Handle.ImageColor3 = AxisColor
        Handle.ImageTransparency = 0.33
        Handle.AnchorPoint = Vector2.new(0.5, 0.5)
        Handle.BackgroundTransparency = 1
        Handle.BorderSizePixel = 0
        Handle.ZIndex = 1

        -- Create handle dot
        local HandleDot = Handle:Clone()
        HandleDot.Active = false
        HandleDot.Size = UDim2.new(0, 4, 0, 4)
        HandleDot.Position = UDim2.new(0.5, 0, 0.5, 0)
        HandleDot.Parent = Handle
        HandleDot.ZIndex = 0

        -- Create maid for handle cleanup
        local HandleMaid = Maid.new()
        self.Maid[Side.Name] = HandleMaid

        -- Add handle hover effect
        HandleMaid.HoverStart = Handle.MouseEnter:Connect(function ()
            Handle.ImageTransparency = 0
            self:SetCircleTransparency(Axis, 0)
        end)
        HandleMaid.HoverEnd = Handle.MouseLeave:Connect(function ()
            Handle.ImageTransparency = 0.33
            self:SetCircleTransparency(Axis, 0.4)
        end)

        -- Listen for handle interactions on click
        HandleMaid.DragStart = Handle.MouseButton1Down:Connect(function (X, Y)
            local InitialHandlePlane = self.HandleStates[Handle].PlaneNormal
            local InitialHandleCFrame = self.HandleStates[Handle].HandleCFrame
            local InitialAdorneeCFrame = self.HandleStates[Handle].AdorneeCFrame

            -- Calculate aim offset
            local AimRay = self.Camera:ViewportPointToRay(X, Y)
            local AimDistance = (InitialHandleCFrame.p - AimRay.Origin):Dot(InitialHandlePlane) / AimRay.Direction:Dot(InitialHandlePlane)
            local AimWorldPoint = (AimDistance * AimRay.Direction) + AimRay.Origin
            local InitialDragOffset = InitialAdorneeCFrame:PointToObjectSpace(AimWorldPoint)

            -- Run callback
            if Options.OnDragStart then
                Options.OnDragStart()
            end

            local function ProcessDragChange(AimScreenPoint)

                -- Calculate current aim
                local AimRay = self.Camera:ScreenPointToRay(AimScreenPoint.X, AimScreenPoint.Y)
                local AimDistance = (InitialHandleCFrame.p - AimRay.Origin):Dot(InitialHandlePlane) / AimRay.Direction:Dot(InitialHandlePlane)
                local AimWorldPoint = (AimDistance * AimRay.Direction) + AimRay.Origin
                local CurrentDragOffset = InitialAdorneeCFrame:PointToObjectSpace(AimWorldPoint)

                -- Calculate angle on dragged axis
                local DragAngle
                if Axis == 'X' then
                    local InitialAngle = math.atan2(InitialDragOffset.Y, -InitialDragOffset.Z)
                    DragAngle = math.atan2(CurrentDragOffset.Y, -CurrentDragOffset.Z) - InitialAngle
                elseif Axis == 'Y' then
                    local InitialAngle = math.atan2(InitialDragOffset.X, InitialDragOffset.Z)
                    DragAngle = math.atan2(CurrentDragOffset.X, CurrentDragOffset.Z) - InitialAngle
                elseif Axis == 'Z' then
                    local InitialAngle = math.atan2(InitialDragOffset.X, InitialDragOffset.Y)
                    DragAngle = math.atan2(-CurrentDragOffset.X, CurrentDragOffset.Y) - InitialAngle
                end

                -- Run drag callback
                if Options.OnDrag then
                    Options.OnDrag(Axis, DragAngle)
                end

            end

            -- Create maid for dragging cleanup
            local DragMaid = Maid.new()
            HandleMaid.Dragging = DragMaid

            -- Perform dragging when aiming anywhere (except handle)
            DragMaid.Drag = Support.AddUserInputListener('Changed', {'MouseMovement', 'Touch'}, true, function (Input)
                ProcessDragChange(Input.Position)
            end)

            -- Perform dragging while aiming at handle
            DragMaid.InHandleDrag = Handle.MouseMoved:Connect(function (X, Y)
                local AimScreenPoint = Vector2.new(X, Y) - self.GuiInset
                ProcessDragChange(AimScreenPoint)
            end)

            -- Finish dragging when input ends
            DragMaid.DragEnd = Support.AddUserInputListener('Ended', {'MouseButton1', 'Touch'}, true, function (Input)
                HandleMaid.Dragging = nil
            end)

            -- Fire callback when dragging ends
            DragMaid.Callback = function ()
                coroutine.wrap(Options.OnDragEnd)()
            end

        end)

        -- Finish dragging when input ends while aiming at handle
        HandleMaid.InHandleDragEnd = Handle.MouseButton1Up:Connect(function ()
            HandleMaid.Dragging = nil
        end)

        -- Save handle
        Handle.Parent = HandlesFolder
        self.Handles[Side.Name] = Handle

    end

end

function ArcHandles:Hide()

    -- Make sure handles are enabled
    if not self.Running then
        return self
    end

    -- Pause updating
    self:Pause()

    -- Hide UI
    self.Gui.Enabled = false

end

function ArcHandles:Pause()
    self.Running = false
end

local function IsFirstPerson(Camera)
    return (Camera.CFrame.p - Camera.Focus.p).magnitude <= 0.6
end

function ArcHandles:Resume()

    -- Make sure handles are disabled
    if self.Running then
        return self
    end

    -- Allow handles to run
    self.Running = true

    -- Update each handle
    for Side, Handle in pairs(self.Handles) do
        coroutine.wrap(function ()
            while self.Running do
                self:UpdateHandle(Side, Handle)
                RunService.RenderStepped:Wait()
            end
        end)()
    end

    -- Update each axis circle
    for Axis, Lines in pairs(self.AxisCircles) do
        coroutine.wrap(function ()
            while self.Running do
                self:UpdateCircle(Axis, Lines)
                RunService.RenderStepped:Wait()
            end
        end)()
    end

    -- Ignore character whenever character enters first person
    if Players.LocalPlayer then
        coroutine.wrap(function ()
            while self.Running do
                local FirstPerson = IsFirstPerson(self.Camera)
                local Character = Players.LocalPlayer.Character
                if Character then
                    self.ObstacleBlacklistIndex[Character] = FirstPerson and true or nil
                    self.ObstacleBlacklist = Support.Keys(self.ObstacleBlacklistIndex)
                end
                wait(0.2)
            end
        end)()
    end

    -- Show UI
    self.Gui.Enabled = true

end

function ArcHandles:SetAdornee(Item)
    -- Return self for chaining

    -- Save new adornee
    self.Adornee = Item
    self.IsAdorneeModel = Item and (Item:IsA 'Model') or nil

    -- Attach axis circles to adornee
    for Axis, Lines in pairs(self.AxisCircles) do
        for _, Line in ipairs(Lines) do
            Line.Adornee = Item
        end
    end

    -- Resume handles
    if Item then
        self:Resume()
    else
        self:Hide()
    end

    -- Return handles for chaining
    return self

end

function ArcHandles:SetCircleTransparency(Axis, Transparency)
    for _, Line in ipairs(self.AxisCircles[Axis]) do
        Line.Transparency = Transparency
    end
end

local function WorldToViewportPoint(Camera, Position)

    -- Get viewport position for point
    local ViewportPoint, Visible = Camera:WorldToViewportPoint(Position)
    local CameraDepth = ViewportPoint.Z
    ViewportPoint = Vector2.new(ViewportPoint.X, ViewportPoint.Y)

    -- Adjust position if point is behind camera
    if CameraDepth < 0 then
        ViewportPoint = Camera.ViewportSize - ViewportPoint
    end

    -- Return point and visibility
    return ViewportPoint, CameraDepth, Visible

end

function ArcHandles:BlacklistObstacle(Obstacle)
    if Obstacle then
        self.ObstacleBlacklistIndex[Obstacle] = true
        self.ObstacleBlacklist = Support.Keys(self.ObstacleBlacklistIndex)
    end
end

function ArcHandles:UpdateHandle(Side, Handle)
    local Camera = self.Camera

    -- Hide handles if not attached to an adornee
    if not self.Adornee then
        Handle.Visible = false
        return
    end

    -- Get adornee CFrame and size
    local AdorneeCFrame = self.IsAdorneeModel and
        self.Adornee:GetModelCFrame() or
        self.Adornee.CFrame
    local AdorneeSize = self.IsAdorneeModel and
        self.Adornee:GetModelSize() or
        self.Adornee.Size

    -- Calculate radius of adornee extents
    local ViewportPoint, CameraDepth, Visible = WorldToViewportPoint(Camera, AdorneeCFrame.p)
    local StudWidth = 2 * math.tan(math.rad(Camera.FieldOfView) / 2) * CameraDepth
    local StudsPerPixel = StudWidth / Camera.ViewportSize.X
    local HandlePadding = math.max(1, StudsPerPixel * 14) * (self.IsMouseAvailable and 1 or 1.6)
    local AdorneeRadius = AdorneeSize.magnitude / 2
    local Radius = AdorneeRadius + 2 * HandlePadding

    -- Calculate CFrame of the handle's side
    local SideUnitVector = Vector3.FromNormalId(Side)
    local HandleCFrame = AdorneeCFrame * CFrame.new(Radius * SideUnitVector)
    local AxisCFrame = AdorneeCFrame * Vector3.FromAxis(self.SideToAxis[Side])
    local HandleNormal = (AxisCFrame - AdorneeCFrame.p).unit

    -- Get viewport position of adornee and the side the handle will be on
    local HandleViewportPoint, HandleCameraDepth, HandleVisible = WorldToViewportPoint(Camera, HandleCFrame.p)

    -- Display handle if side is visible to the camera
    Handle.Visible = HandleVisible

    -- Calculate handle size (12 px, or at least 0.5 studs)
    local StudWidth = 2 * math.tan(math.rad(Camera.FieldOfView) / 2) * HandleCameraDepth
    local PixelsPerStud = Camera.ViewportSize.X / StudWidth
    local HandleSize = math.max(12, 0.5 * PixelsPerStud) * (self.IsMouseAvailable and 1 or 1.6)
    Handle.Size = UDim2.new(0, HandleSize, 0, HandleSize)

    -- Calculate where handles will appear on the screen
    Handle.Position = UDim2.new(
        0, HandleViewportPoint.X,
        0, HandleViewportPoint.Y
    )

    -- Save handle position
    local HandleState = self.HandleStates[Handle] or {}
    self.HandleStates[Handle] = HandleState
    HandleState.HandleCFrame = HandleCFrame
    HandleState.PlaneNormal = HandleNormal
    HandleState.AdorneeCFrame = AdorneeCFrame

    -- Hide handles if obscured by a non-blacklisted part
    local HandleRay = Camera:ViewportPointToRay(HandleViewportPoint.X, HandleViewportPoint.Y)
    local TargetRay = Ray.new(HandleRay.Origin, HandleRay.Direction * (HandleCameraDepth - 0.25))
    local Target, TargetPoint = Workspace:FindPartOnRayWithIgnoreList(TargetRay, self.ObstacleBlacklist)
    if Target then
        Handle.ImageTransparency = 1
    elseif Handle.ImageTransparency == 1 then
        Handle.ImageTransparency = 0.33
    end
end

function ArcHandles:UpdateCircle(Axis, Lines)
    local Camera = self.Camera

    -- Get adornee CFrame and size
    local AdorneeCFrame = self.IsAdorneeModel and
        self.Adornee:GetModelCFrame() or
        self.Adornee.CFrame
    local AdorneeSize = self.IsAdorneeModel and
        self.Adornee:GetModelSize() or
        self.Adornee.Size

    -- Get circle information
    local AxisVector = Vector3.FromAxis(Axis)
    local CircleVector = Vector3.FromNormalId(self.AxisToSide[Axis])

    -- Determine circle radius
    local ViewportPoint, CameraDepth, Visible = WorldToViewportPoint(Camera, AdorneeCFrame.p)
    local StudWidth = 2 * math.tan(math.rad(Camera.FieldOfView) / 2) * CameraDepth
    local StudsPerPixel = StudWidth / Camera.ViewportSize.X
    local HandlePadding = math.max(1, StudsPerPixel * 14) * (self.IsMouseAvailable and 1 or 1.6)
    local AdorneeRadius = AdorneeSize.magnitude / 2
    local Radius = AdorneeRadius + 2 * HandlePadding

    -- Determine angle of each circle slice
    local Angle = 2 * math.pi / #Lines

    -- Circle thickness (px)
    local Thickness = 1.5

    -- Redraw lines for circle
    for i, Line in ipairs(Lines) do

        -- Calculate arc's endpoints
        local From = CFrame.fromAxisAngle(AxisVector, Angle * (i - 1)) *
            (CircleVector * Radius)
        local To = CFrame.fromAxisAngle(AxisVector, Angle * i) *
            (CircleVector * Radius)
        local Center = From:Lerp(To, 0.5)

        -- Determine thickness of line (in studs)
        local ViewportPoint, CameraDepth, Visible = WorldToViewportPoint(Camera, AdorneeCFrame * Center)
        local StudWidth = 2 * math.tan(math.rad(Camera.FieldOfView) / 2) * CameraDepth
        local StudsPerPixel = StudWidth / Camera.ViewportSize.X
        Line.Radius = Thickness * StudsPerPixel / 2

        -- Position line between the endpoints
        Line.CFrame = CFrame.new(Center, To) *
            CFrame.new(0, 0, Line.Radius / 2)

        -- Make line span between endpoints
        Line.Height = (To - From).magnitude

    end
end

function ArcHandles:Destroy()

    -- Pause updating
    self.Running = nil

    -- Clean up resources
    self.Maid:Destroy()

end

return ArcHandles
end;
};
G2L_MODULES[G2L["4b0"]] = {
Closure = function()
    local script = G2L["4b0"];
-- Create class
local InstancePool = {}
InstancePool.__index = InstancePool

function InstancePool.new(Timeout, GenerateCallback, CleanupCallback)

    -- Prepare new pool
    local self = {
        Timeout = Timeout,
        Generate = GenerateCallback,
        Cleanup = CleanupCallback,
        All = {},
        Free = {},
        InUse = {},
        LastUse = {}
    }

    -- Return pool
    return setmetatable(self, InstancePool)

end

function InstancePool:Release(Instance)

    -- Log the last use of this instance
    local ReleaseTime = tick()
    self.LastUse[Instance] = ReleaseTime

    -- Remove instance if not used after timeout
    coroutine.resume(coroutine.create(function ()
        wait(self.Timeout)
        if self.LastUse[Instance] == ReleaseTime then
            self:Remove(Instance)
        end
    end))

    -- Run cleanup routine on instance
    self.Cleanup(Instance)

    -- Free instance
    self.InUse[Instance] = nil
    self.Free[Instance] = true

end

function InstancePool:Get()

    -- Get free instance, or generate a new one
    local Instance = next(self.Free) or self.Generate()

    -- Reserve instance
    self.Free[Instance] = nil
    self.LastUse[Instance] = nil
    self.All[Instance] = true
    self.InUse[Instance] = true

    -- Return instance
    return Instance

end

function InstancePool:Remove(Instance)
    self.Free[Instance] = nil
    self.InUse[Instance] = nil
    self.LastUse[Instance] = nil
    self.All[Instance] = nil
    Instance:Destroy()
end

function InstancePool:ReleaseAll()
    for Instance in pairs(self.InUse) do
        self:Release(Instance)
    end
end

function InstancePool.Generate()
    error('No instance generation callback specified', 2)
end

-- Default cleanup routine (can be overridden)
function InstancePool.Cleanup(Instance)
    Instance.Parent = nil
end

return InstancePool
end;
};
G2L_MODULES[G2L["4b1"]] = {
Closure = function()
    local script = G2L["4b1"];
-- Standard RoStrap Debugging Functions
-- @documentation https://rostrap.github.io/Libraries/Debug/
-- @rostrap Debug
-- @author Validark

local Debug = {}

function Debug.DirectoryToString(Object)
	--- Gets the string of the directory of an object, properly formatted
	-- string DirectoryToString(Object)
	-- @returns Objects location in proper Lua format
	-- @author Validark
	-- Corrects the built-in GetFullName function so that it returns properly formatted text.
	return (
		Object
			:GetFullName()
			:gsub("%.(%w*%s%w*)", "%[\"%1\"%]")
			:gsub("%.(%d+[%w%s]+)", "%[\"%1\"%]")
			:gsub("%.(%d+)", "%[%1%]")
		)
end

function Debug.Stringify(Data)
	-- Turns data into "TYPE_NAME NAME"
	local DataType = typeof(Data)
	local DataString

	if DataType == "Instance" then
		DataType = Data.ClassName
		DataString = Debug.DirectoryToString(Data)
	else
		DataString = tostring(Data)
	end
		
	return DataType == DataString and DataString or DataType .. " " .. DataString
end

local GetErrorData do
	-- Standard RoStrap Erroring system
	-- Prefixing errors with '!' makes Error expect the [error origin].Name as first parameter after Error string
	-- Past the initial Error string, subsequent arguments get unpacked in a string.format of the error string
	-- Arguments formmatted into the string get stringified (see above function)
	-- Assert falls back on Error
	-- Error blames the latest item on the traceback as the cause of the error
	-- Error makes it clear which Library and function are being misused
	-- @author Validark

	local Replacers = {
		["Index ?"] = "__index";
		["Newindex ?"] = "__newindex";
	}

	local function Format(String, ...)
		return String:format(...)
	end
	
	local CommandBar = {Name = "Command bar"}

	function GetErrorData(Err, ...) -- Make sure if you don't intend to format arguments in, you do %%f instead of %f
		local t = {...}

		local Traceback = debug.traceback()
		local ErrorDepth = select(2, Traceback:gsub("\n", "")) - 2

		local Prefix
		Err, Prefix = Err:gsub("^!", "", 1)
		local ModuleName = Prefix == 1 and table.remove(t, 1) or (getfenv(ErrorDepth).script or CommandBar).Name
		local FunctionName

		for i = 1, select("#", ...) do
			t[i] = Debug.Stringify(t[i])
		end

		for x in Traceback:sub(1, -11):gmatch("%- [^\r\n]+[\r\n]") do
			FunctionName = x
		end

		FunctionName = FunctionName:sub(3, -2):gsub("%l+ (%S+)$", "%1"):gsub("^%l", string.upper, 1):gsub(" ([^\n\r]+)", " %1", 1)

		local i = 0
		for x in Err:gmatch("%%%l") do
			i = i + 1
			if x == "%q" then
				t[i] = t[i]:gsub(" (%S+)$", " \"%1\"", 1)
			end
		end

		local Success, ErrorString = pcall(Format, "[%s] {%s} " .. Err:gsub("%%q", "%%s"), ModuleName, Replacers[FunctionName] or FunctionName, unpack(t))

		if Success then
			return ErrorString, ErrorDepth
		else
			error(GetErrorData("!Error formatting failed, perhaps try escaping non-formattable tags like so: %%%%f\n(Error Message): " .. ErrorString, "Debug"))
		end
	end

	function Debug.Warn(...)
		warn((GetErrorData(...)))
	end

	function Debug.Error(...)
		error(GetErrorData(...))
	end

	function Debug.Assert(Condition, ...)
		return Condition or error(GetErrorData(...))
	end
end

do
	local function Alphabetically(a, b)
		local typeA = type(a)
		local typeB = type(b)

		if typeA == typeB then
			if typeA == "number" then
				return a < b
			else
				return tostring(a):lower() < tostring(b):lower()
			end
		else
			return typeA < typeB
		end
	end

	function Debug.AlphabeticalOrder(Dictionary)
		--- Iteration function that iterates over a dictionary in alphabetical order
		-- function AlphabeticalOrder(Dictionary)
		-- @param table Dictionary That which will be iterated over in alphabetical order
		-- A dictionary looks like this: {Apple = true, Noodles = 5, Soup = false}
		-- Not case-sensitive
		-- @author Validark

		local Count = 0
		local Order = {}

		for Key in next, Dictionary do
			Count = Count + 1
			Order[Count] = Key
		end

		require(script.SortedArray).new(Order, Alphabetically)

		return function(Table, Previous)
			local Key = Order[Previous == nil and 1 or ((Order:Find(Previous) or error("invalid key to 'AlphabeticalOrder' " .. tostring(Previous))) + 1)]
			return Key, Table[Key]
		end, Dictionary, nil
	end
end

function Debug.UnionIteratorFunctions(...)
	-- Takes in functions ..., and returns a function which unions them, which can be called on a table
	-- Will iterate through a table, using the iterator functions passed in from left to right
	-- Will pass the CurrentIteratorFunction index in the stack as the last variable
	-- UnionIteratorFunctions(Get0, ipairs, Debug.AlphabeticalOrder)(Table)

	local IteratorFunctions = {...}

	for i = 1, #IteratorFunctions do
		if type(IteratorFunctions[i]) ~= "function" then
			error(GetErrorData("Cannot union Iterator functions which aren't functions"))
		end
	end

	return function(Table)
		local Count = 0
		local Order = {[0] = {}}
		local KeysSeen = {}

		for i = 1, #IteratorFunctions do
			local Function, TableToIterateThrough, Next = IteratorFunctions[i](Table)

			if type(Function) ~= "function" or type(TableToIterateThrough) ~= "table" then
				error(GetErrorData("Iterator function " .. i .. " must return a stack of types as follows: Function, Table, Variant"))
			end

			while true do
				local Data = {Function(TableToIterateThrough, Next)}
				Next = Data[1]
				if Next == nil then break end
				if not KeysSeen[Next] then
					KeysSeen[Next] = true
					Count = Count + 1
					Data[#Data + 1] = i
					Order[Count] = Data
				end
			end
		end

		return function(_, Previous)
			for i = 0, Count do
				if Order[i][1] == Previous then
					local Data = Order[i + 1]
					if Data then
						return unpack(Data)
					else
						return nil
					end
				end
			end

			error(GetErrorData("invalid key to unioned iterator function: " .. Previous))
		end, Table, nil
	end
end

local EachOrder do
	-- TODO: Write a function that takes multiple iterator functions and iterates through each passed in function
	-- EachOrder(Get0(Table), ipairs(Table), AlphabeticalOrder(Table))
end

do
	local function Get0(t)
		return function(t2, val)
			if val == nil and t2[0] ~= nil then
				return 0, t2[0]
			end
		end, t, nil
	end

	local typeof = typeof or type
	local ArrayOrderThenAlphabetically = Debug.UnionIteratorFunctions(Get0, ipairs, Debug.AlphabeticalOrder)
	local ConvertTableIntoString

	local function Parse(Object, Multiline, Depth, EncounteredTables)
		local Type = typeof(Object)

		if Type == "table" then
			for TableName, Table in next, EncounteredTables do
				if Table == Object then
					if TableName == 1 then
						return "[self]"
					else
						return "[table " .. TableName .. "]"
					end
				end
			end
			return ConvertTableIntoString(Object, nil, Multiline, (Depth or 1) + 1, EncounteredTables)
		end
		
		if Type == "string" then
			local Chunks = {}
			local ChunkLength = 60
			for i = 1, math.ceil(#Object / ChunkLength) do
				table.insert(Chunks, Object:sub(ChunkLength * (i - 1) + 1, ChunkLength * i))
			end
			return '"' .. table.concat(Chunks, '\n' .. ("   "):rep(Depth + 1)) .. '"'
		end

		return
			Type == "Instance" and "<" .. Debug.DirectoryToString(Object) .. ">" or
			(Type == "function" or Type == "userdata") and Type or
			tostring(Object)
	end

	function ConvertTableIntoString(Table, TableName, Multiline, Depth, EncounteredTables)
		if type(Table) == "table" then
			EncounteredTables[#EncounteredTables + 1] = Table

			local Output = {}
			local OutputCount = 0

			for Key, Value, Iter in ArrayOrderThenAlphabetically(Table) do
				if Iter < 1 then
					if OutputCount == 0 and Multiline then
						Output[OutputCount + 1] = "\n"
						Output[OutputCount + 2] = ("   "):rep(Depth)
						OutputCount = OutputCount + 2
					end

					Output[OutputCount + 1] = (Iter == 1 and "[0] = " or "") .. Parse(Value, Multiline, Depth, EncounteredTables)
					Output[OutputCount + 2] = ", "
					OutputCount = OutputCount + 2
				else
					if Multiline then
						OutputCount = OutputCount + 1
						Output[OutputCount] = "\n"
						Output[OutputCount + 1] = ("   "):rep(Depth)
					else
						OutputCount = OutputCount - 1
					end
					
					if type(Key) == "string" and not Key:find("^%d") and not Key:find("%s") then
						Output[OutputCount + 2] = Key
						OutputCount = OutputCount - 2
					else
						Output[OutputCount + 2] = "["
						Output[OutputCount + 3] = Parse(Key, Multiline, Depth, EncounteredTables)
						Output[OutputCount + 4] = "]"
					end

					Output[OutputCount + 5] = " = "
					Output[OutputCount + 6] = Parse(Value, Multiline, Depth, EncounteredTables)
					Output[OutputCount + 7] = Multiline and ";" or ", "
					OutputCount = OutputCount + 7
				end
			end
			
			local OutputStart = 1
			
			if Output[OutputCount] == ", " then
				if Multiline then
					OutputStart = OutputStart + 2
				end
				OutputCount = OutputCount - 1
			elseif Multiline and OutputCount ~= 0 then
				Output[OutputCount + 1] = "\n"
				Output[OutputCount + 2] = ("   "):rep(Depth)
				OutputCount = OutputCount + 2
			end

			local Metatable = getmetatable(Table)

			OutputStart = OutputStart - 1

			if not Multiline or Output[OutputCount - 1] ~= "\n" then
				OutputCount = OutputCount + 1
			end

			Output[OutputStart] = "{"
			Output[OutputCount] = OutputCount > 1 and (("   "):rep(Depth - 1) .. "}") or "}"

			if Metatable then
				if type(Metatable) == "table" then
					Output[OutputCount + 1] = " <- "
--					Output[OutputCount + 2] = ConvertTableIntoString(Metatable, nil, Multiline, nil, EncounteredTables)
					Output[OutputCount + 2] = ConvertTableIntoString(Metatable, nil, Multiline, Depth, EncounteredTables)
					OutputCount = OutputCount + 2
				else
					warn((GetErrorData((TableName or "Table") .. "'s metatable cannot be accessed. Got:\n" .. tostring(Metatable))))
				end
			end

			if TableName then
				Output[OutputStart - 1] = " = "
				Output[OutputStart - 2] = TableName
				OutputStart = OutputStart - 2
			end

			return table.concat(Output, "", OutputStart, OutputCount)
		else
			error(GetErrorData("[Debug] TableToString needs a table to convert to a string! Got type " .. typeof(Table)))
		end
	end

	function Debug.TableToString(Table, TableName, Multiline)
		--- Converts a table into a readable string
		-- string TableToString(Table, TableName, Multiline)
		-- @param table Table The Table to convert into a readable string
		-- @param string TableName Optional Name parameter that puts a "[TableName] = " at the beginning
		-- @returns a readable string version of the table

		return ConvertTableIntoString(Table, TableName, Multiline, 1, {})
	end
end

do
	local EscapedCharacters = {"%", "^", "$", "(", ")", ".", "[", "]", "*", "+", "-", "?"}
	local Escapable = "([%" .. table.concat(EscapedCharacters, "%") .. "])"

	function Debug.EscapeString(String)
		--- Turns strings into Lua-readble format
		-- string Debug.EscapeString(String)
		-- @returns Objects location in proper Lua format
		-- @author Validark
		-- Useful for when you are doing string-intensive coding
		-- Those minus signs always get me when I'm not using this function!

		return (
			String
				:gsub(Escapable, "%%%1")
				:gsub("([\"\'\\])", "\\%1")
		)
	end
end

--- Returns a string representation of anything.
-- @param any Object The object you wish to represent as a string.
-- @returns a readable string representation of the object.
-- @author evaera
function Debug.Inspect(Object)
	if type(Object) == "table" then
		return "table " .. Debug.TableToString(Object)
	else
		return Debug.Stringify(Object)
	end
end

return Debug
end;
};
G2L_MODULES[G2L["4b2"]] = {
Closure = function()
    local script = G2L["4b2"];
-- Class that memoizes sorting by inserting values in order. Optimized for very large arrays.
-- @author Validark

local sort = table.sort
local insert = table.insert

local SortedArray = {}
local Comparisons = setmetatable({}, {__mode = "k"})

SortedArray.__index = {
	Unpack = unpack;
	Concat = table.concat;
	RemoveIndex = table.remove;
}

function SortedArray.new(self, Comparison)
	if self then
		sort(self, Comparison)
	else
		self = {}
	end

	Comparisons[self] = Comparison
	return setmetatable(self, SortedArray)
end

local function FindClosest(self, Value, Low, High, Eq, Lt)
	local Middle do
		local Sum = Low + High
		Middle = (Sum - Sum % 2) / 2
	end

	if Middle == 0 then
		return nil
	end

	local Compare = Lt or Comparisons[self]
	local Value2 = self[Middle]

	while Middle ~= High do
		if Eq then
			if Eq(Value, Value2) then
				return Middle
			end
		elseif Value == Value2 then
			return Middle
		end

		local Bool

		if Compare then
			Bool = Compare(Value, Value2)
		else
			Bool = Value < Value2
		end

		if Bool then
			High = Middle - 1
		else
			Low = Middle + 1
		end

		local Sum = Low + High
		Middle = (Sum - Sum % 2) / 2
		Value2 = self[Middle]
	end

	return Middle
end

function SortedArray.__index:Insert(Value)
	-- Inserts a Value into the SortedArray while maintaining its sortedness

	local Position = FindClosest(self, Value, 1, #self)
	local Value2 = self[Position]

	if Value2 then
		local Compare = Comparisons[self]
		local Bool

		if Compare then
			Bool = Compare(Value, Value2)
		else
			Bool = Value < Value2
		end

		Position = Bool and Position or Position + 1
	else
		Position = 1
	end

	insert(self, Position, Value)

	return Position
end

function SortedArray.__index:Find(Value, Eq, Lt, U_0, U_n)
	-- Finds a Value in a SortedArray and returns its position (or nil if non-existant)

	local Position = FindClosest(self, Value, U_0 or 1, U_n or #self, Eq, Lt)

	local Bool

	if Position then
		if Eq then
			Bool = Eq(Value, self[Position])
		else
			Bool = Value == self[Position]
		end
	end

	return Bool and Position or nil
end

function SortedArray.__index:Copy()
	local New = {}

	for i = 1, #self do
		New[i] = self[i]
	end

	return New
end

function SortedArray.__index:Clone()
	local New = {}

	for i = 1, #self do
		New[i] = self[i]
	end

	Comparisons[New] = Comparisons[self]
	return setmetatable(New, SortedArray)
end

function SortedArray.__index:RemoveElement(Signature, Eq, Lt)
	local Position = self:Find(Signature, Eq, Lt)

	if Position then
		return self:RemoveIndex(Position)
	end
end

function SortedArray.__index:Sort()
	sort(self, Comparisons[self])
end

function SortedArray.__index:SortIndex(Index)
	-- Sorts a single element at number Index
	-- Useful for when a single element is somehow altered such that it should get a new position in the array

	return self:Insert(self:RemoveIndex(Index))
end

function SortedArray.__index:SortElement(Signature, Eq, Lt)
	-- Sorts a single element if it exists
	-- Useful for when a single element is somehow altered such that it should get a new position in the array

	return self:Insert(self:RemoveElement(Signature, Eq, Lt))
end

function SortedArray.__index:GetIntersection(SortedArray2, Eq, Lt)
	-- Returns a SortedArray of Commonalities between self and another SortedArray
	-- If applicable, the returned SortedArray will inherit the Comparison function from self

	if SortedArray ~= getmetatable(SortedArray2) then error("bad argument #2 to GetIntersection: expected SortedArray, got " .. typeof(SortedArray2) .. " " .. tostring(SortedArray2)) end
	local Commonalities = SortedArray.new(nil, Comparisons[self])
	local Count = 0
	local Position = 1
	local NumSelf = #self
	local NumSortedArray2 = #SortedArray2

	if NumSelf > NumSortedArray2 then -- Iterate through the shorter SortedArray
		NumSelf, NumSortedArray2 = NumSortedArray2, NumSelf
		self, SortedArray2 = SortedArray2, self
	end

	for i = 1, NumSelf do
		local Current = self[i]
		local CurrentPosition = SortedArray2:Find(Current, Eq, Lt, Position, NumSortedArray2)

		if CurrentPosition then
			Position = CurrentPosition
			Count = Count + 1
			Commonalities[Count] = Current
		end
	end

	return Commonalities
end

return SortedArray
end;
};
G2L_MODULES[G2L["4b5"]] = {
Closure = function()
    local script = G2L["4b5"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')

-- Roact
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Create component
local ImageButton = Roact.PureComponent:extend 'ImageButton'

-- Set defaults
ImageButton.defaultProps = {
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0),
    Image = ''
}

function ImageButton:render()
    local props = Support.CloneTable(self.props)
    local state = self.state

    -- Include aspect ratio constraint if specified
    if props.AspectRatio then
        local Constraint = new('UIAspectRatioConstraint', {
            AspectRatio = props.AspectRatio
        })

        -- Insert constraint into children
        props[Roact.Children] = Support.Merge(
            { AspectRatio = Constraint },
            props[Roact.Children] or {}
        )

        -- Base height off width using the aspect ratio
        if props.DominantAxis == 'Width' then
            props.SizeConstraint = 'RelativeXX'
            if typeof(props.Width) == 'UDim' then
                props.Height = UDim.new(props.Width.Scale / props.AspectRatio, 0)
            else
                props.Size = UDim2.new(
                    props.Size.X,
                    UDim.new(props.Size.X.Scale / props.AspectRatio, 0)
                )
            end

        -- Base width off height using the aspect ratio
        elseif props.DominantAxis == 'Height' then
            props.SizeConstraint = 'RelativeYY'
            if typeof(props.Height) == 'UDim' then
                props.Width = UDim.new(props.Height.Scale * props.AspectRatio, 0)
            else
                props.Size = UDim2.new(
                    UDim.new(props.Size.Y.Scale * props.AspectRatio, 0),
                    props.Size.Y
                )
            end
        end
    end

    -- Include list layout if specified
    if props.Layout == 'List' then
        local Layout = new('UIListLayout', {
            FillDirection = props.LayoutDirection,
            Padding = props.LayoutPadding,
            HorizontalAlignment = props.HorizontalAlignment,
            VerticalAlignment = props.VerticalAlignment,
            SortOrder = props.SortOrder or 'LayoutOrder',
            [Roact.Ref] = function (rbx)
                self:UpdateContentSize(rbx)
            end,
            [Roact.Change.AbsoluteContentSize] = function (rbx)
                self:UpdateContentSize(rbx)
            end
        })

        -- Update size
        props.Size = self:GetSize()

        -- Insert layout into children
        props[Roact.Children] = Support.Merge(
            { Layout = Layout },
            props[Roact.Children]
        )
    end

    -- Parse hex colors
    if type(props.ImageColor) == 'string' then
        local R, G, B = props.ImageColor:lower():match('#?(..)(..)(..)')
        props.ImageColor3 = Color3.fromRGB(tonumber(R, 16), tonumber(G, 16), tonumber(B, 16))
    end

    -- Filter out custom properties
    props.AspectRatio = nil
    props.DominantAxis = nil
    props.Layout = nil
    props.LayoutDirection = nil
    props.LayoutPadding = nil
    props.HorizontalAlignment = nil
    props.VerticalAlignment = nil
    props.HorizontalPadding = nil
    props.VerticalPadding = nil
    props.SortOrder = nil
    props.Width = nil
    props.Height = nil
    props.ImageColor = nil

    -- Display component in wrapper
    return new('ImageButton', props)

end

function ImageButton:GetSize(ContentSize)
    local props = self.props
    
    -- Determine dynamic dimensions
    local DynamicWidth = props.Size == 'WRAP_CONTENT' or
        props.Width == 'WRAP_CONTENT'
    local DynamicHeight = props.Size == 'WRAP_CONTENT' or
        props.Height == 'WRAP_CONTENT'
    local DynamicSize = DynamicWidth or DynamicHeight

    -- Get padding from props
    local Padding = UDim2.new(
        0, props.HorizontalPadding or 0,
        0, props.VerticalPadding or 0
    )
    
    -- Calculate size based on content if dynamic
    return Padding + UDim2.new(
        (ContentSize and DynamicWidth) and UDim.new(0, ContentSize.X) or
            (typeof(props.Width) == 'UDim' and props.Width or props.Size.X),
        (ContentSize and DynamicHeight) and UDim.new(0, ContentSize.Y) or
            (typeof(props.Height) == 'UDim' and props.Height or props.Size.Y)
    )
end

function ImageButton:UpdateContentSize(Layout)
    if not (Layout and Layout.Parent) then
        return
    end

    -- Set container size based on content
    Layout.Parent.Size = self:GetSize(Layout.AbsoluteContentSize)
end

return ImageButton
end;
};
G2L_MODULES[G2L["4b6"]] = {
Closure = function()
    local script = G2L["4b6"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService 'TextService'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')

-- Roact
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Create component
local TextLabel = Roact.PureComponent:extend 'TextLabel'

-- Set defaults
TextLabel.defaultProps = {
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0),
    TextSize = 16,
    Font = 'SourceSans',
    TextColor3 = Color3.new(0, 0, 0),
    TextXAlignment = 'Left'
}

-- Constants
local INFINITE_BOUNDS = Vector2.new(math.huge, math.huge)

function TextLabel:getSize()

    -- Return size directly if fixed
    if not (self.props.Width or self.props.Height or self.props.Size == 'WRAP_CONTENT') then
        return self.props.Size
    end

    -- Get fixed sizes for individual axes
    local Width, Height
    if typeof(self.props.Width) == 'UDim' then
        Width = self.props.Width
    elseif typeof(self.props.Height) == 'UDim' then
        Height = self.props.Height
    end

    -- Get text size from height if autoscaled
    local TextSize = self.props.TextSize
    if self.props.TextScaled and self.AbsoluteSize then
        TextSize = self.AbsoluteSize.Y
    end

    -- Calculate content bounds
    local Bounds = TextService:GetTextSize(
        self.props.Text,
        TextSize,
        self.props.Font,
        INFINITE_BOUNDS
    )

    -- Set width and height based on content if requested
    if not Width and (self.props.Width == 'WRAP_CONTENT' or self.props.Size == 'WRAP_CONTENT') then
        Width = UDim.new(0, Bounds.X)
    end
    if not Height and (self.props.Height == 'WRAP_CONTENT' or self.props.Size == 'WRAP_CONTENT') then
        Height = UDim.new(0, Bounds.Y)
    end

    -- Return the calculated size
    return UDim2.new(
        Width or (self.props.Size and self.props.Size.X) or UDim.new(),
        Height or (self.props.Size and self.props.Size.Y) or UDim.new()
    )

end

function TextLabel:updateSize()
    if not self.Mounted then
        return
    end

    -- Calculate new size
    local Size = self:getSize()
    local TextSize = self.props.TextScaled and
        (self.AbsoluteSize and self.AbsoluteSize.Y) or
        self.props.TextSize

    -- Check if state is outdated
    if self.state.Size ~= Size or
        self.state.TextSize ~= TextSize then

        -- Update state
        self:setState {
            Size = Size,
            TextSize = TextSize
        }
    end
end

function TextLabel:init()
    self.Updating = true
    self.state = {
        Size = UDim2.new(),
        TextSize = 0
    }
end

function TextLabel:willUpdate(nextProps, nextState)
    self.Updating = true
end

function TextLabel:render()
    local props = Support.Merge({}, self.props, {

        -- Override size
        Size = self.state.Size,
        TextSize = self.state.TextSize,
        TextScaled = false,

        -- Get initial size
        [Roact.Ref] = function (rbx)
            self.AbsoluteSize = rbx and
                rbx.AbsoluteSize or
                self.AbsoluteSize
        end,

        -- Track size changes
        [Roact.Change.AbsoluteSize] = function (rbx)
            self.AbsoluteSize = rbx.AbsoluteSize
            if not self.Updating then
                self:updateSize()
            end
        end

    })

    -- Parse hex colors
    if type(props.TextColor) == 'string' then
        local R, G, B = props.TextColor:lower():match('#?(..)(..)(..)')
        props.TextColor3 = Color3.fromRGB(tonumber(R, 16), tonumber(G, 16), tonumber(B, 16))
    end

    -- Separate children from props
    local children = Support.Merge({}, self.props[Roact.Children])

    -- Clear invalid props
    props.Width = nil
    props.Height = nil
    props.Bold = nil
    props.TextColor = nil
    props.AspectRatio = nil
    props[Roact.Children] = nil

    -- Include aspect ratio constraint if specified
    if self.props.AspectRatio then
        local Constraint = new('UIAspectRatioConstraint', {
            AspectRatio = self.props.AspectRatio
        })

        -- Insert constraint into children
        children.AspectRatio = Constraint
    end

    -- Add a bold layer if specified
    if self.props.Bold then
        local BoldProps = Support.CloneTable(props)
        BoldProps.Size = UDim2.new(1, 0, 1, 0)
        BoldProps.Position = nil
        BoldProps.TextScaled = true
        BoldProps.AnchorPoint = nil
        children.Bold = new(TextLabel, BoldProps)
    end

    -- Display component in wrapper
    return new('TextLabel', props, children)

end

function TextLabel:didMount()
    self.Updating = nil
    self.Mounted = true
    self:updateSize()
end

function TextLabel:willUnmount()
    self.Mounted = nil
end

function TextLabel:didUpdate(previousProps, previousState)
    self.Updating = nil
    self:updateSize()
end

return TextLabel
end;
};
G2L_MODULES[G2L["4b7"]] = {
Closure = function()
    local script = G2L["4b7"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')

-- Roact
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Create component
local Frame = Roact.PureComponent:extend 'Frame'

-- Set defaults
Frame.defaultProps = {
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0)
}

function Frame:render()
    local props = Support.CloneTable(self.props)
    local state = self.state

    -- Include aspect ratio constraint if specified
    if props.AspectRatio then
        local Constraint = new('UIAspectRatioConstraint', {
            AspectRatio = props.AspectRatio
        })

        -- Insert constraint into children
        props[Roact.Children] = Support.Merge(
            { AspectRatio = Constraint },
            props[Roact.Children] or {}
        )

        -- Base height off width using the aspect ratio
        if props.DominantAxis == 'Width' then
            props.SizeConstraint = 'RelativeXX'
            if typeof(props.Width) == 'UDim' then
                props.Height = UDim.new(props.Width.Scale / props.AspectRatio, 0)
            else
                props.Size = UDim2.new(
                    props.Size.X,
                    UDim.new(props.Size.X.Scale / props.AspectRatio, 0)
                )
            end

        -- Base width off height using the aspect ratio
        elseif props.DominantAxis == 'Height' then
            props.SizeConstraint = 'RelativeYY'
            if typeof(props.Height) == 'UDim' then
                props.Width = UDim.new(props.Height.Scale * props.AspectRatio, 0)
            else
                props.Size = UDim2.new(
                    UDim.new(props.Size.Y.Scale * props.AspectRatio, 0),
                    props.Size.Y
                )
            end
        end
    end

    -- Include list layout if specified
    if props.Layout == 'List' then
        local Layout = new('UIListLayout', {
            FillDirection = props.LayoutDirection,
            Padding = props.LayoutPadding,
            HorizontalAlignment = props.HorizontalAlignment,
            VerticalAlignment = props.VerticalAlignment,
            SortOrder = props.SortOrder or 'LayoutOrder',
            [Roact.Ref] = function (rbx)
                self:UpdateContentSize(rbx)
            end,
            [Roact.Change.AbsoluteContentSize] = function (rbx)
                self:UpdateContentSize(rbx)
            end
        })

        -- Update size
        props.Size = self:GetSize()

        -- Insert layout into children
        props[Roact.Children] = Support.Merge(
            { Layout = Layout },
            props[Roact.Children]
        )
    end

    -- Filter out custom properties
    props.AspectRatio = nil
    props.DominantAxis = nil
    props.Layout = nil
    props.LayoutDirection = nil
    props.LayoutPadding = nil
    props.HorizontalAlignment = nil
    props.VerticalAlignment = nil
    props.HorizontalPadding = nil
    props.VerticalPadding = nil
    props.SortOrder = nil
    props.Width = nil
    props.Height = nil
    props.ResizeParent = nil

    -- Display component in wrapper
    return new('Frame', props)

end

function Frame:GetSize(ContentSize)
    local props = self.props
    
    -- Determine dynamic dimensions
    local DynamicWidth = props.Size == 'WRAP_CONTENT' or
        props.Width == 'WRAP_CONTENT'
    local DynamicHeight = props.Size == 'WRAP_CONTENT' or
        props.Height == 'WRAP_CONTENT'
    local DynamicSize = DynamicWidth or DynamicHeight

    -- Get padding from props
    local Padding = UDim2.new(
        0, props.HorizontalPadding or 0,
        0, props.VerticalPadding or 0
    )

    -- Calculate size based on content if dynamic
    return Padding + UDim2.new(
        (ContentSize and DynamicWidth) and UDim.new(0, ContentSize.X) or
            (typeof(props.Width) == 'UDim' and props.Width or props.Size.X),
        (ContentSize and DynamicHeight) and UDim.new(0, ContentSize.Y) or
            (typeof(props.Height) == 'UDim' and props.Height or props.Size.Y)
    )
end

function Frame:UpdateContentSize(Layout)
    if not (Layout and Layout.Parent) then
        return
    end

    -- Set container size based on content
    Layout.Parent.Size = self:GetSize(Layout.AbsoluteContentSize)

    -- Set parent size based on content if specified
    local ResizeParent = self.props.ResizeParent
    local Parent = ResizeParent and Layout.Parent.Parent
    if ResizeParent and Parent then
        local ParentWidth = Parent.Size.X
        local ParentHeight = Parent.Size.Y
        if Support.IsInTable(ResizeParent, 'WIDTH') then
            ParentWidth = UDim.new(0, Layout.Parent.AbsoluteSize.X)
        end
        if Support.IsInTable(ResizeParent, 'HEIGHT') then
            ParentHeight = UDim.new(0, Layout.Parent.AbsoluteSize.Y)
        end
        Parent.Size = UDim2.new(ParentWidth, ParentHeight)
    end
end

return Frame
end;
};
G2L_MODULES[G2L["4b8"]] = {
Closure = function()
    local script = G2L["4b8"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')

-- Roact
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Create component
local ImageLabel = Roact.PureComponent:extend 'ImageLabel'

-- Set defaults
ImageLabel.defaultProps = {
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0),
    Image = ''
}

function ImageLabel:render()
    local props = Support.CloneTable(self.props)
    local state = self.state

    -- Include aspect ratio constraint if specified
    if props.AspectRatio then
        local Constraint = new('UIAspectRatioConstraint', {
            AspectRatio = props.AspectRatio
        })

        -- Insert constraint into children
        props[Roact.Children] = Support.Merge(
            { AspectRatio = Constraint },
            props[Roact.Children] or {}
        )
    end

    -- Include list layout if specified
    if props.Layout == 'List' then
        local Layout = new('UIListLayout', {
            FillDirection = props.LayoutDirection,
            Padding = props.LayoutPadding,
            HorizontalAlignment = props.HorizontalAlignment,
            VerticalAlignment = props.VerticalAlignment,
            SortOrder = props.SortOrder or 'LayoutOrder',
            [Roact.Ref] = function (rbx)
                self:UpdateContentSize(rbx)
            end,
            [Roact.Change.AbsoluteContentSize] = function (rbx)
                self:UpdateContentSize(rbx)
            end
        })

        -- Update size
        props.Size = self:GetSize()

        -- Insert layout into children
        props[Roact.Children] = Support.Merge(
            { Layout = Layout },
            props[Roact.Children]
        )
    end

    -- Parse hex colors
    if type(props.ImageColor) == 'string' then
        local R, G, B = props.ImageColor:lower():match('#?(..)(..)(..)')
        props.ImageColor3 = Color3.fromRGB(tonumber(R, 16), tonumber(G, 16), tonumber(B, 16))
    end

    -- Filter out custom properties
    props.AspectRatio = nil
    props.Layout = nil
    props.LayoutDirection = nil
    props.LayoutPadding = nil
    props.HorizontalAlignment = nil
    props.VerticalAlignment = nil
    props.HorizontalPadding = nil
    props.VerticalPadding = nil
    props.SortOrder = nil
    props.Width = nil
    props.Height = nil
    props.ImageColor = nil

    -- Display component in wrapper
    return new('ImageLabel', props)

end

function ImageLabel:GetSize(ContentSize)
    local props = self.props
    
    -- Determine dynamic dimensions
    local DynamicWidth = props.Size == 'WRAP_CONTENT' or
        props.Width == 'WRAP_CONTENT'
    local DynamicHeight = props.Size == 'WRAP_CONTENT' or
        props.Height == 'WRAP_CONTENT'
    local DynamicSize = DynamicWidth or DynamicHeight

    -- Get padding from props
    local Padding = UDim2.new(
        0, props.HorizontalPadding or 0,
        0, props.VerticalPadding or 0
    )
    
    -- Calculate size based on content if dynamic
    return Padding + UDim2.new(
        (ContentSize and DynamicWidth) and UDim.new(0, ContentSize.X) or
            (typeof(props.Width) == 'UDim' and props.Width or props.Size.X),
        (ContentSize and DynamicHeight) and UDim.new(0, ContentSize.Y) or
            (typeof(props.Height) == 'UDim' and props.Height or props.Size.Y)
    )
end

function ImageLabel:UpdateContentSize(Layout)
    if not (Layout and Layout.Parent) then
        return
    end

    -- Set container size based on content
    Layout.Parent.Size = self:GetSize(Layout.AbsoluteContentSize)
end

return ImageLabel
end;
};
G2L_MODULES[G2L["4b9"]] = {
Closure = function()
    local script = G2L["4b9"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local UI = Root:WaitForChild 'UI'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local Roact = require(Vendor:WaitForChild 'Roact')

-- Roact
local new = Roact.createElement
local ImageLabel = require(UI:WaitForChild 'ImageLabel')

-- Create component
local LoadingSpinner = Roact.PureComponent:extend 'LoadingSpinner'

function LoadingSpinner:init()
    self.instance = Roact.createRef()
end

function LoadingSpinner:didMount()
    coroutine.wrap(function ()
        self.Running = true
        while self.Running and self.instance.current do
            local Spinner = self.instance.current
            Spinner.Rotation = (Spinner.Rotation + 12) % 360
            wait(0.01)
        end
    end)()
end

function LoadingSpinner:willUnmount()
    self.Running = nil
end

function LoadingSpinner:render()

    -- Prepare props
    local props = Support.Merge({}, self.props or {}, {
        [Roact.Ref] = self.instance,
        Image = 'rbxassetid://1932255814',
        AspectRatio = 1
    })

    -- Display component in wrapper
    return new(ImageLabel, props)

end

return LoadingSpinner
end;
};
G2L_MODULES[G2L["4ba"]] = {
Closure = function()
    local script = G2L["4ba"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService 'TextService'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')

-- Roact
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Create component
local TextBox = Roact.PureComponent:extend 'TextBox'

-- Set defaults
TextBox.defaultProps = {
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0),
    TextSize = 16,
    Font = 'SourceSans',
    TextColor3 = Color3.new(0, 0, 0),
    TextXAlignment = 'Left'
}

-- Constants
local INFINITE_BOUNDS = Vector2.new(math.huge, math.huge)

function TextBox:getSize()

    -- Return size directly if fixed
    if not (self.props.Width or self.props.Height or self.props.Size == 'WRAP_CONTENT') then
        return self.props.Size
    end

    -- Get fixed sizes for individual axes
    local Width, Height
    if typeof(self.props.Width) == 'UDim' then
        Width = self.props.Width
    elseif typeof(self.props.Height) == 'UDim' then
        Height = self.props.Height
    end

    -- Get text size from height if autoscaled
    local TextSize = self.props.TextSize
    if self.props.TextScaled and self.AbsoluteSize then
        TextSize = self.AbsoluteSize.Y
    end

    -- Calculate content bounds
    local Bounds = TextService:GetTextSize(
        self.props.Text,
        TextSize,
        self.props.Font,
        INFINITE_BOUNDS
    )

    -- Set width and height based on content if requested
    if not Width and (self.props.Width == 'WRAP_CONTENT' or self.props.Size == 'WRAP_CONTENT') then
        Width = UDim.new(0, Bounds.X)
    end
    if not Height and (self.props.Height == 'WRAP_CONTENT' or self.props.Size == 'WRAP_CONTENT') then
        Height = UDim.new(0, Bounds.Y)
    end

    -- Return the calculated size
    return UDim2.new(
        Width or (self.props.Size and self.props.Size.X) or UDim.new(),
        Height or (self.props.Size and self.props.Size.Y) or UDim.new()
    )

end

function TextBox:updateSize()

    -- Calculate new size
    local Size = self:getSize()
    local TextSize = self.props.TextScaled and
        (self.AbsoluteSize and self.AbsoluteSize.Y) or
        self.props.TextSize

    -- Check if state is outdated
    if self.state.Size ~= Size or
        self.state.TextSize ~= TextSize then

        -- Update state
        self:setState {
            Size = Size,
            TextSize = TextSize
        }
    end
end

function TextBox:init()
    self.Updating = true
    self.state = {
        Size = UDim2.new(),
        TextSize = 0
    }
end

function TextBox:willUpdate(nextProps, nextState)
    self.Updating = true
end

function TextBox:render()
    local props = Support.Merge({}, self.props, {

        -- Override size
        Size = self.state.Size,
        TextSize = self.state.TextSize,
        TextScaled = false,

        -- Get initial size
        [Roact.Ref] = function (rbx)
            self.AbsoluteSize = rbx and
                rbx.AbsoluteSize or
                self.AbsoluteSize
        end,

        -- Track size changes
        [Roact.Change.AbsoluteSize] = function (rbx)
            self.AbsoluteSize = rbx.AbsoluteSize
            if not self.Updating then
                self:updateSize()
            end
        end

    })

    -- Parse hex colors
    if type(props.TextColor) == 'string' then
        local R, G, B = props.TextColor:lower():match('#?(..)(..)(..)')
        props.TextColor3 = Color3.fromRGB(tonumber(R, 16), tonumber(G, 16), tonumber(B, 16))
    end

    -- Separate children from props
    local children = Support.Merge({}, self.props[Roact.Children])

    -- Clear invalid props
    props.Width = nil
    props.Height = nil
    props.Bold = nil
    props.TextColor = nil
    props[Roact.Children] = nil

    -- Add a bold layer if specified
    if self.props.Bold then
        local BoldProps = Support.CloneTable(props)
        BoldProps.Size = UDim2.new(1, 0, 1, 0)
        BoldProps.Position = nil
        BoldProps.TextScaled = true
        BoldProps.AnchorPoint = nil
        children.Bold = new(TextBox, BoldProps)
    end

    -- Display component in wrapper
    return new('TextBox', props, children)

end

function TextBox:didMount()
    self.Updating = nil
    self:updateSize()
end

function TextBox:didUpdate(previousProps, previousState)
    self.Updating = nil
    self:updateSize()
end

return TextBox
end;
};
G2L_MODULES[G2L["4bb"]] = {
Closure = function()
    local script = G2L["4bb"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local UI = Root:WaitForChild 'UI'
local RunService = game:GetService 'RunService'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local Roact = require(Vendor:WaitForChild 'Roact')
local Maid = require(Libraries:WaitForChild 'Maid')
local Signal = require(Libraries:WaitForChild 'Signal')

-- Roact
local new = Roact.createElement
local Frame = require(UI:WaitForChild 'Frame')
local ImageLabel = require(UI:WaitForChild 'ImageLabel')
local ImageButton = require(UI:WaitForChild 'ImageButton')
local TextLabel = require(UI:WaitForChild 'TextLabel')
local ItemList = require(script:WaitForChild 'ItemList')

-- Create component
local Explorer = Roact.PureComponent:extend 'Explorer'

function Explorer:init(props)
    self:setState {
        Items = {},
        RowHeight = 18
    }

    -- Update batching data
    self.UpdateQueues = {}
    self.QueueTimers = {}

    -- Item tracking data
    self.LastId = 0
    self.IdMap = {}
    self.PendingParent = {}

    -- Define item expanding function
    self.ToggleExpand = function (ItemId)
        return self:setState(function (State)
            local Item = State.Items[ItemId]
            Item.Expanded = not Item.Expanded
            return { Items = State.Items }
        end)
    end
end

function Explorer:didUpdate(previousProps, previousState)

    -- Trigger a scope change if prop changes
    if previousProps.Scope ~= self.props.Scope then
        self:UpdateScope(self.props.Scope)
    end

end

function Explorer:UpdateScope(Scope)
    local Core = self.props.Core
    local Selection = Core.Selection

    -- Clear previous cleanup maid
    if self.ScopeMaid then
        self.ScopeMaid:Destroy()
    end

    -- Create maid for cleanup
    self.ScopeMaid = Maid.new()

    -- Ensure new scope is defined
    if not Scope then
        return
    end

    -- Build initial tree
    coroutine.resume(coroutine.create(function ()
        self:UpdateTree()

        -- Scroll to first selected item
        if #Selection.Items > 0 then
            local FocusedItem = Selection.IsSelected(Selection.Focus) and Selection.Focus or Selection.Items[1]
            self:setState({
                ScrollTo = self.IdMap[FocusedItem]
            })
        else
            self:setState({
                ScrollTo = Roact.None
            })
        end
    end))

    -- Listen for new and removing items
    local Scope = Core.Targeting.Scope
    self.ScopeMaid.Add = Scope.DescendantAdded:Connect(function (Item)
        self:UpdateTree()
    end)
    self.ScopeMaid.Remove = Scope.DescendantRemoving:Connect(function (Item)
        self:UpdateTree()
    end)

    -- Listen for selected items
    self.ScopeMaid.Select = Selection.ItemsAdded:Connect(function (Items)
        self:UpdateSelection(Items)

        -- If single item selected, get item state
        local ItemId = (#Items == 1) and self.IdMap[Items[1]]

        -- Expand ancestors leading to item
        self:setState(function (State)
            local Changes = {}
            local ItemState = State.Items[ItemId]
            local ParentId = ItemState and self.IdMap[ItemState.Parent]
            local ParentState = ParentId and State.Items[ParentId]

            while ParentState do
                ParentState.Expanded = true
                Changes[ParentId] = ParentState
                ParentId = self.IdMap[ParentState.Parent]
                ParentState = State.Items[ParentId]
            end

            return {
                Items = Support.Merge(State.Items, Changes),
                ScrollTo = ItemId
            }
        end)
    end)
    self.ScopeMaid.Deselect = Selection.ItemsRemoved:Connect(function (Items)
        self:UpdateSelection(Items)
    end)

end

function Explorer:didMount()
    self.Mounted = true

    -- Create maid for cleanup on unmount
    self.ItemMaid = Maid.new()

    -- Set scope
    self:UpdateScope(self.props.Scope)
end

function Explorer:willUnmount()
    self.Mounted = false

    -- Clean up resources
    self.ScopeMaid:Destroy()
    self.ItemMaid:Destroy()
end

local function IsTargetable(Item)
	return Item:IsA 'Model' or
		Item:IsA 'BasePart' or
		Item:IsA 'Tool' or
		Item:IsA 'Accessory' or
		Item:IsA 'Accoutrement'
end

function Explorer.IsItemIndexable(Item)
    return (IsTargetable(Item) and Item.ClassName ~= 'Terrain') or
        Item:IsA 'Folder'
end

function Explorer:UpdateTree()

    -- Check if queue should be executed
    if not self:ShouldExecuteQueue('Tree') then
        return
    end

    -- Track order of each item
    local OrderCounter = 1
    local IdMap = self.IdMap

    -- Perform update to state
    self:setState(function (State)
        local Changes = {}
        local Descendants = self.props.Scope:GetDescendants()
        local DescendantMap = Support.FlipTable(Descendants)

        -- Check all items in scope
        for Index, Item in ipairs(Descendants) do
            local ItemId = IdMap[Item]
            local ItemState = ItemId and State.Items[ItemId]

            -- Update reordered items
            if ItemState then
                if ItemState.Order ~= OrderCounter then
                    ItemState = Support.CloneTable(ItemState)
                    ItemState.Order = OrderCounter
                    Changes[ItemId] = ItemState
                end
                OrderCounter = OrderCounter + 1

                -- Update parents in case scope changed
                local ParentId = self.IdMap[ItemState.Parent]
                if not State.Items[ParentId] then
                    self:UpdateItemParent(Item, Changes, State)
                end

            -- Introduce new items
            elseif self:BuildItemState(Item, self.props.Scope, OrderCounter, Changes, State) then
                OrderCounter = OrderCounter + 1
            end
        end

        -- Remove old items from state
        for ItemId, Item in pairs(State.Items) do
            local Object = Item.Instance
            if not DescendantMap[Object] then

                -- Clear state
                Changes[ItemId] = Support.Blank

                -- Clear ID
                IdMap[Object] = nil

                -- Clean up resources
                self.ItemMaid[ItemId] = nil

                -- Update parent child counter
                local ParentId = Item.Parent and self.IdMap[Item.Parent]
                local ParentState = self:GetStagedItemState(ParentId, Changes, State)
                if ParentState then
                    ParentState.Children[ItemId] = nil
                    ParentState.Unlocked[ItemId] = nil
                    ParentState.IsLocked = next(ParentState.Children) and not next(ParentState.Unlocked)
                    Changes[ParentId] = ParentState
                    self:PropagateLock(ParentState, Changes, State)
                end

            end
        end

        -- Update state
        return { Items = Support.MergeWithBlanks(State.Items, Changes) }
    end)

end

function Explorer:UpdateSelection(Items)
    local Selection = self.props.Core.Selection

    -- Queue changed items
    self:QueueUpdate('Selection', Items)

    -- Check if queue should be executed
    if not self:ShouldExecuteQueue('Selection') then
        return
    end

    -- Perform updates to state
    self:setState(function (State)
        local Changes = {}
        local Queue = self:GetUpdateQueue('Selection')
        for Items in pairs(Queue) do
            for _, Item in ipairs(Items) do
                local ItemId = self.IdMap[Item]
                if ItemId then
                    local ItemState = Support.CloneTable(State.Items[ItemId])
                    ItemState.Selected = Selection.IsSelected(Item)
                    Changes[ItemId] = ItemState
                end
            end
        end
        return { Items = Support.Merge(State.Items, Changes) }
    end)

end

function Explorer:BuildItemState(Item, Scope, Order, Changes, State)
    local Parent = Item.Parent
    local ParentId = self.IdMap[Parent]

    -- Check if indexable and visible in hierarchy
    local InHierarchy = ParentId or (Parent == Scope)
    if not (self.IsItemIndexable(Item) and InHierarchy) then
        return nil
    end

    -- Assign ID
    local ItemId = self.LastId + 1
    self.LastId = ItemId
    self.IdMap[Item] = ItemId

    -- Check if item is a part
    local IsPart = Item:IsA 'BasePart'

    -- Create maid for cleanup when item is removed
    local ItemMaid = Maid.new()
    self.ItemMaid[ItemId] = ItemMaid

    -- Prepare item state
    local ItemState = {
        Id = ItemId,
        Name = Item.Name,
        IsPart = IsPart,
        IsLocked = IsPart and Item.Locked or nil,
        Class = Item.ClassName,
        Parent = Parent,
        Children = {},
        Unlocked = {},
        Order = Order,
        Expanded = nil,
        Instance = Item,
        Selected = self.props.Core.Selection.IsSelected(Item) or nil
    }

    -- Register item state into changes
    Changes[ItemId] = ItemState

    -- Update parent children
    local ParentState = self:GetStagedItemState(ParentId, Changes, State)
    if ParentState then
        ParentState.Children[ItemId] = true
        Changes[ParentId] = ParentState
    end

    -- Update children
    for PendingChildId in pairs(self.PendingParent[Item] or {}) do
        local ChildState = self:GetStagedItemState(PendingChildId, Changes, State)
        if ChildState then
            ItemState.Children[PendingChildId] = true
            self:PropagateLock(ChildState, Changes, State)
        end
    end

    -- Propagate lock to ancestors
    self:PropagateLock(ItemState, Changes, State)

    -- Listen to name changes
    ItemMaid.Name = Item:GetPropertyChangedSignal('Name'):Connect(function ()

        -- Queue change
        self:QueueUpdate('Name', Item)

        -- Check if queue should be executed
        if not self:ShouldExecuteQueue('Name') then
            return
        end

        -- Perform updates to state
        self:setState(function (State)
            local Changes = {}
            local Queue = self:GetUpdateQueue('Name')
            for Item in pairs(Queue) do
                local ItemId = self.IdMap[Item]
                local ItemState = Support.CloneTable(State.Items[ItemId])
                ItemState.Name = Item.Name
                Changes[ItemId] = ItemState
            end
            return { Items = Support.Merge(State.Items, Changes) }
        end)

    end)

    -- Listen to parent changes
    ItemMaid.Parent = Item:GetPropertyChangedSignal('Parent'):Connect(function ()
        if not Item.Parent then
            return
        end

        -- Queue change
        self:QueueUpdate('Parent', Item)

        -- Check if queue should be executed
        if not self:ShouldExecuteQueue('Parent') then
            return
        end

        -- Perform updates to state
        self:setState(function (State)
            local Changes = {}
            local Queue = self:GetUpdateQueue('Parent')
            for Item in pairs(Queue) do
                self:UpdateItemParent(Item, Changes, State)
            end
            return { Items = Support.MergeWithBlanks(State.Items, Changes) }
        end)

        -- Update tree state
        self:UpdateTree()
    end)

    -- Attach part-specific listeners
    if IsPart then
        ItemMaid.Locked = Item:GetPropertyChangedSignal('Locked'):Connect(function ()

            -- Queue change
            self:QueueUpdate('Lock', Item)

            -- Check if queue should be executed
            if not self:ShouldExecuteQueue('Lock') then
                return
            end

            -- Perform updates to state
            self:setState(function (State)
                local Changes = {}
                local Queue = self:GetUpdateQueue('Lock')
                for Item in pairs(Queue) do
                    self:UpdateItemLock(Item, Changes, State)
                end
                return { Items = Support.MergeWithBlanks(State.Items, Changes) }
            end)

        end)
    end

    -- Indicate that item state was created
    return true

end

function Explorer:QueueUpdate(Type, Item)
    self.UpdateQueues[Type] = Support.Merge(self.UpdateQueues[Type] or {}, {
        [Item] = true
    })
end

function Explorer:GetUpdateQueue(Type)

    -- Get queue
    local Queue = self.UpdateQueues[Type]
    self.UpdateQueues[Type] = nil

    -- Return queued items
    return Queue

end

function Explorer:ShouldExecuteQueue(Type)
    local ShouldExecute = self.QueueTimers[Type] or Support.CreateConsecutiveCallDeferrer(0.025)
    self.QueueTimers[Type] = ShouldExecute

    -- Wait until state updatable
    if ShouldExecute() and self.Mounted then
        return true
    end
end

function Explorer:UpdateItemLock(Item, Changes, State)

    -- Get staged item state
    local ItemId = self.IdMap[Item]
    local ItemState = self:GetStagedItemState(ItemId, Changes, State)
    if not ItemState then
        return
    end

    -- Update state
    ItemState.IsLocked = Item.Locked
    Changes[ItemId] = ItemState

    -- Propagate lock state up hierarchy
    self:PropagateLock(ItemState, Changes, State)

end

function Explorer:GetStagedItemState(ItemId, Changes, State)

    -- Check if item staged yet
    local StagedItemState = ItemId and Changes[ItemId]

    -- Ensure item still exists
    if not ItemId or (StagedItemState == Support.Blank) or
        not (StagedItemState or State.Items[ItemId]) then
        return
    end

    -- Return staged item state
    return StagedItemState or Support.CloneTable(State.Items[ItemId])

end

function Explorer:UpdateItemParent(Item, Changes, State)

    -- Get staged item state
    local ItemId = self.IdMap[Item]
    local ItemState = self:GetStagedItemState(ItemId, Changes, State)
    if not ItemState then
        return
    end

    -- Get current parent ID
    local PreviousParentId = ItemState.Parent and self.IdMap[ItemState.Parent]

    -- Set new parent ID
    local Parent = Item.Parent
    local ParentId = self.IdMap[Parent]
    ItemState.Parent = Parent
    Changes[ItemId] = ItemState

    -- Queue parenting if parent item valid, but not yet registered
    if not ParentId and not (Parent == Scope) then
        if Parent:IsDescendantOf(Scope) then
            self.PendingParent[Parent] = Support.Merge(self.PendingParent[Parent] or {}, { [ItemId] = true })
        end
    end

    -- Update previous parent
    local PreviousParentState = self:GetStagedItemState(PreviousParentId, Changes, State)
    if PreviousParentState then
        PreviousParentState.Children[ItemId] = nil
        PreviousParentState.Unlocked[ItemId] = nil
        PreviousParentState.IsLocked = next(PreviousParentState.Children) and not next(PreviousParentState.Unlocked)
        Changes[PreviousParentId] = PreviousParentState
    end

    -- Update new parent
    local ParentState = self:GetStagedItemState(ParentId, Changes, State)
    if ParentState then
        ParentState.Children[ItemId] = true
        Changes[ParentId] = ParentState
        self:PropagateLock(ItemState, Changes, State)
    end

end

function Explorer:PropagateLock(ItemState, Changes, State)

    -- Continue if upward propagation is possible
    if not ItemState.Parent then
        return
    end

    -- Start propagation from changed item
    local ItemId = ItemState.Id
    local ItemState = ItemState

    -- Get item's parent state
    repeat
        local Parent = ItemState.Parent
        local ParentId = Parent and self.IdMap[Parent]
        local ParentState = self:GetStagedItemState(ParentId, Changes, State)
        if ParentState then

            -- Update parent lock state
            ParentState.Unlocked[ItemId] = (not ItemState.IsLocked) and true or nil
            ParentState.IsLocked = next(ParentState.Children) and not next(ParentState.Unlocked)
            Changes[ParentId] = ParentState

            -- Continue propagation upwards in the hierarchy
            ItemId = ParentId
            ItemState = ParentState

        -- Stop propagation if parent being removed
        else
            ItemId = nil
            ItemState = nil
        end


    -- Stop at highest reachable point in hierarchy
    until
        not ItemState
end

function Explorer:render()
    local props = self.props
    local state = self.state

    -- Display window
    return new(ImageLabel, {
        Active = true,
        Layout = 'List',
        LayoutDirection = 'Vertical',
        AnchorPoint = Vector2.new(1, 0),
        Position = UDim2.new(1, -100, 0.6, -380/2),
        Width = UDim.new(0, 145),
        Height = 'WRAP_CONTENT',
        Image = 'rbxassetid://2244248341',
        ScaleType = 'Slice',
        SliceCenter = Rect.new(4, 4, 12, 12),
        ImageTransparency = 1 - 0.93,
        ImageColor = '3B3B3B'
    },
    {
        -- Window header
        Header = new(TextLabel, {
            Text = '  EXPLORER',
            TextSize = 9,
            Height = UDim.new(0, 14),
            TextColor = 'FFFFFF',
            TextTransparency = 1 - 0.6/2
        },
        {
            CloseButton = new(ImageButton, {
                Image = 'rbxassetid://2244452978',
                ImageRectOffset = Vector2.new(0, 0),
                ImageRectSize = Vector2.new(14, 14) * 2,
                AspectRatio = 1,
                AnchorPoint = Vector2.new(1, 0.5),
                Position = UDim2.new(1, 0, 0.5, 0),
                ImageTransparency = 1 - 0.34,
                [Roact.Event.Activated] = props.Close
            })
        }),

        -- Scrollable item list
        ItemList = new(ItemList, {
            Scope = props.Scope,
            Items = state.Items,
            ScrollTo = state.ScrollTo,
            Core = props.Core,
            IdMap = self.IdMap,
            RowHeight = state.RowHeight,
            ToggleExpand = self.ToggleExpand
        })
    })
end

return Explorer
end;
};
G2L_MODULES[G2L["4bc"]] = {
Closure = function()
    local script = G2L["4bc"];
local Root = script.Parent.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local UI = Root:WaitForChild 'UI'
local UserInputService = game:GetService 'UserInputService'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local Roact = require(Vendor:WaitForChild 'Roact')
local Maid = require(Libraries:WaitForChild 'Maid')

-- Roact
local new = Roact.createElement
local Frame = require(UI:WaitForChild 'Frame')
local ImageLabel = require(UI:WaitForChild 'ImageLabel')
local ImageButton = require(UI:WaitForChild 'ImageButton')
local TextLabel = require(UI:WaitForChild 'TextLabel')
local TextBox = require(UI:WaitForChild 'TextBox')

-- Create component
local ItemRow = Roact.PureComponent:extend 'ItemRow'

function ItemRow:init()

    -- Item button callback
    self.OnActivated = function ()
        self:HandleSelection()
    end

    -- Expand arrow callback
    self.OnArrowActivated = function ()
        self:ToggleExpand()
    end

    -- Lock button callback
    self.OnLockActivated = function ()
        self:ToggleLock()
    end

    -- Name button callback
    self.OnNameActivated = function (rbx)
        local CurrentTime = tick()
        if self.LastNameClick and (CurrentTime - self.LastNameClick) <= 0.25 then
            self:setState { EditingName = true }
        else
            self.LastNameClick = CurrentTime
            self:HandleSelection()
        end
    end

    -- Name input callback
    self.OnNameInputBlur = function (rbx, EnterPressed)
        if #rbx.Text > 0 then
            self:SetName(rbx.Text)
        end
        self:setState { EditingName = Roact.None }
    end

end

function ItemRow:GetParts()
    local Object = self.props.Instance

    -- Return part for parts
    if Object:IsA 'BasePart' then
        return { Object }

    -- Return descendant parts for other items
    else
        local Parts = {}
        for _, Part in pairs(Object:GetDescendants()) do
            if Part:IsA 'BasePart' then
                Parts[#Parts + 1] = Part
            end
        end
        return Parts
    end
end

function ItemRow:ToggleLock()
    local props = self.props

    -- Create history record
    local Parts = self:GetParts()
    local HistoryRecord = {
        Parts = Parts,
        BeforeLocked = Support.GetListMembers(Parts, 'Locked'),
        AfterLocked = not props.IsLocked
    }

    function HistoryRecord:Unapply()
        props.Core.SyncAPI:Invoke('SetLocked', self.Parts, self.BeforeLocked)
    end

    function HistoryRecord:Apply()
        props.Core.SyncAPI:Invoke('SetLocked', self.Parts, self.AfterLocked)
    end

    -- Send lock toggling request to gameserver
    HistoryRecord:Apply()

    -- Register history record
    props.Core.History.Add(HistoryRecord)

end

function ItemRow:SetName(Name)
    local props = self.props

    -- Create history record
    local HistoryRecord = {
        Items = { props.Instance },
        BeforeName = props.Instance.Name,
        AfterName = Name
    }

    function HistoryRecord:Unapply()
        props.Core.SyncAPI:Invoke('SetName', self.Items, self.BeforeName)
    end

    function HistoryRecord:Apply()
        props.Core.SyncAPI:Invoke('SetName', self.Items, self.AfterName)
    end

    -- Send renaming request to gameserver
    HistoryRecord:Apply()

    -- Register history record
    props.Core.History.Add(HistoryRecord)

end

function ItemRow:HandleSelection()
    local props = self.props
    local Selection = props.Core.Selection
    local Targeting = props.Core.Targeting

    -- Check if scoping
    local Scoping = UserInputService:IsKeyDown 'LeftAlt' or
        UserInputService:IsKeyDown 'RightAlt'

    -- Enter scope if requested
    if Scoping then
        Targeting:SetScope(props.Instance)
        return
    end

    -- Check if multiselecting
    local Multiselecting = UserInputService:IsKeyDown 'LeftControl' or
        UserInputService:IsKeyDown 'RightControl'

    -- Perform selection
    if Multiselecting then
        if not Selection.IsSelected(props.Instance) then
            Selection.Add({ props.Instance }, true)
        else
            Selection.Remove({ props.Instance }, true)
        end
    else
        Selection.Replace({ props.Instance }, true)
    end
end

function ItemRow:ToggleExpand()
    self.props.ToggleExpand(self.props.Id)
end

function ItemRow:didMount()
    self.Maid = Maid.new()

    local Targeting = self.props.Core.Targeting
    local Item = self.props.Instance

    -- Listen for targeting
    self.Maid.TargetListener = Targeting.ScopeTargetChanged:Connect(function (ScopeTarget)
        local IsTarget = self.state.Targeted
        if (not IsTarget) and (ScopeTarget == Item) then
            self:setState { Targeted = true }
        elseif IsTarget and (ScopeTarget ~= Item) then
            self:setState { Targeted = Roact.None }
        end
    end)
end

function ItemRow:willUnmount()
    self.Maid = self.Maid:Destroy()
end

ItemRow.ClassIcons = {
    Part = Vector2.new(2, 1),
    MeshPart = Vector2.new(4, 8),
    UnionOperation = Vector2.new(4, 8),
    NegateOperation = Vector2.new(3, 8),
    VehicleSeat = Vector2.new(6, 4),
    Seat = Vector2.new(6, 4),
    TrussPart = Vector2.new(2, 1),
    CornerWedgePart = Vector2.new(2, 1),
    WedgePart = Vector2.new(2, 1),
    SpawnLocation = Vector2.new(6, 3),
    Model = Vector2.new(3, 1),
    Folder = Vector2.new(8, 8),
    Tool = Vector2.new(8, 2),
    Workspace = Vector2.new(10, 2),
    Accessory = Vector2.new(3, 4),
    Accoutrement = Vector2.new(3, 4)
}

function ItemRow:render()
    local props = self.props
    local state = self.state

    -- Determine icon for class
    local IconPosition = ItemRow.ClassIcons[props.Class] or Vector2.new(1, 1)

    -- Item information
    local Metadata = new(Frame, {
        Layout = 'List',
        LayoutDirection = 'Horizontal',
        VerticalAlignment = 'Center'
    },
    {
        StartSpacer = new(Frame, {
            AspectRatio = (5 + 10 * props.Depth) / 18,
            LayoutOrder = 0
        }),

        -- Class icon
        Icon = new(ImageLabel, {
            AspectRatio = 1,
            Image = 'rbxassetid://2245672825',
            ImageRectOffset = (IconPosition - Vector2.new(1, 1)) * Vector2.new(16, 16),
            ImageRectSize = Vector2.new(16, 16),
            Size = UDim2.new(1, 0, 12/18, 0),
            LayoutOrder = 1
        }),

        IconSpacer = new(Frame, {
            AspectRatio = 5/18,
            LayoutOrder = 2
        }),

        -- Item name
        NameContainer = new(ImageButton, {
            Layout = 'List',
            Width = 'WRAP_CONTENT',
            LayoutOrder = 3,
            [Roact.Event.Activated] = self.OnNameActivated
        },
        {
            Name = (not state.EditingName) and new(TextLabel, {
                TextSize = 13,
                TextColor = 'FFFFFF',
                Text = props.Name,
                Width = 'WRAP_CONTENT'
            }),
            NameInput = state.EditingName and new(TextBox, {
                TextSize = 13,
                TextColor = 'FFFFFF',
                Text = props.Name,
                Width = 'WRAP_CONTENT',
                [Roact.Event.FocusLost] = self.OnNameInputBlur
            })
        })
    })

    -- Item buttons
    local Buttons = new(Frame, {
        Layout = 'List',
        LayoutDirection = 'Horizontal',
        HorizontalAlignment = 'Right',
        VerticalAlignment = 'Center',
        Width = 'WRAP_CONTENT',
        AnchorPoint = Vector2.new(1, 0.5),
        Position = UDim2.new(1, 0, 0.5, 0)
    },
    {
        -- Locking button
        Lock = new(ImageButton, {
            AspectRatio = 1,
            DominantAxis = 'Height',
            Image = 'rbxassetid://2244452978',
            ImageRectOffset = Vector2.new(14 * (props.IsLocked and 2 or 1), 0) * 2,
            ImageRectSize = Vector2.new(14, 14) * 2,
            Size = UDim2.new(1, 0, 12/18, 0),
            ImageTransparency = 1 - (props.IsLocked and 0.75 or 0.15),
            LayoutOrder = 0,
            [Roact.Event.Activated] = self.OnLockActivated
        }),

        Spacer = new(Frame, {
            LayoutOrder = 1,
            AspectRatio = 1/10
        }),

        -- Item expansion arrow
        ArrowWrapper = next(props.Children) and new(Frame, {
            AspectRatio = 1,
            Size = UDim2.new(1, 0, 14/18, 0),
            LayoutOrder = 2
        },
        {
            Arrow = new(ImageButton, {
                Image = 'rbxassetid://2244452978',
                ImageRectOffset = Vector2.new(14 * 3, 0) * 2,
                ImageRectSize = Vector2.new(14, 14) * 2,
                Rotation = props.Expanded and 180 or 90,
                ImageTransparency = 1 - 0.15,
                [Roact.Event.Activated] = self.OnArrowActivated
            })
        }),

        EndSpacer = new(Frame, {
            LayoutOrder = 3,
            AspectRatio = 1/20
        })
    })

    -- Determine transparency from selection and targeting state
    local Transparency = 1
    if props.Selected then
        Transparency = 1 - 0.15
    elseif state.Targeted then
        Transparency = 1 - 0.05
    end

    -- Return button with contents
    return new(ImageButton, {
        LayoutOrder = props.Order,
        Size = UDim2.new(1, 0, 0, props.Height),
        AutoButtonColor = false,
        BackgroundColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = Transparency,
        [Roact.Event.Activated] = self.OnActivated
    },
    {
        Metadata = Metadata,
        Buttons = Buttons
    })
end

return ItemRow
end;
};
G2L_MODULES[G2L["4bd"]] = {
Closure = function()
    local script = G2L["4bd"];
local Root = script.Parent.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local UI = Root:WaitForChild 'UI'
local RunService = game:GetService 'RunService'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local Roact = require(Vendor:WaitForChild 'Roact')
local Maid = require(Libraries:WaitForChild 'Maid')

-- Roact
local new = Roact.createElement
local Frame = require(UI:WaitForChild 'Frame')
local ScrollingFrame = require(UI:WaitForChild 'ScrollingFrame')
local ItemRow = require(script.Parent:WaitForChild 'ItemRow')

-- Create component
local ItemList = Roact.Component:extend 'ItemList'
ItemList.defaultProps = {
    MaxHeight = 300
}

function ItemList:init(props)
    self:setState {
        Min = 0,
        Max = props.MaxHeight,
        CanvasPosition = Vector2.new()
    }

    -- Create callback for updating canvas boundaries
    self.UpdateBoundaries = function (rbx)
        if self.Mounted then
            self:setState {
                CanvasPosition = rbx.CanvasPosition,
                Min = rbx.CanvasPosition.Y - rbx.AbsoluteSize.Y,
                Max = rbx.CanvasPosition.Y + rbx.AbsoluteSize.Y
            }
        end
    end
end

function ItemList:didMount()
    self.Mounted = true
end

function ItemList:willUnmount()
    self.Mounted = false
end

function ItemList:didUpdate(previousProps, previousState)
    local IsScrollTargetSet = self.props.ScrollTo and
        (previousProps.ScrollTo ~= self.props.ScrollTo)

    -- Reset canvas position whenever scope updates (unless a scrolling target is set)
    if (previousProps.Scope ~= self.props.Scope) and (not IsScrollTargetSet) then
        self:setState({
            CanvasPosition = Vector2.new(0, 0);
            Min = 0;
            Max = self.props.MaxHeight;
        })
    end
end

function ItemList:render()
    local props = self.props
    local state = self.state

    -- Keep track of how many items are out of view
    local SkippedAbove = 0
    local SkippedBelow = 0
    local TargetCanvasPosition

    -- Declare a button for each item
    local ItemList = {}
    local VisibleItemCount = 0
    local ItemHeight = props.RowHeight

    -- Go through each item in order
    local OrderedItems = Support.Values(props.Items)
    table.sort(OrderedItems, function (A, B)
        return A.Order < B.Order
    end)
    for i = 1, #OrderedItems do
        local Item = OrderedItems[i]

        -- Get item parent state
        local ParentId = Item.Parent and props.IdMap[Item.Parent]
        local ParentState = ParentId and props.Items[ParentId]

        -- Determine visibility and depth from ancestors
        local Visible = true
        local Depth = 0
        if ParentId then
            local ParentState = ParentState
            while ParentState do

                -- Stop if ancestor not visible
                if not ParentState.Expanded then
                    Visible = nil
                    break

                -- Count visible ancestors
                else
                    Depth = Depth + 1
                end

                -- Check next ancestor
                local ParentId = props.IdMap[ParentState.Parent]
                ParentState = props.Items[ParentId]

            end
        end

        -- Set canvas position to begin at item if requested and out-of-view
        if (Item.Id == props.ScrollTo) and (self.ScrolledTo ~= props.ScrollTo) then
            local ItemPosition = VisibleItemCount * props.RowHeight
            if ItemPosition < state.CanvasPosition.Y or
               ItemPosition > (state.CanvasPosition.Y + props.MaxHeight) then
                TargetCanvasPosition = Vector2.new(0, ItemPosition)
                self.ScrolledTo = Item.Id
            end
        end

        -- Calculate whether item is in view
        if Visible then
            VisibleItemCount = VisibleItemCount + 1
            local ItemTop = (VisibleItemCount - 1) * props.RowHeight
            if ItemTop < state.Min then
                SkippedAbove = SkippedAbove + 1
                Visible = nil
            elseif ItemTop > state.Max then
                SkippedBelow = SkippedBelow + 1
                Visible = nil
            end
        end

        -- Declare component for item
        ItemList[Item.Id] = Visible and new(ItemRow, Support.Merge({}, Item, {
            Depth = Depth,
            Core = props.Core,
            ToggleExpand = props.ToggleExpand,
            Height = props.RowHeight
        }))
    end

    return new(ScrollingFrame, {
        Layout = 'List',
        LayoutDirection = 'Vertical',
        CanvasSize = UDim2.new(1, -2, 0, VisibleItemCount * props.RowHeight),
        Size = UDim2.new(1, 0, 0, VisibleItemCount * props.RowHeight),
        CanvasPosition = TargetCanvasPosition or state.CanvasPosition,
        ScrollBarThickness = 4,
        ScrollBarImageTransparency = 0.6,
        VerticalScrollBarInset = 'ScrollBar',
        [Roact.Change.CanvasPosition] = self.UpdateBoundaries,
        [Roact.Children] = Support.Merge(ItemList, {
            TopSpacer = new(Frame, {
                Size = UDim2.new(0, 0, 0, SkippedAbove * props.RowHeight),
                LayoutOrder = 0
            }),
            BottomSpacer = new(Frame, {
                Size = UDim2.new(0, 0, 0, SkippedBelow * props.RowHeight),
                LayoutOrder = #OrderedItems + 1
            }),
            SizeConstraint = new('UISizeConstraint', {
                MinSize = Vector2.new(0, 20),
                MaxSize = Vector2.new(math.huge, props.MaxHeight)
            })
        })
    })
end

return ItemList
end;
};
G2L_MODULES[G2L["4be"]] = {
Closure = function()
    local script = G2L["4be"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'

-- Libraries
local Support = require(Libraries:WaitForChild 'SupportLibrary')

-- Roact
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Create component
local ScrollingFrame = Roact.PureComponent:extend 'ScrollingFrame'

-- Set defaults
ScrollingFrame.defaultProps = {
    BackgroundTransparency = 1,
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 1, 0),
    CanvasSize = UDim2.new(1, 0, 1, 0)
}

function ScrollingFrame:render()
    local props = Support.CloneTable(self.props)
    local state = self.state

    -- Include aspect ratio constraint if specified
    if props.AspectRatio then
        local Constraint = new('UIAspectRatioConstraint', {
            AspectRatio = props.AspectRatio
        })

        -- Insert constraint into children
        props[Roact.Children] = Support.Merge(
            { AspectRatio = Constraint },
            props[Roact.Children] or {}
        )
    end

    -- Include list layout if specified
    if props.Layout == 'List' then
        local Layout = new('UIListLayout', {
            FillDirection = props.LayoutDirection,
            Padding = props.LayoutPadding,
            HorizontalAlignment = props.HorizontalAlignment,
            VerticalAlignment = props.VerticalAlignment,
            SortOrder = props.SortOrder or 'LayoutOrder',
            [Roact.Ref] = function (rbx)
                self:UpdateContentSize(rbx)
            end,
            [Roact.Change.AbsoluteContentSize] = function (rbx)
                self:UpdateContentSize(rbx)
            end
        })

        -- Update size
        props.Size = self:GetSize()
        props.CanvasSize = self:GetCanvasSize()

        -- Insert layout into children
        props[Roact.Children] = Support.Merge(
            { Layout = Layout },
            props[Roact.Children] or {}
        )
    end

    -- Filter out custom properties
    props.AspectRatio = nil
    props.Layout = nil
    props.LayoutDirection = nil
    props.LayoutPadding = nil
    props.HorizontalAlignment = nil
    props.VerticalAlignment = nil
    props.SortOrder = nil
    props.Width = nil
    props.Height = nil
    props.CanvasWidth = nil
    props.CanvasHeight = nil

    -- Display component in wrapper
    return new('ScrollingFrame', props)

end

function ScrollingFrame:GetSize(ContentSize)
    local props = self.props

    -- Determine dynamic dimensions
    local DynamicWidth = props.Size == 'WRAP_CONTENT' or
        props.Width == 'WRAP_CONTENT'
    local DynamicHeight = props.Size == 'WRAP_CONTENT' or
        props.Height == 'WRAP_CONTENT'
    local DynamicSize = DynamicWidth or DynamicHeight
    
    -- Calculate size based on content if dynamic
    return UDim2.new(
        (ContentSize and DynamicWidth) and UDim.new(0, ContentSize.X) or
            (typeof(props.Width) == 'UDim' and props.Width or props.Size.X),
        (ContentSize and DynamicHeight) and UDim.new(0, ContentSize.Y) or
            (typeof(props.Height) == 'UDim' and props.Height or props.Size.Y)
    )
end

function ScrollingFrame:GetCanvasSize(ContentSize)
    local props = self.props

    -- Determine dynamic canvas dimensions
    local DynamicCanvasWidth = props.CanvasSize == 'WRAP_CONTENT' or
        props.CanvasWidth == 'WRAP_CONTENT'
    local DynamicCanvasHeight = props.CanvasSize == 'WRAP_CONTENT' or
        props.CanvasHeight == 'WRAP_CONTENT'
    local DynamicCanvasSize = DynamicCanvasWidth or DynamicCanvasHeight

    -- Calculate size based on content if dynamic
    return UDim2.new(
        (ContentSize and DynamicCanvasWidth) and UDim.new(0, ContentSize.X) or
            (typeof(props.CanvasWidth) == 'UDim' and props.CanvasWidth or props.CanvasSize.X),
        (ContentSize and DynamicCanvasHeight) and UDim.new(0, ContentSize.Y) or
            (typeof(props.CanvasHeight) == 'UDim' and props.CanvasHeight or props.CanvasSize.Y)
    )
end

function ScrollingFrame:UpdateContentSize(Layout)
    if not (Layout and Layout.Parent) then
        return
    end

    -- Set container size based on content
    Layout.Parent.Size = self:GetSize(Layout.AbsoluteContentSize)
    Layout.Parent.CanvasSize = self:GetCanvasSize(Layout.AbsoluteContentSize)
end

return ScrollingFrame
end;
};
G2L_MODULES[G2L["4bf"]] = {
Closure = function()
    local script = G2L["4bf"];
local Root = script.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local Workspace = game:GetService('Workspace')
local ContextActionService = game:GetService('ContextActionService')
local UserInputService = game:GetService('UserInputService')

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local Maid = require(Libraries:WaitForChild 'Maid')
local Support = require(Libraries:WaitForChild 'SupportLibrary')

-- Roact
local new = Roact.createElement
local ScopeHierarchyItemButton = require(script:WaitForChild 'ScopeHierarchyItemButton')
local HotkeyTooltip = require(script:WaitForChild 'HotkeyTooltip')
local ModeToggle = require(script:WaitForChild 'ModeToggle')

-- Create component
local ScopeHUD = Roact.PureComponent:extend 'ScopeHUD'

--- Creates callbacks and sets up initial state.
function ScopeHUD:init(props)
    self.Maid = Maid.new()
    self.LayoutRef = Roact.createRef()
    self.ContainerSize, self.UpdateContainerSize = Roact.createBinding(UDim2.new(0, 0, 0, 38/2))

    --- Processes input, listens for hover start
    function self.OnInputBegin(rbx, Input, WasProcessed)
        if WasProcessed then
            return
        end

        -- Set hovering state
        if (Input.UserInputType.Name == 'MouseMovement') or
           (Input.UserInputType.Name == 'Touch') then
            self:setState({
                IsHovering = true
            })
        end
    end

    --- Processes input, listens for hover end
    function self.OnInputEnd(rbx, Input, WasProcessed)
        if (Input.UserInputType.Name == 'MouseMovement') or
           (Input.UserInputType.Name == 'Touch') then
            self:setState({
                IsHovering = false
            })
        end
    end

    --- Processes requests from buttons to set scope
    function self.SetScopeFromButton(NewScope)
        self.props.Core.Targeting:SetScope(NewScope)
    end

    -- Set initial state
    self:UpdateTargetingState()
    self:setState({
        IsHovering = false;
        IsToolModeEnabled = (self.props.Core.Mode == 'Tool')
    })
end

--- Updates the current scope and target state.
function ScopeHUD:UpdateTargetingState()
    local Targeting = self.props.Core.Targeting
    local Scope = Targeting.Scope
    local DirectTarget, ScopeTarget = Targeting:UpdateTarget()
    return self:setState({
        Scope = Scope or Roact.None;
        ScopeTarget = ScopeTarget or Roact.None;
        DirectTarget = DirectTarget or Roact.None;
        IsScopeLocked = Targeting.IsScopeLocked;
    })
end

--- Begins tracking scope and target changes.
function ScopeHUD:didMount()
    self:UpdateTargetingState()

    -- Set up targeting change listeners
    local Targeting = self.props.Core.Targeting
    self.Maid.ScopeChangeListener = Targeting.ScopeChanged:Connect(function (Scope)
        Targeting:UpdateTarget()
        self:setState({
            Scope = Scope or Roact.None;
        })
    end)
    self.Maid.ScopeTargetChangeListener = Targeting.ScopeTargetChanged:Connect(function (ScopeTarget)
        self:setState({
            ScopeTarget = ScopeTarget or Roact.None;
        })
    end)
    self.Maid.TargetChangeListener = Targeting.TargetChanged:Connect(function (DirectTarget)
        self:setState({
            DirectTarget = DirectTarget or Roact.None;
        })
    end)
    self.Maid.ScopeLockChangeListener = Targeting.ScopeLockChanged:Connect(function (IsScopeLocked)
        self:setState({
            IsScopeLocked = IsScopeLocked;
        })
    end)

    -- Set up alt key listeners
    local function AltKeyCallback(_, State, Input)
        if State.Name == 'Begin' then
            self:setState({
                IsAltDown = true;
            })
        elseif State.Name == 'End' then
            self:setState({
                IsAltDown = false;
            })
        end
        return Enum.ContextActionResult.Pass
    end
    ContextActionService:BindAction('BT/ScopeHUD: Scope', AltKeyCallback, false,
        Enum.KeyCode.LeftAlt,
        Enum.KeyCode.RightAlt
    )

    -- Set up content size listener
    if self.LayoutRef.current then
        local Layout = self.LayoutRef.current
        local LayoutChanged = Layout:GetPropertyChangedSignal('AbsoluteContentSize')
        self.UpdateContainerSize(UDim2.new(0, Layout.AbsoluteContentSize.X, 0, 38/2))
        self.Maid.LayoutListener = LayoutChanged:Connect(function ()
            self.UpdateContainerSize(UDim2.new(0, Layout.AbsoluteContentSize.X, 0, 38/2))
        end)
    end
end

--- Cleans up tracking resources.
function ScopeHUD:willUnmount()
    self.Maid:Destroy()
end

function ScopeHUD:render()
    return new('Frame', {
        Active = true;
        Draggable = true;
        Position = self.state.IsToolModeEnabled and
            UDim2.new(0, 10/2, 1, -8/2) or
            UDim2.new(0, 10/2, 0, 8/2);
        AnchorPoint = self.state.IsToolModeEnabled and
            Vector2.new(0, 1) or
            Vector2.new(0, 0);
        Size = self.ContainerSize;
        BackgroundTransparency = 1;
        [Roact.Event.InputBegan] = self.OnInputBegin;
        [Roact.Event.InputEnded] = self.OnInputEnd;
    },
    Support.Merge(self:BuildScopeHierarchyButtons(), {
        Layout = new('UIListLayout', {
            [Roact.Ref] = self.LayoutRef;
            FillDirection = Enum.FillDirection.Horizontal;
            HorizontalAlignment = Enum.HorizontalAlignment.Left;
            VerticalAlignment = Enum.VerticalAlignment.Center;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Padding = UDim.new(0, 5/2);
        });
        ModeToggle = new(ModeToggle, {
            Core = self.props.Core;
            IsToolModeEnabled = self.state.IsToolModeEnabled;
        });
    }))
end

--- Returns whether it should be possible to scope into the given item.
-- @returns boolean
local function IsItemScopable(Item)
    return Item:IsA('Model')
        or Item:IsA('Folder')
        or Item:IsA('Tool')
        or Item:IsA('Accessory')
        or Item:IsA('Accoutrement')
        or (Item:IsA('BasePart') and Item:FindFirstChildWhichIsA('BasePart', true))
end

--- Builds and returns a button for each item in the scope hierarchy.
-- @returns ScopeHierarchyItemButton[]
function ScopeHUD:BuildScopeHierarchyButtons()
    local Hierarchy = {}
    local Buttons = {}

    -- Navigate up hierarchy from scope target
    local CurrentScopePosition = self.state.ScopeTarget or
                                 self.state.Scope
    while (CurrentScopePosition ~= nil) and
          (CurrentScopePosition ~= Workspace.Parent) do
        table.insert(Hierarchy, 1, CurrentScopePosition)
        CurrentScopePosition = CurrentScopePosition.Parent
    end

    -- Create button for each scope hierarchy item
    for Index, ScopePosition in ipairs(Hierarchy) do
        Buttons[Index] = new(ScopeHierarchyItemButton, {
            Instance = ScopePosition;
            IsTarget = (self.state.ScopeTarget == ScopePosition);
            IsScopeParent = self.state.Scope and (self.state.Scope.Parent == ScopePosition);
            IsScope = (self.state.Scope == ScopePosition);
            IsScopable = (self.state.ScopeTarget == ScopePosition) and IsItemScopable(ScopePosition);
            IsScopeLocked = self.state.IsScopeLocked;
            SetScopeFromButton = self.SetScopeFromButton;
            IsAltDown = self.state.IsAltDown;
            LayoutOrder = Index + 1;
        })
    end

    -- Add hotkey tooltip if alt not held down
    if not self.state.IsAltDown then
        Buttons[#Hierarchy + 1] = new(HotkeyTooltip, {
            IsAltDown = false;
            DisplayAltHotkey = UserInputService.KeyboardEnabled;
            LayoutOrder = #Hierarchy + 2;
        })
    end

    -- Return list of buttons
    return Buttons
end

return ScopeHUD
end;
};
G2L_MODULES[G2L["4c0"]] = {
Closure = function()
    local script = G2L["4c0"];
local Root = script.Parent.Parent.Parent
local Vendor = Root:WaitForChild 'Vendor'
local Roact = require(Vendor:WaitForChild 'Roact')

-- Components
local ScopeOutTooltip = require(script:WaitForChild 'ScopeOutTooltip')
local ScopeLockTooltip = require(script:WaitForChild 'ScopeLockTooltip')
local ScopeInTooltip = require(script:WaitForChild 'ScopeInTooltip')
local AltTooltip = require(script:WaitForChild 'AltTooltip')

local function HotkeyTooltip(props)
    local Tooltip = nil

    -- Select appropriate tooltip
    if props.IsAltDown then
        if props.IsScopeParent then
            Tooltip = Roact.createElement(ScopeOutTooltip, props)
        elseif props.IsScope and (not props.IsScopeLocked) then
            Tooltip = Roact.createElement(ScopeLockTooltip, props)
        elseif props.IsScopable then
            Tooltip = Roact.createElement(ScopeInTooltip, props)
        end
    elseif props.DisplayAltHotkey then
        Tooltip = Roact.createElement(AltTooltip, props)
    end

    -- Return tooltip with spacer
    return Roact.createFragment({
        Tooltip = Tooltip;
        Spacer = Tooltip and Roact.createElement('Frame', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, 0, 1, 0);
            LayoutOrder = props.LayoutOrder and (props.LayoutOrder - 1) or 2;
        });
    })
end

return HotkeyTooltip
end;
};
G2L_MODULES[G2L["4c1"]] = {
Closure = function()
    local script = G2L["4c1"];
local Root = script.Parent.Parent.Parent.Parent
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService('TextService')

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Calculate label length
local LABEL_TEXT = 'ALT'
local LABEL_LENGTH = TextService:GetTextSize(LABEL_TEXT,
    21/2, Enum.Font.SourceSansSemibold, Vector2.new(math.huge, math.huge)).X

local function ScopeInTooltip(props)
    return new('ImageLabel', {
        BackgroundTransparency = 1;
        ImageTransparency = 1 - 0.14;
        Image = 'rbxassetid://4445959523';
        ScaleType = Enum.ScaleType.Slice;
        SliceCenter = Rect.new(4, 4, 12, 12);
        ImageColor3 = Color3.fromRGB(0, 0, 0);
        Size = UDim2.new(0, LABEL_LENGTH + 8/2, 0, 30/2);
        LayoutOrder = props.LayoutOrder or 3;
    },
    {
        Label = new('TextLabel', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, LABEL_LENGTH, 1, 0);
            Position = UDim2.new(0, 5/2, 0.5, 0);
            AnchorPoint = Vector2.new(0, 0.5);
            Font = Enum.Font.SourceSansSemibold;
            TextSize = 21/2;
            Text = LABEL_TEXT;
            TextTransparency = 0.5;
            TextYAlignment = Enum.TextYAlignment.Center;
            TextColor3 = Color3.fromRGB(255, 255, 255);
            LayoutOrder = 1;
        });
    })
end

return ScopeInTooltip
end;
};
G2L_MODULES[G2L["4c2"]] = {
Closure = function()
    local script = G2L["4c2"];
local Root = script.Parent.Parent.Parent.Parent
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService('TextService')

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Calculate label length
local LABEL_TEXT = 'Z'
local LABEL_LENGTH = TextService:GetTextSize(LABEL_TEXT,
    24/2, Enum.Font.SourceSans, Vector2.new(math.huge, math.huge)).X
local ICON_SIZE = 21

local function ScopeInTooltip(props)
    return new('ImageLabel', {
        BackgroundTransparency = 1;
        ImageTransparency = 1 - 0.14;
        Image = 'rbxassetid://4445959523';
        ScaleType = Enum.ScaleType.Slice;
        SliceCenter = Rect.new(4, 4, 12, 12);
        ImageColor3 = Color3.fromRGB(0, 0, 0);
        Size = UDim2.new(0, LABEL_LENGTH + (ICON_SIZE + 9)/2, 0, 30/2);
        LayoutOrder = props.LayoutOrder or 3;
    },
    {
        IconWrapper = new('Frame', {
            Size = UDim2.new(0, ICON_SIZE/2, 0, ICON_SIZE/2);
            Position = UDim2.new(0, 0, 0.5, 0);
            AnchorPoint = Vector2.new(0, 0.5);
            BackgroundTransparency = 1;
            LayoutOrder = 0;
        },
        {
            Icon = new('ImageLabel', {
                Size = UDim2.new(1, 0, 1, 0);
                BackgroundTransparency = 1;
                ImageTransparency = 0.5;
                Image = 'rbxassetid://2244452978';
                ImageRectOffset = Vector2.new(14*3, 0) * 2;
                ImageRectSize = Vector2.new(14, 14) * 2;
                Rotation = 90;
            });
        });
        Label = new('TextLabel', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, LABEL_LENGTH, 1, 0);
            Position = UDim2.new(0, ICON_SIZE/2, 0.5, 0);
            AnchorPoint = Vector2.new(0, 0.5);
            Font = Enum.Font.SourceSans;
            TextSize = 24/2;
            Text = LABEL_TEXT;
            TextTransparency = 0.5;
            TextYAlignment = Enum.TextYAlignment.Center;
            TextColor3 = Color3.fromRGB(255, 255, 255);
            LayoutOrder = 1;
        });
    })
end

return ScopeInTooltip
end;
};
G2L_MODULES[G2L["4c3"]] = {
Closure = function()
    local script = G2L["4c3"];
local Root = script.Parent.Parent.Parent.Parent
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService('TextService')

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Calculate label length
local LABEL_TEXT = 'F'
local LABEL_LENGTH = TextService:GetTextSize(LABEL_TEXT,
    24/2, Enum.Font.SourceSans, Vector2.new(math.huge, math.huge)).X
local ICON_SIZE = 18

local function ScopeLockTooltip(props)
    return new('ImageLabel', {
        BackgroundTransparency = 1;
        ImageTransparency = 1 - 0.14;
        Image = 'rbxassetid://4445959523';
        ScaleType = Enum.ScaleType.Slice;
        SliceCenter = Rect.new(4, 4, 12, 12);
        ImageColor3 = Color3.fromRGB(0, 0, 0);
        Size = UDim2.new(0, LABEL_LENGTH + (ICON_SIZE + 12)/2, 0, 30/2);
        LayoutOrder = props.LayoutOrder or 3;
    },
    {
        IconWrapper = new('Frame', {
            Size = UDim2.new(0, ICON_SIZE/2, 0, ICON_SIZE/2);
            Position = UDim2.new(0, 4/2, 0.5, 0);
            AnchorPoint = Vector2.new(0, 0.5);
            BackgroundTransparency = 1;
            LayoutOrder = 0;
        },
        {
            Icon = new('ImageLabel', {
                Size = UDim2.new(1, 0, 1, 0);
                BackgroundTransparency = 1;
                ImageTransparency = 0.5;
                Image = 'rbxassetid://2244452978';
                ImageRectOffset = Vector2.new(14*2, 0) * 2;
                ImageRectSize = Vector2.new(14, 14) * 2;
            });
        });
        Label = new('TextLabel', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, LABEL_LENGTH, 1, 0);
            Position = UDim2.new(0, (6 + ICON_SIZE)/2, 0.5, 0);
            AnchorPoint = Vector2.new(0, 0.5);
            Font = Enum.Font.SourceSans;
            TextSize = 24/2;
            Text = LABEL_TEXT;
            TextTransparency = 0.5;
            TextYAlignment = Enum.TextYAlignment.Center;
            TextColor3 = Color3.fromRGB(255, 255, 255);
            LayoutOrder = 1;
        });
    })
end

return ScopeLockTooltip
end;
};
G2L_MODULES[G2L["4c4"]] = {
Closure = function()
    local script = G2L["4c4"];
local Root = script.Parent.Parent.Parent.Parent
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService('TextService')

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Calculate label length
local LABEL_TEXT = 'SHIFT-Z'
local LABEL_LENGTH = TextService:GetTextSize(LABEL_TEXT,
    24/2, Enum.Font.SourceSans, Vector2.new(math.huge, math.huge)).X
local ICON_SIZE = 21

local function ScopeOutTooltip(props)
    return new('ImageLabel', {
        BackgroundTransparency = 1;
        ImageTransparency = 1 - 0.07;
        Image = 'rbxassetid://4445959523';
        ScaleType = Enum.ScaleType.Slice;
        SliceCenter = Rect.new(4, 4, 12, 12);
        ImageColor3 = Color3.fromRGB(0, 0, 0);
        Size = UDim2.new(0, LABEL_LENGTH + (ICON_SIZE + 9)/2, 0, 30/2);
        LayoutOrder = props.LayoutOrder or 3;
    },
    {
        IconWrapper = new('Frame', {
            Size = UDim2.new(0, ICON_SIZE/2, 0, ICON_SIZE/2);
            Position = UDim2.new(0, 0, 0.5, 0);
            AnchorPoint = Vector2.new(0, 0.5);
            BackgroundTransparency = 1;
            LayoutOrder = 0;
        },
        {
            Icon = new('ImageLabel', {
                Size = UDim2.new(1, 0, 1, 0);
                BackgroundTransparency = 1;
                ImageTransparency = 0.7;
                Image = 'rbxassetid://2244452978';
                ImageRectOffset = Vector2.new(14*3, 0) * 2;
                ImageRectSize = Vector2.new(14, 14) * 2;
                Rotation = -90;
            });
        });
        Label = new('TextLabel', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, LABEL_LENGTH, 1, 0);
            Position = UDim2.new(0, ICON_SIZE/2, 0.5, 0);
            AnchorPoint = Vector2.new(0, 0.5);
            Font = Enum.Font.SourceSans;
            TextSize = 24/2;
            Text = LABEL_TEXT;
            TextTransparency = 0.7;
            TextYAlignment = Enum.TextYAlignment.Center;
            TextColor3 = Color3.fromRGB(255, 255, 255);
            LayoutOrder = 1;
        });
    })
end

return ScopeOutTooltip
end;
};
G2L_MODULES[G2L["4c5"]] = {
Closure = function()
    local script = G2L["4c5"];
local Root = script.Parent.Parent.Parent
local Libraries = Root:WaitForChild 'Libraries'
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService('TextService')

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local Maid = require(Libraries:WaitForChild 'Maid')

-- Roact
local new = Roact.createElement
local HotkeyTooltip = require(script.Parent:WaitForChild 'HotkeyTooltip')

-- Create component
local ScopeHierarchyItemButton = Roact.PureComponent:extend 'ScopeHierarchyItemButton'

--- Creates callbacks and sets up initial state.
function ScopeHierarchyItemButton:init()
    self.Maid = Maid.new()
    self.LayoutRef = Roact.createRef()
    self.ContainerSize, self.UpdateContainerSize = Roact.createBinding(UDim2.new(0, 0, 1, 0))

    --- Processes clicks, triggers scope change
    function self.OnClicked()
        self.props.SetScopeFromButton(self.props.Instance)
    end

    -- Set initial state
    self:UpdateInstanceState()
end

local ClassIconPositions = {
    Part = Vector2.new(2, 1);
    MeshPart = Vector2.new(4, 8);
    UnionOperation = Vector2.new(4, 8);
    NegateOperation = Vector2.new(3, 8);
    VehicleSeat = Vector2.new(6, 4);
    Seat = Vector2.new(6, 4);
    TrussPart = Vector2.new(2, 1);
    CornerWedgePart = Vector2.new(2, 1);
    WedgePart = Vector2.new(2, 1);
    SpawnLocation = Vector2.new(6, 3);
    Model = Vector2.new(3, 1);
    Folder = Vector2.new(8, 8);
    Tool = Vector2.new(8, 2);
    Workspace = Vector2.new(10, 2);
    Accessory = Vector2.new(3, 4);
    Accoutrement = Vector2.new(3, 4);
}

--- Updates the current instance state.
function ScopeHierarchyItemButton:UpdateInstanceState()
    local NewName = self.props.Instance.Name
    local MaxTextBounds = Vector2.new(math.huge, math.huge)
    local TextBounds = TextService:GetTextSize(NewName, 33/2, Enum.Font.SourceSans, MaxTextBounds)

    -- Update instance state
    self:setState({
        InstanceName = NewName;
        InstanceNameLength = TextBounds.X;
    })
end

--- Begins listening to the current instance.
function ScopeHierarchyItemButton:StartTrackingInstance()
    local NameChanged = self.props.Instance:GetPropertyChangedSignal('Name')
    self.Maid.NameListener = NameChanged:Connect(function ()
        self:UpdateInstanceState()
    end)
end

--- Update instance state and track changes.
function ScopeHierarchyItemButton:didMount()
    self:UpdateInstanceState()
    self:StartTrackingInstance()

    -- Set up content size listener
    if self.LayoutRef.current then
        local Layout = self.LayoutRef.current
        local LayoutChanged = Layout:GetPropertyChangedSignal('AbsoluteContentSize')
        self.UpdateContainerSize(UDim2.new(0, Layout.AbsoluteContentSize.X, 0, 38/2))
        self.Maid.LayoutListener = LayoutChanged:Connect(function ()
            self.UpdateContainerSize(UDim2.new(0, Layout.AbsoluteContentSize.X, 0, 38/2))
        end)
    end
end

--- Cleans up tracking resources.
function ScopeHierarchyItemButton:willUnmount()
    self.Maid:Destroy()
end

--- Updates state and tracking resources for new instances.
function ScopeHierarchyItemButton:didUpdate(previousProps, previousState)
    if previousProps.Instance ~= self.props.Instance then
        self:UpdateInstanceState()
        self:StartTrackingInstance()
    end
end

function ScopeHierarchyItemButton:render()
    local ClassName = self.props.Instance.ClassName
    local IconPosition = ClassIconPositions[ClassName] or Vector2.new(1, 1)
    local ShouldDisplayArrow = (self.props.LayoutOrder ~= 2) or nil

    return new('ImageButton', {
        BackgroundTransparency = 1;
        ImageTransparency = 1;
        Size = self.ContainerSize;
        LayoutOrder = self.props.LayoutOrder;
        [Roact.Event.InputBegan] = self.OnInputBegin;
        [Roact.Event.InputEnded] = self.OnInputEnd;
        [Roact.Event.Activated] = self.OnClicked;
    },
    {
        Layout = new('UIListLayout', {
            [Roact.Ref] = self.LayoutRef;
            FillDirection = Enum.FillDirection.Horizontal;
            HorizontalAlignment = Enum.HorizontalAlignment.Left;
            VerticalAlignment = Enum.VerticalAlignment.Center;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Padding = UDim.new(0, 5/2);
        });

        ArrowWrapper = ShouldDisplayArrow and new('Frame', {
            Size = UDim2.new(0, 38/2, 0, 38/2);
            BackgroundTransparency = 1;
            LayoutOrder = 0;
        },
        {
            Arrow = new('ImageLabel', {
                Size = UDim2.new(1, 0, 1, 0);
                BackgroundTransparency = 1;
                Image = 'rbxassetid://2244452978';
                ImageRectOffset = Vector2.new(14*3, 0) * 2;
                ImageRectSize = Vector2.new(14, 14) * 2;
                ImageTransparency = 0;
                Rotation = 90;
            });
        });

        InstanceInfo = new('Frame', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, self.state.InstanceNameLength + 28/2 + 10/2, 1, 0);
            LayoutOrder = 1;
        },
        {
            InstanceIcon = new('ImageLabel', {
                BackgroundTransparency = 1;
                Image = 'rbxassetid://2245672825';
                ImageRectOffset = (IconPosition - Vector2.new(1, 1)) * Vector2.new(16, 16);
                ImageRectSize = Vector2.new(16, 16);
                ImageTransparency = self.props.IsTarget and 0.5 or 0;
                AnchorPoint = Vector2.new(0, 0.5);
                Position = UDim2.new(0, 0, 0.5, 0);
                Size = UDim2.new(0, 28/2, 0, 28/2);
                LayoutOrder = 0;
            });
            InstanceName = new('TextLabel', {
                BackgroundTransparency = 1;
                Size = UDim2.new(0, self.state.InstanceNameLength, 0, 28/2);
                Position = UDim2.new(0, 28/2 + 10/2, 0.5, 0);
                AnchorPoint = Vector2.new(0, 0.5);
                Font = Enum.Font.SourceSans;
                TextSize = 33/2;
                Text = self.state.InstanceName;
                TextTransparency = self.props.IsTarget and 0.5 or 0;
                TextYAlignment = Enum.TextYAlignment.Center;
                TextColor3 = Color3.fromRGB(255, 255, 255);
                LayoutOrder = 1;
            },
            {
                TextShadow = new('TextLabel', {
                    BackgroundTransparency = 1;
                    Size = UDim2.new(1, 0, 1, 0);
                    Position = UDim2.new(0, 0, 0, 1);
                    Font = Enum.Font.SourceSans;
                    TextSize = 33/2;
                    Text = self.state.InstanceName;
                    TextYAlignment = Enum.TextYAlignment.Center;
                    TextColor3 = Color3.fromRGB(112, 112, 112);
                    TextStrokeColor3 = Color3.fromRGB(112, 112, 112);
                    TextTransparency = self.props.IsTarget and 1 or 0.77;
                    TextStrokeTransparency = 0.77;
                    ZIndex = 0;
                })
            });
        });

        Tooltip = new(HotkeyTooltip, {
            IsScopeParent = self.props.IsScopeParent;
            IsScope = self.props.IsScope;
            IsScopable = self.props.IsScopable;
            IsScopeLocked = self.props.IsScopeLocked;
            IsAltDown = self.props.IsAltDown;
        });
    })
end

return ScopeHierarchyItemButton
end;
};
G2L_MODULES[G2L["4c6"]] = {
Closure = function()
    local script = G2L["4c6"];
local Root = script.Parent.Parent.Parent
local Vendor = Root:WaitForChild 'Vendor'
local Libraries = Root:WaitForChild 'Libraries'

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local Maid = require(Libraries:WaitForChild 'Maid')

-- Roact
local new = Roact.createElement
local Tooltip = require(script:WaitForChild 'Tooltip')

local ModeToggle = Roact.PureComponent:extend 'ModeToggle'

function ModeToggle:init()
    self.Maid = Maid.new()

    --- Processes input, listens for hover start
    function self.OnInputBegin(rbx, Input, WasProcessed)
        if WasProcessed then
            return
        end

        -- Set hovering state
        if Input.UserInputType.Name == 'MouseMovement' then
            self:setState({
                IsHovering = true;
            })
        end
    end

    --- Processes input, listens for hover end
    function self.OnInputEnd(rbx, Input, WasProcessed)
        if Input.UserInputType.Name == 'MouseMovement' then
            self:setState({
                IsHovering = false;
            })
        end
    end

    --- Processes input, and toggles between targeting modes.
    function self.OnActivated()
        self.props.Core.Targeting:ToggleTargetingMode()
    end

    -- Set initial targeting mode
    self:setState({
        TargetingMode = self.props.Core.Targeting.TargetingMode;
        IsHovering = false;
    })
end

function ModeToggle:didMount()
    local Targeting = self.props.Core.Targeting
    self.Maid.ModeListener = Targeting.TargetingModeChanged:Connect(function (NewTargetingMode)
        self:setState({
            TargetingMode = NewTargetingMode;
        })
    end)
end

function ModeToggle:willUnmount()
    self.Maid:Destroy()
end

function ModeToggle:render()
    local IconSpritesheetPosition = (self.state.TargetingMode == 'Scoped' and 0) or
                                    (self.state.TargetingMode == 'Direct' and 14)
    return Roact.createFragment({
        ModeToggle = new('ImageButton', {
            BackgroundTransparency = 1;
            Image = 'rbxassetid://4445959523';
            ImageTransparency = 1 - (self.state.IsHovering and 0.5 or 0.2);
            ScaleType = Enum.ScaleType.Slice;
            SliceCenter = Rect.new(4, 4, 12, 12);
            ImageColor3 = Color3.fromRGB(131, 131, 131);
            Size = UDim2.new(0, 36/2, 0, 36/2);
            LayoutOrder = 0;
            [Roact.Event.Activated] = self.OnActivated;
            [Roact.Event.InputBegan] = self.OnInputBegin;
            [Roact.Event.InputEnded] = self.OnInputEnd;
        },
        {
            Icon = new('ImageLabel', {
                BackgroundTransparency = 1;
                Image = 'rbxassetid://4463020853';
                ImageTransparency = 1 - (self.state.IsHovering and 1 or 0.5);
                AnchorPoint = Vector2.new(0.5, 0.5);
                Position = UDim2.new(0.5, 0, 0.5, 0);
                Size = UDim2.new(0, 28/2, 0, 28/2);
                ImageRectOffset = Vector2.new(IconSpritesheetPosition, 0);
                ImageRectSize = Vector2.new(14, 14);
            });
            Tooltip = new(Tooltip, {
                Visible = self.state.IsHovering;
                IsToolModeEnabled = self.props.IsToolModeEnabled;
            });
        });
        ModeToggleSpacer = new('Frame', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, 0, 1, 0);
            LayoutOrder = 1;
        });
    })
end

return ModeToggle
end;
};
G2L_MODULES[G2L["4c7"]] = {
Closure = function()
    local script = G2L["4c7"];
local Root = script.Parent.Parent.Parent.Parent
local Vendor = Root:WaitForChild 'Vendor'
local TextService = game:GetService('TextService')

-- Libraries
local Roact = require(Vendor:WaitForChild 'Roact')
local new = Roact.createElement

-- Text sizes
local TextBoundaries = Vector2.new(math.huge, math.huge)
local TITLE_SIZE = TextService:GetTextSize('Selection mode', 24/2, Enum.Font.SourceSans, TextBoundaries)
local HOTKEY_SIZE = TextService:GetTextSize('SHIFT-T', 24/2, Enum.Font.SourceSans, TextBoundaries)
local SCOPED_LABEL_SIZE = TextService:GetTextSize('Groups and parts', 25/2, Enum.Font.SourceSans, TextBoundaries)
local DIRECT_LABEL_SIZE = TextService:GetTextSize('Parts only', 25/2, Enum.Font.SourceSans, TextBoundaries)

local function Tooltip(props)
    return new('ImageLabel', {
        AnchorPoint = props.IsToolModeEnabled and
            Vector2.new(0, 1) or
            Vector2.new(0, 0);
        Position = props.IsToolModeEnabled and
            UDim2.new(0, 0, 0, -12/2) or
            UDim2.new(0, 0, 1, 12/2);
        BackgroundTransparency = 1;
        Image = 'rbxassetid://4445959523';
        ScaleType = Enum.ScaleType.Slice;
        SliceCenter = Rect.new(4, 4, 12, 12);
        ImageColor3 = Color3.fromRGB(67, 67, 67);
        Size = UDim2.new(0, TITLE_SIZE.X + 15/2 + HOTKEY_SIZE.X + 22/2, 0, 94/2);
        Visible = props.Visible;
    },
    {
        Arrow = new('Frame', {
            BackgroundColor3 = Color3.fromRGB(67, 67, 67);
            BorderSizePixel = 0;
            AnchorPoint = Vector2.new(0.5, 0.5);
            Position = props.IsToolModeEnabled and
                UDim2.new(0, 18/2, 1, 0) or
                UDim2.new(0, 18/2, 0, 0);
            Size = UDim2.new(0, 10/2, 0, 10/2);
            Rotation = 45;
        });
        Title = new('TextLabel', {
            BackgroundTransparency = 1;
            Font = Enum.Font.SourceSans;
            TextSize = 24/2;
            TextColor3 = Color3.new(1, 1, 1);
            TextTransparency = 1 - 0.6;
            Text = 'Selection mode';
            Size = UDim2.new(0, TITLE_SIZE.X, 0, TITLE_SIZE.Y);
            Position = UDim2.new(0, 8/2, 0, 5/2 + 2);
        });
        Hotkey = new('TextLabel', {
            BackgroundTransparency = 1;
            Font = Enum.Font.SourceSansSemibold;
            TextSize = 20/2;
            TextColor3 = Color3.new(1, 1, 1);
            TextTransparency = 0;
            Text = 'SHIFT-T';
            Size = UDim2.new(0, HOTKEY_SIZE.X, 0, HOTKEY_SIZE.Y);
            Position = UDim2.new(0, 8/2 + TITLE_SIZE.X + 15/2, 0, 5/2 + 2);
        });
        ScopedIcon = new('ImageLabel', {
            BackgroundTransparency = 1;
            Image = 'rbxassetid://4463020853';
            ImageTransparency = 1 - 0.4;
            Position = UDim2.fromOffset(
                8/2,
                5/2 + TITLE_SIZE.Y + 2
            );
            Size = UDim2.new(0, 28/2, 0, 28/2);
            ImageRectOffset = Vector2.new(0, 0);
            ImageRectSize = Vector2.new(14, 14);
        });
        ScopedLabel = new('TextLabel', {
            BackgroundTransparency = 1;
            Font = Enum.Font.SourceSans;
            TextSize = 25/2;
            TextColor3 = Color3.new(1, 1, 1);
            Text = 'Groups and parts';
            Size = UDim2.new(0, SCOPED_LABEL_SIZE.X, 0, SCOPED_LABEL_SIZE.Y);
            Position = UDim2.fromOffset(
                (8 + 26 + 8)/2,
                5/2 + TITLE_SIZE.Y + 2
            );
            TextXAlignment = Enum.TextXAlignment.Left;
        });
        DirectIcon = new('ImageLabel', {
            BackgroundTransparency = 1;
            Image = 'rbxassetid://4463020853';
            ImageTransparency = 1 - 0.4;
            Position = UDim2.fromOffset(
                8/2,
                5/2 + TITLE_SIZE.Y + 2 + SCOPED_LABEL_SIZE.Y + 1
            );
            Size = UDim2.new(0, 28/2, 0, 28/2);
            ImageRectOffset = Vector2.new(14, 0);
            ImageRectSize = Vector2.new(14, 14);
        });
        DirectLabel = new('TextLabel', {
            BackgroundTransparency = 1;
            Font = Enum.Font.SourceSans;
            TextSize = 25/2;
            TextColor3 = Color3.new(1, 1, 1);
            Text = 'Parts only';
            Size = UDim2.new(0, DIRECT_LABEL_SIZE.X, 0, DIRECT_LABEL_SIZE.Y);
            Position = UDim2.fromOffset(
                (8 + 26 + 8)/2,
                5/2 + TITLE_SIZE.Y + 2 + SCOPED_LABEL_SIZE.Y + 1
            );
            TextXAlignment = Enum.TextXAlignment.Left;
        });
    })
end

return Tooltip
end;
};
G2L_MODULES[G2L["4c9"]] = {
Closure = function()
    local script = G2L["4c9"];
--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconciler = require(script.createReconciler)
local createReconcilerCompat = require(script.createReconcilerCompat)
local RobloxRenderer = require(script.RobloxRenderer)
local strict = require(script.strict)
local Binding = require(script.Binding)

local robloxReconciler = createReconciler(RobloxRenderer)
local reconcilerCompat = createReconcilerCompat(robloxReconciler)

local Roact = strict {
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = robloxReconciler.mountVirtualTree,
	unmount = robloxReconciler.unmountVirtualTree,
	update = robloxReconciler.updateVirtualTree,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {
	},
}

return Roact
end;
};
G2L_MODULES[G2L["4ca"]] = {
Closure = function()
    local script = G2L["4ca"];
local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = (
					"Expected arg #1 to contain only bindings, but key %q had a non-binding value"
				):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi
end;
};
G2L_MODULES[G2L["4cb"]] = {
Closure = function()
    local script = G2L["4cb"];
return function()
	local createSpy = require(script.Parent.createSpy)
	local Type = require(script.Parent.Type)
	local GlobalConfig = require(script.Parent.GlobalConfig)

	local Binding = require(script.Parent.Binding)

	describe("Binding.create", function()
		it("should return a Binding object and an update function", function()
			local binding, update = Binding.create(1)

			expect(Type.of(binding)).to.equal(Type.Binding)
			expect(typeof(update)).to.equal("function")
		end)

		it("should support tostring on bindings", function()
			local binding, update = Binding.create(1)
			expect(tostring(binding)).to.equal("RoactBinding(1)")

			update("foo")
			expect(tostring(binding)).to.equal("RoactBinding(foo)")
		end)
	end)

	describe("Binding object", function()
		it("should provide a getter and setter", function()
			local binding, update = Binding.create(1)

			expect(binding:getValue()).to.equal(1)

			update(3)

			expect(binding:getValue()).to.equal(3)
		end)

		it("should let users subscribe and unsubscribe to its updates", function()
			local binding, update = Binding.create(1)

			local spy = createSpy()
			local disconnect = Binding.subscribe(binding, spy.value)

			expect(spy.callCount).to.equal(0)

			update(2)

			expect(spy.callCount).to.equal(1)
			spy:assertCalledWith(2)

			disconnect()
			update(3)

			expect(spy.callCount).to.equal(1)
		end)
	end)

	describe("Mapped bindings", function()
		it("should be composable", function()
			local word, updateWord = Binding.create("hi")

			local wordLength = word:map(string.len)
			local isEvenLength = wordLength:map(function(value)
				return value % 2 == 0
			end)

			expect(word:getValue()).to.equal("hi")
			expect(wordLength:getValue()).to.equal(2)
			expect(isEvenLength:getValue()).to.equal(true)

			updateWord("sup")

			expect(word:getValue()).to.equal("sup")
			expect(wordLength:getValue()).to.equal(3)
			expect(isEvenLength:getValue()).to.equal(false)
		end)

		it("should cascade updates when subscribed", function()
			-- base binding
			local word, updateWord = Binding.create("hi")

			local wordSpy = createSpy()
			local disconnectWord = Binding.subscribe(word, wordSpy.value)

			-- binding -> base binding
			local length = word:map(string.len)

			local lengthSpy = createSpy()
			local disconnectLength = Binding.subscribe(length, lengthSpy.value)

			-- binding -> binding -> base binding
			local isEvenLength = length:map(function(value)
				return value % 2 == 0
			end)

			local isEvenLengthSpy = createSpy()
			local disconnectIsEvenLength = Binding.subscribe(isEvenLength, isEvenLengthSpy.value)

			expect(wordSpy.callCount).to.equal(0)
			expect(lengthSpy.callCount).to.equal(0)
			expect(isEvenLengthSpy.callCount).to.equal(0)

			updateWord("nice")

			expect(wordSpy.callCount).to.equal(1)
			wordSpy:assertCalledWith("nice")

			expect(lengthSpy.callCount).to.equal(1)
			lengthSpy:assertCalledWith(4)

			expect(isEvenLengthSpy.callCount).to.equal(1)
			isEvenLengthSpy:assertCalledWith(true)

			disconnectWord()
			disconnectLength()
			disconnectIsEvenLength()

			updateWord("goodbye")

			expect(wordSpy.callCount).to.equal(1)
			expect(isEvenLengthSpy.callCount).to.equal(1)
			expect(lengthSpy.callCount).to.equal(1)
		end)

		it("should throw when updated directly", function()
			local source = Binding.create(1)
			local mapped = source:map(function(v)
				return v
			end)

			expect(function()
				Binding.update(mapped, 5)
			end).to.throw()
		end)
	end)

	describe("Binding.join", function()
		it("should have getValue", function()
			local binding1 = Binding.create(1)
			local binding2 = Binding.create(2)
			local binding3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local bindingValue = joinedBinding:getValue()
			expect(bindingValue).to.be.a("table")
			expect(bindingValue[1]).to.equal(1)
			expect(bindingValue[2]).to.equal(2)
			expect(bindingValue.foo).to.equal(3)
		end)

		it("should update when any one of the subscribed bindings updates", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)
			local binding3, update3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local spy = createSpy()
			Binding.subscribe(joinedBinding, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			local args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(2)
			expect(args.value["foo"]).to.equal(3)

			update2(4)
			expect(spy.callCount).to.equal(2)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(3)

			update3(8)
			expect(spy.callCount).to.equal(3)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(8)
		end)

		it("should disconnect from all upstream bindings", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)

			local joined = Binding.join({binding1, binding2})

			local spy = createSpy()
			local disconnect = Binding.subscribe(joined, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			update2(3)
			expect(spy.callCount).to.equal(2)

			disconnect()
			update1(4)
			expect(spy.callCount).to.equal(2)

			update2(2)
			expect(spy.callCount).to.equal(2)

			local value = joined:getValue()
			expect(value[1]).to.equal(4)
			expect(value[2]).to.equal(2)
		end)

		it("should be okay with calling disconnect multiple times", function()
			local joined = Binding.join({})

			local disconnect = Binding.subscribe(joined, function() end)

			disconnect()
			disconnect()
		end)

		it("should throw if updated directly", function()
			local joined = Binding.join({})

			expect(function()
				Binding.update(joined, 0)
			end)
		end)

		it("should throw when a non-table value is passed", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					Binding.join("hi")
				end).to.throw()
			end)
		end)

		it("should throw when a non-binding value is passed via table", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					local binding = Binding.create(123)

					Binding.join({
						binding,
						"abcde",
					})
				end).to.throw()
			end)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4cc"]] = {
Closure = function()
    local script = G2L["4cc"];
local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, rendering, or unmounting, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate or
		lifecyclePhase == ComponentLifecyclePhase.WillUpdate or
		lifecyclePhase == ComponentLifecyclePhase.Render or
		lifecyclePhase == ComponentLifecyclePhase.WillUnmount
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)

	elseif lifecyclePhase == ComponentLifecyclePhase.DidMount or
		lifecyclePhase == ComponentLifecyclePhase.DidUpdate or
		lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)

	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)

	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(
		tostring(internalData.componentClass)
	)

	error(message, 0)
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
			typeof(validator),
			self.__componentName
		))
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "<Validator function did not supply a message>"
		error(("Property validation failed: %s\n\n%s"):format(
			tostring(failureReason),
			self:getElementTraceback() or "<enable element tracebacks>"),
		0)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.context)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
		assign(instance.state, instance:__getDerivedState(instance.props, instance.state))
	end

	-- It's possible for init() to redefine _context!
	virtualNode.context = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component
end;
};
G2L_MODULES[G2L["4ce"]] = {
Closure = function()
    local script = G2L["4ce"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as a mutable self._context in Component:init", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.foo = "bar"
		end

		function Provider:render()
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.context, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.context).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.context, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local capturedContextA
		function ConsumerA:init()
			self._context.A = "hello"

			capturedContextA = self._context
		end

		function ConsumerA:render()
		end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self._context.B = "hello"

			capturedContextB = self._context
		end

		function ConsumerB:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end
end;
};
G2L_MODULES[G2L["4cf"]] = {
Closure = function()
    local script = G2L["4cf"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should fill in when mounting before init", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:init()
			capturedProps = self.props
		end

		function Foo:render()
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = initialProps.b,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should fill in when updating via props", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		local updatedProps = {
			c = 5,
		}
		local updatedElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, updatedElement)

		local expectedProps = {
			a = defaultProps.a,
			b = defaultProps.b,
			c = updatedProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should respect None to override a default prop with nil", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = None,
			c = 4,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = nil,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)
end
end;
};
G2L_MODULES[G2L["4d0"]] = {
Closure = function()
    local script = G2L["4d0"];
return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local didMountSpy = createSpy()

		MyComponent.didMount = didMountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didMountSpy.callCount).to.equal(1)

		local values = didMountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
end;
};
G2L_MODULES[G2L["4d1"]] = {
Closure = function()
    local script = G2L["4d1"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local virtualNode = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(virtualNode, newElement)

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, initialProps)
		assertDeepEqual(values.oldState, {})
	end)

	it("should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		local initialState = {
			a = 4,
		}

		local setState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)
		end

		function MyComponent:render()
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		setState({
			a = 5,
		})

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, {})
		assertDeepEqual(values.oldState, initialState)
	end)
end
end;
};
G2L_MODULES[G2L["4d2"]] = {
Closure = function()
    local script = G2L["4d2"];
return function()
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	it("should be extendable", function()
		local MyComponent = Component:extend("The Senate")

		expect(MyComponent).to.be.ok()
		expect(Type.of(MyComponent)).to.equal(Type.StatefulComponentClass)
	end)

	it("should prevent extending a user component", function()
		local MyComponent = Component:extend("Sheev")

		expect(function()
			MyComponent:extend("Frank")
		end).to.throw()
	end)

	it("should use a given name", function()
		local MyComponent = Component:extend("FooBar")

		local name = tostring(MyComponent)

		expect(name).to.be.a("string")
		expect(name:find("FooBar")).to.be.ok()
	end)
end
end;
};
G2L_MODULES[G2L["4d3"]] = {
Closure = function()
    local script = G2L["4d3"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.Parent.createSpy)
	local createElement = require(script.Parent.Parent.createElement)
	local createFragment = require(script.Parent.Parent.createFragment)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked on initial mount", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 1 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via props", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(createElement(WithDerivedState, {
			someProp = 1,
		}), hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, createElement(WithDerivedState, {
			someProp = 2,
		}))

		expect(getDerivedSpy.callCount).to.equal(2)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 2 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via state", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				someState = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState)
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, element, {
			someState = 2,
		})

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		-- * On updating with new state via updateVirtualNode
		expect(getDerivedSpy.callCount).to.equal(4)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {})
		assertDeepEqual(values.state, { someState = 2 })
	end)

	it("should be invoked when updating via state in init (which skips reconciliation)", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				stateFromInit = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		expect(getDerivedSpy.callCount).to.equal(3)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someProp = 1,
		})
		assertDeepEqual(values.state, {
			stateFromInit = 1,
		})
	end)

	it("should receive defaultProps", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.defaultProps = {
			someDefaultProp = "foo",
		}

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 1,
		})

		-- Update via props, confirm that defaultProp is still present
		element = createElement(WithDerivedState, {
			someProp = 2,
		})

		noopReconciler.updateVirtualNode(node, element)

		expect(getDerivedSpy.callCount).to.equal(2)

		values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 2,
		})
	end)

	it("should derive state for all setState updates, even when deferred", function()
		local Child = Component:extend("Child")
		local stateUpdaterSpy = createSpy(function()
			return {}
		end)
		local stateDerivedSpy = createSpy()

		function Child:render()
			return nil
		end

		function Child:didMount()
			self.props.callback()
		end

		local Parent = Component:extend("Parent")

		Parent.getDerivedStateFromProps = stateDerivedSpy.value

		function Parent:render()
			local callback = function()
				self:setState(stateUpdaterSpy.value)
			end

			return createFragment({
				ChildA = createElement(Child, {
					callback = callback,
				}),
				ChildB = createElement(Child, {
					callback = callback,
				}),
			})
		end

		local element = createElement(Parent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(stateUpdaterSpy.callCount).to.equal(2)

		-- getDerivedStateFromProps is always called on initial state
		expect(stateDerivedSpy.callCount).to.equal(3)
	end)

	it("should have derived state after assigning to state in init", function()
		local getStateCallback
		local getDerivedSpy = createSpy(function()
			return {
				derived = true,
			}
		end)
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self.state = {
				init = true,
			}

			getStateCallback = function()
				return self.state
			end
		end

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"
		local element = createElement(WithDerivedState)

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(2)

		assertDeepEqual(getStateCallback(), {
			init = true,
			derived = true,
		})
	end)
end
end;
};
G2L_MODULES[G2L["4d4"]] = {
Closure = function()
    local script = G2L["4d4"];
return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should return stack traces in initial renders", function()
		local TestComponent = Component:extend("TestComponent")

		local stackTrace
		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.be.a("string")
	end)

	itSKIP("it should return an updated stack trace after an update", function() end)

	it("should return nil when elementTracing is off", function()
		local stackTrace = nil

		local config = {
			elementTracing = false,
		}

		local TestComponent = Component:extend("TestComponent")

		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.equal(nil)
	end)
end
end;
};
G2L_MODULES[G2L["4d5"]] = {
Closure = function()
    local script = G2L["4d5"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked with props when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local initSpy = createSpy()

		MyComponent.init = initSpy.value

		function MyComponent:render()
			return nil
		end

		local props = {
			a = 5,
		}
		local element = createElement(MyComponent, props)
		local hostParent = nil
		local key = "Some Component Key"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(initSpy.callCount).to.equal(1)

		local values = initSpy:captureValues("self", "props")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		expect(typeof(values.props)).to.equal("table")
		assertDeepEqual(values.props, props)
	end)
end
end;
};
G2L_MODULES[G2L["4d6"]] = {
Closure = function()
    local script = G2L["4d6"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should throw on mount if not overridden", function()
		local MyComponent = Component:extend("MyComponent")

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local success, result = pcall(function()
			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(success).to.equal(false)
		expect(result:match("MyComponent")).to.be.ok()
		expect(result:match("render")).to.be.ok()
	end)

	it("should be invoked when a component is mounted", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(capturedProps, {})
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when a component is updated via props", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local initialProps = {
			a = 2,
		}
		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Foo Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(firstProps, initialProps)
		assertDeepEqual(firstState, {})

		local updatedProps = {
			a = 3,
		}
		local newElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)

		local secondRenderArguments = renderSpy:captureValues("self")
		local secondProps = capturedProps
		local secondState = capturedState

		expect(Type.of(secondRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(secondProps).never.to.equal(firstProps)
		assertDeepEqual(secondProps, updatedProps)
		expect(secondState).to.equal(firstState)
	end)

	it("should be invoked when a component is updated via state", function()
		local Foo = Component:extend("Foo")

		local setState
		function Foo:init()
			setState = function(...)
				return self:setState(...)
			end
		end

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)

		setState({})

		expect(renderSpy.callCount).to.equal(2)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(capturedProps).to.equal(firstProps)
		expect(capturedState).never.to.equal(firstState)
	end)

	itSKIP("Test defaultProps on initial render", function() end)
	itSKIP("Test defaultProps on prop update", function() end)
	itSKIP("Test defaultProps on state update", function() end)
end
end;
};
G2L_MODULES[G2L["4d7"]] = {
Closure = function()
    local script = G2L["4d7"];
return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("setState", function()
		it("should not trigger an extra update when called in init", function()
			local renderCount = 0
			local updateCount = 0
			local capturedState

			local InitComponent = Component:extend("InitComponent")

			function InitComponent:init()
				self:setState({
					a = 1
				})
			end

			function InitComponent:willUpdate()
				updateCount = updateCount + 1
			end

			function InitComponent:render()
				renderCount = renderCount + 1
				capturedState = self.state
				return nil
			end

			local initElement = createElement(InitComponent)

			noopReconciler.mountVirtualTree(initElement)

			expect(renderCount).to.equal(1)
			expect(updateCount).to.equal(0)
			expect(capturedState.a).to.equal(1)
		end)

		it("should throw when called in render", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				self:setState({
					a = 1
				})
			end

			local renderElement = createElement(TestComponent)

			local success, result = pcall(noopReconciler.mountVirtualTree, renderElement)

			expect(success).to.equal(false)
			expect(result:match("render")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in shouldUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:shouldUpdate()
				self:setState({
					a = 1
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)

			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("shouldUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUpdate()
				self:setState({
					a = 1
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("willUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUnmount", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUnmount()
				self:setState({
					a = 1
				})
			end

			local element = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(element)

			local success, result = pcall(noopReconciler.unmountVirtualTree, tree)

			expect(success).to.equal(false)
			expect(result:match("willUnmount")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should remove values from state when the value is None", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback({
				value = None
			})

			expect(getStateCallback().value).to.equal(nil)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should invoke functions to compute a partial state", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback, getPropsCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				getPropsCallback = function()
					return self.props
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback(function(state, props)
				expect(state).to.equal(getStateCallback())
				expect(props).to.equal(getPropsCallback())

				return {
					value = state.value + 1
				}
			end)

			expect(getStateCallback().value).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should cancel rendering if the function returns nil", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback
			local renderCount = 0

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				renderCount = renderCount + 1
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")
			expect(renderCount).to.equal(1)

			setStateCallback(function(state, props)
				return nil
			end)

			expect(renderCount).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)
	end)

	describe("setState suspension", function()
		it("should defer setState triggered while reconciling", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						self:setState({
							foo = "bar"
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")
		end)

		it("should defer setState triggered while reconciling during an update", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didUpdate()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						-- This guards against a stack overflow that would be OUR fault
						if not self.state.foo then
							self:setState({
								foo = "bar"
							})
						end
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(nil)

			result = noopReconciler.updateVirtualNode(result, createElement(Parent))

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should combine pending state changes properly", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback("foo", 1)
				self.props.callback("bar", 3)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(key, value)
						self:setState({
							[key] = value,
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)
			expect(getParentStateCallback().bar).to.equal(3)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should abort properly when functional setState returns nil while deferred", function()
			local Child = Component:extend("Child")

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			local renderSpy = createSpy(function(self)
				return createElement(Child, {
					callback = function()
						self:setState(function()
							-- abort the setState
							return nil
						end)
					end,
				})
			end)

			Parent.render = renderSpy.value

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(renderSpy.callCount).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should still apply pending state if a subsequent state update was aborted", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback(function()
					return {
						foo = 1,
					}
				end)
				self.props.callback(function()
					return nil
				end)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(stateUpdater)
						self:setState(stateUpdater)
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should not re-process new state when pending state is present after update", function()
			local setComponentState
			local getComponentState

			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					hasUpdatedOnce = false,
					counter = 0,
				})

				setComponentState = function(mapState)
					self:setState(mapState)
				end

				getComponentState = function()
					return self.state
				end
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didUpdate()
				if self.state.hasUpdatedOnce == false then
					self:setState({
						hasUpdatedOnce = true,
					})
				end
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(getComponentState().hasUpdatedOnce).to.equal(false)
			expect(getComponentState().counter).to.equal(0)

			setComponentState(function(state)
				return {
					counter = state.counter + 1
				}
			end)

			expect(getComponentState().hasUpdatedOnce).to.equal(true)
			expect(getComponentState().counter).to.equal(1)
		end)

		it("should throw when an infinite update is triggered", function()
			local InfiniteUpdater = Component:extend("InfiniteUpdater")

			function InfiniteUpdater:render()
				return nil
			end

			function InfiniteUpdater:didMount()
				self:setState({})
			end

			function InfiniteUpdater:didUpdate()
				self:setState({})
			end

			local element = createElement(InfiniteUpdater)
			local hostParent = nil
			local key = "Test"

			local success, result = pcall(noopReconciler.mountVirtualNode, element, hostParent, key)

			expect(success).to.equal(false)
			expect(result:find("InfiniteUpdater")).to.be.ok()
			expect(result:find("reached the setState update recursion limit")).to.be.ok()
		end)

		itSKIP("should process single updates with both new and pending state", function()
			--[[
				This situation shouldn't be possible currently, but the implementation
				should support it for future update de-duplication
			]]
		end)

		it("should call trigger update after didMount when setting state in didMount", function()
			--[[
				Before setState suspension, it was possible to call setState in didMount but it would
				not actually finish resolving didMount until after the entire update.

				This is theoretically problematic, as it means that lifecycle methods like didUpdate
				could be called before didMount is finished. setState suspension resolves this by
				suspending state updates made in didMount and didUpdate as well as reconciliation
			]]
			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					status = "initial mount"
				})

				self.isMounted = false
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didMount()
				self:setState({
					status = "mounted"
				})

				self.isMounted = true
			end

			function MyComponent:didUpdate(oldProps, oldState)
				expect(oldState.status).to.equal("initial mount")
				expect(self.state.status).to.equal("mounted")

				expect(self.isMounted).to.equal(true)
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
		end)
	end)
end

end;
};
G2L_MODULES[G2L["4d8"]] = {
Closure = function()
    local script = G2L["4d8"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when props update", function()
		local MyComponent = Component:extend("MyComponent")

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		assertDeepEqual(values.newProps, newProps)

		assertDeepEqual(capturedProps, initialProps)

		expect(values.newState).to.equal(capturedState)
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when state is updated", function()
		local MyComponent = Component:extend("MyComponent")

		local initialState = {
			a = 1,
		}

		local setState
		local initState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)

			initState = self.state
		end

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newState = {
			a = 2,
			b = 3,
		}

		setState(newState)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		expect(values.newProps).to.equal(capturedProps)
		assertDeepEqual(capturedProps, {})

		assertDeepEqual(capturedState, initialState)
		expect(capturedState).to.equal(initState)
		assertDeepEqual(values.newState, newState)
	end)

	it("should not abort an update when returning true", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return true
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)
	end)

	it("should abort an update when retuning false", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return false
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(1)
	end)
end
end;
};
G2L_MODULES[G2L["4d9"]] = {
Closure = function()
    local script = G2L["4d9"];
return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should be invoked when props change", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
			})
		end)
	end)

	it("should not be invoked when state changes", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local setStateCallback = nil
			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1
			})

			setStateCallback({
				b = 1
			})

			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should throw if validateProps is not a function", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = 1

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should throw if validateProps returns false", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should be invoked after defaultProps are applied", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			MyComponent.defaultProps = {
				b = 2,
			}

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
				b = 2,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
				b = 2,
			})
		end)
	end)

	it("should not be invoked if the flag is off", function()
		local config = {
			propValidation = false,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(0)

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(0)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4da"]] = {
Closure = function()
    local script = G2L["4da"];
return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when unmounted", function()
		local MyComponent = Component:extend("MyComponent")

		local willUnmountSpy = createSpy()

		MyComponent.willUnmount = willUnmountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)
		noopReconciler.unmountVirtualNode(node)

		expect(willUnmountSpy.callCount).to.equal(1)

		local values = willUnmountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
end;
};
G2L_MODULES[G2L["4db"]] = {
Closure = function()
    local script = G2L["4db"];
return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, newProps)
		assertDeepEqual(values.newState, {})
	end)

	it("it should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")
		local setComponentState

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:init()
			setComponentState = function(state)
				self:setState(state)
			end

			self:setState({
				foo = 1
			})
		end

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(willUpdateSpy.callCount).to.equal(0)

		setComponentState({
			foo = 2
		})

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, {})
		assertDeepEqual(values.newState, {
			foo = 2
		})
	end)
end
end;
};
G2L_MODULES[G2L["4dc"]] = {
Closure = function()
    local script = G2L["4dc"];
local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase
end;
};
G2L_MODULES[G2L["4dd"]] = {
Closure = function()
    local script = G2L["4dd"];
--[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = (
				"Invalid global configuration key %q. Valid configuration keys are: %s"
			):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = (
				"Invalid global configuration key %q (type %s). Valid configuration keys are: %s"
			):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(
				tostring(value),
				typeof(value),
				tostring(key)
			)

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config
end;
};
G2L_MODULES[G2L["4de"]] = {
Closure = function()
    local script = G2L["4de"];
return function()
	local Config = require(script.Parent.Config)

	it("should accept valid configuration", function()
		local config = Config.new()
		local values = config.get()

		expect(values.elementTracing).to.equal(false)

		config.set({
			elementTracing = true,
		})

		expect(values.elementTracing).to.equal(true)
	end)

	it("should reject invalid configuration keys", function()
		local config = Config.new()

		local badKey = "garblegoop"

		local ok, err = pcall(function()
			config.set({
				[badKey] = true,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention our bad key somewhere.
		expect(err:find(badKey)).to.be.ok()
	end)

	it("should reject invalid configuration values", function()
		local config = Config.new()

		local goodKey = "elementTracing"
		local badValue = "Hello there!"

		local ok, err = pcall(function()
			config.set({
				[goodKey] = badValue,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention both our key and value
		expect(err:find(goodKey)).to.be.ok()
		expect(err:find(badValue)).to.be.ok()
	end)
end
end;
};
G2L_MODULES[G2L["4df"]] = {
Closure = function()
    local script = G2L["4df"];
--[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind
end;
};
G2L_MODULES[G2L["4e0"]] = {
Closure = function()
    local script = G2L["4e0"];
return function()
	local Portal = require(script.Parent.Portal)
	local Component = require(script.Parent.Component)

	local ElementKind = require(script.Parent.ElementKind)

	describe("of", function()
		it("should return nil for non-table values", function()
			expect(ElementKind.of(nil)).to.equal(nil)
			expect(ElementKind.of(5)).to.equal(nil)
			expect(ElementKind.of(newproxy(true))).to.equal(nil)
		end)

		it("should return nil for table values without an ElementKind key", function()
			expect(ElementKind.of({})).to.equal(nil)
		end)

		it("should return the ElementKind from a table", function()
			local value = {
				[ElementKind] = ElementKind.Stateful,
			}

			expect(ElementKind.of(value)).to.equal(ElementKind.Stateful)
		end)
	end)

	describe("fromComponent", function()
		it("should handle host components", function()
			expect(ElementKind.fromComponent("foo")).to.equal(ElementKind.Host)
		end)

		it("should handle function components", function()
			local function foo()
			end

			expect(ElementKind.fromComponent(foo)).to.equal(ElementKind.Function)
		end)

		it("should handle stateful components", function()
			local Foo = Component:extend("Foo")

			expect(ElementKind.fromComponent(Foo)).to.equal(ElementKind.Stateful)
		end)

		it("should handle portals", function()
			expect(ElementKind.fromComponent(Portal)).to.equal(ElementKind.Portal)
		end)

		it("should return nil for invalid inputs", function()
			expect(ElementKind.fromComponent(5)).to.equal(nil)
			expect(ElementKind.fromComponent(newproxy(true))).to.equal(nil)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4e1"]] = {
Closure = function()
    local script = G2L["4e1"];
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements(elementOrElements)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function()
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return noop
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils
end;
};
G2L_MODULES[G2L["4e2"]] = {
Closure = function()
    local script = G2L["4e2"];
return function()
	local ElementUtils = require(script.Parent.ElementUtils)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local Type = require(script.Parent.Type)

	describe("iterateElements", function()
		it("should iterate once for a single child", function()
			local child = createElement("TextLabel")
			local iterator = ElementUtils.iterateElements(child)
			local iteratedKey, iteratedChild = iterator()
			-- For single elements, the key should be UseParentKey
			expect(iteratedKey).to.equal(ElementUtils.UseParentKey)
			expect(iteratedChild).to.equal(child)

			iteratedKey = iterator()
			expect(iteratedKey).to.equal(nil)
		end)

		it("should iterate over tables", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			local seenChildren = {}
			local count = 0

			for key, child in ElementUtils.iterateElements(children) do
				expect(typeof(key)).to.equal("string")
				expect(Type.of(child)).to.equal(Type.Element)
				seenChildren[child] = key
				count = count + 1
			end

			expect(count).to.equal(2)
			expect(seenChildren[children.a]).to.equal("a")
			expect(seenChildren[children.b]).to.equal("b")
		end)

		it("should return a zero-element iterator for booleans", function()
			local booleanIterator = ElementUtils.iterateElements(false)
			expect(booleanIterator()).to.equal(nil)
		end)

		it("should return a zero-element iterator for nil", function()
			local nilIterator = ElementUtils.iterateElements(nil)
			expect(nilIterator()).to.equal(nil)
		end)

		it("should throw if given an illegal value", function()
			expect(function()
				ElementUtils.iterateElements(1)
			end).to.throw()
		end)
	end)

	describe("getElementByKey", function()
		it("should return nil for booleans", function()
			expect(ElementUtils.getElementByKey(true, "test")).to.equal(nil)
		end)

		it("should return nil for nil", function()
			expect(ElementUtils.getElementByKey(nil, "test")).to.equal(nil)
		end)

		describe("single elements", function()
			local element = createElement("TextLabel")

			it("should return the element if the key is UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, ElementUtils.UseParentKey)).to.equal(element)
			end)

			it("should return nil if the key is not UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, "test")).to.equal(nil)
			end)
		end)

		it("should return the corresponding element from a table", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(children.a)
			expect(ElementUtils.getElementByKey(children, "b")).to.equal(children.b)
		end)

		it("should return nil if the key does not exist", function()
			local children = createFragment({})

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(nil)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4e3"]] = {
Closure = function()
    local script = G2L["4e3"];
--[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()
end;
};
G2L_MODULES[G2L["4e4"]] = {
Closure = function()
    local script = G2L["4e4"];
return function()
	local GlobalConfig = require(script.Parent.GlobalConfig)

	it("should have the correct methods", function()
		expect(GlobalConfig).to.be.ok()
		expect(GlobalConfig.set).to.be.ok()
		expect(GlobalConfig.get).to.be.ok()
	end)
end
end;
};
G2L_MODULES[G2L["4e5"]] = {
Closure = function()
    local script = G2L["4e5"];
--[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = {"LogInfo {"}

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging
end;
};
G2L_MODULES[G2L["4e6"]] = {
Closure = function()
    local script = G2L["4e6"];
local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None
end;
};
G2L_MODULES[G2L["4e7"]] = {
Closure = function()
    local script = G2L["4e7"];
--[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(reconciler, node)
end

function NoopRenderer.unmountHostNode(reconciler, node)
end

function NoopRenderer.updateHostNode(reconciler, node, newElement)
	return node
end

return NoopRenderer
end;
};
G2L_MODULES[G2L["4e8"]] = {
Closure = function()
    local script = G2L["4e8"];
local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal
end;
};
G2L_MODULES[G2L["4ea"]] = {
Closure = function()
    local script = G2L["4ea"];
--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change

end;
};
G2L_MODULES[G2L["4eb"]] = {
Closure = function()
    local script = G2L["4eb"];
return function()
	local Type = require(script.Parent.Parent.Type)

	local Change = require(script.Parent.Change)

	it("should yield change listener objects when indexed", function()
		expect(Type.of(Change.Text)).to.equal(Type.HostChangeEvent)
		expect(Type.of(Change.Selected)).to.equal(Type.HostChangeEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Change.Text
		local b = Change.Text
		local c = Change.Selected

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
end;
};
G2L_MODULES[G2L["4ec"]] = {
Closure = function()
    local script = G2L["4ec"];
local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children
end;
};
G2L_MODULES[G2L["4ed"]] = {
Closure = function()
    local script = G2L["4ed"];
--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event

end;
};
G2L_MODULES[G2L["4ee"]] = {
Closure = function()
    local script = G2L["4ee"];
return function()
	local Type = require(script.Parent.Parent.Type)

	local Event = require(script.Parent.Event)

	it("should yield event objects when indexed", function()
		expect(Type.of(Event.MouseButton1Click)).to.equal(Type.HostEvent)
		expect(Type.of(Event.Touched)).to.equal(Type.HostEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Event.MouseButton1Click
		local b = Event.MouseButton1Click
		local c = Event.Touched

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
end;
};
G2L_MODULES[G2L["4ef"]] = {
Closure = function()
    local script = G2L["4ef"];
local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref
end;
};
G2L_MODULES[G2L["4f0"]] = {
Closure = function()
    local script = G2L["4f0"];
--[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent
end;
};
G2L_MODULES[G2L["4f1"]] = {
Closure = function()
    local script = G2L["4f1"];
return function()
	local createElement = require(script.Parent.createElement)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local createReconciler = require(script.Parent.createReconciler)

	local PureComponent = require(script.Parent.PureComponent)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be extendable", function()
		local MyComponent = PureComponent:extend("MyComponent")

		expect(MyComponent).to.be.ok()
	end)

	it("should skip updates for shallow-equal props", function()
		local updateCount = 0
		local setValue

		local PureChild = PureComponent:extend("PureChild")

		function PureChild:willUpdate()
			updateCount = updateCount + 1
		end

		function PureChild:render()
			return nil
		end

		local PureContainer = PureComponent:extend("PureContainer")

		function PureContainer:init()
			self.state = {
				value = 0,
			}
		end

		function PureContainer:didMount()
			setValue = function(value)
				self:setState({
					value = value,
				})
			end
		end

		function PureContainer:render()
			return createElement(PureChild, {
				value = self.state.value,
			})
		end

		local element = createElement(PureContainer)
		local tree = noopReconciler.mountVirtualTree(element, nil, "PureComponent Tree")

		expect(updateCount).to.equal(0)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(2)

		expect(updateCount).to.equal(2)

		setValue(1)

		expect(updateCount).to.equal(3)

		noopReconciler.unmountVirtualTree(tree)
	end)
end
end;
};
G2L_MODULES[G2L["4f2"]] = {
Closure = function()
    local script = G2L["4f2"];
--[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(
			typeof(ref)
		))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer

end;
};
G2L_MODULES[G2L["4f3"]] = {
Closure = function()
    local script = G2L["4f3"];
return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local Binding = require(script.Parent.Binding)
	local Children = require(script.Parent.PropMarkers.Children)
	local Component = require(script.Parent.Component)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createRef = require(script.Parent.createRef)
	local createSpy = require(script.Parent.createSpy)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Portal = require(script.Parent.Portal)
	local Ref = require(script.Parent.PropMarkers.Ref)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	describe("mountHostNode", function()
		it("should create instances with correct props", function()
			local parent = Instance.new("Folder")
			local value = "Hello!"
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(value)
			expect(root.Name).to.equal(key)
		end)

		it("should create children with correct names and props", function()
			local parent = Instance.new("Folder")
			local rootValue = "Hey there!"
			local childValue = 173
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = rootValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = childValue,
				}),

				ChildB = createElement("Folder"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(rootValue)
			expect(root.Name).to.equal(key)

			expect(#root:GetChildren()).to.equal(2)

			local childA = root.ChildA
			local childB = root.ChildB

			expect(childA).to.be.ok()
			expect(childB).to.be.ok()

			expect(childA.ClassName).to.equal("IntValue")
			expect(childA.Value).to.equal(childValue)

			expect(childB.ClassName).to.equal("Folder")
		end)

		it("should attach Bindings to Roblox properties", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(instance.ClassName).to.equal("IntValue")
			expect(instance.Value).to.equal(10)

			update(20)

			expect(instance.Value).to.equal(20)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should connect Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(ref.current).to.be.ok()
			expect(ref.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call function refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local element = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(element, parent, key)

				local success, message = pcall(RobloxRenderer.mountHostNode, reconciler, node)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)
	end)

	describe("updateHostNode", function()
		it("should update node props and children", function()
			-- TODO: Break up test

			local parent = Instance.new("Folder")
			local key = "updateHostNodeTest"
			local firstValue = "foo"
			local newValue = "bar"

			local defaultStringValue = Instance.new("StringValue").Value

			local element = createElement("StringValue", {
				Value = firstValue
			}, {
				ChildA = createElement("IntValue", {
					Value = 1
				}),
				ChildB = createElement("BoolValue", {
					Value = true,
				}),
				ChildC = createElement("StringValue", {
					Value = "test",
				}),
				ChildD = createElement("StringValue", {
					Value = "test",
				})
			})

			local node = reconciler.createVirtualNode(element, parent, key)
			RobloxRenderer.mountHostNode(reconciler, node)

			-- Not testing mountHostNode's work here, only testing that the
			-- node is properly updated.

			local newElement = createElement("StringValue", {
				Value = newValue,
			}, {
				-- ChildA changes element type.
				ChildA = createElement("StringValue", {
					Value = "test"
				}),
				-- ChildB changes child properties.
				ChildB = createElement("BoolValue", {
					Value = false,
				}),
				-- ChildC should reset its Value property back to the default.
				ChildC = createElement("StringValue", {}),
				-- ChildD is deleted.
				-- ChildE is added.
				ChildE = createElement("Folder", {}),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			local root = parent[key]
			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(newValue)
			expect(#root:GetChildren()).to.equal(4)

			local childA = root.ChildA
			expect(childA.ClassName).to.equal("StringValue")
			expect(childA.Value).to.equal("test")

			local childB = root.ChildB
			expect(childB.ClassName).to.equal("BoolValue")
			expect(childB.Value).to.equal(false)

			local childC = root.ChildC
			expect(childC.ClassName).to.equal("StringValue")
			expect(childC.Value).to.equal(defaultStringValue)

			local childE = root.ChildE
			expect(childE.ClassName).to.equal("Folder")
		end)

		it("should update Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local bindingA, updateA = Binding.create(10)
			local element = createElement("IntValue", {
				Value = bindingA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			local bindingB, updateB = Binding.create(99)
			local newElement = createElement("IntValue", {
				Value = bindingB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(instance.Value).to.equal(99)

			updateA(123)

			expect(instance.Value).to.equal(99)

			updateB(123)

			expect(instance.Value).to.equal(123)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should update Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local refA = createRef()
			local refB = createRef()

			local element = createElement("Frame", {
				[Ref] = refA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(refA.current).to.equal(instance)
			expect(refB.current).never.to.be.ok()

			local newElement = createElement("Frame", {
				[Ref] = refB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(refA.current).never.to.be.ok()
			expect(refB.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call old function refs with nil and new function refs with a valid rbx", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRefA = createSpy()
			local spyRefB = createSpy()

			local element = createElement("Frame", {
				[Ref] = spyRefA.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRefA.callCount).to.equal(1)
			spyRefA:assertCalledWith(instance)
			expect(spyRefB.callCount).to.equal(0)

			local newElement = createElement("Frame", {
				[Ref] = spyRefB.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(spyRefA.callCount).to.equal(2)
			spyRefA:assertCalledWith(nil)
			expect(spyRefB.callCount).to.equal(1)
			spyRefB:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should not call function refs again if they didn't change", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
				[Ref] = spyRef.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			-- Not called again
			expect(spyRef.callCount).to.equal(1)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local firstElement = createElement("Frame")
				local secondElement = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(firstElement, parent, key)
				RobloxRenderer.mountHostNode(reconciler, node)

				local success, message = pcall(RobloxRenderer.updateHostNode, reconciler, node, secondElement)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)

		it("should delete instances when reconciling to nil children", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
			}, {
				child = createElement("Frame"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]
			expect(#instance:GetChildren()).to.equal(1)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)
			expect(#instance:GetChildren()).to.equal(0)
		end)
	end)

	describe("unmountHostNode", function()
		it("should delete instances from the inside-out", function()
			local parent = Instance.new("Folder")
			local key = "Root"
			local element = createElement("Folder", nil, {
				Child = createElement("Folder", nil, {
					Grandchild = createElement("Folder"),
				}),
			})

			local node = reconciler.mountVirtualNode(element, parent, key)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]
			expect(#root:GetChildren()).to.equal(1)

			local child = root:GetChildren()[1]
			expect(#child:GetChildren()).to.equal(1)

			local grandchild = child:GetChildren()[1]

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(grandchild.Parent).to.equal(nil)
			expect(child.Parent).to.equal(nil)
			expect(root.Parent).to.equal(nil)
		end)

		it("should unsubscribe from any Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			RobloxRenderer.unmountHostNode(reconciler, node)
			update(56)

			expect(instance.Value).to.equal(10)
		end)

		it("should clear Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(ref.current).to.be.ok()

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(ref.current).never.to.be.ok()
		end)

		it("should call function refs with nil", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(1)

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(2)
			spyRef:assertCalledWith(nil)
		end)
	end)

	describe("Portals", function()
		it("should create and destroy instances as children of `target`", function()
			local target = Instance.new("Folder")

			local function FunctionComponent(props)
				return createElement("IntValue", {
					Value = props.value,
				})
			end

			local element = createElement(Portal, {
				target = target,
			}, {
				folderOne = createElement("Folder"),
				folderTwo = createElement("Folder"),
				intValueOne = createElement(FunctionComponent, {
					value = 42,
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(3)

			expect(target:FindFirstChild("folderOne")).to.be.ok()
			expect(target:FindFirstChild("folderTwo")).to.be.ok()
			expect(target:FindFirstChild("intValueOne")).to.be.ok()
			expect(target:FindFirstChild("intValueOne").Value).to.equal(42)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should pass prop updates through to children", function()
			local target = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "A Host Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(1)

			local firstValue = target.ChildValue
			expect(firstValue.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#target:GetChildren()).to.equal(1)

			local secondValue = target.ChildValue
			expect(firstValue).to.equal(secondValue)
			expect(secondValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should throw if `target` is nil", function()
			-- TODO: Relax this restriction?
			local element = createElement(Portal)
			local hostParent = nil
			local hostKey = "Keys for Everyone"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should throw if `target` is not a Roblox instance", function()
			local element = createElement(Portal, {
				target = {},
			})
			local hostParent = nil
			local hostKey = "Unleash the keys!"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should recreate instances if `target` changes in an update", function()
			local firstTarget = Instance.new("Folder")
			local secondTarget = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = firstTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = secondTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#firstTarget:GetChildren()).to.equal(1)
			expect(#secondTarget:GetChildren()).to.equal(0)

			local firstChild = firstTarget.ChildValue
			expect(firstChild.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(1)

			local secondChild = secondTarget.ChildValue
			expect(secondChild.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(0)
		end)
	end)

	describe("Fragments", function()
		it("should parent the fragment's elements into the fragment's parent", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createElement("IntValue", {
					Value = 1,
				}),
				key2 = createElement("IntValue", {
					Value = 2,
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "test")

			expect(hostParent:FindFirstChild("key")).to.be.ok()
			expect(hostParent.key.ClassName).to.equal("IntValue")
			expect(hostParent.key.Value).to.equal(1)

			expect(hostParent:FindFirstChild("key2")).to.be.ok()
			expect(hostParent.key2.ClassName).to.equal("IntValue")
			expect(hostParent.key2.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should allow sibling fragment to have common keys", function()
			local hostParent = Instance.new("Folder")
			local hostKey = "Test"

			local function parent(props)
				return createElement("IntValue", {}, {
					fragmentA = createFragment({
						key = createElement("StringValue", {
							Value = "A",
						}),
						key2 = createElement("StringValue", {
							Value = "B",
						}),
					}),
					fragmentB = createFragment({
						key = createElement("StringValue", {
							Value = "C",
						}),
						key2 = createElement("StringValue", {
							Value = "D",
						}),
					}),
				})
			end

			local node = reconciler.mountVirtualNode(createElement(parent), hostParent, hostKey)
			local parentChildren = hostParent[hostKey]:GetChildren()

			expect(#parentChildren).to.equal(4)

			local childValues = {}

			for _, child in pairs(parentChildren) do
				expect(child.ClassName).to.equal("StringValue")
				childValues[child.Value] = 1 + (childValues[child.Value] or 0)
			end

			-- check if the StringValues have not collided
			expect(childValues.A).to.equal(1)
			expect(childValues.B).to.equal(1)
			expect(childValues.C).to.equal(1)
			expect(childValues.D).to.equal(1)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should render nested fragments", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createFragment({
					TheValue = createElement("IntValue", {
						Value = 1,
					}),
					TheOtherValue = createElement("IntValue", {
						Value = 2,
					})
				})
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "Test")

			expect(hostParent:FindFirstChild("TheValue")).to.be.ok()
			expect(hostParent.TheValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheValue.Value).to.equal(1)

			expect(hostParent:FindFirstChild("TheOtherValue")).to.be.ok()
			expect(hostParent.TheOtherValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheOtherValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should not add any instances if the fragment is empty", function()
			local hostParent = Instance.new("Folder")

			local node = reconciler.mountVirtualNode(createFragment({}), hostParent, "test")

			expect(#hostParent:GetChildren()).to.equal(0)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)
	end)

	describe("Context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
			end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer)
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self._context.foo = "bar"
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				})
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar"
			})
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4f4"]] = {
Closure = function()
    local script = G2L["4f4"];
--[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(function()
		return self._instance:GetPropertyChangedSignal(key)
	end)

	if not success then
		error(("Cannot get changed signal on property %q: %s"):format(
			tostring(key),
			event
		), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index <= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount))

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager
end;
};
G2L_MODULES[G2L["4f5"]] = {
Closure = function()
    local script = G2L["4f5"];
return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.createSpy)
	local Logging = require(script.Parent.Logging)

	local SingleEventManager = require(script.Parent.SingleEventManager)

	describe("new", function()
		it("should create a SingleEventManager", function()
			local manager = SingleEventManager.new()

			expect(manager).to.be.ok()
		end)
	end)

	describe("connectEvent", function()
		it("should connect to events", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")

			manager:connectEvent("Event", nil)

			instance:Fire("baz")
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should drop events until resumed initially", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(0)

			manager:resume()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke suspended events when resumed", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			manager:suspend()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)

			manager:resume()
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke events triggered during resumption in the correct order", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			local recordedValues = {}
			local eventSpy = createSpy(function(_, value)
				table.insert(recordedValues, value)

				if value == 2 then
					instance:Fire(3)
				elseif value == 3 then
					instance:Fire(4)
				end
			end)

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)
			instance:Fire(2)

			manager:resume()
			expect(eventSpy.callCount).to.equal(4)
			assertDeepEqual(recordedValues, {1, 2, 3, 4})
		end)

		it("should not invoke events fired during suspension but disconnected before resumption", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)

			manager:connectEvent("Event", nil)

			manager:resume()
			expect(eventSpy.callCount).to.equal(0)
		end)

		it("should not yield events through the SingleEventManager when resuming", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				coroutine.yield()
			end)

			manager:resume()

			local co = coroutine.create(function()
				instance:Fire(5)
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")

			manager:suspend()
			instance:Fire(5)

			co = coroutine.create(function()
				manager:resume()
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")
		end)

		it("should not throw errors through SingleEventManager when resuming", function()
			local errorText = "Error from SingleEventManager test"

			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				error(errorText)
			end)

			manager:resume()

			-- If we call instance:Fire() here, the error message will leak to
			-- the console since the thread's resumption will be handled by
			-- Roblox's scheduler.

			manager:suspend()
			instance:Fire(5)

			local logInfo = Logging.capture(function()
				manager:resume()
			end)

			expect(#logInfo.errors).to.equal(0)
			expect(#logInfo.warnings).to.equal(1)
			expect(#logInfo.infos).to.equal(0)

			expect(logInfo.warnings[1]:find(errorText)).to.be.ok()
		end)

		it("should not overflow with events if manager:resume() is invoked when resuming a suspended event", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			-- This connection emulates what happens if reconciliation is
			-- triggered again in response to reconciliation. Without
			-- appropriate guards, the inner resume() call will process the
			-- Fire(1) event again, causing a nasty stack overflow.
			local eventSpy = createSpy(function(_, value)
				if value == 1 then
					manager:suspend()
					instance:Fire(2)
					manager:resume()
				end
			end)

			manager:connectEvent("Event", eventSpy.value)

			manager:suspend()
			instance:Fire(1)
			manager:resume()

			expect(eventSpy.callCount).to.equal(2)
		end)
	end)

	describe("connectPropertyChange", function()
		-- Since property changes utilize the same mechanisms as other events,
		-- the tests here are slimmed down to reduce redundancy.

		it("should connect to property changes", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectPropertyChange("Name", eventSpy.value)
			manager:resume()

			instance.Name = "foo"
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance)

			instance.Name = "bar"
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance)

			manager:connectPropertyChange("Name")

			instance.Name = "baz"
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should throw an error if the property is invalid", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)

			expect(function()
				manager:connectPropertyChange("foo", function() end)
			end).to.throw()
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4f6"]] = {
Closure = function()
    local script = G2L["4f6"];
--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol
end;
};
G2L_MODULES[G2L["4f7"]] = {
Closure = function()
    local script = G2L["4f7"];
return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			expect(tostring(symbol):find("foo")).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4f8"]] = {
Closure = function()
    local script = G2L["4f8"];
--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type
end;
};
G2L_MODULES[G2L["4f9"]] = {
Closure = function()
    local script = G2L["4f9"];
return function()
	local Type = require(script.Parent.Type)

	describe("of", function()
		it("should return nil if the value is not a table", function()
			expect(Type.of(1)).to.equal(nil)
			expect(Type.of(true)).to.equal(nil)
			expect(Type.of("test")).to.equal(nil)
			expect(Type.of(print)).to.equal(nil)
		end)

		it("should return nil if the table has no type", function()
			expect(Type.of({})).to.equal(nil)
		end)

		it("should return the assigned type", function()
			local test = {
				[Type] = Type.Element
			}

			expect(Type.of(test)).to.equal(Type.Element)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["4fa"]] = {
Closure = function()
    local script = G2L["4fa"];
--[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]

local function deepEqual(a, b)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(
			typeof(a),
			typeof(b)
		)
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true
	end

	if a == b then
		return true
	end

	local message = "{1} ~= {2}"
	return false, message
end

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success then
		local innerMessage = innerMessageTemplate
			:gsub("{1}", "first")
			:gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual
end;
};
G2L_MODULES[G2L["4fb"]] = {
Closure = function()
    local script = G2L["4fb"];
return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)

	it("should fail with a message when args are not equal", function()
		local success, message = pcall(assertDeepEqual, 1, 2)

		expect(success).to.equal(false)
		expect(message:find("first ~= second")).to.be.ok()

		success, message = pcall(assertDeepEqual, {
			foo = 1,
		}, {
			foo = 2,
		})

		expect(success).to.equal(false)
		expect(message:find("first%[foo%] ~= second%[foo%]")).to.be.ok()
	end)

	it("should compare non-table values using standard '==' equality", function()
		assertDeepEqual(1, 1)
		assertDeepEqual("hello", "hello")
		assertDeepEqual(nil, nil)

		local someFunction = function() end
		local theSameFunction = someFunction

		assertDeepEqual(someFunction, theSameFunction)

		local A = {
			foo = someFunction
		}
		local B = {
			foo = theSameFunction
		}

		assertDeepEqual(A, B)
	end)

	it("should fail when types differ", function()
		local success, message = pcall(assertDeepEqual, 1, "1")

		expect(success).to.equal(false)
		expect(message:find("first is of type number, but second is of type string")).to.be.ok()
	end)

	it("should compare (and report about) nested tables", function()
		local A = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			}
		}
		local B = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			}
		}

		assertDeepEqual(A, B)

		local C = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 3,
			}
		}

		local success, message = pcall(assertDeepEqual, A, C)

		expect(success).to.equal(false)
		expect(message:find("first%[nested%]%[bar%] ~= second%[nested%]%[bar%]")).to.be.ok()
	end)

	it("should be commutative", function()
		local equalArgsA = {
			foo = "bar",
			hello = "world",
		}
		local equalArgsB = {
			foo = "bar",
			hello = "world",
		}

		assertDeepEqual(equalArgsA, equalArgsB)
		assertDeepEqual(equalArgsB, equalArgsA)

		local nonEqualArgs = {
			foo = "bar",
		}

		expect(function() assertDeepEqual(equalArgsA, nonEqualArgs) end).to.throw()
		expect(function() assertDeepEqual(nonEqualArgs, equalArgsA) end).to.throw()
	end)
end
end;
};
G2L_MODULES[G2L["4fc"]] = {
Closure = function()
    local script = G2L["4fc"];
local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign
end;
};
G2L_MODULES[G2L["4fd"]] = {
Closure = function()
    local script = G2L["4fd"];
return function()
	local None = require(script.Parent.None)

	local assign = require(script.Parent.assign)

	it("should accept zero additional tables", function()
		local input = {}
		local result = assign(input)

		expect(input).to.equal(result)
	end)

	it("should merge multiple tables onto the given target table", function()
		local target = {
			a = 5,
			b = 6,
		}

		local source1 = {
			b = 7,
			c = 8,
		}

		local source2 = {
			b = 8,
		}

		assign(target, source1, source2)

		expect(target.a).to.equal(5)
		expect(target.b).to.equal(source2.b)
		expect(target.c).to.equal(source1.c)
	end)

	it("should remove keys if specified as None", function()
		local target = {
			foo = 2,
			bar = 3,
		}

		local source = {
			foo = None,
		}

		assign(target, source)

		expect(target.foo).to.equal(nil)
		expect(target.bar).to.equal(3)
	end)

	it("should re-add keys if specified after None", function()
		local target = {
			foo = 2,
		}

		local source1 = {
			foo = None,
		}

		local source2 = {
			foo = 3,
		}

		assign(target, source1, source2)

		expect(target.foo).to.equal(source2.foo)
	end)
end
end;
};
G2L_MODULES[G2L["4fe"]] = {
Closure = function()
    local script = G2L["4fe"];
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement
end;
};
G2L_MODULES[G2L["4ff"]] = {
Closure = function()
    local script = G2L["4ff"];
return function()
	local Component = require(script.Parent.Component)
	local ElementKind = require(script.Parent.ElementKind)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Logging = require(script.Parent.Logging)
	local Type = require(script.Parent.Type)
	local Portal = require(script.Parent.Portal)
	local Children = require(script.Parent.PropMarkers.Children)

	local createElement = require(script.Parent.createElement)

	it("should create new primitive elements", function()
		local element = createElement("Frame")

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Host)
	end)

	it("should create new functional elements", function()
		local element = createElement(function()
		end)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Function)
	end)

	it("should create new stateful components", function()
		local Foo = Component:extend("Foo")

		local element = createElement(Foo)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Stateful)
	end)

	it("should create new portal elements", function()
		local element = createElement(Portal)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Portal)
	end)

	it("should accept props", function()
		local element = createElement("StringValue", {
			Value = "Foo",
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
	end)

	it("should accept props and children", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", {
			Value = "Foo",
		}, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should accept children with without props", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", nil, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should warn once if children is specified in two different ways", function()
		local logInfo = Logging.capture(function()
			-- Using a loop here to ensure that multiple occurences of the same
			-- warning only cause output once.
			for _ = 1, 2 do
				createElement("Frame", {
					[Children] = {},
				}, {})
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("createElement")).to.be.ok()
		expect(logInfo.warnings[1]:find("Children")).to.be.ok()
	end)

	it("should have a `source` member if elementTracing is set", function()
		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement("StringValue")

			expect(element.source).to.be.a("string")
		end)
	end)
end
end;
};
G2L_MODULES[G2L["500"]] = {
Closure = function()
    local script = G2L["500"];
local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment
end;
};
G2L_MODULES[G2L["501"]] = {
Closure = function()
    local script = G2L["501"];
return function()
	local ElementKind = require(script.Parent.ElementKind)
	local Type = require(script.Parent.Type)

	local createFragment = require(script.Parent.createFragment)

	it("should create new primitive elements", function()
		local fragment = createFragment({})

		expect(fragment).to.be.ok()
		expect(Type.of(fragment)).to.equal(Type.Element)
		expect(ElementKind.of(fragment)).to.equal(ElementKind.Fragment)
	end)

	it("should accept children", function()
		local subFragment = createFragment({})
		local fragment = createFragment({key = subFragment})

		expect(fragment.elements.key).to.equal(subFragment)
	end)
end
end;
};
G2L_MODULES[G2L["502"]] = {
Closure = function()
    local script = G2L["502"];
local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local Symbol = require(script.Parent.Symbol)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local InternalData = Symbol.named("InternalData")

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and context from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parentContext = virtualNode.parentContext

		unmountVirtualNode(virtualNode)
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, parentContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(newElement, hostParent, concreteKey, virtualNode.context)

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		if Type.of(renderResult) == Type.Element
			or renderResult == nil
			or typeof(renderResult) == "boolean"
		then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(("%s\n%s"):format(
				"Component returned invalid children:",
				virtualNode.currentElement.source or "<enable element tracebacks>"
			), 0)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		local kind = ElementKind.of(virtualNode.currentElement)

		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind), 2))
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind), 2))
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context)
		if config.internalTypeChecks then
			internalAssert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			context = context,
			-- This copy of context is useful if the element gets replaced
			-- with an element of a different component type
			parentContext = context,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context)
		if config.internalTypeChecks then
			internalAssert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind), 2))
		end

		return virtualNode
	end

	--[[
		Constructs a new Roact virtual tree, constructs a root node for
		it, and mounts it.
	]]
	local function mountVirtualTree(element, hostParent, hostKey)
		if config.typeChecks then
			assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
			assert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
		end

		if hostKey == nil then
			hostKey = "RoactTree"
		end

		local tree = {
			[Type] = Type.VirtualTree,
			[InternalData] = {
				-- The root node of the tree, which starts into the hierarchy of
				-- Roact component instances.
				rootNode = nil,
				mounted = true,
			},
		}

		tree[InternalData].rootNode = mountVirtualNode(element, hostParent, hostKey)

		return tree
	end

	--[[
		Unmounts the virtual tree, freeing all of its resources.

		No further operations should be done on the tree after it's been
		unmounted, as indicated by its the `mounted` field.
	]]
	local function unmountVirtualTree(tree)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
		end

		internalData.mounted = false

		if internalData.rootNode ~= nil then
			unmountVirtualNode(internalData.rootNode)
		end
	end

	--[[
		Utility method for updating the root node of a virtual tree given a new
		element.
	]]
	local function updateVirtualTree(tree, newElement)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		end

		internalData.rootNode = updateVirtualNode(internalData.rootNode, newElement)

		return tree
	end

	reconciler = {
		mountVirtualTree = mountVirtualTree,
		unmountVirtualTree = unmountVirtualTree,
		updateVirtualTree = updateVirtualTree,

		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler
end;
};
G2L_MODULES[G2L["503"]] = {
Closure = function()
    local script = G2L["503"];
return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createSpy = require(script.Parent.createSpy)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Type = require(script.Parent.Type)
	local ElementKind = require(script.Parent.ElementKind)

	local createReconciler = require(script.Parent.createReconciler)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("tree operations", function()
		it("should mount and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should mount, update, and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.updateVirtualTree(tree, createElement("StringValue"))

			noopReconciler.unmountVirtualTree(tree)
		end)
	end)

	describe("booleans", function()
		it("should mount booleans as nil", function()
			local node = noopReconciler.mountVirtualNode(false, nil, "test")
			expect(node).to.equal(nil)
		end)

		it("should unmount nodes if they are updated to a boolean value", function()
			local node = noopReconciler.mountVirtualNode(createElement("StringValue"), nil, "test")

			expect(node).to.be.ok()

			node = noopReconciler.updateVirtualNode(node, true)

			expect(node).to.equal(nil)
		end)
	end)

	describe("invalid elements", function()
		it("should throw errors when attempting to mount invalid elements", function()
			-- These function components return values with incorrect types
			local returnsString = function()
				return "Hello"
			end
			local returnsNumber = function()
				return 1
			end
			local returnsFunction = function()
				return function() end
			end
			local returnsTable = function()
				return {}
			end

			local hostParent = nil
			local key = "Some Key"

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsString), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsNumber), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsFunction), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsTable), hostParent, key)
			end).to.throw()
		end)
	end)

	describe("Host components", function()
		it("should invoke the renderer to mount host nodes", function()
			local mountHostNode = createSpy(NoopRenderer.mountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = mountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(mountHostNode.callCount).to.equal(1)

			local values = mountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)

		it("should invoke the renderer to update host nodes", function()
			local updateHostNode = createSpy(NoopRenderer.updateHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				updateHostNode = updateHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			local newElement = createElement("StringValue")
			local newNode = reconciler.updateVirtualNode(node, newElement)

			expect(newNode).to.equal(node)

			expect(updateHostNode.callCount).to.equal(1)

			local values = updateHostNode:captureValues("reconciler", "node", "newElement")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
			expect(values.newElement).to.equal(newElement)
		end)

		it("should invoke the renderer to unmount host nodes", function()
			local unmountHostNode = createSpy(NoopRenderer.unmountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				unmountHostNode = unmountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			reconciler.unmountVirtualNode(node)

			expect(unmountHostNode.callCount).to.equal(1)

			local values = unmountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)
	end)

	describe("Function components", function()
		it("should mount and unmount function components", function()
			local componentSpy = createSpy(function(props)
				return nil
			end)

			local element = createElement(componentSpy.value, {
				someValue = 5,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(componentSpy.callCount).to.equal(1)

			local calledWith = componentSpy:captureValues("props")

			expect(calledWith.props).to.be.a("table")
			expect(calledWith.props.someValue).to.equal(5)

			noopReconciler.unmountVirtualNode(node)

			expect(componentSpy.callCount).to.equal(1)
		end)

		it("should mount single children of function components", function()
			local childComponentSpy = createSpy(function(props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createElement(childComponentSpy.value, {
					value = props.value + 1,
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 13,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childCalledWith = childComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(13)

			expect(childCalledWith.props).to.be.a("table")
			expect(childCalledWith.props.value).to.equal(14)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)
		end)

		it("should mount fragments returned by function components", function()
			local childAComponentSpy = createSpy(function(props)
				return nil
			end)

			local childBComponentSpy = createSpy(function(props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createFragment({
					A = createElement(childAComponentSpy.value, {
						value = props.value + 1,
					}),
					B = createElement(childBComponentSpy.value, {
						value = props.value + 5,
					}),
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 17,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childACalledWith = childAComponentSpy:captureValues("props")
			local childBCalledWith = childBComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(17)

			expect(childACalledWith.props).to.be.a("table")
			expect(childACalledWith.props.value).to.equal(18)

			expect(childBCalledWith.props).to.be.a("table")
			expect(childBCalledWith.props.value).to.equal(22)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)
		end)
	end)

	describe("Fragments", function()
		it("should mount fragments", function()
			local fragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(fragment, nil, "test")

			expect(node).to.be.ok()
			expect(ElementKind.of(node.currentElement)).to.equal(ElementKind.Fragment)
		end)

		it("should mount an empty fragment", function()
			local emptyFragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(emptyFragment, nil, "test")

			expect(node).to.be.ok()
			expect(next(node.children)).to.never.be.ok()
		end)

		it("should mount all fragment's children", function()
			local childComponentSpy = createSpy(function(props)
				return nil
			end)
			local elements = {}
			local totalElements = 5

			for i=1, totalElements do
				elements["key"..tostring(i)] = createElement(childComponentSpy.value, {})
			end

			local fragments = createFragment(elements)
			local node = noopReconciler.mountVirtualNode(fragments, nil, "test")

			expect(node).to.be.ok()
			expect(childComponentSpy.callCount).to.equal(totalElements)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["504"]] = {
Closure = function()
    local script = G2L["504"];
--[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(reconciler)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return reconciler.mountVirtualTree(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return reconciler.unmountVirtualTree(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return reconciler.updateVirtualTree(...)
	end

	return compat
end

return createReconcilerCompat
end;
};
G2L_MODULES[G2L["505"]] = {
Closure = function()
    local script = G2L["505"];
return function()
	local createElement = require(script.Parent.createElement)
	local createReconciler = require(script.Parent.createReconciler)
	local Logging = require(script.Parent.Logging)
	local NoopRenderer = require(script.Parent.NoopRenderer)

	local createReconcilerCompat = require(script.Parent.createReconcilerCompat)

	local noopReconciler = createReconciler(NoopRenderer)
	local compatReconciler = createReconcilerCompat(noopReconciler)

	it("reify should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = compatReconciler.reify(createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = compatReconciler.reify(createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()
	end)

	it("teardown should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.teardown(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.teardown(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()
	end)

	it("update should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.reconcile(handle, createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.reconcile(handle, createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()
	end)
end
end;
};
G2L_MODULES[G2L["506"]] = {
Closure = function()
    local script = G2L["506"];
--[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef
end;
};
G2L_MODULES[G2L["507"]] = {
Closure = function()
    local script = G2L["507"];
return function()
	local Binding = require(script.Parent.Binding)
	local Type = require(script.Parent.Type)

	local createRef = require(script.Parent.createRef)

	it("should create refs, which are specialized bindings", function()
		local ref = createRef()

		expect(Type.of(ref)).to.equal(Type.Binding)
		expect(ref.current).to.equal(nil)
	end)

	it("should have a 'current' field that is the same as the internal binding's value", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 10)
		expect(ref.current).to.equal(10)
	end)

	it("should support tostring on refs", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)
		expect(tostring(ref)).to.equal("RoactRef(nil)")

		Binding.update(ref, 10)
		expect(tostring(ref)).to.equal("RoactRef(10)")
	end)

	it("should not allow assignments to the 'current' field", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 99)
		expect(ref.current).to.equal(99)

		expect(function()
			ref.current = 77
		end).to.throw()

		expect(ref.current).to.equal(99)
	end)

	it("should return the same thing from getValue as its current field", function()
		local ref = createRef()
		Binding.update(ref, 10)

		expect(ref:getValue()).to.equal(10)
		expect(ref:getValue()).to.equal(ref.current)
	end)
end
end;
};
G2L_MODULES[G2L["508"]] = {
Closure = function()
    local script = G2L["508"];
--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function addToMap(map, addKey, addValue)
	local new = {}

	for key, value in pairs(map) do
		new[key] = value
	end

	new[addKey] = addValue

	return new
end

local function removeFromMap(map, removeKey)
	local new = {}

	for key, value in pairs(map) do
		if key ~= removeKey then
			new[key] = value
		end
	end

	return new
end

local function createSignal()
	local connections = {}

	local function subscribe(self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
		}

		connections = addToMap(connections, callback, connection)

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections = removeFromMap(connections, callback)
		end

		return disconnect
	end

	local function fire(self, ...)
		for callback, connection in pairs(connections) do
			if not connection.disconnected then
				callback(...)
			end
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal
end;
};
G2L_MODULES[G2L["509"]] = {
Closure = function()
    local script = G2L["509"];
return function()
	local createSignal = require(script.Parent.createSignal)

	local createSpy = require(script.Parent.createSpy)

	it("should fire subscribers and disconnect them", function()
		local signal = createSignal()

		local spy = createSpy()
		local disconnect = signal:subscribe(spy.value)

		expect(spy.callCount).to.equal(0)

		local a = 1
		local b = {}
		local c = "hello"
		signal:fire(a, b, c)

		expect(spy.callCount).to.equal(1)
		spy:assertCalledWith(a, b, c)

		disconnect()

		signal:fire()

		expect(spy.callCount).to.equal(1)
	end)

	it("should handle multiple subscribers", function()
		local signal = createSignal()

		local spyA = createSpy()
		local spyB = createSpy()

		local disconnectA = signal:subscribe(spyA.value)
		local disconnectB = signal:subscribe(spyB.value)

		expect(spyA.callCount).to.equal(0)
		expect(spyB.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		expect(spyB.callCount).to.equal(1)
		spyB:assertCalledWith(a, b)

		disconnectA()

		signal:fire(b, a)

		expect(spyA.callCount).to.equal(1)

		expect(spyB.callCount).to.equal(2)
		spyB:assertCalledWith(b, a)

		disconnectB()
	end)

	it("should stop firing a connection if disconnected mid-fire", function()
		local signal = createSignal()

		-- In this test, we'll connect two listeners that each try to disconnect
		-- the other. Because the order of listeners firing isn't defined, we
		-- have to be careful to handle either case.

		local disconnectA
		local disconnectB

		local spyA = createSpy(function()
			disconnectB()
		end)

		local spyB = createSpy(function()
			disconnectA()
		end)

		disconnectA = signal:subscribe(spyA.value)
		disconnectB = signal:subscribe(spyB.value)

		signal:fire()

		-- Exactly once listener should have been called.
		expect(spyA.callCount + spyB.callCount).to.equal(1)
	end)
end
end;
};
G2L_MODULES[G2L["50a"]] = {
Closure = function()
    local script = G2L["50a"];
--[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {
		callCount = 0,
		values = {},
		valuesLength = 0,
	}

	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = {...}
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(
				self.valuesLength,
				len
			), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(
				self.valuesLength,
				len
			), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy
end;
};
G2L_MODULES[G2L["50b"]] = {
Closure = function()
    local script = G2L["50b"];
return function()
	local createSpy = require(script.Parent.createSpy)

	describe("createSpy", function()
		it("should create spies", function()
			local spy = createSpy(function() end)

			expect(spy).to.be.ok()
		end)

		it("should throw if spies are indexed by an invalid key", function()
			local spy = createSpy(function() end)

			expect(function()
				return spy.test
			end).to.throw()
		end)
	end)

	describe("value", function()
		it("should increment callCount when called", function()
			local spy = createSpy(function() end)
			spy.value()

			expect(spy.callCount).to.equal(1)
		end)

		it("should store all values passed", function()
			local spy = createSpy(function() end)
			spy.value(1, true, "3")

			expect(spy.valuesLength).to.equal(3)
			expect(spy.values[1]).to.equal(1)
			expect(spy.values[2]).to.equal(true)
			expect(spy.values[3]).to.equal("3")
		end)

		it("should return the value of the inner function", function()
			local spy = createSpy(function()
				return true
			end)

			expect(spy.value()).to.equal(true)
		end)
	end)

	describe("assertCalledWith", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1)
			end).to.throw()
		end)

		it("should throw if any value differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1, 3)
			end).to.throw()

			expect(function()
				spy:assertCalledWith(2, 3)
			end).to.throw()
		end)
	end)

	describe("captureValues", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:captureValues("a")
			end).to.throw()
		end)

		it("should capture all values in a table", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			local captured = spy:captureValues("a", "b")
			expect(captured.a).to.equal(1)
			expect(captured.b).to.equal(2)
		end)
	end)
end
end;
};
G2L_MODULES[G2L["50c"]] = {
Closure = function()
    local script = G2L["50c"];
--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty
end;
};
G2L_MODULES[G2L["50d"]] = {
Closure = function()
    local script = G2L["50d"];
return function()
	local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)

	it("should get default name string values", function()
		local _, defaultName = getDefaultInstanceProperty("StringValue", "Name")

		expect(defaultName).to.equal("Value")
	end)

	it("should get default empty string values", function()
		local _, defaultValue = getDefaultInstanceProperty("StringValue", "Value")

		expect(defaultValue).to.equal("")
	end)

	it("should get default number values", function()
		local _, defaultValue = getDefaultInstanceProperty("IntValue", "Value")

		expect(defaultValue).to.equal(0)
	end)

	it("should get nil default values", function()
		local _, defaultValue = getDefaultInstanceProperty("ObjectValue", "Value")

		expect(defaultValue).to.equal(nil)
	end)

	it("should get bool default values", function()
		local _, defaultValue = getDefaultInstanceProperty("BoolValue", "Value")

		expect(defaultValue).to.equal(false)
	end)
end
end;
};
G2L_MODULES[G2L["50e"]] = {
Closure = function()
    local script = G2L["50e"];
return function()
	local Roact = require(script.Parent)

	it("should load with all public APIs", function()
		local publicApi = {
			createElement = "function",
			createFragment = "function",
			createRef = "function",
			createBinding = "function",
			joinBindings = "function",
			mount = "function",
			unmount = "function",
			update = "function",
			oneChild = "function",
			setGlobalConfig = "function",

			-- These functions are deprecated and throw warnings!
			reify = "function",
			teardown = "function",
			reconcile = "function",

			Component = true,
			PureComponent = true,
			Portal = true,
			Children = true,
			Event = true,
			Change = true,
			Ref = true,
			None = true,
			UNSTABLE = true,
		}

		expect(Roact).to.be.ok()

		for key, valueType in pairs(publicApi) do
			local success
			if typeof(valueType) == "string" then
				success = typeof(Roact[key]) == valueType
			else
				success = Roact[key] ~= nil
			end

			if not success then
				local existence = typeof(valueType) == "boolean" and "present" or "of type " .. valueType
				local message = (
					"Expected public API member %q to be %s, but instead it was of type %s"
				):format(tostring(key), existence, typeof(Roact[key]))

				error(message)
			end
		end

		for key in pairs(Roact) do
			if publicApi[key] == nil then
				local message = (
					"Found unknown public API key %q!"
				):format(tostring(key))

				error(message)
			end
		end
	end)
end
end;
};
G2L_MODULES[G2L["50f"]] = {
Closure = function()
    local script = G2L["50f"];
local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert
end;
};
G2L_MODULES[G2L["510"]] = {
Closure = function()
    local script = G2L["510"];
--[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.WillUnmount] = [[
setState cannot be used in the willUnmount lifecycle method.
A component that is being unmounted cannot be updated!

Check the definition of willUnmount in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages
end;
};
G2L_MODULES[G2L["511"]] = {
Closure = function()
    local script = G2L["511"];
--[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild
end;
};
G2L_MODULES[G2L["512"]] = {
Closure = function()
    local script = G2L["512"];
return function()
	local createElement = require(script.Parent.createElement)

	local oneChild = require(script.Parent.oneChild)

	it("should get zero children from a table", function()
		local children = {}

		expect(oneChild(children)).to.equal(nil)
	end)

	it("should get exactly one child", function()
		local child = createElement("Frame")
		local children = {
			foo = child,
		}

		expect(oneChild(children)).to.equal(child)
	end)

	it("should error with more than one child", function()
		local children = {
			a = createElement("Frame"),
			b = createElement("Frame"),
		}

		expect(function()
			oneChild(children)
		end).to.throw()
	end)

	it("should handle being passed nil", function()
		expect(oneChild(nil)).to.equal(nil)
	end)
end
end;
};
G2L_MODULES[G2L["513"]] = {
Closure = function()
    local script = G2L["513"];
local function strict(t, name)
	name = name or tostring(t)

	return setmetatable(t, {
		__index = function(self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(
				tostring(key),
				typeof(key),
				name
			)

			error(message, 2)
		end,

		__newindex = function(self, key, value)
			local message = ("%q (%s) is not a valid member of %s"):format(
				tostring(key),
				typeof(key),
				name
			)

			error(message, 2)
		end,
	})
end

return strict
end;
};
G2L_MODULES[G2L["514"]] = {
Closure = function()
    local script = G2L["514"];
return function()
	local strict = require(script.Parent.strict)

	it("should error when getting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			return t.c
		end).to.throw()
	end)

	it("should error when setting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			t.c = 3
		end).to.throw()
	end)
end
end;
};
G2L_MODULES[G2L["515"]] = {
Closure = function()
    local script = G2L["515"];
local NamePattern = '([A-Za-z0-9_-]+)/([A-Za-z0-9_-]+)';
local VersionPattern = '[A-Za-z0-9_-]+/[A-Za-z0-9_-]+@([%^~]?)([0-9]+)%.([0-9]+)%.([0-9]+)';

-- Initialize cached library list
_G.BTLibraryList = _G.BTLibraryList or {};
local LibraryList = _G.BTLibraryList;

function GetLibrary(LibraryID)
	-- Returns the requested library

	-- Parse library ID
	local Creator, Name = LibraryID:match(NamePattern);
	local VersionRange, Major, Minor, Patch = LibraryID:match(VersionPattern);

	-- Convert version data to numbers
	local Major, Minor, Patch = tonumber(Major), tonumber(Minor), tonumber(Patch);

	-- Validate version information
	assert(VersionRange and (Major and Minor and Patch), 'Invalid version');

	-- Ensure library ID was given
	if not (Creator and Name) then
		return;
	end;

	-- If no version provided, return latest
	if not VersionRange then
		for _, Library in ipairs(LibraryList) do
			if (Library.Creator:lower() == Creator:lower()) and
			   (Library.Name:lower() == Name:lower()) then
				return Library.Library;
			end;
		end;

	-- If exact version provided, return that version
	elseif VersionRange == '' then
		for _, Library in ipairs(LibraryList) do
			if (Library.Creator:lower() == Creator:lower()) and
			   (Library.Name:lower() == Name:lower()) and
			   (Library.Version.Major == Major) and
			   (Library.Version.Minor == Minor) and
			   (Library.Version.Patch == Patch) then
				return Library.Library;
			end;
		end;

	-- If minor version specified, return latest compatible patch version
	elseif VersionRange == '~' then
		for _, Library in ipairs(LibraryList) do
			if (Library.Creator:lower() == Creator:lower()) and
			   (Library.Name:lower() == Name:lower()) and
			   (Library.Version.Major == Major) and
			   (Library.Version.Minor == Minor) then
				return Library.Library;
			end;
		end;

	-- If major version specified, return latest compatible minor or patch version
	elseif VersionRange == '^' then
		for _, Library in ipairs(LibraryList) do
			if (Library.Creator:lower() == Creator:lower()) and
			   (Library.Name:lower() == Name:lower()) and
			   (Library.Version.Major == Major) then
				return Library.Library;
			end;
		end;
	end;

end;

function GetLibraries(...)
	-- Returns the requested libraries by their IDs

	local RequestedLibraries = { ... };
	local FoundLibraries = {};

	-- Get each library
	for Index, LibraryID in ipairs(RequestedLibraries) do
		FoundLibraries[Index] = GetLibrary(LibraryID);
	end;

	-- Return the found libraries
	return unpack(FoundLibraries, 1, table.maxn(FoundLibraries));

end;

function RegisterLibrary(Metadata, Library)
	-- Registers the given library with its metadata into the cache list

	-- Validate metadata
	assert(type(Metadata.Name) == 'string', 'Library name must be a string');
	assert(type(Metadata.Creator) == 'string', 'Library creator must be a string');
	assert(Metadata.Name:match('^[A-Za-z0-9_-]+$'), 'Library name contains invalid characters');
	assert(Metadata.Creator:match('^[A-Za-z0-9_-]+$'), 'Library creator contains invalid characters');
	assert(type(Metadata.Version) == 'table', 'Invalid library version data');
	assert(type(Metadata.Version.Major) == 'number', 'Invalid library version data');
	assert(type(Metadata.Version.Minor) == 'number', 'Invalid library version data');
	assert(type(Metadata.Version.Patch) == 'number', 'Invalid library version data');

	-- Structure metadata
	local Metadata = {
		Name = Metadata.Name,
		Creator = Metadata.Creator,
		Version = {
			Major = Metadata.Version.Major,
			Minor = Metadata.Version.Minor,
			Patch = Metadata.Version.Patch
		},
		Library = Library
	};

	-- Insert the library and its metadata into the list
	table.insert(LibraryList, Metadata);

	-- Sort the list by version (from latest to earliest)
	table.sort(LibraryList, function (A, B)

		-- Sort by major version
		if A.Version.Major > B.Version.Major then
			return true;

		-- Sort by minor version when major version is same
		elseif A.Version.Major == B.Version.Major then
			if A.Version.Minor > B.Version.Minor then
				return true;

			-- Sort by patch version when same major and minor version
			elseif A.Version.Minor == B.Version.Minor then
				return A.Version.Patch > B.Version.Patch;
			else
				return false;
			end;

		-- Sort A after B if earlier version
		else
			return false;
		end;
	end);

end;

-- Load tool completely before loading cached libraries
local Tool = script.Parent;
local Indicator = Tool:WaitForChild 'Loaded';
while not Indicator.Value do
	Indicator.Changed:Wait();
end;

-- Populate library list with cached libraries
for _, Library in pairs(script:GetChildren()) do
	pcall(function () RegisterLibrary(require(Library.Metadata), require(Library)) end);
end;

-- Expose GetLibraries function
_G.GetLibraries = GetLibraries;
return GetLibraries
end;
};
G2L_MODULES[G2L["516"]] = {
Closure = function()
    local script = G2L["516"];
local Tool = script.Parent.Parent
local Libraries = Tool:WaitForChild 'Libraries'
local Cheer = require(Libraries:WaitForChild 'Cheer')

return Cheer
end;
};
G2L_MODULES[G2L["517"]] = {
Closure = function()
    local script = G2L["517"];
return {
	Name = 'Cheer',
	Creator = 'F3X',
	Version = {
		Major = 0,
		Minor = 0,
		Patch = 1
	}
}
end;
};
G2L_MODULES[G2L["518"]] = {
Closure = function()
    local script = G2L["518"];
local Tool = script.Parent.Parent
local Libraries = Tool:WaitForChild 'Libraries'
local Support = require(Libraries:WaitForChild 'SupportLibrary')

return Support
end;
};
G2L_MODULES[G2L["519"]] = {
Closure = function()
    local script = G2L["519"];
return {
	Name = 'SupportLibrary',
	Creator = 'F3X',
	Version = {
		Major = 1,
		Minor = 0,
		Patch = 0
	}
}
end;
};
G2L_MODULES[G2L["51a"]] = {
Closure = function()
    local script = G2L["51a"];
local Tool = script.Parent.Parent
local Libraries = Tool:WaitForChild 'Libraries'
local Try = require(Libraries:WaitForChild 'Try')

return Try
end;
};
G2L_MODULES[G2L["51b"]] = {
Closure = function()
    local script = G2L["51b"];
return {
	Name = 'Try',
	Creator = 'F3X',
	Version = {
		Major = 1,
		Minor = 0,
		Patch = 0
	}
}
end;
};
G2L_MODULES[G2L["51c"]] = {
Closure = function()
    local script = G2L["51c"];
local Tool = script.Parent;

-- Load tool completely before proceeding
local Indicator = Tool:WaitForChild 'Loaded';
while not Indicator.Value do
	Indicator.Changed:Wait();
end;

-- Start library manager
require(Tool:WaitForChild 'LibraryManager')

-- Initialize the core
local Core = require(Tool:WaitForChild 'Core');

-- Get core tools
local CoreTools = Tool:WaitForChild 'Tools';

-- Initialize move tool
local MoveTool = require(CoreTools:WaitForChild 'Move');
Core.AssignHotkey('Z', Core.Support.Call(Core.EquipTool, MoveTool));
Core.Dock.AddToolButton(Core.Assets.MoveIcon, 'Z', MoveTool, 'MoveInfo');

-- Initialize resize tool
local ResizeTool = require(CoreTools:WaitForChild 'Resize')
Core.AssignHotkey('X', Core.Support.Call(Core.EquipTool, ResizeTool));
Core.Dock.AddToolButton(Core.Assets.ResizeIcon, 'X', ResizeTool, 'ResizeInfo');

-- Initialize rotate tool
local RotateTool = require(CoreTools:WaitForChild 'Rotate')
Core.AssignHotkey('C', Core.Support.Call(Core.EquipTool, RotateTool));
Core.Dock.AddToolButton(Core.Assets.RotateIcon, 'C', RotateTool, 'RotateInfo');

-- Initialize paint tool
local PaintTool = require(CoreTools:WaitForChild 'Paint')
Core.AssignHotkey('V', Core.Support.Call(Core.EquipTool, PaintTool));
Core.Dock.AddToolButton(Core.Assets.PaintIcon, 'V', PaintTool, 'PaintInfo');

-- Initialize surface tool
local SurfaceTool = require(CoreTools:WaitForChild 'Surface')
Core.AssignHotkey('B', Core.Support.Call(Core.EquipTool, SurfaceTool));
Core.Dock.AddToolButton(Core.Assets.SurfaceIcon, 'B', SurfaceTool, 'SurfaceInfo');

-- Initialize material tool
local MaterialTool = require(CoreTools:WaitForChild 'Material')
Core.AssignHotkey('N', Core.Support.Call(Core.EquipTool, MaterialTool));
Core.Dock.AddToolButton(Core.Assets.MaterialIcon, 'N', MaterialTool, 'MaterialInfo');

-- Initialize anchor tool
local AnchorTool = require(CoreTools:WaitForChild 'Anchor')
Core.AssignHotkey('M', Core.Support.Call(Core.EquipTool, AnchorTool));
Core.Dock.AddToolButton(Core.Assets.AnchorIcon, 'M', AnchorTool, 'AnchorInfo');

-- Initialize collision tool
local CollisionTool = require(CoreTools:WaitForChild 'Collision')
Core.AssignHotkey('K', Core.Support.Call(Core.EquipTool, CollisionTool));
Core.Dock.AddToolButton(Core.Assets.CollisionIcon, 'K', CollisionTool, 'CollisionInfo');

-- Initialize new part tool
local NewPartTool = require(CoreTools:WaitForChild 'NewPart')
Core.AssignHotkey('J', Core.Support.Call(Core.EquipTool, NewPartTool));
Core.Dock.AddToolButton(Core.Assets.NewPartIcon, 'J', NewPartTool, 'NewPartInfo');

-- Initialize mesh tool
local MeshTool = require(CoreTools:WaitForChild 'Mesh')
Core.AssignHotkey('H', Core.Support.Call(Core.EquipTool, MeshTool));
Core.Dock.AddToolButton(Core.Assets.MeshIcon, 'H', MeshTool, 'MeshInfo');

-- Initialize texture tool
local TextureTool = require(CoreTools:WaitForChild 'Texture')
Core.AssignHotkey('G', Core.Support.Call(Core.EquipTool, TextureTool));
Core.Dock.AddToolButton(Core.Assets.TextureIcon, 'G', TextureTool, 'TextureInfo');

-- Initialize weld tool
local WeldTool = require(CoreTools:WaitForChild 'Weld')
Core.AssignHotkey('F', Core.Support.Call(Core.EquipTool, WeldTool));
Core.Dock.AddToolButton(Core.Assets.WeldIcon, 'F', WeldTool, 'WeldInfo');

-- Initialize lighting tool
local LightingTool = require(CoreTools:WaitForChild 'Lighting')
Core.AssignHotkey('U', Core.Support.Call(Core.EquipTool, LightingTool));
Core.Dock.AddToolButton(Core.Assets.LightingIcon, 'U', LightingTool, 'LightingInfo');

-- Initialize decorate tool
local DecorateTool = require(CoreTools:WaitForChild 'Decorate')
Core.AssignHotkey('P', Core.Support.Call(Core.EquipTool, DecorateTool));
Core.Dock.AddToolButton(Core.Assets.DecorateIcon, 'P', DecorateTool, 'DecorateInfo');

return Core
end;
};
G2L_MODULES[G2L["520"]] = {
Closure = function()
    local script = G2L["520"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local AnchorTool = {

	Name = 'Anchor Tool';
	Color = BrickColor.new 'Really black';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function AnchorTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	BindShortcutKeys();

end;

function AnchorTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if UI then

		-- Reveal the UI
		UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	UI = Core.Tool.Interfaces.BTAnchorToolGUI:Clone();
	UI.Parent = Core.UI;
	UI.Visible = true;

	-- References to UI elements
	local AnchorButton = UI.Status.Anchored.Button;
	local UnanchorButton = UI.Status.Unanchored.Button;

	-- Enable the anchor status switch
	AnchorButton.MouseButton1Click:Connect(function ()
		SetProperty('Anchored', true);
	end);
	UnanchorButton.MouseButton1Click:Connect(function ()
		SetProperty('Anchored', false);
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not UI then
		return;
	end;

	-- Check the common anchor status of selection
	local Anchored = Support.IdentifyCommonProperty(Selection.Parts, 'Anchored');

	-- Update the anchor option switch
	if Anchored == true then
		Core.ToggleSwitch('Anchored', UI.Status);

	-- If the selection is unanchored
	elseif Anchored == false then
		Core.ToggleSwitch('Unanchored', UI.Status);

	-- If the anchor status varies, don't select a current switch
	elseif Anchored == nil then
		Core.ToggleSwitch(nil, UI.Status);
	end;

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not UI then
		return;
	end;

	-- Hide the UI
	UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function SetProperty(Property, Value)

	-- Make sure the given value is valid
	if Value == nil then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each part
	for _, Part in pairs(Selection.Parts) do

		-- Store the state of the part before modification
		table.insert(HistoryRecord.Before, { Part = Part, [Property] = Part[Property] });

		-- Create the change request for this part
		table.insert(HistoryRecord.After, { Part = Part, [Property] = Value });

	end;

	-- Register the changes
	RegisterChange();

end;

function BindShortcutKeys()
	-- Enables useful shortcut keys for this tool

	-- Track user input while this tool is equipped
	table.insert(Connections, UserInputService.InputBegan:Connect(function (InputInfo, GameProcessedEvent)

		-- Make sure this is an intentional event
		if GameProcessedEvent then
			return;
		end;

		-- Make sure this input is a key press
		if InputInfo.UserInputType ~= Enum.UserInputType.Keyboard then
			return;
		end;

		-- Make sure it wasn't pressed while typing
		if UserInputService:GetFocusedTextBox() then
			return;
		end;

		-- Check if the enter key was pressed
		if InputInfo.KeyCode == Enum.KeyCode.Return or InputInfo.KeyCode == Enum.KeyCode.KeypadEnter then

			-- Toggle the selection's anchor status
			ToggleAnchors();

		end;

	end));

end;

function ToggleAnchors()
	-- Toggles the anchor status of the selection

	-- Change the anchor status to the opposite of the common anchor status
	SetProperty('Anchored', not Support.IdentifyCommonProperty(Selection.Parts, 'Anchored'));

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Before = {};
		After = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncAnchor', Record.Before);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncAnchor', Record.After);

		end;

	};

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncAnchor', HistoryRecord.After);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

-- Return the tool
return AnchorTool;
end;
};
G2L_MODULES[G2L["521"]] = {
Closure = function()
    local script = G2L["521"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local CollisionTool = {

	Name = 'Collision Tool';
	Color = BrickColor.new 'Really black';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function CollisionTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	BindShortcutKeys();

end;

function CollisionTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if UI then

		-- Reveal the UI
		UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	UI = Core.Tool.Interfaces.BTCollisionToolGUI:Clone();
	UI.Parent = Core.UI;
	UI.Visible = true;

	-- References to UI elements
	local OnButton = UI.Status.On.Button;
	local OffButton = UI.Status.Off.Button;

	-- Enable the collision status switch
	OnButton.MouseButton1Click:Connect(function ()
		SetProperty('CanCollide', true);
	end);
	OffButton.MouseButton1Click:Connect(function ()
		SetProperty('CanCollide', false);
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not UI then
		return;
	end;

	-- Check the common collision status of selection
	local Collision = Support.IdentifyCommonProperty(Selection.Parts, 'CanCollide');

	-- Update the collision option switch
	if Collision == true then
		Core.ToggleSwitch('On', UI.Status);

	-- If the selection has collision disabled
	elseif Collision == false then
		Core.ToggleSwitch('Off', UI.Status);

	-- If the collision status varies, don't select a current switch
	elseif Collision == nil then
		Core.ToggleSwitch(nil, UI.Status);
	end;

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not UI then
		return;
	end;

	-- Hide the UI
	UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function SetProperty(Property, Value)

	-- Make sure the given value is valid
	if Value == nil then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each part
	for _, Part in pairs(Selection.Parts) do

		-- Store the state of the part before modification
		table.insert(HistoryRecord.Before, { Part = Part, [Property] = Part[Property] });

		-- Create the change request for this part
		table.insert(HistoryRecord.After, { Part = Part, [Property] = Value });

	end;

	-- Register the changes
	RegisterChange();

end;

function BindShortcutKeys()
	-- Enables useful shortcut keys for this tool

	-- Track user input while this tool is equipped
	table.insert(Connections, UserInputService.InputBegan:Connect(function (InputInfo, GameProcessedEvent)

		-- Make sure this is an intentional event
		if GameProcessedEvent then
			return;
		end;

		-- Make sure this input is a key press
		if InputInfo.UserInputType ~= Enum.UserInputType.Keyboard then
			return;
		end;

		-- Make sure it wasn't pressed while typing
		if UserInputService:GetFocusedTextBox() then
			return;
		end;

		-- Check if the enter key was pressed
		if InputInfo.KeyCode == Enum.KeyCode.Return or InputInfo.KeyCode == Enum.KeyCode.KeypadEnter then

			-- Toggle the selection's collision status
			ToggleCollision();

		end;

	end));

end;

function ToggleCollision()
	-- Toggles the collision status of the selection

	-- Change the collision status to the opposite of the common collision status
	SetProperty('CanCollide', not Support.IdentifyCommonProperty(Selection.Parts, 'CanCollide'));

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Before = {};
		After = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncCollision', Record.Before);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncCollision', Record.After);

		end;

	};

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncCollision', HistoryRecord.After);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

-- Return the tool
return CollisionTool;
end;
};
G2L_MODULES[G2L["522"]] = {
Closure = function()
    local script = G2L["522"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local DecorateTool = {

	Name = 'Decorate Tool';
	Color = BrickColor.new 'Really black';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function DecorateTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();

end;

function DecorateTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if DecorateTool.UI then

		-- Reveal the UI
		DecorateTool.UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	DecorateTool.UI = Core.Tool.Interfaces.BTDecorateToolGUI:Clone();
	DecorateTool.UI.Parent = Core.UI;
	DecorateTool.UI.Visible = true;

	-- Enable each decoration type UI
	EnableOptionsUI(DecorateTool.UI.Smoke);
	EnableOptionsUI(DecorateTool.UI.Fire);
	EnableOptionsUI(DecorateTool.UI.Sparkles);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

-- List of creatable decoration types
local DecorationTypes = { 'Smoke', 'Fire', 'Sparkles' };

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not DecorateTool.UI then
		return;
	end;

	-- Go through each decoration type and update each options UI
	for _, DecorationType in pairs(DecorationTypes) do

		local Decorations = GetDecorations(DecorationType);
		local DecorationSettingsUI = DecorateTool.UI[DecorationType];

		-- Option input references
		local Options = DecorationSettingsUI.Options;

		-- Add/remove button references
		local AddButton = DecorationSettingsUI.AddButton;
		local RemoveButton = DecorationSettingsUI.RemoveButton;

		-- Hide option UIs for decoration types not present in the selection
		if #Decorations == 0 and not DecorationSettingsUI.ClipsDescendants then
			CloseOptions();
		end;

		-------------------------------------------
		-- Show and hide "ADD" and "REMOVE" buttons
		-------------------------------------------

		-- If no selected parts have decorations
		if #Decorations == 0 then

			-- Show add button only
			AddButton.Visible = true;
			AddButton.Position = UDim2.new(1, -AddButton.AbsoluteSize.X - 5, 0, 3);
			RemoveButton.Visible = false;

		-- If only some selected parts have decorations
		elseif #Decorations < #Selection.Parts then

			-- Show both add and remove buttons
			AddButton.Visible = true;
			AddButton.Position = UDim2.new(1, -AddButton.AbsoluteSize.X - 5, 0, 3);
			RemoveButton.Visible = true;
			RemoveButton.Position = UDim2.new(1, -AddButton.AbsoluteSize.X - 5 - RemoveButton.AbsoluteSize.X - 2, 0, 3);

		-- If all selected parts have decorations
		elseif #Decorations == #Selection.Parts then

			-- Show remove button
			RemoveButton.Visible = true;
			RemoveButton.Position = UDim2.new(1, -RemoveButton.AbsoluteSize.X - 5, 0, 3);
			AddButton.Visible = false;

		end;

		--------------------
		-- Update each input
		--------------------

		-- Update smoke inputs
		if DecorationType == 'Smoke' then

			-- Get the inputs
			local SizeInput = Options.SizeOption.Input.TextBox;
			local VelocityInput = Options.VelocityOption.Input.TextBox;
			local OpacityInput = Options.OpacityOption.Input.TextBox;
			local ColorIndicator = Options.ColorOption.Indicator;

			-- Update the inputs
			UpdateDataInputs {
				[SizeInput] = Support.Round(Support.IdentifyCommonProperty(Decorations, 'Size'), 2) or '*';
				[VelocityInput] = Support.Round(Support.IdentifyCommonProperty(Decorations, 'RiseVelocity'), 2) or '*';
				[OpacityInput] = Support.Round(Support.IdentifyCommonProperty(Decorations, 'Opacity'), 2) or '*';
			};
			UpdateColorIndicator(ColorIndicator, Support.IdentifyCommonProperty(Decorations, 'Color'));

		-- Update fire inputs
		elseif DecorationType == 'Fire' then

			-- Get the inputs
			local SizeInput = Options.SizeOption.Input.TextBox;
			local HeatInput = Options.HeatOption.Input.TextBox;
			local SecondaryColorIndicator = Options.SecondaryColorOption.Indicator;
			local ColorIndicator = Options.ColorOption.Indicator;

			-- Update the inputs
			UpdateColorIndicator(ColorIndicator, Support.IdentifyCommonProperty(Decorations, 'Color'));
			UpdateColorIndicator(SecondaryColorIndicator, Support.IdentifyCommonProperty(Decorations, 'SecondaryColor'));
			UpdateDataInputs {
				[HeatInput] = Support.Round(Support.IdentifyCommonProperty(Decorations, 'Heat'), 2) or '*';
				[SizeInput] = Support.Round(Support.IdentifyCommonProperty(Decorations, 'Size'), 2) or '*';
			};

		-- Update sparkle inputs
		elseif DecorationType == 'Sparkles' then

			-- Get the inputs
			local ColorIndicator = Options.ColorOption.Indicator;

			-- Update the inputs
			UpdateColorIndicator(ColorIndicator, Support.IdentifyCommonProperty(Decorations, 'SparkleColor'));

		end;

	end;

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not DecorateTool.UI then
		return;
	end;

	-- Hide the UI
	DecorateTool.UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function GetDecorations(DecorationType)
	-- Returns all the decorations of the given type in the selection

	local Decorations = {};

	-- Get any decorations from any selected parts
	for _, Part in pairs(Selection.Parts) do
		table.insert(Decorations, Support.GetChildOfClass(Part, DecorationType));
	end;

	-- Return the decorations
	return Decorations;

end;

function UpdateColorIndicator(Indicator, Color)
	-- Updates the given color indicator

	-- If there is a single color, just display it
	if Color then
		Indicator.BackgroundColor3 = Color;
		Indicator.Varies.Text = '';

	-- If the colors vary, display a * on a gray background
	else
		Indicator.BackgroundColor3 = Color3.new(222/255, 222/255, 222/255);
		Indicator.Varies.Text = '*';
	end;

end;

function UpdateDataInputs(Data)
	-- Updates the data in the given TextBoxes when the user isn't typing in them

	-- Go through the inputs and data
	for Input, UpdatedValue in pairs(Data) do

		-- Make sure the user isn't typing into the input
		if not Input:IsFocused() then

			-- Set the input's value
			Input.Text = tostring(UpdatedValue);

		end;

	end;

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Before = {};
		After = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncDecorate', Record.Before);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncDecorate', Record.After);

		end;

	};

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncDecorate', HistoryRecord.After);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

function EnableOptionsUI(SettingsUI)
	-- Sets up the UI for the given decoration type settings UI

	-- Get the type of decoration this options UI is for
	local DecorationType = SettingsUI.Name;

	-- Option input references
	local Options = SettingsUI.Options;
	
	-- Add/remove/show button references
	local AddButton = SettingsUI.AddButton;
	local RemoveButton = SettingsUI.RemoveButton;
	local ShowButton = SettingsUI.ArrowButton;

	-- Enable options for smoke decorations
	if DecorationType == 'Smoke' then
		SyncInputToProperty('Color', DecorationType, 'Color', Options.ColorOption.HSVPicker);
		SyncInputToProperty('Size', DecorationType, 'Number', Options.SizeOption.Input.TextBox);
		SyncInputToProperty('RiseVelocity', DecorationType, 'Number', Options.VelocityOption.Input.TextBox);
		SyncInputToProperty('Opacity', DecorationType, 'Number', Options.OpacityOption.Input.TextBox);

	-- Enable options for fire decorations
	elseif DecorationType == 'Fire' then
		SyncInputToProperty('Color', DecorationType, 'Color', Options.ColorOption.HSVPicker);
		SyncInputToProperty('SecondaryColor', DecorationType, 'Color', Options.SecondaryColorOption.HSVPicker);
		SyncInputToProperty('Size', DecorationType, 'Number', Options.SizeOption.Input.TextBox);
		SyncInputToProperty('Heat', DecorationType, 'Number', Options.HeatOption.Input.TextBox);

	-- Enable options for sparkle decorations
	elseif DecorationType == 'Sparkles' then
		SyncInputToProperty('SparkleColor', DecorationType, 'Color', Options.ColorOption.HSVPicker);

	end;

	-- Enable decoration addition button
	AddButton.MouseButton1Click:Connect(function ()
		AddDecorations(DecorationType);
	end);

	-- Enable decoration removal button
	RemoveButton.MouseButton1Click:Connect(function ()
		RemoveDecorations(DecorationType);
	end);

	-- Enable decoration options UI show button
	ShowButton.MouseButton1Click:Connect(function ()
		OpenOptions(DecorationType);
	end);

end;

function OpenOptions(DecorationType)
	-- Opens the options UI for the given decoration type

	-- Get the UI
	local UI = DecorateTool.UI[DecorationType];
	local UITemplate = Core.Tool.Interfaces.BTDecorateToolGUI[DecorationType];

	-- Close up all decoration option UIs
	CloseOptions(DecorationType);

	-- Calculate how much to expand this options UI by
	local HeightExpansion = UDim2.new(0, 0, 0, UITemplate.Options.Size.Y.Offset);

	-- Start the options UI size from 0
	UI.Options.Size = UDim2.new(UI.Options.Size.X.Scale, UI.Options.Size.X.Offset, UI.Options.Size.Y.Scale, 0);

	-- Allow the options UI to be seen
	UI.ClipsDescendants = false;

	-- Perform the options UI resize animation
	UI.Options:TweenSize(
		UITemplate.Options.Size + HeightExpansion,
		Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true,
		function ()

			-- Allow visibility of overflowing UIs within the options UI
			UI.Options.ClipsDescendants = false;

		end
	);

	-- Expand the main UI to accommodate the expanded options UI
	DecorateTool.UI:TweenSize(
		Core.Tool.Interfaces.BTDecorateToolGUI.Size + HeightExpansion,
		Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
	);

	-- Push any UIs below this one downwards
	local DecorationTypeIndex = Support.FindTableOccurrence(DecorationTypes, DecorationType);
	for DecorationTypeIndex = DecorationTypeIndex + 1, #DecorationTypes do

		-- Get the UI
		local DecorationType = DecorationTypes[DecorationTypeIndex];
		local UI = DecorateTool.UI[DecorationType];

		-- Perform the position animation
		UI:TweenPosition(
			UDim2.new(
				UI.Position.X.Scale,
				UI.Position.X.Offset,
				UI.Position.Y.Scale,
				30 + 30 * (DecorationTypeIndex - 1) + HeightExpansion.Y.Offset
			),
			Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
		);

	end;

end;

function CloseOptions(Exception)
	-- Closes all decoration options, except the one for the given decoration type

	-- Go through each decoration type
	for DecorationTypeIndex, DecorationType in pairs(DecorationTypes) do

		-- Get the UI for each decoration type
		local UI = DecorateTool.UI[DecorationType];
		local UITemplate = Core.Tool.Interfaces.BTDecorateToolGUI[DecorationType];

		-- Remember the initial size for each options UI
		local InitialSize = UITemplate.Options.Size;

		-- Move each decoration type UI to its starting position
		UI:TweenPosition(
			UDim2.new(
				UI.Position.X.Scale,
				UI.Position.X.Offset,
				UI.Position.Y.Scale,
				30 + 30 * (DecorationTypeIndex - 1)
			),
			Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
		);
		
		-- Make sure to not resize the exempt decoration type UI
		if not Exception or Exception and DecorationType ~= Exception then

			-- Allow the options UI to be resized
			UI.Options.ClipsDescendants = true;

			-- Perform the resize animation to close up
			UI.Options:TweenSize(
				UDim2.new(UI.Options.Size.X.Scale, UI.Options.Size.X.Offset, UI.Options.Size.Y.Scale, 0),
				Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true,
				function ()

					-- Hide the option UI
					UI.ClipsDescendants = true;

					-- Set the options UI's size to its initial size (for reexpansion)
					UI.Options.Size = InitialSize;

				end
			);

		end;

	end;

	-- Contract the main UI if no option UIs are being opened
	if not Exception then
		DecorateTool.UI:TweenSize(
			Core.Tool.Interfaces.BTDecorateToolGUI.Size,
			Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
		);
	end;

end;

function SyncInputToProperty(Property, DecorationType, InputType, Input)
	-- Enables `Input` to change the given property

	-- Enable inputs
	if InputType == 'Color' then
		Input.MouseButton1Click:Connect(function ()
			Core.Cheer(Core.Tool.Interfaces.BTHSVColorPicker, Core.UI).Start(
				Support.IdentifyCommonProperty(GetDecorations(DecorationType), Property) or Color3.new(0, 0, 1),
				function (Color) SetProperty(DecorationType, Property, Color) end,
				Core.Targeting.CancelSelecting
			);
		end);

	-- Enable number inputs
	elseif InputType == 'Number' then
		Input.FocusLost:Connect(function ()
			SetProperty(DecorationType, Property, tonumber(Input.Text));
		end);

	end;

end;

function SetProperty(DecorationType, Property, Value)

	-- Make sure the given value is valid
	if not Value then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each decoration
	for _, Decoration in pairs(GetDecorations(DecorationType)) do

		-- Store the state of the decoration before modification
		table.insert(HistoryRecord.Before, { Part = Decoration.Parent, DecorationType = DecorationType, [Property] = Decoration[Property] });

		-- Create the change request for this decoration
		table.insert(HistoryRecord.After, { Part = Decoration.Parent, DecorationType = DecorationType, [Property] = Value });

	end;

	-- Register the changes
	RegisterChange();

end;

function AddDecorations(DecorationType)

	-- Prepare the change request for the server
	local Changes = {};

	-- Go through the selection
	for _, Part in pairs(Selection.Parts) do

		-- Make sure this part doesn't already have a decoration
		if not Support.GetChildOfClass(Part, DecorationType) then

			-- Queue a decoration to be created for this part
			table.insert(Changes, { Part = Part, DecorationType = DecorationType });

		end;

	end;

	-- Send the change request to the server
	local Decorations = Core.SyncAPI:Invoke('CreateDecorations', Changes);

	-- Put together the history record
	local HistoryRecord = {
		Decorations = Decorations;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the decorations
			Core.SyncAPI:Invoke('Remove', Record.Decorations);

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Restore the decorations
			Core.SyncAPI:Invoke('UndoRemove', Record.Decorations);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

	};

	-- Register the history record
	Core.History.Add(HistoryRecord);

	-- Open the options UI for this decoration type
	OpenOptions(DecorationType);

end;

function RemoveDecorations(DecorationType)

	-- Get all the decorations in the selection
	local Decorations = GetDecorations(DecorationType);

	-- Create the history record
	local HistoryRecord = {
		Decorations = Decorations;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Restore the decorations
			Core.SyncAPI:Invoke('UndoRemove', Record.Decorations);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the decorations
			Core.SyncAPI:Invoke('Remove', Record.Decorations);

		end;

	};

	-- Send the removal request
	Core.SyncAPI:Invoke('Remove', Decorations);

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

-- Return the tool
return DecorateTool;
end;
};
G2L_MODULES[G2L["523"]] = {
Closure = function()
    local script = G2L["523"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local LightingTool = {

	Name = 'Lighting Tool';
	Color = BrickColor.new 'Really black';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function LightingTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	EnableSurfaceClickSelection();

end;

function LightingTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if LightingTool.UI then

		-- Reveal the UI
		LightingTool.UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	LightingTool.UI = Core.Tool.Interfaces.BTLightingToolGUI:Clone();
	LightingTool.UI.Parent = Core.UI;
	LightingTool.UI.Visible = true;

	-- Enable each light type UI
	EnableLightSettingsUI(LightingTool.UI.PointLight);
	EnableLightSettingsUI(LightingTool.UI.SpotLight);
	EnableLightSettingsUI(LightingTool.UI.SurfaceLight);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function EnableSurfaceClickSelection(LightType)
	-- Allows for the setting of the face for the given light type by clicking

	-- Clear out any existing connection
	if Connections.SurfaceClickSelection then
		Connections.SurfaceClickSelection:Disconnect();
		Connections.SurfaceClickSelection = nil;
	end;

	-- Add the new click connection
	Connections.SurfaceClickSelection = Core.Mouse.Button1Down:Connect(function ()
		local _, ScopeTarget = Core.Targeting:UpdateTarget()
		if Selection.IsSelected(ScopeTarget) then
			SetSurface(LightType, Core.Mouse.TargetSurface)
		end
	end)

end;

function EnableLightSettingsUI(LightSettingsUI)
	-- Sets up the UI for the given light type settings UI

	-- Get the type of light this settings UI is for
	local LightType = LightSettingsUI.Name;

	-- Option input references
	local Options = LightSettingsUI.Options;
	local RangeInput = Options.RangeOption.Input.TextBox;
	local BrightnessInput = Options.BrightnessOption.Input.TextBox;
	local ColorPicker = Options.ColorOption.HSVPicker;
	local ShadowsCheckbox = Options.ShadowsOption.Checkbox;

	-- Add/remove/show button references
	local AddButton = LightSettingsUI.AddButton;
	local RemoveButton = LightSettingsUI.RemoveButton;
	local ShowButton = LightSettingsUI.ArrowButton;

	-- Enable range input
	RangeInput.FocusLost:Connect(function ()
		SetRange(LightType, tonumber(RangeInput.Text));
	end);

	-- Enable brightness input
	BrightnessInput.FocusLost:Connect(function ()
		SetBrightness(LightType, tonumber(BrightnessInput.Text));
	end);

	-- Enable color input
	ColorPicker.MouseButton1Click:Connect(function ()
		Core.Cheer(Core.Tool.Interfaces.BTHSVColorPicker, Core.UI).Start(
			Support.IdentifyCommonProperty(GetLights(LightType), 'Color') or Color3.new(1, 1, 1),
			function (Color) SetColor(LightType, Color) end,
			Core.Targeting.CancelSelecting
		);
	end);

	-- Enable shadows input
	ShadowsCheckbox.MouseButton1Click:Connect(function ()
		ToggleShadows(LightType);
	end);

	-- Enable light addition button
	AddButton.MouseButton1Click:Connect(function ()
		AddLights(LightType);
	end);

	-- Enable light removal button
	RemoveButton.MouseButton1Click:Connect(function ()
		RemoveLights(LightType);
	end);

	-- Enable light options UI show button
	ShowButton.MouseButton1Click:Connect(function ()
		OpenLightOptions(LightType);
	end);

	-- Enable light type-specific features
	if LightType == 'SpotLight' or LightType == 'SurfaceLight' then

		-- Create a surface selection dropdown
		Surfaces = { 'Top', 'Bottom', 'Front', 'Back', 'Left', 'Right' };
		local SurfaceDropdown = Core.Cheer(Options.SideOption.Dropdown).Start(Surfaces, '', function (Surface)
			SetSurface(LightType, Enum.NormalId[Surface]);
		end);

		-- Enable angle input
		local AngleInput = Options.AngleOption.Input.TextBox;
		AngleInput.FocusLost:Connect(function ()
			SetAngle(LightType, tonumber(AngleInput.Text));
		end);

	end;

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not LightingTool.UI then
		return;
	end;

	-- Hide the UI
	LightingTool.UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function GetLights(LightType)
	-- Returns all the lights of the given type in the selection

	local Lights = {};

	-- Get any lights from any selected parts
	for _, Part in pairs(Selection.Parts) do
		table.insert(Lights, Support.GetChildOfClass(Part, LightType));
	end;

	-- Return the lights
	return Lights;

end;

-- List of creatable light types
local LightTypes = { 'SpotLight', 'PointLight', 'SurfaceLight' };

function OpenLightOptions(LightType)
	-- Opens the settings UI for the given light type

	-- Get the UI
	local UI = LightingTool.UI[LightType];
	local UITemplate = Core.Tool.Interfaces.BTLightingToolGUI[LightType];

	-- Close up all light option UIs
	CloseLightOptions(LightType);

	-- Calculate how much to expand this options UI by
	local HeightExpansion = UDim2.new(0, 0, 0, UITemplate.Options.Size.Y.Offset);

	-- Start the options UI size from 0
	UI.Options.Size = UDim2.new(UI.Options.Size.X.Scale, UI.Options.Size.X.Offset, UI.Options.Size.Y.Scale, 0);

	-- Allow the options UI to be seen
	UI.ClipsDescendants = false;

	-- Perform the options UI resize animation
	UI.Options:TweenSize(
		UITemplate.Options.Size + HeightExpansion,
		Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true,
		function ()

			-- Allow visibility of overflowing UIs within the options UI
			UI.Options.ClipsDescendants = false;

		end
	);

	-- Expand the main UI to accommodate the expanded options UI
	LightingTool.UI:TweenSize(
		Core.Tool.Interfaces.BTLightingToolGUI.Size + HeightExpansion,
		Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
	);

	-- Push any UIs below this one downwards
	local LightTypeIndex = Support.FindTableOccurrence(LightTypes, LightType);
	for LightTypeIndex = LightTypeIndex + 1, #LightTypes do

		-- Get the UI
		local LightType = LightTypes[LightTypeIndex];
		local UI = LightingTool.UI[LightType];

		-- Perform the position animation
		UI:TweenPosition(
			UDim2.new(
				UI.Position.X.Scale,
				UI.Position.X.Offset,
				UI.Position.Y.Scale,
				30 + 30 * (LightTypeIndex - 1) + HeightExpansion.Y.Offset
			),
			Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
		);

	end;

	-- Enable surface setting by clicking
	EnableSurfaceClickSelection(LightType);

end;

function CloseLightOptions(Exception)
	-- Closes all light options, except the one for the given light type

	-- Go through each light type
	for LightTypeIndex, LightType in pairs(LightTypes) do

		-- Get the UI for each light type
		local UI = LightingTool.UI[LightType];
		local UITemplate = Core.Tool.Interfaces.BTLightingToolGUI[LightType];

		-- Remember the initial size for each options UI
		local InitialSize = UITemplate.Options.Size;

		-- Move each light type UI to its starting position
		UI:TweenPosition(
			UDim2.new(
				UI.Position.X.Scale,
				UI.Position.X.Offset,
				UI.Position.Y.Scale,
				30 + 30 * (LightTypeIndex - 1)
			),
			Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
		);

		-- Make sure to not resize the exempt light type UI
		if not Exception or Exception and LightType ~= Exception then

			-- Allow the options UI to be resized
			UI.Options.ClipsDescendants = true;

			-- Perform the resize animation to close up
			UI.Options:TweenSize(
				UDim2.new(UI.Options.Size.X.Scale, UI.Options.Size.X.Offset, UI.Options.Size.Y.Scale, 0),
				Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true,
				function ()

					-- Hide the option UI
					UI.ClipsDescendants = true;

					-- Set the options UI's size to its initial size (for reexpansion)
					UI.Options.Size = InitialSize;

				end
			);

		end;

	end;

	-- Contract the main UI if no option UIs are being opened
	if not Exception then
		LightingTool.UI:TweenSize(
			Core.Tool.Interfaces.BTLightingToolGUI.Size,
			Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true
		);
	end;

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not LightingTool.UI then
		return;
	end;

	-- Go through each light type and update each options UI
	for _, LightType in pairs(LightTypes) do

		local Lights = GetLights(LightType);
		local LightSettingsUI = LightingTool.UI[LightType];

		-- Option input references
		local Options = LightSettingsUI.Options;
		local RangeInput = Options.RangeOption.Input.TextBox;
		local BrightnessInput = Options.BrightnessOption.Input.TextBox;
		local ColorPicker = Options.ColorOption.HSVPicker;
		local ColorIndicator = Options.ColorOption.Indicator;
		local ShadowsCheckbox = Options.ShadowsOption.Checkbox;

		-- Add/remove button references
		local AddButton = LightSettingsUI.AddButton;
		local RemoveButton = LightSettingsUI.RemoveButton;

		-- Hide option UIs for light types not present in the selection
		if #Lights == 0 and not LightSettingsUI.ClipsDescendants then
			CloseLightOptions();
		end;

		-------------------------------------------
		-- Show and hide "ADD" and "REMOVE" buttons
		-------------------------------------------

		-- If no selected parts have lights
		if #Lights == 0 then

			-- Show add button only
			AddButton.Visible = true;
			AddButton.Position = UDim2.new(1, -AddButton.AbsoluteSize.X - 5, 0, 3);
			RemoveButton.Visible = false;

		-- If only some selected parts have lights
		elseif #Lights < #Selection.Parts then

			-- Show both add and remove buttons
			AddButton.Visible = true;
			AddButton.Position = UDim2.new(1, -AddButton.AbsoluteSize.X - 5, 0, 3);
			RemoveButton.Visible = true;
			RemoveButton.Position = UDim2.new(1, -AddButton.AbsoluteSize.X - 5 - RemoveButton.AbsoluteSize.X - 2, 0, 3);

		-- If all selected parts have lights
		elseif #Lights == #Selection.Parts then

			-- Show remove button
			RemoveButton.Visible = true;
			RemoveButton.Position = UDim2.new(1, -RemoveButton.AbsoluteSize.X - 5, 0, 3);
			AddButton.Visible = false;

		end;

		--------------------
		-- Update each input
		--------------------

		-- Update the standard inputs
		UpdateDataInputs {
			[RangeInput] = Support.Round(Support.IdentifyCommonProperty(Lights, 'Range'), 2) or '*';
			[BrightnessInput] = Support.Round(Support.IdentifyCommonProperty(Lights, 'Brightness'), 2) or '*';
		};

		-- Update type-specific inputs
		if LightType == 'SpotLight' or LightType == 'SurfaceLight' then

			-- Get the type-specific inputs
			local AngleInput = Options.AngleOption.Input.TextBox;
			local SideDropdown = Core.Cheer(Options.SideOption.Dropdown);

			-- Update the angle input
			UpdateDataInputs {
				[AngleInput] = Support.Round(Support.IdentifyCommonProperty(Lights, 'Angle'), 2) or '*';
			};

			-- Update the surface dropdown input
			local Face = Support.IdentifyCommonProperty(Lights, 'Face');
			SideDropdown.SetOption(Face and Face.Name or '*');

		end;

		-- Update special color input
		local Color = Support.IdentifyCommonProperty(Lights, 'Color');
		if Color then
			ColorIndicator.BackgroundColor3 = Color;
			ColorIndicator.Varies.Text = '';
		else
			ColorIndicator.BackgroundColor3 = Color3.new(222/255, 222/255, 222/255);
			ColorIndicator.Varies.Text = '*';
		end;

		-- Update the special shadows input
		local ShadowsEnabled = Support.IdentifyCommonProperty(Lights, 'Shadows');
		if ShadowsEnabled == true then
			ShadowsCheckbox.Image = Core.Assets.CheckedCheckbox;
		elseif ShadowsEnabled == false then
			ShadowsCheckbox.Image = Core.Assets.UncheckedCheckbox;
		elseif ShadowsEnabled == nil then
			ShadowsCheckbox.Image = Core.Assets.SemicheckedCheckbox;
		end;

	end;

end;

function UpdateDataInputs(Data)
	-- Updates the data in the given TextBoxes when the user isn't typing in them

	-- Go through the inputs and data
	for Input, UpdatedValue in pairs(Data) do

		-- Makwe sure the user isn't typing into the input
		if not Input:IsFocused() then

			-- Set the input's value
			Input.Text = tostring(UpdatedValue);

		end;

	end;

end;

function AddLights(LightType)

	-- Prepare the change request for the server
	local Changes = {};

	-- Go through the selection
	for _, Part in pairs(Selection.Parts) do

		-- Make sure this part doesn't already have a light
		if not Support.GetChildOfClass(Part, LightType) then

			-- Queue a light to be created for this part
			table.insert(Changes, { Part = Part, LightType = LightType });

		end;

	end;

	-- Send the change request to the server
	local Lights = Core.SyncAPI:Invoke('CreateLights', Changes);

	-- Put together the history record
	local HistoryRecord = {
		Lights = Lights;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the lights
			Core.SyncAPI:Invoke('Remove', Record.Lights);

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Restore the lights
			Core.SyncAPI:Invoke('UndoRemove', Record.Lights);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

	};

	-- Register the history record
	Core.History.Add(HistoryRecord);

	-- Open the options UI for this light type
	OpenLightOptions(LightType);

end;

function RemoveLights(LightType)

	-- Get all the lights in the selection
	local Lights = GetLights(LightType);

	-- Create the history record
	local HistoryRecord = {
		Lights = Lights;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Restore the lights
			Core.SyncAPI:Invoke('UndoRemove', Record.Lights);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the lights
			Core.SyncAPI:Invoke('Remove', Record.Lights);

		end;

	};

	-- Send the removal request
	Core.SyncAPI:Invoke('Remove', Lights);

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Before = {};
		After = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncLighting', Record.Before);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncLighting', Record.After);

		end;

	};

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncLighting', HistoryRecord.After);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

function SetRange(LightType, Range)

	-- Make sure the given range is valid
	if not Range then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each light
	for _, Light in pairs(GetLights(LightType)) do

		-- Store the state of the light before modification
		table.insert(HistoryRecord.Before, { Part = Light.Parent, LightType = LightType, Range = Light.Range });

		-- Create the change request for this light
		table.insert(HistoryRecord.After, { Part = Light.Parent, LightType = LightType, Range = Range });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetBrightness(LightType, Brightness)

	-- Make sure the given brightness is valid
	if not Brightness then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each light
	for _, Light in pairs(GetLights(LightType)) do

		-- Store the state of the light before modification
		table.insert(HistoryRecord.Before, { Part = Light.Parent, LightType = LightType, Brightness = Light.Brightness });

		-- Create the change request for this light
		table.insert(HistoryRecord.After, { Part = Light.Parent, LightType = LightType, Brightness = Brightness });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetColor(LightType, Color)

	-- Make sure the given color is valid
	if not Color then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each light
	for _, Light in pairs(GetLights(LightType)) do

		-- Store the state of the light before modification
		table.insert(HistoryRecord.Before, { Part = Light.Parent, LightType = LightType, Color = Light.Color });

		-- Create the change request for this light
		table.insert(HistoryRecord.After, { Part = Light.Parent, LightType = LightType, Color = Color });

	end;

	-- Register the changes
	RegisterChange();

end;

function ToggleShadows(LightType)

	-- Determine whether to turn shadows on or off
	local ShadowsEnabled = not Support.IdentifyCommonProperty(GetLights(LightType), 'Shadows');

	-- Start a history record
	TrackChange();

	-- Go through each light
	for _, Light in pairs(GetLights(LightType)) do

		-- Store the state of the light before modification
		table.insert(HistoryRecord.Before, { Part = Light.Parent, LightType = LightType, Shadows = Light.Shadows });

		-- Create the change request for this light
		table.insert(HistoryRecord.After, { Part = Light.Parent, LightType = LightType, Shadows = ShadowsEnabled });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetSurface(LightType, Face)

	-- Make sure the given face is valid, and this is an applicable light type
	if not Face or not (LightType == 'SurfaceLight' or LightType == 'SpotLight') then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each light
	for _, Light in pairs(GetLights(LightType)) do

		-- Store the state of the light before modification
		table.insert(HistoryRecord.Before, { Part = Light.Parent, LightType = LightType, Face = Light.Face });

		-- Create the change request for this light
		table.insert(HistoryRecord.After, { Part = Light.Parent, LightType = LightType, Face = Face });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetAngle(LightType, Angle)

	-- Make sure the given angle is valid
	if not Angle then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each light
	for _, Light in pairs(GetLights(LightType)) do

		-- Store the state of the light before modification
		table.insert(HistoryRecord.Before, { Part = Light.Parent, LightType = LightType, Angle = Light.Angle });

		-- Create the change request for this light
		table.insert(HistoryRecord.After, { Part = Light.Parent, LightType = LightType, Angle = Angle });

	end;

	-- Register the changes
	RegisterChange();

end;

-- Return the tool
return LightingTool;
end;
};
G2L_MODULES[G2L["524"]] = {
Closure = function()
    local script = G2L["524"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local MaterialTool = {

	Name = 'Material Tool';
	Color = BrickColor.new 'Bright violet';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function MaterialTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();

end;

function MaterialTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

-- Designate a friendly name to each material
local Materials = {
	[Enum.Material.SmoothPlastic] = 'Smooth Plastic';
	[Enum.Material.Plastic] = 'Plastic';
	[Enum.Material.Brick] = 'Brick';
	[Enum.Material.Cobblestone] = 'Cobblestone';
	[Enum.Material.Concrete] = 'Concrete';
	[Enum.Material.CorrodedMetal] = 'Corroded Metal';
	[Enum.Material.DiamondPlate] = 'Diamond Plate';
	[Enum.Material.Fabric] = 'Fabric';
	[Enum.Material.Foil] = 'Foil';
	[Enum.Material.ForceField] = 'Forcefield';
	[Enum.Material.Granite] = 'Granite';
	[Enum.Material.Grass] = 'Grass';
	[Enum.Material.Ice] = 'Ice';
	[Enum.Material.Marble] = 'Marble';
	[Enum.Material.Metal] = 'Metal';
	[Enum.Material.Neon] = 'Neon';
	[Enum.Material.Pebble] = 'Pebble';
	[Enum.Material.Sand] = 'Sand';
	[Enum.Material.Slate] = 'Slate';
	[Enum.Material.Wood] = 'Wood';
	[Enum.Material.WoodPlanks] = 'Wood Planks';
	[Enum.Material.Glass] = 'Glass';
};

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if UI then

		-- Reveal the UI
		UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	UI = Core.Tool.Interfaces.BTMaterialToolGUI:Clone();
	UI.Parent = Core.UI;
	UI.Visible = true;

	-- References to inputs
	local TransparencyInput = UI.TransparencyOption.Input.TextBox;
	local ReflectanceInput = UI.ReflectanceOption.Input.TextBox;

	-- Sort the material list
	local MaterialList = Support.Values(Materials);
	table.sort(MaterialList);

	-- Create the material selection dropdown
	MaterialDropdown = Core.Cheer(UI.MaterialOption.Dropdown).Start(MaterialList, '', function (Material)
		SetProperty('Material', Support.FindTableOccurrence(Materials, Material));
	end);

	-- Enable the transparency and reflectance inputs
	SyncInputToProperty('Transparency', TransparencyInput);
	SyncInputToProperty('Reflectance', ReflectanceInput);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not UI then
		return;
	end;

	-- Hide the UI
	UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function SyncInputToProperty(Property, Input)
	-- Enables `Input` to change the given property

	-- Enable inputs
	Input.FocusLost:Connect(function ()
		SetProperty(Property, tonumber(Input.Text));
	end);

end;

function SetProperty(Property, Value)

	-- Make sure the given value is valid
	if Value == nil then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each part
	for _, Part in pairs(Selection.Parts) do

		-- Store the state of the part before modification
		table.insert(HistoryRecord.Before, { Part = Part, [Property] = Part[Property] });

		-- Create the change request for this part
		table.insert(HistoryRecord.After, { Part = Part, [Property] = Value });

	end;

	-- Register the changes
	RegisterChange();

end;

function UpdateDataInputs(Data)
	-- Updates the data in the given TextBoxes when the user isn't typing in them

	-- Go through the inputs and data
	for Input, UpdatedValue in pairs(Data) do

		-- Makwe sure the user isn't typing into the input
		if not Input:IsFocused() then

			-- Set the input's value
			Input.Text = tostring(UpdatedValue);

		end;

	end;

end;

-- List of UI layouts
local Layouts = {
	EmptySelection = { 'SelectNote' };
	Normal = { 'MaterialOption', 'TransparencyOption', 'ReflectanceOption' };
};

-- List of UI elements
local UIElements = { 'SelectNote', 'MaterialOption', 'TransparencyOption', 'ReflectanceOption' };

-- Current UI layout
local CurrentLayout;

function ChangeLayout(Layout)
	-- Sets the UI to the given layout

	-- Make sure the new layout isn't already set
	if CurrentLayout == Layout then
		return;
	end;

	-- Set this as the current layout
	CurrentLayout = Layout;

	-- Reset the UI
	for _, ElementName in pairs(UIElements) do
		local Element = UI[ElementName];
		Element.Visible = false;
	end;

	-- Keep track of the total vertical extents of all items
	local Sum = 0;

	-- Go through each layout element
	for ItemIndex, ItemName in ipairs(Layout) do

		local Item = UI[ItemName];

		-- Make the item visible
		Item.Visible = true;

		-- Position this item underneath the past items
		Item.Position = UDim2.new(0, 0, 0, 20) + UDim2.new(
			Item.Position.X.Scale,
			Item.Position.X.Offset,
			0,
			Sum + 10
		);

		-- Update the sum of item heights
		Sum = Sum + 10 + Item.AbsoluteSize.Y;

	end;

	-- Resize the container to fit the new layout
	UI.Size = UDim2.new(0, 200, 0, 40 + Sum);

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not UI then
		return;
	end;

	-- References to inputs
	local TransparencyInput = UI.TransparencyOption.Input.TextBox;
	local ReflectanceInput = UI.ReflectanceOption.Input.TextBox;

	-----------------------
	-- Update the UI layout
	-----------------------

	-- Figure out the necessary UI layout
	if #Selection.Parts == 0 then
		ChangeLayout(Layouts.EmptySelection);
		return;

	-- When the selection isn't empty
	else
		ChangeLayout(Layouts.Normal);
	end;

	-- Get the common properties
	local Material = Support.IdentifyCommonProperty(Selection.Parts, 'Material');
	local Transparency = Support.IdentifyCommonProperty(Selection.Parts, 'Transparency');
	local Reflectance = Support.IdentifyCommonProperty(Selection.Parts, 'Reflectance');

	-- Update the material dropdown
	MaterialDropdown.SetOption(Material and Materials[Material] or '*');

	-- Update inputs
	UpdateDataInputs {
		[TransparencyInput] = Transparency and Support.Round(Transparency, 2) or '*';
		[ReflectanceInput] = Reflectance and Support.Round(Reflectance, 2) or '*';
	};

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Before = {};
		After = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncMaterial', Record.Before);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncMaterial', Record.After);

		end;

	};

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncMaterial', HistoryRecord.After);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

-- Return the tool
return MaterialTool;
end;
};
G2L_MODULES[G2L["525"]] = {
Closure = function()
    local script = G2L["525"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local MeshTool = {

	Name = 'Mesh Tool';
	Color = BrickColor.new 'Bright violet';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function MeshTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();

end;

function MeshTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if MeshTool.UI then

		-- Reveal the UI
		MeshTool.UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	MeshTool.UI = Core.Tool.Interfaces.BTMeshToolGUI:Clone();
	MeshTool.UI.Parent = Core.UI;
	MeshTool.UI.Visible = true;

	local AddButton = MeshTool.UI.AddButton;
	local RemoveButton = MeshTool.UI.RemoveButton;

	local MeshIdInput = MeshTool.UI.MeshIdOption.TextBox;
	local TextureIdInput = MeshTool.UI.TextureIdOption.TextBox;
	local VertexColorInput = MeshTool.UI.TintOption.HSVPicker;

	MeshTypes = {
		Block = Enum.MeshType.Brick,
		Cylinder = Enum.MeshType.Cylinder,
		File = Enum.MeshType.FileMesh,
		Head = Enum.MeshType.Head,
		Sphere = Enum.MeshType.Sphere,
		Wedge = Enum.MeshType.Wedge
	};

	-- Sort the mesh types
	SortedMeshTypes = Support.Keys(MeshTypes);
	table.sort(SortedMeshTypes);

	-- Create the mesh type dropdown
	TypeDropdown = Core.Cheer(MeshTool.UI.TypeOption.Dropdown).Start(SortedMeshTypes, '', function (Type)
		SetProperty('MeshType', MeshTypes[Type]);
	end);

	-- Enable the scale inputs
	local XScaleInput = MeshTool.UI.ScaleOption.XInput.TextBox;
	local YScaleInput = MeshTool.UI.ScaleOption.YInput.TextBox;
	local ZScaleInput = MeshTool.UI.ScaleOption.ZInput.TextBox;
	XScaleInput.FocusLost:Connect(function (EnterPressed)
		local NewScale = tonumber(XScaleInput.Text);
		SetAxisScale('X', NewScale);
	end);
	YScaleInput.FocusLost:Connect(function (EnterPressed)
		local NewScale = tonumber(YScaleInput.Text);
		SetAxisScale('Y', NewScale);
	end);
	ZScaleInput.FocusLost:Connect(function (EnterPressed)
		local NewScale = tonumber(ZScaleInput.Text);
		SetAxisScale('Z', NewScale);
	end);

	-- Enable the offset inputs
	local XOffsetInput = MeshTool.UI.OffsetOption.XInput.TextBox;
	local YOffsetInput = MeshTool.UI.OffsetOption.YInput.TextBox;
	local ZOffsetInput = MeshTool.UI.OffsetOption.ZInput.TextBox;
	XOffsetInput.FocusLost:Connect(function (EnterPressed)
		local NewOffset = tonumber(XOffsetInput.Text);
		SetAxisOffset('X', NewOffset);
	end);
	YOffsetInput.FocusLost:Connect(function (EnterPressed)
		local NewOffset = tonumber(YOffsetInput.Text);
		SetAxisOffset('Y', NewOffset);
	end);
	ZOffsetInput.FocusLost:Connect(function (EnterPressed)
		local NewOffset = tonumber(ZOffsetInput.Text);
		SetAxisOffset('Z', NewOffset);
	end);

	-- Enable the mesh ID input
	MeshIdInput.FocusLost:Connect(function (EnterPressed)
		SetMeshId(ParseAssetId(MeshIdInput.Text));
	end);

	-- Enable the texture ID input
	TextureIdInput.FocusLost:Connect(function (EnterPressed)
		SetTextureId(ParseAssetId(TextureIdInput.Text));
	end);

	-- Enable the vertex color/tint option
	VertexColorInput.MouseButton1Click:Connect(function ()
		Core.Cheer(Core.Tool.Interfaces.BTHSVColorPicker, Core.UI).Start(
			VectorToColor(Support.IdentifyCommonProperty(GetMeshes(), 'VertexColor')) or Color3.new(1, 1, 1),
			function (Color) SetProperty('VertexColor', ColorToVector(Color)) end,
			Core.Targeting.CancelSelecting
		);
	end);

	-- Enable the mesh adding button
	AddButton.Button.MouseButton1Click:Connect(function ()
		AddMeshes();
	end);
	RemoveButton.Button.MouseButton1Click:Connect(function ()
		RemoveMeshes();
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not MeshTool.UI then
		return;
	end;

	-- Get all meshes
	local Meshes = GetMeshes();

	-- Identify all common properties
	local MeshType = Support.IdentifyCommonProperty(Meshes, 'MeshType');
	local MeshId = Support.IdentifyCommonProperty(Meshes, 'MeshId');
	local TextureId = Support.IdentifyCommonProperty(Meshes, 'TextureId');
	local VertexColor = VectorToColor(Support.IdentifyCommonProperty(Meshes, 'VertexColor'));

	-- Check if there's a file mesh in the selection
	local FileMeshInSelection = false;
	for _, Mesh in pairs(GetMeshes()) do
		if Mesh.MeshType == Enum.MeshType.FileMesh then
			FileMeshInSelection = true;
			break;
		end;
	end;

	-- Identify common scales and offsets across axes
	local XScaleVariations, YScaleVariations, ZScaleVariations = {}, {}, {};
	local XOffsetVariations, YOffsetVariations, ZOffsetVariations = {}, {}, {};
	for _, Mesh in pairs(GetMeshes()) do
		table.insert(XScaleVariations, Support.Round(Mesh.Scale.X, 3));
		table.insert(YScaleVariations, Support.Round(Mesh.Scale.Y, 3));
		table.insert(ZScaleVariations, Support.Round(Mesh.Scale.Z, 3));
		table.insert(XOffsetVariations, Support.Round(Mesh.Offset.X, 3));
		table.insert(YOffsetVariations, Support.Round(Mesh.Offset.Y, 3));
		table.insert(ZOffsetVariations, Support.Round(Mesh.Offset.Z, 3));
	end;
	local CommonXScale = Support.IdentifyCommonItem(XScaleVariations);
	local CommonYScale = Support.IdentifyCommonItem(YScaleVariations);
	local CommonZScale = Support.IdentifyCommonItem(ZScaleVariations);
	local CommonXOffset = Support.IdentifyCommonItem(XOffsetVariations);
	local CommonYOffset = Support.IdentifyCommonItem(YOffsetVariations);
	local CommonZOffset = Support.IdentifyCommonItem(ZOffsetVariations);

	-- Shortcuts to updating UI elements
	local AddButton = MeshTool.UI.AddButton;
	local RemoveButton = MeshTool.UI.RemoveButton;
	local MeshTypeDropdown = MeshTool.UI.TypeOption.Dropdown;
	local MeshIdInput = MeshTool.UI.MeshIdOption.TextBox;
	local TextureIdInput = MeshTool.UI.TextureIdOption.TextBox;
	local VertexColorIndicator = MeshTool.UI.TintOption.Indicator;
	local XScaleInput = MeshTool.UI.ScaleOption.XInput.TextBox;
	local YScaleInput = MeshTool.UI.ScaleOption.YInput.TextBox;
	local ZScaleInput = MeshTool.UI.ScaleOption.ZInput.TextBox;
	local XOffsetInput = MeshTool.UI.OffsetOption.XInput.TextBox;
	local YOffsetInput = MeshTool.UI.OffsetOption.YInput.TextBox;
	local ZOffsetInput = MeshTool.UI.OffsetOption.ZInput.TextBox;

	-- Update the inputs
	UpdateDataInputs {
		[MeshIdInput] = MeshId and ParseAssetId(MeshId) or MeshId or '*';
		[TextureIdInput] = TextureId and ParseAssetId(TextureId) or TextureId or '*';
		[XScaleInput] = CommonXScale or '*';
		[YScaleInput] = CommonYScale or '*';
		[ZScaleInput] = CommonZScale or '*';
		[XOffsetInput] = CommonXOffset or '*';
		[YOffsetInput] = CommonYOffset or '*';
		[ZOffsetInput] = CommonZOffset or '*';
	};
	UpdateColorIndicator(VertexColorIndicator, VertexColor);

	local MeshTypeLabel = Support.FindTableOccurrence(MeshTypes, MeshType);
	TypeDropdown.SetOption(MeshTypeLabel and MeshTypeLabel or '*');

	AddButton.Visible = false;
	RemoveButton.Visible = false;
	MeshTool.UI.TypeOption.Visible = false;
	MeshIdInput.Parent.Visible = false;
	TextureIdInput.Parent.Visible = false;
	VertexColorIndicator.Parent.Visible = false;
	MeshTool.UI.ScaleOption.Visible = false;
	MeshTool.UI.OffsetOption.Visible = false;

	-- Update the UI to display options depending on the mesh type
	local DisplayedItems;
	if #Meshes == 0 then
		DisplayedItems = { AddButton };

	-- Each selected part has a mesh, including a file mesh
	elseif #Meshes == #Selection.Parts and FileMeshInSelection then
		DisplayedItems = { MeshTool.UI.TypeOption, MeshTool.UI.ScaleOption, MeshTool.UI.OffsetOption, MeshIdInput.Parent, TextureIdInput.Parent, VertexColorIndicator.Parent, RemoveButton };

	-- Each selected part has a mesh
	elseif #Meshes == #Selection.Parts and not FileMeshInSelection then
		DisplayedItems = { MeshTool.UI.TypeOption, MeshTool.UI.ScaleOption, MeshTool.UI.OffsetOption, RemoveButton };

	-- Only some selected parts have meshes, including a file mesh
	elseif #Meshes ~= #Selection.Parts and FileMeshInSelection then
		DisplayedItems = { AddButton, MeshTool.UI.TypeOption, MeshTool.UI.ScaleOption, MeshTool.UI.OffsetOption, MeshIdInput.Parent, TextureIdInput.Parent, VertexColorIndicator.Parent, RemoveButton };

	-- Only some selected parts have meshes
	elseif #Meshes ~= #Selection.Parts and not FileMeshInSelection then
		DisplayedItems = { AddButton, MeshTool.UI.TypeOption, MeshTool.UI.ScaleOption, MeshTool.UI.OffsetOption, RemoveButton };

	end;

	-- Display the relevant UI elements
	DisplayLinearLayout(DisplayedItems, MeshTool.UI, UDim2.new(0, 0, 0, 20), 10);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not MeshTool.UI then
		return;
	end;

	-- Hide the UI
	MeshTool.UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function GetMeshes()
	-- Returns all the meshes in the selection

	local Meshes = {};

	-- Get any meshes from any selected parts
	for _, Part in pairs(Selection.Parts) do
		table.insert(Meshes, Support.GetChildOfClass(Part, 'SpecialMesh'));
	end;

	-- Return the meshes
	return Meshes;
end;

function ParseAssetId(Input)
	-- Returns the intended asset ID for the given input

	-- Get the ID number from the input
	local Id = tonumber(Input)
		or tonumber(Input:lower():match('%?id=([0-9]+)'))
		or tonumber(Input:match('/([0-9]+)/'))
		or tonumber(Input:lower():match('rbxassetid://([0-9]+)'));

	-- Return the ID
	return Id;
end;

function VectorToColor(Vector)
	-- Returns the Color3 with the values in the given Vector3

	-- Make sure that the given Vector3 is valid
	if not Vector then return end;

	-- Return the Color3
	return Color3.new(Vector.X, Vector.Y, Vector.Z);
end;

function ColorToVector(Color)
	-- Returns the Vector3 with the values in the given Color3

	-- Make sure that the given Color3 is valid
	if not Color then return end;

	-- Return the Vector3
	return Vector3.new(Color.r, Color.g, Color.b);
end;

function UpdateDataInputs(Data)
	-- Updates the data in the given TextBoxes when the user isn't typing in them

	-- Go through the inputs and data
	for Input, UpdatedValue in pairs(Data) do

		-- Makwe sure the user isn't typing into the input
		if not Input:IsFocused() then

			-- Set the input's value
			Input.Text = tostring(UpdatedValue);

		end;

	end;

end;

function UpdateColorIndicator(Indicator, Color)
	-- Updates the given color indicator

	-- If there is a single color, just display it
	if Color then
		Indicator.BackgroundColor3 = Color;
		Indicator.Varies.Text = '';

	-- If the colors vary, display a * on a gray background
	else
		Indicator.BackgroundColor3 = Color3.new(222/255, 222/255, 222/255);
		Indicator.Varies.Text = '*';
	end;

end;

function DisplayLinearLayout(Items, Container, StartPosition, Padding)

	-- Keep track of the total vertical extents of all items
	local Sum = 0;

	-- Go through each item
	for ItemIndex, Item in ipairs(Items) do

		-- Make the item visible
		Item.Visible = true;

		-- Position this item underneath the past items
		Item.Position = StartPosition + UDim2.new(
			Item.Position.X.Scale,
			Item.Position.X.Offset,
			0,
			Sum + Padding
		);

		-- Update the sum of item heights
		Sum = Sum + Padding + Item.AbsoluteSize.Y;

	end;

	-- Resize the container to fit the new layout
	Container.Size = UDim2.new(0, 200, 0, 30 + Sum);

end;

function AddMeshes()

	-- Prepare the change request for the server
	local Changes = {};

	-- Go through the selection
	for _, Part in pairs(Selection.Parts) do

		-- Make sure this part doesn't already have a mesh
		if not Support.GetChildOfClass(Part, 'SpecialMesh') then

			-- Queue a mesh to be created for this part
			table.insert(Changes, { Part = Part });

		end;

	end;

	-- Send the change request to the server
	local Meshes = Core.SyncAPI:Invoke('CreateMeshes', Changes);

	-- Put together the history record
	local HistoryRecord = {
		Meshes = Meshes;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the meshes
			Core.SyncAPI:Invoke('Remove', Record.Meshes);

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Restore the meshes
			Core.SyncAPI:Invoke('UndoRemove', Record.Meshes);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

	};

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

function RemoveMeshes()

	-- Get all the meshes in the selection
	local Meshes = GetMeshes();

	-- Create the history record
	local HistoryRecord = {
		Meshes = Meshes;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Restore the meshes
			Core.SyncAPI:Invoke('UndoRemove', Record.Meshes);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the meshes
			Core.SyncAPI:Invoke('Remove', Record.Meshes);

		end;

	};

	-- Send the removal request
	Core.SyncAPI:Invoke('Remove', Meshes);

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

function SetProperty(Property, Value)

	-- Make sure the given value is valid
	if not Value then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each mesh
	for _, Mesh in pairs(GetMeshes()) do

		-- Store the state of the mesh before modification
		table.insert(HistoryRecord.Before, { Part = Mesh.Parent, [Property] = Mesh[Property] });

		-- Create the change request for this mesh
		table.insert(HistoryRecord.After, { Part = Mesh.Parent, [Property] = Value });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetAxisScale(Axis, Scale)
	-- Sets the selection's scale on axis `Axis` to `Scale`

	-- Start a history record
	TrackChange();

	-- Go through each mesh
	for _, Mesh in pairs(GetMeshes()) do

		-- Store the state of the mesh before modification
		table.insert(HistoryRecord.Before, { Part = Mesh.Parent, Scale = Mesh.Scale });

		-- Put together the changed scale
		local Scale = Vector3.new(
			Axis == 'X' and Scale or Mesh.Scale.X,
			Axis == 'Y' and Scale or Mesh.Scale.Y,
			Axis == 'Z' and Scale or Mesh.Scale.Z
		);

		-- Create the change request for this mesh
		table.insert(HistoryRecord.After, { Part = Mesh.Parent, Scale = Scale });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetAxisOffset(Axis, Offset)
	-- Sets the selection's offset on axis `Axis` to `Offset`

	-- Start a history record
	TrackChange();

	-- Go through each mesh
	for _, Mesh in pairs(GetMeshes()) do

		-- Store the state of the mesh before modification
		table.insert(HistoryRecord.Before, { Part = Mesh.Parent, Offset = Mesh.Offset });

		-- Put together the changed scale
		local Offset = Vector3.new(
			Axis == 'X' and Offset or Mesh.Offset.X,
			Axis == 'Y' and Offset or Mesh.Offset.Y,
			Axis == 'Z' and Offset or Mesh.Offset.Z
		);

		-- Create the change request for this mesh
		table.insert(HistoryRecord.After, { Part = Mesh.Parent, Offset = Offset });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetMeshId(AssetId)
	-- Sets the meshes in the selection's mesh ID to the intended, given mesh asset

	-- Make sure the given asset ID is valid
	if not AssetId then
		return;
	end;

	-- Prepare the change request
	local Changes = {
		MeshId = 'rbxassetid://' .. AssetId;
	};

	-- Attempt a mesh extraction on the given asset
	Core.Try(Core.SyncAPI.Invoke, Core.SyncAPI, 'ExtractMeshFromAsset', AssetId)
		:Then(function (ExtractionData)

			-- Ensure extraction succeeded
			assert(ExtractionData.success, 'Extraction failed');

			-- Apply any mesh found
			local MeshId = ExtractionData.meshID;
			if MeshId then
				Changes.MeshId = 'rbxassetid://' .. MeshId;
			end;

			-- Apply any texture found
			local TextureId = ExtractionData.textureID;
			if TextureId then
				Changes.TextureId = 'rbxassetid://' .. TextureId;
			end;

			-- Apply any vertex color found
			local VertexColor = ExtractionData.tint;
			if VertexColor then
				Changes.VertexColor = Vector3.new(VertexColor.x, VertexColor.y, VertexColor.z);
			end;

			-- Apply any scale found
			local Scale = ExtractionData.scale;
			if Scale then
				Changes.Scale = Vector3.new(Scale.x, Scale.y, Scale.z);
			end;

		end);

	-- Start a history record
	TrackChange();

	-- Go through each mesh
	for _, Mesh in pairs(GetMeshes()) do

		-- Create the history change requests for this mesh
		local Before, After = { Part = Mesh.Parent }, { Part = Mesh.Parent };

		-- Gather change information to finish up the history change requests
		for Property, Value in pairs(Changes) do
			Before[Property] = Mesh[Property];
			After[Property] = Value;
		end;

		-- Store the state of the mesh before modification
		table.insert(HistoryRecord.Before, Before);

		-- Create the change request for this mesh
		table.insert(HistoryRecord.After, After);

	end;

	-- Register the changes
	RegisterChange();

end;

function SetTextureId(AssetId)
	-- Sets the meshes in the selection's texture ID to the intended, given image asset

	-- Make sure the given asset ID is valid
	if not AssetId then
		return;
	end;

	-- Prepare the change request
	local Changes = {
		TextureId = 'rbxassetid://' .. AssetId;
	};

	-- Attempt an image extraction on the given asset
	Core.Try(Core.SyncAPI.Invoke, Core.SyncAPI, 'ExtractImageFromDecal', AssetId)
		:Then(function (ExtractedImage)
			Changes.TextureId = 'rbxassetid://' .. ExtractedImage;
		end);

	-- Start a history record
	TrackChange();

	-- Go through each mesh
	for _, Mesh in pairs(GetMeshes()) do

		-- Create the history change requests for this mesh
		local Before, After = { Part = Mesh.Parent }, { Part = Mesh.Parent };

		-- Gather change information to finish up the history change requests
		for Property, Value in pairs(Changes) do
			Before[Property] = Mesh[Property];
			After[Property] = Value;
		end;

		-- Store the state of the mesh before modification
		table.insert(HistoryRecord.Before, Before);

		-- Create the change request for this mesh
		table.insert(HistoryRecord.After, After);

	end;

	-- Register the changes
	RegisterChange();

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Before = {};
		After = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncMesh', Record.Before);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncMesh', Record.After);

		end;

	};

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncMesh', HistoryRecord.After);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

-- Return the tool
return MeshTool;
end;
};
G2L_MODULES[G2L["526"]] = {
Closure = function()
    local script = G2L["526"];
local Tool = script.Parent.Parent
local Core = require(Tool.Core)
local SnapTracking = require(Tool.Core.Snapping)
local BoundingBox = require(Tool.Core.BoundingBox)

-- Services
local ContextActionService = game:GetService 'ContextActionService'
local UserInputService = game:GetService 'UserInputService'

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Signal = require(Libraries:WaitForChild 'Signal')
local Maid = require(Libraries:WaitForChild 'Maid')

-- Import relevant references
local Selection = Core.Selection
local Support = Core.Support
local Security = Core.Security

-- Initialize the tool
local MoveTool = {
	Name = 'Move Tool';
	Color = BrickColor.new 'Deep orange';

	-- Default options
	Increment = 1;
	Axes = 'Global';

	-- Selection state
	InitialState = nil;
	InitialFocusCFrame = nil;
	InitialExtentsSize = nil;
	InitialExtentsCFrame = nil;

	-- Snapping state
	SnappedPoint = nil;
	PointSnapped = Signal.new();

	-- Resource maid
	Maid = Maid.new();

	-- Signals
	DragChanged = Signal.new();
	AxesChanged = Signal.new();
}

-- Initialize tool subsystems
MoveTool.HandleDragging = require(script:WaitForChild 'HandleDragging')
	.new(MoveTool)
MoveTool.FreeDragging = require(script:WaitForChild 'FreeDragging')
	.new(MoveTool)
MoveTool.UIController = require(script:WaitForChild 'UIController')
	.new(MoveTool)

function MoveTool:Equip()
	-- Enables the tool's equipped functionality

	-- Set our current axis mode
	self:SetAxes(self.Axes)

	-- Start up our interface
	self.UIController:ShowUI()
	self:BindShortcutKeys()
	self.FreeDragging:EnableDragging()

end

function MoveTool:Unequip()
	-- Disables the tool's equipped functionality

	-- If dragging, finish dragging
	if self.FreeDragging.IsDragging then
		self.FreeDragging:FinishDragging()
	end

	-- Disable dragging
	ContextActionService:UnbindAction 'BT: Start dragging'

	-- Clear unnecessary resources
	self.UIController:HideUI()
	self.HandleDragging:HideHandles()
	self.Maid:Destroy()
	BoundingBox.ClearBoundingBox();
	SnapTracking.StopTracking();

end

function MoveTool:SetAxes(AxisMode)
	-- Sets the given axis mode

	-- Update setting
	self.Axes = AxisMode
	self.AxesChanged:Fire(self.Axes)

	-- Disable any unnecessary bounding boxes
	BoundingBox.ClearBoundingBox();

	-- For global mode, use bounding box handles
	if AxisMode == 'Global' then
		BoundingBox.StartBoundingBox(function (BoundingBox)
			self.HandleDragging:AttachHandles(BoundingBox)
		end)

	-- For local mode, use focused part handles
	elseif AxisMode == 'Local' then
		self.HandleDragging:AttachHandles(Selection.Focus, true)

	-- For last mode, use focused part handles
	elseif AxisMode == 'Last' then
		self.HandleDragging:AttachHandles(Selection.Focus, true)
	end

end

function MoveTool:MovePartsAlongAxesByFace(Face, Distance, InitialStates, InitialFocusCFrame)
	-- Moves the given parts in `InitialStates`, along the given axis mode, in the given face direction, by the given distance

	-- Calculate the shift along the direction of the face
	local Shift = Vector3.FromNormalId(Face) * Distance

	-- Move along global axes
	if self.Axes == 'Global' then
		for Part, InitialState in pairs(InitialStates) do
			Part.CFrame = InitialState.CFrame + Shift
		end

	-- Move along individual items' axes
	elseif self.Axes == 'Local' then
		for Part, InitialState in pairs(InitialStates) do
			Part.CFrame = InitialState.CFrame * CFrame.new(Shift)
		end

	-- Move along focused item's axes
	elseif self.Axes == 'Last' then

		-- Calculate focused item's position
		local FocusCFrame = InitialFocusCFrame * CFrame.new(Shift)

		-- Move parts based on initial offset from focus
		for Part, InitialState in pairs(InitialStates) do
			local FocusOffset = InitialFocusCFrame:toObjectSpace(InitialState.CFrame)
			Part.CFrame = FocusCFrame * FocusOffset
		end

	end

end

function MoveTool:BindShortcutKeys()
	-- Enables useful shortcut keys for this tool

	-- Track user input while this tool is equipped
	self.Maid.HotkeyStart = UserInputService.InputBegan:Connect(function (InputInfo, GameProcessedEvent)
		if GameProcessedEvent then
			return
		end

		-- Make sure this input is a key press
		if InputInfo.UserInputType ~= Enum.UserInputType.Keyboard then
			return;
		end;

		-- Make sure it wasn't pressed while typing
		if UserInputService:GetFocusedTextBox() then
			return;
		end;

		-- Check if the enter key was pressed
		if InputInfo.KeyCode == Enum.KeyCode.Return or InputInfo.KeyCode == Enum.KeyCode.KeypadEnter then

			-- Toggle the current axis mode
			if self.Axes == 'Global' then
				self:SetAxes('Local')
			elseif self.Axes == 'Local' then
				self:SetAxes('Last')
			elseif self.Axes == 'Last' then
				self:SetAxes('Global')
			end

		-- If - key was pressed, focus on increment input
		elseif (InputInfo.KeyCode.Name == 'Minus') or (InputInfo.KeyCode.Name == 'KeypadMinus') then
			self.UIController:FocusIncrementInput()

		-- Check if the R key was pressed down, and it's not the selection clearing hotkey
		elseif InputInfo.KeyCode == Enum.KeyCode.R and not Selection.Multiselecting then

			-- Start tracking snap points nearest to the mouse
			self:StartSnapping()

		-- Nudge up if the 8 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadEight then
			self:NudgeSelectionByFace(Enum.NormalId.Top)

		-- Nudge down if the 2 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadTwo then
			self:NudgeSelectionByFace(Enum.NormalId.Bottom)

		-- Nudge forward if the 9 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadNine then
			self:NudgeSelectionByFace(Enum.NormalId.Front)

		-- Nudge backward if the 1 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadOne then
			self:NudgeSelectionByFace(Enum.NormalId.Back)

		-- Nudge left if the 4 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadFour then
			self:NudgeSelectionByFace(Enum.NormalId.Left)

		-- Nudge right if the 6 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadSix then
			self:NudgeSelectionByFace(Enum.NormalId.Right)

		-- Align the selection to the current target surface if T is pressed
		elseif (InputInfo.KeyCode == Enum.KeyCode.T) and (not Selection.Multiselecting) then
			self.FreeDragging:AlignSelectionToTarget()
		end
	end)

	-- Track ending user input while this tool is equipped
	self.Maid.HotkeyRelease = UserInputService.InputEnded:Connect(function (InputInfo, GameProcessedEvent)
		if GameProcessedEvent then
			return
		end

		-- Make sure this is input from the keyboard
		if InputInfo.UserInputType ~= Enum.UserInputType.Keyboard then
			return;
		end;

		-- Check if the R key was let go
		if InputInfo.KeyCode == Enum.KeyCode.R then

			-- Make sure it wasn't pressed while typing
			if UserInputService:GetFocusedTextBox() then
				return;
			end;

			-- Reset handles if not dragging
			if not self.FreeDragging.IsDragging then
				self:SetAxes(self.Axes)
			end

			-- Stop snapping point tracking if it was enabled
			SnapTracking.StopTracking();

		end
	end)

end

function MoveTool:StartSnapping()
	-- Starts tracking snap points nearest to the mouse

	-- Hide any handles or bounding boxes
	self.HandleDragging:AttachHandles(nil, true)
	BoundingBox.ClearBoundingBox();

	-- Avoid targeting snap points in selected parts while dragging
	if self.FreeDragging.IsDragging then
		SnapTracking.TargetBlacklist = Selection.Items;
	end;

	-- Start tracking the closest snapping point
	SnapTracking.StartTracking(function (NewPoint)

		-- Fire `SnappedPoint` and update `SnappedPoint` when there is a new snap point in focus
		if NewPoint then
			self.SnappedPoint = NewPoint.p
			self.PointSnapped:Fire(self.SnappedPoint)
		end

	end)

end

function MoveTool:SetAxisPosition(Axis, Position)
	-- Sets the selection's position on axis `Axis` to `Position`

	-- Track this change
	self:TrackChange()

	-- Prepare parts to be moved
	local InitialStates = self:PreparePartsForDragging()

	-- Update each part
	for Part in pairs(InitialStates) do

		-- Set the part's new CFrame
		Part.CFrame = CFrame.new(
			Axis == 'X' and Position or Part.Position.X,
			Axis == 'Y' and Position or Part.Position.Y,
			Axis == 'Z' and Position or Part.Position.Z
		) * (Part.CFrame - Part.CFrame.p);

	end;

	-- Cache up permissions for all private areas
	local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);

	-- Revert changes if player is not authorized to move parts to target destination
	if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
		for Part, State in pairs(InitialStates) do
			Part.CFrame = State.CFrame;
		end;
	end;

	-- Restore the parts' original states
	for Part, State in pairs(InitialStates) do
		Part:MakeJoints();
		Core.RestoreJoints(State.Joints);
		Part.CanCollide = State.CanCollide;
		Part.Anchored = State.Anchored;
	end;

	-- Register the change
	self:RegisterChange()

end

function MoveTool:NudgeSelectionByFace(Face)
	-- Nudges the selection along the current axes mode in the direction of the focused part's face

	-- Get amount to nudge by
	local NudgeAmount = self.Increment

	-- Reverse nudge amount if shift key is held while nudging
	local PressedKeys = Support.FlipTable(Support.GetListMembers(UserInputService:GetKeysPressed(), 'KeyCode'));
	if PressedKeys[Enum.KeyCode.LeftShift] or PressedKeys[Enum.KeyCode.RightShift] then
		NudgeAmount = -NudgeAmount;
	end;

	-- Track this change
	self:TrackChange()

	-- Prepare parts to be moved
	local InitialState, InitialFocusCFrame = self:PreparePartsForDragging()

	-- Perform the movement
	self:MovePartsAlongAxesByFace(Face, NudgeAmount, InitialState, InitialFocusCFrame)

	-- Indicate updated drag distance
	self.DragChanged:Fire(NudgeAmount)

	-- Cache up permissions for all private areas
	local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);

	-- Revert changes if player is not authorized to move parts to target destination
	if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
		for Part, State in pairs(InitialState) do
			Part.CFrame = State.CFrame;
		end;
	end;

	-- Restore the parts' original states
	for Part, State in pairs(InitialState) do
		Part:MakeJoints();
		Core.RestoreJoints(State.Joints);
		Part.CanCollide = State.CanCollide;
		Part.Anchored = State.Anchored;
	end;

	-- Register the change
	self:RegisterChange()

end

function MoveTool:TrackChange()

	-- Start the record
	self.HistoryRecord = {
		Parts = Support.CloneTable(Selection.Parts);
		BeforeCFrame = {};
		AfterCFrame = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, CFrame = Record.BeforeCFrame[Part] });
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncMove', Changes);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, CFrame = Record.AfterCFrame[Part] });
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncMove', Changes);

		end;

	};

	-- Collect the selection's initial state
	for _, Part in pairs(self.HistoryRecord.Parts) do
		self.HistoryRecord.BeforeCFrame[Part] = Part.CFrame
	end

end

function MoveTool:RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not self.HistoryRecord then
		return
	end

	-- Collect the selection's final state
	local Changes = {};
	for _, Part in pairs(self.HistoryRecord.Parts) do
		self.HistoryRecord.AfterCFrame[Part] = Part.CFrame
		table.insert(Changes, { Part = Part, CFrame = Part.CFrame });
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncMove', Changes);

	-- Register the record and clear the staging
	Core.History.Add(self.HistoryRecord)
	self.HistoryRecord = nil

end

function MoveTool:PreparePartsForDragging()
	-- Prepares parts for dragging and returns the initial state of the parts

	local InitialState = {};

	-- Get index of parts
	local PartIndex = Support.FlipTable(Selection.Parts)

	-- Stop parts from moving, and capture the initial state of the parts
	for _, Part in pairs(Selection.Parts) do
		InitialState[Part] = { Anchored = Part.Anchored, CanCollide = Part.CanCollide, CFrame = Part.CFrame };
		Part.Anchored = true;
		Part.CanCollide = false;
		InitialState[Part].Joints = Core.PreserveJoints(Part, PartIndex);
		Part:BreakJoints();
		Part.Velocity = Vector3.new();
		Part.RotVelocity = Vector3.new();
	end;

	-- Get initial state of focused item
	local InitialFocusCFrame
	local Focus = Selection.Focus
	if not Focus then
		InitialFocusCFrame = nil
	elseif Focus:IsA 'BasePart' then
		InitialFocusCFrame = Focus.CFrame
	elseif Focus:IsA 'Model' then
		InitialFocusCFrame = Focus:GetModelCFrame()
	end

	return InitialState, InitialFocusCFrame
end;

-- Return the tool
return MoveTool;
end;
};
G2L_MODULES[G2L["527"]] = {
Closure = function()
    local script = G2L["527"];
local Tool = script.Parent.Parent.Parent
local UserInputService = game:GetService 'UserInputService'
local ContextActionService = game:GetService 'ContextActionService'
local Workspace = game:GetService 'Workspace'

-- API
local Core = require(Tool.Core)
local Selection = Core.Selection
local Security = Core.Security
local SnapTracking = require(Tool.Core.Snapping)
local BoundingBox = require(Tool.Core.BoundingBox)

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local MoveUtil = require(script.Parent:WaitForChild 'Util')

-- Create class
local FreeDragging = {}
FreeDragging.__index = FreeDragging

function FreeDragging.new(Tool)
    local self = {
		Tool = Tool;

        -- Dragging state
        IsDragging = false;
        StartScreenPoint = nil;
        StartTarget = nil;
        CrossthroughCorrection = nil;
        LastSelection = nil;
        LastBasePartOffset = nil;
        Target = nil;
        TargetPoint = nil;
        TargetNormal = nil;
        LastTargetNormal = nil;
        CornerOffsets = nil;

        -- Surface alignment state
        TriggerAlignment = nil;
        SurfaceAlignment = nil;
        LastSurfaceAlignment = nil;
    }

    setmetatable(self, FreeDragging)

    -- Listen for free dragging ending
    self:InstallDragEndListener()

    -- Return initialized module
    return self
end

function FreeDragging:EnableDragging()
	-- Enables part dragging

	local function HandleDragStart(Action, State, Input)
		if State.Name ~= 'Begin' then
			return Enum.ContextActionResult.Pass
		end

		-- Get mouse target
		local TargetPart = Core.Mouse.Target
		if (not TargetPart) or Selection.Multiselecting then
			return Enum.ContextActionResult.Pass
		end

		-- Make sure target is draggable, unless snapping
		local IsSnapping = UserInputService:IsKeyDown(Enum.KeyCode.R) and #Selection.Items > 0
		if not Core.IsSelectable({ TargetPart }) and not IsSnapping then
			return Enum.ContextActionResult.Pass
		end

		-- Initialize dragging detection data
		self.StartTarget = TargetPart
		self.StartScreenPoint = Vector2.new(Core.Mouse.X, Core.Mouse.Y)

		-- Select unselected target, if not snapping
		local _, ScopeTarget = Core.Targeting:UpdateTarget()
		if not Selection.IsSelected(ScopeTarget) and not IsSnapping then
			Core.Targeting.SelectTarget(true)
			Core.Targeting.CancelSelecting()
		end

		local function HandlePotentialDragStart(Action, State, Input)
			if State.Name ~= 'Change' then
				return Enum.ContextActionResult.Pass
			end

			-- Trigger dragging if the mouse is moved over 2 pixels
			local DragScreenDistance = self.StartScreenPoint and
				(Vector2.new(Core.Mouse.X, Core.Mouse.Y) - self.StartScreenPoint).Magnitude
			if DragScreenDistance >= 2 then

				-- Prepare for dragging
				BoundingBox.ClearBoundingBox()
				self:SetUpDragging(self.StartTarget, SnapTracking.Enabled and self.Tool.SnappedPoint or nil)

				-- Stop watching for potential dragging
				ContextActionService:UnbindAction 'BT: Watch for dragging'

			end

			-- Pass input if not a touch interaction
			if Input.UserInputType.Name ~= 'Touch' then
				return Enum.ContextActionResult.Pass
			end
		end

		-- Watch for potential dragging
		ContextActionService:BindAction('BT: Watch for dragging', HandlePotentialDragStart, false,
			Enum.UserInputType.MouseMovement,
			Enum.UserInputType.Touch
		)
	end

	-- Pay attention to when the user intends to start dragging
	ContextActionService:BindAction('BT: Start dragging', HandleDragStart, false,
		Enum.UserInputType.MouseButton1,
		Enum.UserInputType.Touch
	)

end

function FreeDragging:SetUpDragging(BasePart, BasePoint)
	-- Sets up and initiates dragging based on the given base part

	-- Prevent selection while dragging
	Core.Targeting.CancelSelecting()

	-- Prepare parts, and start dragging
	self.InitialState = self.Tool:PreparePartsForDragging()
	self:StartDragging(BasePart, self.InitialState, BasePoint)

end

function FreeDragging:StartDragging(BasePart, InitialState, BasePoint)
	-- Begins dragging the selection

	-- Ensure dragging is not already ongoing
	if self.IsDragging then
		return
	end

	-- Indicate that we're dragging
	self.IsDragging = true

	-- Track changes
	self.Tool:TrackChange()

	-- Disable bounding box calculation
	BoundingBox.ClearBoundingBox()

	-- Cache area permissions information
	local AreaPermissions
	if Core.Mode == 'Tool' then
		AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player)
	end

	-- Ensure a base part is provided
	if not InitialState[BasePart] then
		BasePart = next(InitialState)
		if not BasePart then
			return
		end
	end

	-- Determine the base point for dragging
	local BasePartOffset = -BasePart.CFrame:pointToObjectSpace(Core.Mouse.Hit.p)

	-- Improve base point alignment for the given increment
	BasePartOffset = Vector3.new(
		math.clamp(MoveUtil.GetIncrementMultiple(BasePartOffset.X, self.Tool.Increment), -BasePart.Size.X / 2, BasePart.Size.X / 2),
		math.clamp(MoveUtil.GetIncrementMultiple(BasePartOffset.Y, self.Tool.Increment), -BasePart.Size.Y / 2, BasePart.Size.Y / 2),
		math.clamp(MoveUtil.GetIncrementMultiple(BasePartOffset.Z, self.Tool.Increment), -BasePart.Size.Z / 2, BasePart.Size.Z / 2)
	)

	-- Use the given base point instead if any
	if BasePoint then
		BasePartOffset = -BasePart.CFrame:pointToObjectSpace(BasePoint)
	end

	-- Prepare snapping in case it is enabled, and make sure to override its default target selection
	SnapTracking.TargetBlacklist = Selection.Items
	self.Tool.Maid.DragSnapping = self.Tool.PointSnapped:Connect(function (SnappedPoint)

		-- Align the selection's base point to the snapped point
		local Rotation = self.SurfaceAlignment or (InitialState[BasePart].CFrame - InitialState[BasePart].CFrame.p)
		BasePart.CFrame = CFrame.new(SnappedPoint) * Rotation * CFrame.new(BasePartOffset)
		MoveUtil.TranslatePartsRelativeToPart(BasePart, InitialState)

		-- Make sure we're not entering any unauthorized private areas
		if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
			BasePart.CFrame = InitialState[BasePart].CFrame
			MoveUtil.TranslatePartsRelativeToPart(BasePart, InitialState)
		end

	end)

	-- Update cache of corner offsets for later crossthrough calculations
	self.CornerOffsets = GetCornerOffsets(InitialState[BasePart].CFrame, InitialState)

	-- Provide a callback to trigger alignment
	self.TriggerAlignment = function ()

		-- Trigger drag recalculation
		self:DragToMouse(BasePart, BasePartOffset, InitialState, AreaPermissions)

		-- Trigger snapping recalculation
		if SnapTracking.Enabled then
			self.Tool.PointSnapped:Fire(self.Tool.SnappedPoint)
		end

	end

	local function HandleDragChange(Action, State, Input)
		if State.Name == 'Change' then
			self:DragToMouse(BasePart, BasePartOffset, InitialState, AreaPermissions)
		end
		return Enum.ContextActionResult.Pass
	end

	-- Start up the dragging
	ContextActionService:BindAction('BT: Dragging', HandleDragChange, false,
		Enum.UserInputType.MouseMovement,
		Enum.UserInputType.Touch
	)

end

function FreeDragging:DragToMouse(BasePart, BasePartOffset, InitialState, AreaPermissions)
	-- Drags the selection by `BasePart`, judging area authorization from `AreaPermissions`

	----------------------------------------------
	-- Check what and where the mouse is aiming at
	----------------------------------------------

	-- Don't consider other selected parts possible targets
	local IgnoreList = Support.CloneTable(Selection.Items)
	table.insert(IgnoreList, Core.Player and Core.Player.Character)

	-- Perform the mouse target search
	local Target, TargetPoint, TargetNormal = Workspace:FindPartOnRayWithIgnoreList(
		Ray.new(Core.Mouse.UnitRay.Origin, Core.Mouse.UnitRay.Direction * 5000),
		IgnoreList
	)
	self.Target = Target
	self.TargetPoint = TargetPoint
	self.TargetNormal = TargetNormal

	-- Reset any surface alignment and calculated crossthrough if target surface changes
	if self.LastTargetNormal ~= self.TargetNormal then
		self.SurfaceAlignment = nil
		self.CrossthroughCorrection = nil
	end

	-- Reset any calculated crossthrough if selection, drag offset, or surface alignment change
	if (self.LastSelection ~= Selection.Items) or
			(self.LastBasePartOffset ~= BasePartOffset) or
			(self.LastSurfaceAlignment ~= self.SurfaceAlignment) then
		self.CrossthroughCorrection = nil
	end

	-- Save last dragging options for change detection
	self.LastSelection = Selection.Items
	self.LastBasePartOffset = BasePartOffset
	self.LastSurfaceAlignment = self.SurfaceAlignment
	self.LastTargetNormal = self.TargetNormal

	------------------------------------------------
	-- Move the selection towards any snapped points
	------------------------------------------------

	-- If snapping is enabled, skip regular dragging
	if SnapTracking.Enabled then
		return
	end

	------------------------------------------------------
	-- Move the selection towards the right mouse location
	------------------------------------------------------

	-- Get the increment-aligned target point
	self.TargetPoint = self:GetAlignedTargetPoint(
		self.Target,
		self.TargetPoint,
		self.TargetNormal,
		self.Tool.Increment
	)

	-- Move the parts towards their target destination
	local Rotation = self.SurfaceAlignment or (InitialState[BasePart].CFrame - InitialState[BasePart].CFrame.p)
	local TargetCFrame = CFrame.new(self.TargetPoint) * Rotation * CFrame.new(BasePartOffset)

	-- Calculate crossthrough against target plane if necessary
	if not self.CrossthroughCorrection then
		self.CrossthroughCorrection = 0

		-- Calculate each corner's tentative position
		for _, CornerOffset in pairs(self.CornerOffsets) do
			local Corner = TargetCFrame * CornerOffset

			-- Calculate the corner's target plane crossthrough
			local CornerCrossthrough = -(self.TargetPoint - Corner):Dot(self.TargetNormal)

			-- Check if this corner crosses through the most
			if CornerCrossthrough < self.CrossthroughCorrection then
				self.CrossthroughCorrection = CornerCrossthrough
			end
		end
	end

	-- Move the selection, retracted by the max. crossthrough amount
	BasePart.CFrame = TargetCFrame - (self.TargetNormal * self.CrossthroughCorrection)
	MoveUtil.TranslatePartsRelativeToPart(BasePart, InitialState)

	----------------------------------------
	-- Check for relevant area authorization
	----------------------------------------

	-- Make sure we're not entering any unauthorized private areas
	if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
		BasePart.CFrame = InitialState[BasePart].CFrame
		MoveUtil.TranslatePartsRelativeToPart(BasePart, InitialState)
	end

end

function FreeDragging:AlignSelectionToTarget()
	-- Aligns the selection to the current target surface while dragging

	-- Ensure dragging is ongoing
	if not self.IsDragging or not self.TargetNormal then
		return
	end

	-- Get target surface normal as arbitrarily oriented CFrame
	local TargetNormalCF = CFrame.new(Vector3.new(), self.TargetNormal)

	-- Use detected surface normal directly if not targeting a part
	if not self.Target then
		self.SurfaceAlignment = TargetNormalCF * CFrame.Angles(-math.pi / 2, 0, 0)

	-- For parts, calculate orientation based on the target surface, and the target part's orientation
	else

		-- Set upward direction to match the target surface normal
		local UpVector, LookVector, RightVector = self.TargetNormal

		-- Use target's rightward orientation for calculating orientation (when targeting forward or backward directions)
		local Target, TargetNormal = self.Target, self.TargetNormal
		if TargetNormal:isClose(Target.CFrame.lookVector, 0.000001) or TargetNormal:isClose(-Target.CFrame.lookVector, 0.000001) then
			LookVector = TargetNormal:Cross(Target.CFrame.rightVector).unit
			RightVector = LookVector:Cross(TargetNormal).unit

		-- Use target's forward orientation for calculating orientation (when targeting any other direction)
		else
			RightVector = Target.CFrame.lookVector:Cross(TargetNormal).unit
			LookVector = TargetNormal:Cross(RightVector).unit
		end

		-- Generate rotation matrix based on direction vectors
		self.SurfaceAlignment = CFrame.new(
			0, 0, 0,
			RightVector.X, UpVector.X, -LookVector.X,
			RightVector.Y, UpVector.Y, -LookVector.Y,
			RightVector.Z, UpVector.Z, -LookVector.Z
		)

	end

	-- Trigger alignment
	self:TriggerAlignment()

end

function FreeDragging:GetAlignedTargetPoint(Target, TargetPoint, TargetNormal, Increment)
	-- Returns the target point aligned to the nearest increment multiple

	-- By default, use the center of the universe for alignment on all axes
	local ReferencePoint = CFrame.new()
	local PlaneAxes = Vector3.new(1, 1, 1)

	-----------------------------------------------------------------------------
	-- Detect appropriate reference points and plane axes for recognized surfaces
	-----------------------------------------------------------------------------

	-- Make sure the target is a part
	if Target and Target:IsA 'BasePart' and Target.ClassName ~= 'Terrain' then
		local Size = Target.Size / 2

		-- Calculate the direction of a wedge surface
		local WedgeDirection = (Target.CFrame - Target.CFrame.p) *
			CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.X), math.atan(Target.Size.Z / Target.Size.Y))

		-- Calculate the direction of a corner part's Z-axis surface
		local CornerDirectionZ = (Target.CFrame - Target.CFrame.p) *
			CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.X), math.pi - math.atan(Target.Size.Z / Target.Size.Y))

		-- Calculate the direction of a corner part's X-axis surface
		local CornerDirectionX = (Target.CFrame - Target.CFrame.p) *
			CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.Z), math.atan(Target.Size.Y / Target.Size.X)) *
			CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.X), math.pi / 2) *
			CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.Z), -math.pi / 2)

		-- Get the right alignment reference point on a part's front surface
		if TargetNormal:isClose(Target.CFrame.lookVector, 0.000001) then
			ReferencePoint = Target.CFrame * CFrame.new(Size.X, Size.Y, -Size.Z)
			PlaneAxes = Vector3.new(1, 1, 0)

		-- Get the right alignment reference point on a part's back surface
		elseif TargetNormal:isClose(-Target.CFrame.lookVector, 0.000001) then
			ReferencePoint = Target.CFrame * CFrame.new(-Size.X, Size.Y, Size.Z)
			PlaneAxes = Vector3.new(1, 1, 0)

		-- Get the right alignment reference point on a part's left surface
		elseif TargetNormal:isClose(-Target.CFrame.rightVector, 0.000001) then
			ReferencePoint = Target.CFrame * CFrame.new(-Size.X, Size.Y, -Size.Z)
			PlaneAxes = Vector3.new(0, 1, 1)

		-- Get the right alignment reference point on a part's right surface
		elseif TargetNormal:isClose(Target.CFrame.rightVector, 0.000001) then
			ReferencePoint = Target.CFrame * CFrame.new(Size.X, Size.Y, Size.Z)
			PlaneAxes = Vector3.new(0, 1, 1)

		-- Get the right alignment reference point on a part's upper surface
		elseif TargetNormal:isClose(Target.CFrame.upVector, 0.000001) then
			ReferencePoint = Target.CFrame * CFrame.new(Size.X, Size.Y, Size.Z)
			PlaneAxes = Vector3.new(1, 0, 1)

		-- Get the right alignment reference point on a part's bottom surface
		elseif TargetNormal:isClose(-Target.CFrame.upVector, 0.000001) then
			ReferencePoint = Target.CFrame * CFrame.new(Size.X, -Size.Y, -Size.Z)
			PlaneAxes = Vector3.new(1, 0, 1)

		-- Get the right alignment reference point on wedged part surfaces
		elseif TargetNormal:isClose(WedgeDirection.lookVector, 0.000001) then

			-- Get reference point oriented to wedge plane
			ReferencePoint = WedgeDirection *
				CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.X), -math.pi / 2) +
				(Target.CFrame * Vector3.new(Size.X, Size.Y, Size.Z))

			-- Set plane offset axes
			PlaneAxes = Vector3.new(1, 0, 1)

		-- Get the right alignment reference point on the Z-axis surface of a corner part
		elseif TargetNormal:isClose(CornerDirectionZ.lookVector, 0.000001) then

			-- Get reference point oriented to wedged plane
			ReferencePoint = CornerDirectionZ *
				CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.X), -math.pi / 2) +
				(Target.CFrame * Vector3.new(-Size.X, Size.Y, -Size.Z))

			-- Set plane offset axes
			PlaneAxes = Vector3.new(1, 0, 1)

		-- Get the right alignment reference point on the X-axis surface of a corner part
		elseif TargetNormal:isClose(CornerDirectionX.lookVector, 0.000001) then

			-- Get reference point oriented to wedged plane
			ReferencePoint = CornerDirectionX *
				CFrame.fromAxisAngle(Vector3.FromAxis(Enum.Axis.X), -math.pi / 2) +
				(Target.CFrame * Vector3.new(Size.X, Size.Y, -Size.Z))

			-- Set plane offset axes
			PlaneAxes = Vector3.new(1, 0, 1)

		-- Return an unaligned point for unrecognized surfaces
		else
			return TargetPoint
		end

	end

	-------------------------------------
	-- Calculate the aligned target point
	-------------------------------------

	-- Get target point offset from reference point
	local ReferencePointOffset = ReferencePoint:inverse() * CFrame.new(TargetPoint)

	-- Align target point on increment grid from reference point along the plane axes
	local AlignedTargetPoint = ReferencePoint * (Vector3.new(
		MoveUtil.GetIncrementMultiple(ReferencePointOffset.X, Increment),
		MoveUtil.GetIncrementMultiple(ReferencePointOffset.Y, Increment),
		MoveUtil.GetIncrementMultiple(ReferencePointOffset.Z, Increment)
	) * PlaneAxes)

	-- Return the aligned target point
	return AlignedTargetPoint

end

function FreeDragging:FinishDragging()
	-- Releases parts and registers position changes from dragging

	-- Make sure dragging is active
	if not self.IsDragging then
		return
	end

	-- Indicate that we're no longer dragging
	self.IsDragging = false

	-- Clear any surface alignment
	self.SurfaceAlignment = nil

	-- Stop the dragging action
	ContextActionService:UnbindAction 'BT: Dragging'

	-- Stop, clean up snapping point tracking
	SnapTracking.StopTracking()
	self.Tool.Maid.DragSnapping = nil

	-- Restore the original state of each part
	for Part, State in pairs(self.InitialState) do
		Part:MakeJoints()
		Core.RestoreJoints(State.Joints)
		Part.CanCollide = State.CanCollide
		Part.Anchored = State.Anchored
	end

	-- Register changes
	self.Tool:RegisterChange()

end


-- Cache common functions to avoid unnecessary table lookups
local TableInsert, NewVector3 = table.insert, Vector3.new

function GetCornerOffsets(Origin, InitialStates)
	-- Calculates and returns the offset of every corner in the initial state from the origin CFrame

	local CornerOffsets = {}

	-- Get offset for origin point
	local OriginOffset = Origin:inverse()

	-- Go through each item in the initial state
	for Item, State in pairs(InitialStates) do
		local ItemCFrame = State.CFrame
		local SizeX, SizeY, SizeZ = Item.Size.X / 2, Item.Size.Y / 2, Item.Size.Z / 2

		-- Gather each corner
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(SizeX, SizeY, SizeZ)))
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(-SizeX, SizeY, SizeZ)))
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(SizeX, -SizeY, SizeZ)))
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(SizeX, SizeY, -SizeZ)))
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(-SizeX, SizeY, -SizeZ)))
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(-SizeX, -SizeY, SizeZ)))
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(SizeX, -SizeY, -SizeZ)))
		TableInsert(CornerOffsets, OriginOffset * (ItemCFrame * NewVector3(-SizeX, -SizeY, -SizeZ)))
	end

	-- Return the offsets
	return CornerOffsets

end

function FreeDragging:InstallDragEndListener()
    Support.AddUserInputListener('Ended', {'Touch', 'MouseButton1'}, true, function (Input)

        -- Clear drag detection data
        self.StartScreenPoint = nil
        self.StartTarget = nil
        ContextActionService:UnbindAction 'BT: Watch for dragging'

        -- Reset from drag mode if dragging
        if self.IsDragging then

            -- Reset axes
            self.Tool:SetAxes(self.Tool.Axes)

            -- Finalize the dragging operation
            self:FinishDragging()

        end

    end)
end

return FreeDragging
end;
};
G2L_MODULES[G2L["528"]] = {
Closure = function()
    local script = G2L["528"];
local Tool = script.Parent.Parent.Parent

-- API
local Core = require(Tool.Core)
local Selection = Core.Selection
local Security = Core.Security
local BoundingBox = require(Tool.Core.BoundingBox)

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local MoveUtil = require(script.Parent:WaitForChild 'Util')

-- Create class
local HandleDragging = {}
HandleDragging.__index = HandleDragging

-- Directions of movement for each handle's dragged face
local AxisMultipliers = {
	[Enum.NormalId.Top] = Vector3.new(0, 1, 0);
	[Enum.NormalId.Bottom] = Vector3.new(0, -1, 0);
	[Enum.NormalId.Front] = Vector3.new(0, 0, -1);
	[Enum.NormalId.Back] = Vector3.new(0, 0, 1);
	[Enum.NormalId.Left] = Vector3.new(-1, 0, 0);
	[Enum.NormalId.Right] = Vector3.new(1, 0, 0);
}

function HandleDragging.new(Tool)
    local self = {
		Tool = Tool;

		-- Handle state
		IsHandleDragging = false;
		Handles = nil;

		-- Selection state
		InitialExtentsSize = nil;
		InitialExtentsCFrame = nil;
		InitialState = nil;
		InitialFocusCFrame = nil;
    }

    return setmetatable(self, HandleDragging)
end

function HandleDragging:AttachHandles(Part, Autofocus)
	-- Creates and attaches handles to `Part`, and optionally automatically attaches to the focused part

	-- Enable autofocus if requested and not already on
	if Autofocus and not self.Tool.Maid.AutofocusHandle then
		self.Tool.Maid.AutofocusHandle = Selection.FocusChanged:Connect(function ()
			self:AttachHandles(Selection.Focus, true)
		end)

	-- Disable autofocus if not requested and on
	elseif not Autofocus and self.Tool.Maid.AutofocusHandle then
		self.Tool.Maid.AutofocusHandle = nil
	end

	-- Just attach and show the handles if they already exist
	if self.Handles then
		self.Handles:BlacklistObstacle(BoundingBox.GetBoundingBox())
		self.Handles:SetAdornee(Part)
		return
	end

	local AreaPermissions
	local function OnHandleDragStart()
		-- Prepare for moving parts when the handle is clicked

		-- Prevent selection
		Core.Targeting.CancelSelecting()

		-- Indicate dragging via handles
		self.IsHandleDragging = true

		-- Freeze bounding box extents while dragging
		if BoundingBox.GetBoundingBox() then
			local InitialExtentsSize, InitialExtentsCFrame =
				BoundingBox.CalculateExtents(Selection.Parts, BoundingBox.StaticExtents)
			self.InitialExtentsSize = InitialExtentsSize
			self.InitialExtentsCFrame = InitialExtentsCFrame
			BoundingBox.PauseMonitoring()
		end

		-- Stop parts from moving, and capture the initial state of the parts
		local InitialState, InitialFocusCFrame = self.Tool:PreparePartsForDragging()
		self.InitialState = InitialState
		self.InitialFocusCFrame = InitialFocusCFrame

		-- Track the change
		self.Tool:TrackChange()

		-- Cache area permissions information
		if Core.Mode == 'Tool' then
			AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player)
		end

	end

	local function OnHandleDrag(Face, Distance)
		-- Update parts when the handles are moved

		-- Only drag if handle is enabled
		if not self.IsHandleDragging then
			return
		end

		-- Calculate the increment-aligned drag distance
		Distance = MoveUtil.GetIncrementMultiple(Distance, self.Tool.Increment)

		-- Move the parts along the selected axes by the calculated distance
		self.Tool:MovePartsAlongAxesByFace(Face, Distance, self.InitialState, self.InitialFocusCFrame)

		-- Make sure we're not entering any unauthorized private areas
		if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
			local Part, InitialPartState = next(self.InitialState)
			Part.CFrame = InitialPartState.CFrame
			MoveUtil.TranslatePartsRelativeToPart(Part, self.InitialState)
			Distance = 0
		end

		-- Signal out change in dragged distance
		self.Tool.DragChanged:Fire(Distance)

		-- Update bounding box if enabled in global axes movements
		if self.Tool.Axes == 'Global' and BoundingBox.GetBoundingBox() then
			BoundingBox.GetBoundingBox().CFrame = self.InitialExtentsCFrame + (AxisMultipliers[Face] * Distance)
		end

	end

	local function OnHandleDragEnd()
		if not self.IsHandleDragging then
			return
		end

		-- Disable dragging
		self.IsHandleDragging = false

		-- Make joints, restore original anchor and collision states
		for Part, State in pairs(self.InitialState) do
			Part:MakeJoints()
			Core.RestoreJoints(State.Joints)
			Part.CanCollide = State.CanCollide
			Part.Anchored = State.Anchored
		end

		-- Register change
		self.Tool:RegisterChange()

		-- Resume bounding box updates
		BoundingBox.RecalculateStaticExtents()
		BoundingBox.ResumeMonitoring()
	end

	-- Create the handles
	local Handles = require(Libraries:WaitForChild 'Handles')
	self.Handles = Handles.new({
		Color = self.Tool.Color.Color,
		Parent = Core.UIContainer,
		Adornee = Part,
		ObstacleBlacklist = { BoundingBox.GetBoundingBox() },
		OnDragStart = OnHandleDragStart,
		OnDrag = OnHandleDrag,
		OnDragEnd = OnHandleDragEnd
	})

end

function HandleDragging:HideHandles()
	-- Hides the resizing handles

	-- Make sure handles exist and are visible
	if not self.Handles then
		return
	end

	-- Hide the handles
	self.Handles = self.Handles:Destroy()

	-- Disable handle autofocus
	self.Tool.Maid.AutofocusHandle = nil

end

return HandleDragging
end;
};
G2L_MODULES[G2L["529"]] = {
Closure = function()
    local script = G2L["529"];
local Tool = script.Parent.Parent.Parent

-- API
local Core = require(Tool.Core)
local Selection = Core.Selection

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Support = require(Libraries:WaitForChild 'SupportLibrary')
local Maid = require(Libraries:WaitForChild 'Maid')

-- Create class
local UIController = {}
UIController.__index = UIController

function UIController.new(Tool)
    local self = {
        Tool = Tool;

        -- State
        UI = nil;
        Maid = Maid.new()
    }

    return setmetatable(self, UIController)
end

function UIController:ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if self.UI then
		self.UI.Visible = true
        self.Maid.UIUpdater = Support.Loop(0.1, self.UpdateUI, self)
        self:AttachDragListener()
        self:AttachAxesListener()
		return
	end

	-- Create the UI
	self.UI = Core.Tool.Interfaces.BTMoveToolGUI:Clone()
	self.UI.Parent = Core.UI
	self.UI.Visible = true

	-- Add functionality to the axes option switch
	local AxesSwitch = self.UI.AxesOption
	AxesSwitch.Global.Button.MouseButton1Down:Connect(function ()
		self.Tool:SetAxes('Global')
	end)
	AxesSwitch.Local.Button.MouseButton1Down:Connect(function ()
		self.Tool:SetAxes('Local')
	end)
	AxesSwitch.Last.Button.MouseButton1Down:Connect(function ()
		self.Tool:SetAxes('Last')
	end)

	-- Add functionality to the increment input
	local IncrementInput = self.UI.IncrementOption.Increment.TextBox
	IncrementInput.FocusLost:Connect(function (EnterPressed)
		self.Tool.Increment = tonumber(IncrementInput.Text) or self.Tool.Increment
		IncrementInput.Text = Support.Round(self.Tool.Increment, 4)
	end)

	-- Add functionality to the position inputs
	local XInput = self.UI.Info.Center.X.TextBox
	local YInput = self.UI.Info.Center.Y.TextBox
	local ZInput = self.UI.Info.Center.Z.TextBox
	XInput.FocusLost:Connect(function (EnterPressed)
		local NewPosition = tonumber(XInput.Text)
		if NewPosition then
			self.Tool:SetAxisPosition('X', NewPosition)
		end
	end)
	YInput.FocusLost:Connect(function (EnterPressed)
		local NewPosition = tonumber(YInput.Text)
		if NewPosition then
			self.Tool:SetAxisPosition('Y', NewPosition)
		end
	end)
	ZInput.FocusLost:Connect(function (EnterPressed)
		local NewPosition = tonumber(ZInput.Text)
		if NewPosition then
			self.Tool:SetAxisPosition('Z', NewPosition)
		end
	end)

	-- Update the UI every 0.1 seconds
    self.Maid.UIUpdater = Support.Loop(0.1, self.UpdateUI, self)

    -- Attach state listeners
    self:AttachDragListener()
    self:AttachAxesListener()

end

function UIController:AttachDragListener()
    self.Maid.DragListener = self.Tool.DragChanged:Connect(function (Distance)

        -- Update the "distance moved" indicator
        self.UI.Changes.Text.Text = 'moved ' .. math.abs(Distance) .. ' studs'

    end)
end

function UIController:AttachAxesListener()
    self.Maid.AxesListener = self.Tool.AxesChanged:Connect(function (AxesMode)

        -- Update the UI switch
        Core.ToggleSwitch(AxesMode, self.UI.AxesOption)

    end)
end

function UIController:HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not self.UI then
		return
	end

	-- Hide the UI
	self.UI.Visible = false

	-- Stop updating the UI
    self.Maid:Destroy()

end

function UIController:UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not self.UI then
		return
	end

	-- Only show and calculate selection info if it's not empty
	if #Selection.Parts == 0 then
		self.UI.Info.Visible = false
		self.UI.Size = UDim2.new(0, 245, 0, 90)
		return
	else
		self.UI.Info.Visible = true
		self.UI.Size = UDim2.new(0, 245, 0, 150)
	end

	---------------------------------------------
	-- Update the position information indicators
	---------------------------------------------

	-- Identify common positions across axes
	local XVariations, YVariations, ZVariations = {}, {}, {}
	for _, Part in pairs(Selection.Parts) do
		table.insert(XVariations, Support.Round(Part.Position.X, 3))
		table.insert(YVariations, Support.Round(Part.Position.Y, 3))
		table.insert(ZVariations, Support.Round(Part.Position.Z, 3))
	end
	local CommonX = Support.IdentifyCommonItem(XVariations)
	local CommonY = Support.IdentifyCommonItem(YVariations)
	local CommonZ = Support.IdentifyCommonItem(ZVariations)

	-- Shortcuts to indicators
	local XIndicator = self.UI.Info.Center.X.TextBox
	local YIndicator = self.UI.Info.Center.Y.TextBox
	local ZIndicator = self.UI.Info.Center.Z.TextBox

	-- Update each indicator if it's not currently being edited
	if not XIndicator:IsFocused() then
		XIndicator.Text = CommonX or '*'
	end
	if not YIndicator:IsFocused() then
		YIndicator.Text = CommonY or '*'
	end
	if not ZIndicator:IsFocused() then
		ZIndicator.Text = CommonZ or '*'
	end

end

function UIController:FocusIncrementInput()
    self.UI.IncrementOption.Increment.TextBox:CaptureFocus()
end

return UIController
end;
};
G2L_MODULES[G2L["52a"]] = {
Closure = function()
    local script = G2L["52a"];
local function TranslatePartsRelativeToPart(BasePart, InitialStates)
	-- Moves the given parts in `InitialStates` to BasePart's current position, with their original offset from it

	-- Get focused part's position for offsetting
	local RelativeTo = InitialStates[BasePart].CFrame:inverse()

	-- Calculate offset and move each part
	for Part, InitialState in pairs(InitialStates) do

		-- Calculate how far apart we should be from the focused part
		local Offset = RelativeTo * InitialState.CFrame

		-- Move relative to the focused part by this part's offset from it
		Part.CFrame = BasePart.CFrame * Offset

	end
end

local function GetIncrementMultiple(Number, Increment)

	-- Get how far the actual distance is from a multiple of our increment
	local MultipleDifference = Number % Increment

	-- Identify the closest lower and upper multiples of the increment
	local LowerMultiple = Number - MultipleDifference
	local UpperMultiple = Number - MultipleDifference + Increment

	-- Calculate to which of the two multiples we're closer
	local LowerMultipleProximity = math.abs(Number - LowerMultiple)
	local UpperMultipleProximity = math.abs(Number - UpperMultiple)

	-- Use the closest multiple of our increment as the distance moved
	if LowerMultipleProximity <= UpperMultipleProximity then
		Number = LowerMultiple
	else
		Number = UpperMultiple
	end

	return Number
end

return {
    TranslatePartsRelativeToPart = TranslatePartsRelativeToPart;
    GetIncrementMultiple = GetIncrementMultiple;
}
end;
};
G2L_MODULES[G2L["52b"]] = {
Closure = function()
    local script = G2L["52b"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Services
local ContextActionService = game:GetService 'ContextActionService'

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local NewPartTool = {

	Name = 'New Part Tool';
	Color = BrickColor.new 'Really black';

	-- Default options
	Type = 'Normal';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function NewPartTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	EnableClickCreation();

	-- Set our current type
	SetType(NewPartTool.Type);

end;

function NewPartTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();
	ContextActionService:UnbindAction('BT: Create part')

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if UI then

		-- Reveal the UI
		UI.Visible = true;

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	UI = Core.Tool.Interfaces.BTNewPartToolGUI:Clone();
	UI.Parent = Core.UI;
	UI.Visible = true;

	-- Creatable part types
	Types = { 'Normal', 'Truss', 'Wedge', 'Corner', 'Cylinder', 'Ball', 'Seat', 'Vehicle Seat', 'Spawn' };

	-- Create the type selection dropdown
	TypeDropdown = Core.Cheer(UI.TypeOption.Dropdown).Start(Types, '', function (Type)
		SetType(Type);
	end);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not UI then
		return;
	end;

	-- Hide the UI
	UI.Visible = false;

end;

function SetType(Type)

	-- Update the tool option
	NewPartTool.Type = Type;

	-- Update the UI
	TypeDropdown.SetOption(Type);

end;

function EnableClickCreation()
	-- Allows the user to click anywhere and create a new part

	local function CreateAtTarget(Action, State, Input)

		-- Drag new parts
		if State.Name == 'Begin' then
			DragNewParts = true
			Core.Targeting.CancelSelecting()

			-- Create new part
			CreatePart(NewPartTool.Type)

		-- Disable dragging on release
		elseif State.Name == 'End' then
			DragNewParts = nil
		end

	end

	-- Register input handler
	ContextActionService:BindAction('BT: Create part', CreateAtTarget, false,
		Enum.UserInputType.MouseButton1,
		Enum.UserInputType.Touch
	)

end;

function CreatePart(Type)

	-- Send the creation request to the server
	local Part = Core.SyncAPI:Invoke('CreatePart', Type, CFrame.new(Core.Mouse.Hit.p), Core.Targeting.Scope)

	-- Make sure the part creation succeeds
	if not Part then
		return;
	end;

	-- Put together the history record
	local HistoryRecord = {
		Part = Part;

		Unapply = function (HistoryRecord)
			-- Reverts this change

			-- Remove the part
			Core.SyncAPI:Invoke('Remove', { HistoryRecord.Part });

		end;

		Apply = function (HistoryRecord)
			-- Reapplies this change

			-- Restore the part
			Core.SyncAPI:Invoke('UndoRemove', { HistoryRecord.Part });

		end;

	};

	-- Register the history record
	Core.History.Add(HistoryRecord);

	-- Select the part
	Selection.Replace({ Part });

	-- Switch to the move tool
	local MoveTool = require(Core.Tool.Tools.Move);
	Core.EquipTool(MoveTool);

	-- Enable dragging to allow easy positioning of the created part
	if DragNewParts then
		MoveTool.FreeDragging:SetUpDragging(Part)
	end;

end;

-- Return the tool
return NewPartTool;
end;
};
G2L_MODULES[G2L["52c"]] = {
Closure = function()
    local script = G2L["52c"];

Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Maid = require(Libraries:WaitForChild 'Maid')
local PaintHistoryRecord = require(script:WaitForChild 'PaintHistoryRecord')

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local PaintTool = {

	Name = 'Paint Tool';
	Color = BrickColor.new 'Really red';

	-- Default options
	BrickColor = nil;

};

function PaintTool:Equip()
	-- Enables the tool's equipped functionality

	-- Set up maid for cleanup
	self.Maid = Maid.new()

	-- Start up our interface
	ShowUI();
	self:BindShortcutKeys()
	self:EnableClickPainting()

end;

function PaintTool:Unequip()
	-- Disables the tool's equipped functionality

	-- Hide UI
	HideUI()

	-- Clean up resources
	self.Maid = self.Maid:Destroy()

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if PaintTool.UI then

		-- Reveal the UI
		PaintTool.UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	PaintTool.UI = Core.Tool.Interfaces.BTPaintToolGUI:Clone();
	PaintTool.UI.Parent = Core.UI;
	PaintTool.UI.Visible = true;

	-- Track palette buttons
	PaletteButtons = {};

	-- Enable the palette
	for _, Column in pairs(PaintTool.UI.Palette:GetChildren()) do
		for _, Button in pairs(Column:GetChildren()) do
			if Button.ClassName == 'TextButton' then

				-- Recolor the selection when the button is clicked
				Button.MouseButton1Click:Connect(function ()
					SetColor(BrickColor.new(Button.Name).Color);
				end);

				-- Register the button
				PaletteButtons[Button.Name] = Button;

			end;
		end;
	end;

	-- Paint selection when current color indicator is clicked
	PaintTool.UI.Controls.LastColorButton.MouseButton1Click:Connect(PaintParts);

	-- Enable color picker button
	PaintTool.UI.Controls.ColorPickerButton.MouseButton1Click:Connect(function ()
		Core.Cheer(Core.Tool.Interfaces.BTHSVColorPicker, Core.UI).Start(
			Support.IdentifyCommonProperty(Selection.Parts, 'Color') or Color3.new(1, 1, 1),
			SetColor,
			Core.Targeting.CancelSelecting,
			PreviewColor
		);
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not PaintTool.UI then
		return;
	end;

	-- Hide the UI
	PaintTool.UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not PaintTool.UI then
		return;
	end;

	-----------------------------------------
	-- Update the color information indicator
	-----------------------------------------

	-- Clear old color indicators
	for Color, Button in pairs(PaletteButtons) do
		Button.Text = '';
	end;

	-- Indicate the variety of colors in the selection
	for _, Part in pairs(Selection.Parts) do
		if PaletteButtons[Part.BrickColor.Name] and Part.Color == Part.BrickColor.Color then
			PaletteButtons[Part.BrickColor.Name].Text = '+';
		end;
	end;

	-- Update the color picker button's background
	local CommonColor = Support.IdentifyCommonProperty(Selection.Parts, 'Color');
	PaintTool.UI.Controls.ColorPickerButton.ImageColor3 = CommonColor or PaintTool.BrickColor or Color3.new(1, 0, 0);

end;

function SetColor(Color)
	-- Changes the color option to `Color`

	-- Set the color option
	PaintTool.BrickColor = Color;

	-- Use BrickColor name if color matches one
	local EquivalentBrickColor = BrickColor.new(Color);
	local RGBText = ('(%d, %d, %d)'):format(Color.r * 255, Color.g * 255, Color.b * 255);
	local ColorText = (EquivalentBrickColor.Color == Color) and EquivalentBrickColor.Name or RGBText;

	-- Shortcuts to color indicators
	local ColorLabel = PaintTool.UI.Controls.LastColorButton.ColorName;
	local ColorSquare = ColorLabel.ColorSquare;

	-- Update the indicators
	ColorLabel.Visible = true;
	ColorLabel.Text = ColorText;
	ColorSquare.BackgroundColor3 = Color;
	ColorSquare.Position = UDim2.new(1, -ColorLabel.TextBounds.X - 18, 0.2, 1);

	-- Paint currently selected parts
	PaintParts();

end;

function PaintParts()
	-- Recolors the selection with the selected color

	-- Make sure painting is possible
	if (not PaintTool.BrickColor) or (#Selection.Parts == 0) then
		return
	end

	-- Create history record
	local Record = PaintHistoryRecord.new()
	Record.TargetColor = PaintTool.BrickColor

	-- Perform action
	Record:Apply(true)

	-- Register history record
	Core.History.Add(Record)

end

function PreviewColor(Color)
	-- Previews the given color on the selection

	-- Reset colors to initial state if previewing is over
	if not Color and InitialState then
		for Part, State in pairs(InitialState) do

			-- Reset part color
			Part.Color = State.Color;

			-- Update union coloring options
			if Part.ClassName == 'UnionOperation' then
				Part.UsePartColor = State.UsePartColor;
			end;
		end;

		-- Clear initial state
		InitialState = nil;

		-- Skip rest of function
		return;

	-- Ensure valid color is given
	elseif not Color then
		return;

	-- Save initial state if first time previewing
	elseif not InitialState then
		InitialState = {};
		for _, Part in pairs(Selection.Parts) do
			InitialState[Part] = { Color = Part.Color, UsePartColor = (Part.ClassName == 'UnionOperation') and Part.UsePartColor or nil };
		end;
	end;

	-- Apply preview color
	for _, Part in pairs(Selection.Parts) do
		Part.Color = Color;

		-- Enable union coloring
		if Part.ClassName == 'UnionOperation' then
			Part.UsePartColor = true;
		end;
	end;

end;

function PaintTool:BindShortcutKeys()
	-- Enables useful shortcut keys for this tool

	-- Track user input while this tool is equipped
	self.Maid.Hotkeys = Support.AddUserInputListener('Began', 'Keyboard', false, function (Input)

		-- Paint selection if Enter is pressed
		if (Input.KeyCode.Name == 'Return') or (Input.KeyCode.Name == 'KeypadEnter') then
			return PaintParts()
		end

		-- Check if the R key was pressed, and it wasn't the selection clearing hotkey
		if (Input.KeyCode.Name == 'R') and (not Selection.Multiselecting) then

			-- Set the current color to that of the current mouse target (if any)
			if Core.Mouse.Target then
				SetColor(Core.Mouse.Target.Color);
			end;

		end;

	end)

end;

function PaintTool:EnableClickPainting()
	-- Allows the player to paint parts by clicking on them

	-- Watch out for clicks on selected parts
	self.Maid.ClickPainting = Selection.FocusChanged:Connect(function (Focus)
		local Target, ScopeTarget = Core.Targeting:UpdateTarget()
		if Selection.IsSelected(ScopeTarget) then

			-- Paint the selected parts
			PaintParts();

		end;
	end);

end;

-- Return the tool
return PaintTool;
end;
};
G2L_MODULES[G2L["52d"]] = {
Closure = function()
    local script = G2L["52d"];
Tool = script.Parent.Parent.Parent
Core = require(Tool.Core)

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Support = require(Libraries:WaitForChild 'SupportLibrary')

local PaintHistoryRecord = {}
PaintHistoryRecord.__index = PaintHistoryRecord

function PaintHistoryRecord.new()
    local self = setmetatable({}, PaintHistoryRecord)

    -- Include selection
    self.Selection = Support.CloneTable(Core.Selection.Items)
    self.Parts = Support.CloneTable(Core.Selection.Parts)

    -- Initialize color data
    self.InitialColor = Support.GetMemberMap(self.Parts, 'Color')
    self.TargetColor = nil

    -- Initialize union data
    self.InitialUnionColoring = {}
    for _, Part in pairs(self.Parts) do
        if Part:IsA 'UnionOperation' then
            self.InitialUnionColoring[Part] = Part.UsePartColor
        end
    end

    -- Return new record
    return self
end

function PaintHistoryRecord:Unapply()
    local Changes = {}

    -- Assemble change list
    for _, Part in ipairs(self.Parts) do
        table.insert(Changes, {
            Part = Part,
            Color = self.InitialColor[Part],
            UnionColoring = self.InitialUnionColoring[Part]
        })
    end

    -- Push changes
    Core.SyncAPI:Invoke('SyncColor', Changes)

    -- Restore selection
    Core.Selection.Replace(self.Selection)
end

function PaintHistoryRecord:Apply(KeepSelection)
    local Changes = {}

    -- Assemble change list
    for _, Part in ipairs(self.Parts) do
        table.insert(Changes, {
            Part = Part,
            Color = self.TargetColor,
            UnionColoring = true
        })
    end

    -- Push changes
    Core.SyncAPI:Invoke('SyncColor', Changes)

    -- Restore selection
    if not KeepSelection then
        Core.Selection.Replace(self.Selection)
    end
end

return PaintHistoryRecord
end;
};
G2L_MODULES[G2L["52e"]] = {
Closure = function()
    local script = G2L["52e"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);
SnapTracking = require(Tool.Core.Snapping);

-- Services
local ContextActionService = game:GetService 'ContextActionService'
local Workspace = game:GetService 'Workspace'

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Signal = require(Libraries:WaitForChild 'Signal')
local Make = require(Libraries:WaitForChild 'Make')

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local ResizeTool = {

	Name = 'Resize Tool';
	Color = BrickColor.new 'Cyan';

	-- Default options
	Increment = 1;
	Directions = 'Normal';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function ResizeTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	ShowHandles();
	BindShortcutKeys();

end;

function ResizeTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	HideHandles();
	ClearConnections();
	SnapTracking.StopTracking();
	FinishSnapping();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ClearConnection(ConnectionKey)
	-- Clears the given specific connection

	local Connection = Connections[ConnectionKey];

	-- Disconnect the connection if it exists
	if Connection then
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if ResizeTool.UI then

		-- Reveal the UI
		ResizeTool.UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	ResizeTool.UI = Core.Tool.Interfaces.BTResizeToolGUI:Clone();
	ResizeTool.UI.Parent = Core.UI;
	ResizeTool.UI.Visible = true;

	-- Add functionality to the directions option switch
	local DirectionsSwitch = ResizeTool.UI.DirectionsOption;
	DirectionsSwitch.Normal.Button.MouseButton1Down:Connect(function ()
		SetDirections('Normal');
	end);
	DirectionsSwitch.Both.Button.MouseButton1Down:Connect(function ()
		SetDirections('Both');
	end);

	-- Add functionality to the increment input
	local IncrementInput = ResizeTool.UI.IncrementOption.Increment.TextBox;
	IncrementInput.FocusLost:Connect(function (EnterPressed)
		ResizeTool.Increment = tonumber(IncrementInput.Text) or ResizeTool.Increment;
		IncrementInput.Text = Support.Round(ResizeTool.Increment, 4);
	end);

	-- Add functionality to the size inputs
	local XInput = ResizeTool.UI.Info.SizeInfo.X.TextBox;
	local YInput = ResizeTool.UI.Info.SizeInfo.Y.TextBox;
	local ZInput = ResizeTool.UI.Info.SizeInfo.Z.TextBox;
	XInput.FocusLost:Connect(function (EnterPressed)
		local NewSize = tonumber(XInput.Text);
		if NewSize then
			SetAxisSize('X', NewSize);
		end;
	end);
	YInput.FocusLost:Connect(function (EnterPressed)
		local NewSize = tonumber(YInput.Text);
		if NewSize then
			SetAxisSize('Y', NewSize);
		end;
	end);
	ZInput.FocusLost:Connect(function (EnterPressed)
		local NewSize = tonumber(ZInput.Text);
		if NewSize then
			SetAxisSize('Z', NewSize);
		end;
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not ResizeTool.UI then
		return;
	end;

	-- Hide the UI
	ResizeTool.UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not ResizeTool.UI then
		return;
	end;

	-- Only show and calculate selection info if it's not empty
	if #Selection.Parts == 0 then
		ResizeTool.UI.Info.Visible = false;
		ResizeTool.UI.Size = UDim2.new(0, 245, 0, 90);
		return;
	else
		ResizeTool.UI.Info.Visible = true;
		ResizeTool.UI.Size = UDim2.new(0, 245, 0, 150);
	end;

	-----------------------------------------
	-- Update the size information indicators
	-----------------------------------------

	-- Identify common sizes across axes
	local XVariations, YVariations, ZVariations = {}, {}, {};
	for _, Part in pairs(Selection.Parts) do
		table.insert(XVariations, Support.Round(Part.Size.X, 3));
		table.insert(YVariations, Support.Round(Part.Size.Y, 3));
		table.insert(ZVariations, Support.Round(Part.Size.Z, 3));
	end;
	local CommonX = Support.IdentifyCommonItem(XVariations);
	local CommonY = Support.IdentifyCommonItem(YVariations);
	local CommonZ = Support.IdentifyCommonItem(ZVariations);

	-- Shortcuts to indicators
	local XIndicator = ResizeTool.UI.Info.SizeInfo.X.TextBox;
	local YIndicator = ResizeTool.UI.Info.SizeInfo.Y.TextBox;
	local ZIndicator = ResizeTool.UI.Info.SizeInfo.Z.TextBox;

	-- Update each indicator if it's not currently being edited
	if not XIndicator:IsFocused() then
		XIndicator.Text = CommonX or '*';
	end;
	if not YIndicator:IsFocused() then
		YIndicator.Text = CommonY or '*';
	end;
	if not ZIndicator:IsFocused() then
		ZIndicator.Text = CommonZ or '*';
	end;

end;

function SetDirections(DirectionMode)
	-- Sets the given resizing direction mode

	-- Update setting
	ResizeTool.Directions = DirectionMode;

	-- Update the UI switch
	if ResizeTool.UI then
		Core.ToggleSwitch(DirectionMode, ResizeTool.UI.DirectionsOption);
	end;

end;

-- Directions of resizing for each handle's dragged face
local AxisSizeMultipliers = {
	[Enum.NormalId.Top] = Vector3.new(0, 1, 0);
	[Enum.NormalId.Bottom] = Vector3.new(0, 1, 0);
	[Enum.NormalId.Front] = Vector3.new(0, 0, 1);
	[Enum.NormalId.Back] = Vector3.new(0, 0, 1);
	[Enum.NormalId.Left] = Vector3.new(1, 0, 0);
	[Enum.NormalId.Right] = Vector3.new(1, 0, 0);
};

-- Directions of positioning adjustment for each handle's dragged face
local AxisPositioningMultipliers = {
	[Enum.NormalId.Top] = Vector3.new(0, 1, 0);
	[Enum.NormalId.Bottom] = Vector3.new(0, -1, 0);
	[Enum.NormalId.Front] = Vector3.new(0, 0, -1);
	[Enum.NormalId.Back] = Vector3.new(0, 0, 1);
	[Enum.NormalId.Left] = Vector3.new(-1, 0, 0);
	[Enum.NormalId.Right] = Vector3.new(1, 0, 0);
};

-- Axis names corresponding to each face
local FaceAxisNames = {
	[Enum.NormalId.Top] = 'Y';
	[Enum.NormalId.Bottom] = 'Y';
	[Enum.NormalId.Front] = 'Z';
	[Enum.NormalId.Back] = 'Z';
	[Enum.NormalId.Left] = 'X';
	[Enum.NormalId.Right] = 'X';
};

function ShowHandles()
	-- Creates and automatically attaches handles to the currently focused part

	-- Autofocus handles on latest focused part
	if not Connections.AutofocusHandle then
		Connections.AutofocusHandle = Selection.FocusChanged:Connect(ShowHandles);
	end;

	-- If handles already exist, only show them
	if ResizeTool.Handles then
		ResizeTool.Handles:SetAdornee(Selection.Focus)
		return
	end

	local AreaPermissions
	local function OnHandleDragStart()
		-- Prepare for resizing parts when the handle is clicked

		-- Prevent selection
		Core.Targeting.CancelSelecting();

		-- Indicate resizing via handles
		HandleResizing = true;

		-- Stop parts from moving, and capture the initial state of the parts
		InitialState = PreparePartsForResizing();

		-- Track the change
		TrackChange();

		-- Cache area permissions information
		if Core.Mode == 'Tool' then
			AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);
		end;

	end

	local function OnHandleDrag(Face, Distance)
		-- Update parts when the handles are moved

		-- Only resize if handle is enabled
		if not HandleResizing then
			return;
		end;

		-- Calculate the increment-aligned drag distance
		Distance = GetIncrementMultiple(Distance, ResizeTool.Increment);

		-- Resize the parts on the selected faces by the calculated distance
		local Success, Adjustment = ResizePartsByFace(Face, Distance, ResizeTool.Directions, InitialState);

		-- If the resizing did not succeed, resize according to the suggested adjustment
		if not Success then
			ResizePartsByFace(Face, Adjustment, ResizeTool.Directions, InitialState);
		end;

		-- Update the "studs resized" indicator
		if ResizeTool.UI then
			ResizeTool.UI.Changes.Text.Text = 'resized ' .. Support.Round(math.abs(Adjustment or Distance), 3) .. ' studs';
		end;

		-- Make sure we're not entering any unauthorized private areas
		if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
			for Part, State in pairs(InitialState) do
				Part.Size = State.Size;
				Part.CFrame = State.CFrame;
			end;
		end;

	end

	local function OnHandleDragEnd()
		if not HandleResizing then
			return
		end

		-- Disable resizing
		HandleResizing = false;

		-- Prevent selection
		Core.Targeting.CancelSelecting();

		-- Make joints, restore original anchor and collision states
		for Part, State in pairs(InitialState) do
			Part:MakeJoints();
			Part.CanCollide = State.CanCollide;
			Part.Anchored = State.Anchored;
		end;

		-- Register the change
		RegisterChange();
	end

	-- Create the handles
	local Handles = require(Libraries:WaitForChild 'Handles')
	ResizeTool.Handles = Handles.new({
		Color = ResizeTool.Color.Color,
		Parent = Core.UIContainer,
		Adornee = Selection.Focus,
		OnDragStart = OnHandleDragStart,
		OnDrag = OnHandleDrag,
		OnDragEnd = OnHandleDragEnd
	})

end;

function HideHandles()
	-- Hides the resizing handles

	-- Make sure handles exist and are visible
	if not ResizeTool.Handles then
		return;
	end;

	-- Hide the handles
	ResizeTool.Handles = ResizeTool.Handles:Destroy()

	-- Clear unnecessary resources
	ClearConnection 'AutofocusHandle';

end;

function ResizePartsByFace(Face, Distance, Directions, InitialStates)
	-- Resizes the selection on face `Face` by `Distance` studs, in the given `Directions`

	-- Adjust the size increment to the resizing direction mode
	if Directions == 'Both' then
		Distance = Distance * 2;
	end;

	-- Calculate the increment vector for this resizing
	local AxisSizeMultiplier = AxisSizeMultipliers[Face];
	local IncrementVector = Distance * AxisSizeMultiplier;

	-- Get name of axis the resize will occur on
	local AxisName = FaceAxisNames[Face];

	-- Check for any potential undersizing or oversizing
	local ShortestSize, ShortestPart, LongestSize, LongestPart;
	for Part, InitialState in pairs(InitialStates) do

		-- Calculate target size for this resize
		local TargetSize = InitialState.Size[AxisName] + Distance;

		-- If target size is under 0.05, note if it's the shortest size
		if TargetSize < 0.049999 and (not ShortestSize or (ShortestSize and TargetSize < ShortestSize)) then
			ShortestSize, ShortestPart = TargetSize, Part;

		-- If target size is over 2048, note if it's the longest size
		elseif TargetSize > 2048 and (not LongestSize or (LongestSize and TargetSize > LongestSize)) then
			LongestSize, LongestPart = TargetSize, Part;
		end;

	end;

	-- Return adjustment for undersized parts (snap to lowest possible valid increment multiple)
	if ShortestSize then
		local InitialSize = InitialStates[ShortestPart].Size[AxisName];
		local TargetSize = InitialSize - ResizeTool.Increment * tonumber((tostring((InitialSize - 0.05) / ResizeTool.Increment):gsub('%..+', '')));
		return false, Distance + TargetSize - ShortestSize;
	end;

	-- Return adjustment for oversized parts (snap to highest possible valid increment multiple)
	if LongestSize then
		local TargetSize = ResizeTool.Increment * tonumber((tostring(2048 / ResizeTool.Increment):gsub('%..+', '')));
		return false, Distance + TargetSize - LongestSize;
	end;

	-- Resize each part
	for Part, InitialState in pairs(InitialStates) do

		-- Perform the size change depending on shape
		if Part:IsA 'Part' then

			-- Resize spheres on all axes
			if Part.Shape == Enum.PartType.Ball then
				Part.Size = InitialState.Size + Vector3.new(Distance, Distance, Distance);

			-- Resize cylinders on both Y & Z axes for circle sides
			elseif Part.Shape == Enum.PartType.Cylinder and AxisName ~= 'X' then
				Part.Size = InitialState.Size + Vector3.new(0, Distance, Distance);

			-- Resize block parts and cylinder lengths normally
			else
				Part.Size = InitialState.Size + IncrementVector;
			end;

		-- Perform the size change normally on all other parts
		else
			Part.Size = InitialState.Size + IncrementVector;
		end;

		-- Offset the part when resizing in the normal, one direction
		if Directions == 'Normal' then
			Part.CFrame = InitialState.CFrame * CFrame.new(AxisPositioningMultipliers[Face] * Distance / 2);

		-- Keep the part centered when resizing in both directions
		elseif Directions == 'Both' then
			Part.CFrame = InitialState.CFrame;

		end;

	end;

	-- Indicate that the resizing happened successfully
	return true;
end;

function BindShortcutKeys()
	-- Enables useful shortcut keys for this tool

	-- Track user input while this tool is equipped
	table.insert(Connections, UserInputService.InputBegan:Connect(function (InputInfo, GameProcessedEvent)

		-- Make sure this is an intentional event
		if GameProcessedEvent then
			return;
		end;

		-- Make sure this input is a key press
		if InputInfo.UserInputType ~= Enum.UserInputType.Keyboard then
			return;
		end;

		-- Make sure it wasn't pressed while typing
		if UserInputService:GetFocusedTextBox() then
			return;
		end;

		-- Check if the enter key was pressed
		if InputInfo.KeyCode == Enum.KeyCode.Return or InputInfo.KeyCode == Enum.KeyCode.KeypadEnter then

			-- Toggle the current directions mode
			if ResizeTool.Directions == 'Normal' then
				SetDirections('Both');

			elseif ResizeTool.Directions == 'Both' then
				SetDirections('Normal');
			end;

		-- Check if the - key was pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.Minus or InputInfo.KeyCode == Enum.KeyCode.KeypadMinus then

			-- Focus on the increment input
			if ResizeTool.UI then
				ResizeTool.UI.IncrementOption.Increment.TextBox:CaptureFocus();
			end;

		-- Nudge up if the 8 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadEight then
			NudgeSelectionByFace(Enum.NormalId.Top);

		-- Nudge down if the 2 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadTwo then
			NudgeSelectionByFace(Enum.NormalId.Bottom);

		-- Nudge forward if the 9 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadNine then
			NudgeSelectionByFace(Enum.NormalId.Front);

		-- Nudge backward if the 1 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadOne then
			NudgeSelectionByFace(Enum.NormalId.Back);

		-- Nudge left if the 4 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadFour then
			NudgeSelectionByFace(Enum.NormalId.Left);

		-- Nudge right if the 6 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadSix then
			NudgeSelectionByFace(Enum.NormalId.Right);

		-- Start snapping when the R key is pressed down, and it's not the selection clearing hotkey
		elseif InputInfo.KeyCode == Enum.KeyCode.R and not Selection.Multiselecting then
			StartSnapping();

		end;

	end));

	-- Track ending user input while this tool is equipped
	table.insert(Connections, UserInputService.InputEnded:Connect(function (InputInfo, GameProcessedEvent)

		-- Make sure this is an intentional event
		if GameProcessedEvent then
			return;
		end;

		-- Make sure this is input from the keyboard
		if InputInfo.UserInputType ~= Enum.UserInputType.Keyboard then
			return;
		end;

		-- Make sure it wasn't pressed while typing
		if UserInputService:GetFocusedTextBox() then
			return;
		end;

		-- Finish snapping when the R key is released, and it's not the selection clearing hotkey
		if InputInfo.KeyCode == Enum.KeyCode.R and not Selection.Multiselecting then
			FinishSnapping();

		end;

	end));

end;

function SetAxisSize(Axis, Size)
	-- Sets the selection's size on axis `Axis` to `Size`

	-- Track this change
	TrackChange();

	-- Prepare parts to be resized
	local InitialStates = PreparePartsForResizing();

	-- Update each part
	for Part, InitialState in pairs(InitialStates) do

		-- Set the part's new size
		Part.Size = Vector3.new(
			Axis == 'X' and Size or Part.Size.X,
			Axis == 'Y' and Size or Part.Size.Y,
			Axis == 'Z' and Size or Part.Size.Z
		);

		-- Keep the part in place
		Part.CFrame = InitialState.CFrame;

	end;

	-- Cache up permissions for all private areas
	local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);

	-- Revert changes if player is not authorized to resize parts towards the end destination
	if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
		for Part, State in pairs(InitialStates) do
			Part.Size = State.Size;
			Part.CFrame = State.CFrame;
		end;
	end;

	-- Restore the parts' original states
	for Part, State in pairs(InitialStates) do
		Part:MakeJoints();
		Part.CanCollide = State.CanCollide;
		Part.Anchored = State.Anchored;
	end;

	-- Register the change
	RegisterChange();

end;

function NudgeSelectionByFace(Face)
	-- Nudges the size of the selection in the direction of the given face

	-- Get amount to nudge by
	local NudgeAmount = ResizeTool.Increment;

	-- Reverse nudge amount if shift key is held while nudging
	local PressedKeys = Support.FlipTable(Support.GetListMembers(UserInputService:GetKeysPressed(), 'KeyCode'));
	if PressedKeys[Enum.KeyCode.LeftShift] or PressedKeys[Enum.KeyCode.RightShift] then
		NudgeAmount = -NudgeAmount;
	end;

	-- Track this change
	TrackChange();

	-- Prepare parts to be resized
	local InitialState = PreparePartsForResizing();

	-- Perform the resizing
	local Success, Adjustment = ResizePartsByFace(Face, NudgeAmount, ResizeTool.Directions, InitialState);

	-- If the resizing did not succeed, resize according to the suggested adjustment
	if not Success then
		ResizePartsByFace(Face, Adjustment, ResizeTool.Directions, InitialState);
	end;

	-- Update "studs resized" indicator
	if ResizeTool.UI then
		ResizeTool.UI.Changes.Text.Text = 'resized ' .. Support.Round(Adjustment or NudgeAmount, 3) .. ' studs';
	end;

	-- Cache up permissions for all private areas
	local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);

	-- Revert changes if player is not authorized to resize parts towards the end destination
	if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
		for Part, State in pairs(InitialState) do
			Part.Size = State.Size;
			Part.CFrame = State.CFrame;
		end;
	end;

	-- Restore the parts' original states
	for Part, State in pairs(InitialState) do
		Part:MakeJoints();
		Part.CanCollide = State.CanCollide;
		Part.Anchored = State.Anchored;
	end;

	-- Register the change
	RegisterChange();

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Parts = Support.CloneTable(Selection.Parts);
		BeforeSize = {};
		AfterSize = {};
		BeforeCFrame = {};
		AfterCFrame = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, Size = Record.BeforeSize[Part], CFrame = Record.BeforeCFrame[Part] });
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncResize', Changes);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, Size = Record.AfterSize[Part], CFrame = Record.AfterCFrame[Part] });
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncResize', Changes);

		end;

	};

	-- Collect the selection's initial state
	for _, Part in pairs(HistoryRecord.Parts) do
		HistoryRecord.BeforeSize[Part] = Part.Size;
		HistoryRecord.BeforeCFrame[Part] = Part.CFrame;
	end;

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Collect the selection's final state
	local Changes = {};
	for _, Part in pairs(HistoryRecord.Parts) do
		HistoryRecord.AfterSize[Part] = Part.Size;
		HistoryRecord.AfterCFrame[Part] = Part.CFrame;
		table.insert(Changes, { Part = Part, Size = Part.Size, CFrame = Part.CFrame });
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncResize', Changes);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

function PreparePartsForResizing()
	-- Prepares parts for resizing and returns the initial state of the parts

	local InitialState = {};

	-- Stop parts from moving, and capture the initial state of the parts
	for _, Part in pairs(Selection.Parts) do
		InitialState[Part] = { Anchored = Part.Anchored, CanCollide = Part.CanCollide, Size = Part.Size, CFrame = Part.CFrame };
		Part.Anchored = true;
		Part.CanCollide = false;
		Part:BreakJoints();
		Part.Velocity = Vector3.new();
		Part.RotVelocity = Vector3.new();
	end;

	return InitialState;
end;

function GetIncrementMultiple(Number, Increment)

	-- Get how far the actual distance is from a multiple of our increment
	local MultipleDifference = Number % Increment;

	-- Identify the closest lower and upper multiples of the increment
	local LowerMultiple = Number - MultipleDifference;
	local UpperMultiple = Number - MultipleDifference + Increment;

	-- Calculate to which of the two multiples we're closer
	local LowerMultipleProximity = math.abs(Number - LowerMultiple);
	local UpperMultipleProximity = math.abs(Number - UpperMultiple);

	-- Use the closest multiple of our increment as the distance moved
	if LowerMultipleProximity <= UpperMultipleProximity then
		Number = LowerMultiple;
	else
		Number = UpperMultiple;
	end;

	return Number;
end;

-- Event that fires when a new point is snapped
PointSnapped = Signal.new()

function StartSnapping()

	-- Make sure snapping isn't already enabled
	if SnappingStage or SnapTracking.Enabled then
		return;
	end;

	-- Start first snapping stage
	SnappingStage = 'Starting';

	-- Only enable corner snapping
	SnapTracking.TrackEdgeMidpoints = false;
	SnapTracking.TrackFaceCentroids = false;
	SnapTracking.TargetFilter = function (Target)
		return Selection.PartIndex[Target]
	end

	-- Trigger the PointSnapped event when a new point is snapped
	SnapTracking.StartTracking(function (NewPoint)
		if NewPoint and NewPoint.p ~= SnappedPoint then
			SnappedPoint = NewPoint.p;
			PointSnapped:Fire(NewPoint.p);
		end;
	end);

	-- Listen for when the user starts dragging while in snap mode
	Connections.SnapDragStart = Support.AddUserInputListener('Began', 'MouseButton1', false, function (Input)

		-- Initialize snapping state
		SnappingStage = 'Direction';
		SnappingStartAim = Vector2.new(Input.Position.X, Input.Position.Y);
		SnappingStartPoint = SnappedPoint;
		SnappingStartTarget = SnapTracking.Target;
		SnappingStartDirections = GetFaceOffsetsFromCorner(SnappingStartTarget, SnappingStartPoint);
		SnappingStartSelectionState = PreparePartsForResizing();
		AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);

		-- Pause snapping
		SnapTracking.StopTracking();

		-- Start a direction line
		DirectionLine = Core.Tool.Interfaces.SnapLine:Clone();
		DirectionLine.Parent = Core.UI;
		DirectionLine.Visible = false;

		-- Track changes for history
		TrackChange();

		-- Listen for when the user drags
		Connections.SnapDrag = Support.AddUserInputListener('Changed', 'MouseMovement', true, function (Input)

			-- Update the latest aim
			SnappingEndAim = Vector2.new(Input.Position.X, Input.Position.Y);
			ScreenSnappedPoint = Workspace.CurrentCamera:WorldToScreenPoint(SnappingStartPoint);
			ScreenSnappedPoint = Vector2.new(ScreenSnappedPoint.X, ScreenSnappedPoint.Y);

			-- Calculate direction setting length
			local DirectionSettingLength = math.min(50, math.max(50, (SnappingStartAim - ScreenSnappedPoint).magnitude * 1.5));

			-- Use the mouse position to figure out the resize direction (until after direction setting length)
			if SnappingStage == 'Direction' then

				-- Get current angle from snap point
				local DragAngle = math.deg(math.atan2(SnappingEndAim.Y - ScreenSnappedPoint.Y, SnappingEndAim.X - ScreenSnappedPoint.X));
				DragAngle = (DragAngle > 0) and (DragAngle - 360) or DragAngle;

				-- Go through corner offsets representing the possible directions
				local Directions = {};
				for _, Direction in pairs(SnappingStartDirections) do

					-- Map the corner & corner offset to screen points
					local ScreenOffsetPoint = Workspace.CurrentCamera:WorldToScreenPoint(Direction.Offset);

					-- Get direction angle from snap point
					local DirectionAngle = math.deg(math.atan2(ScreenOffsetPoint.Y - ScreenSnappedPoint.Y, ScreenOffsetPoint.X - ScreenSnappedPoint.X));
					DirectionAngle = (DirectionAngle > 0) and (DirectionAngle - 360) or DirectionAngle;

					-- Calculate delta between drag and direction angles
					local AngleDelta = math.abs(DragAngle - DirectionAngle) % 180;
					AngleDelta = (AngleDelta > 90) and (180 - AngleDelta) or AngleDelta;

					-- Insert the potential direction
					table.insert(Directions, {
						Face = Direction.Face,
						AngleDelta = AngleDelta,
						DirectionAngle = DirectionAngle,
						Offset = Direction.Offset
					});

				end;

				-- Get the direction most similar to the dragging angle
				table.sort(Directions, function (A, B)
					return A.AngleDelta < B.AngleDelta;
				end);

				-- Center direction line at snap point
				DirectionLine.Position = UDim2.new(0, ScreenSnappedPoint.X, 0, ScreenSnappedPoint.Y);

				-- Orient direction line towards drag direction
				if math.abs(DragAngle - Directions[1].DirectionAngle) <= 90 then
					DirectionLine.Rotation = Directions[1].DirectionAngle;
				else
					DirectionLine.Rotation = 180 + Directions[1].DirectionAngle;
				end;

				-- Show the direction line
				DirectionLine.PointMarker.Rotation = -DirectionLine.Rotation;
				DirectionLine.SnapProgress.Size = UDim2.new(0, DirectionSettingLength, 2, 0);
				DirectionLine.Visible = true;

				-- Check if drag has passed direction setting length
				local Length = (SnappingEndAim - ScreenSnappedPoint).magnitude;
				if Length < DirectionSettingLength then
					return;
				end;

				-- Clear the direction line
				DirectionLine:Destroy()

				-- Select the resizing direction that was closest to the mouse drag
				SnappingDirection = Directions[1].Face;
				SnappingDirectionOffset = Directions[1].Offset;

				-- Move to the destination-picking stage of snapping
				SnappingStage = 'Destination';

				-- Set destination-stage snapping options
				SnapTracking.TrackEdgeMidpoints = true;
				SnapTracking.TrackFaceCentroids = true;
				SnapTracking.TargetFilter = function (Target) return not Target.Locked; end;
				SnapTracking.TargetBlacklist = Selection.Items;

				-- Start a distance alignment line
				AlignmentLine = Core.Tool.Interfaces.SnapLineSegment:Clone();
				AlignmentLine.Visible = false;
				AlignmentLine.Parent = Core.UI;

				-- Re-enable snapping to select destination
				SnapTracking.StartTracking(function (NewPoint)
					if NewPoint and NewPoint.p ~= SnappedPoint then
						SnappedPoint = NewPoint.p;
						PointSnapped:Fire(NewPoint.p);
					end;
				end);

			end;

		end);

		-- Listen for when a new point is snapped
		Connections.Snap = PointSnapped:Connect(function (SnappedPoint)

			-- Resize to snap point if in the destination stage of snapping
			if SnappingStage == 'Destination' then

				-- Calculate direction and distance to resize towards
				local Direction = (SnappingDirectionOffset - SnappingStartPoint).unit;
				local Distance = (SnappedPoint - SnappingStartPoint):Dot(Direction);

				-- Resize the parts on the selected faces by the calculated distance
				local Success = ResizePartsByFace(SnappingDirection, Distance, 'Normal', SnappingStartSelectionState);

				-- Update the UI on resize success
				if Success then

					-- Update "studs resized" indicator
					if ResizeTool.UI then
						ResizeTool.UI.Changes.Text.Text = 'resized ' .. Support.Round(Distance, 3) .. ' studs';
					end;

					-- Get snap point and destination point screen positions for UI alignment
					local ScreenStartPoint = Workspace.CurrentCamera:WorldToScreenPoint(SnappingStartPoint + (Direction * Distance));
					ScreenStartPoint = Vector2.new(ScreenStartPoint.X, ScreenStartPoint.Y);
					local ScreenDestinationPoint = Workspace.CurrentCamera:WorldToScreenPoint(SnappedPoint);
					ScreenDestinationPoint = Vector2.new(ScreenDestinationPoint.X, ScreenDestinationPoint.Y)

					-- Update the distance alignment line
					local AlignmentAngle = math.deg(math.atan2(ScreenDestinationPoint.Y - ScreenStartPoint.Y, ScreenDestinationPoint.X - ScreenStartPoint.X));
					local AlignmentCenter = ScreenStartPoint:Lerp(ScreenDestinationPoint, 0.5);
					AlignmentLine.Position = UDim2.new(0, AlignmentCenter.X, 0, AlignmentCenter.Y);
					AlignmentLine.Rotation = AlignmentAngle;
					AlignmentLine.Size = UDim2.new(0, (ScreenDestinationPoint - ScreenStartPoint).magnitude, 0, 1);
					AlignmentLine.PointMarkerA.Rotation = -AlignmentAngle;
					AlignmentLine.Visible = true;

				end;

				-- Make sure we're not entering any unauthorized private areas
				if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
					for Part, State in pairs(SnappingStartSelectionState) do
						Part.Size = State.Size;
						Part.CFrame = State.CFrame;
					end;
				end;

			end;

		end);

	end);

end;

-- Stop snapping whenever mouse is released
Support.AddUserInputListener('Ended', 'MouseButton1', true, function (Input)

	-- Ensure snapping is ongoing
	if not SnappingStage then
		return;
	end;

	-- Finish snapping
	FinishSnapping();

end);


function FinishSnapping()
	-- Cleans up and finalizes the snapping operation

	-- Ensure snapping is ongoing
	if not SnappingStage then
		return;
	end;

	-- Restore the selection's original state if stage was reached
	if SnappingStartSelectionState then
		for Part, State in pairs(SnappingStartSelectionState) do
			Part:MakeJoints();
			Part.CanCollide = State.CanCollide;
			Part.Anchored = State.Anchored;
		end;
	end;

	-- Disable any snapping stage
	SnappingStage = nil;

	-- Stop snap point tracking
	SnapTracking.StopTracking();

	-- Clear any UI
	if DirectionLine then
		DirectionLine:Destroy();
		DirectionLine = nil;
	end;
	if AlignmentLine then
		AlignmentLine:Destroy();
		AlignmentLine = nil;
	end;

	-- Register any change
	if HistoryRecord then
		RegisterChange();
	end;

	-- Disconnect snapping listeners
	ClearConnection 'SnapDragStart';
	ClearConnection 'SnapDrag';
	ClearConnection 'Snap';
	ClearConnection 'SnapDragEnd';

end;


function GetFaceOffsetsFromCorner(Part, Point)
	-- Returns offsets of the given corner point in the direction of its intersecting faces

	local Offsets = {};

	-- Go through each face the corner intersects
	local Faces = GetFacesFromCorner(Part, Point);
	for _, Face in pairs(Faces) do

		-- Calculate the offset from the corner in the direction of the face
		local FaceOffset = (Vector3.FromNormalId(Face) * Part.Size) / 2;
		local Offset = CFrame.new(Point) * CFrame.Angles(Part.CFrame:toEulerAnglesXYZ()) * FaceOffset;
		table.insert(Offsets, { Face = Face, Offset = Offset });

	end;

	-- Return the list of offsets
	return Offsets;
end;

function GetFacesFromCorner(Part, Point)
	-- Returns the 3 faces that the given corner point intersects

	local Faces = {};

	-- Get all the face centers of the part
	for _, FaceEnum in pairs(Enum.NormalId:GetEnumItems()) do
		local Face = Part.CFrame * (Part.Size / 2 * Vector3.FromNormalId(FaceEnum));

		-- Get the face's proximity to the point
		local Proximity = (Point - Face).magnitude;

		-- Keep track of the proximity to the point
		table.insert(Faces, { Proximity = Proximity, Face = FaceEnum });
	end;

	-- Find the closest faces to the point
	table.sort(Faces, function (A, B)
		return A.Proximity < B.Proximity;
	end);

	-- Return the 3 closest faces
	return { Faces[1].Face, Faces[2].Face, Faces[3].Face };
end;

-- Return the tool
return ResizeTool;
end;
};
G2L_MODULES[G2L["52f"]] = {
Closure = function()
    local script = G2L["52f"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);
SnapTracking = require(Tool.Core.Snapping);
BoundingBox = require(Tool.Core.BoundingBox);

-- Services
local ContextActionService = game:GetService 'ContextActionService'
local Workspace = game:GetService 'Workspace'

-- Libraries
local Libraries = Tool:WaitForChild 'Libraries'
local Make = require(Libraries:WaitForChild 'Make')

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local RotateTool = {

	Name = 'Rotate Tool';
	Color = BrickColor.new 'Bright green';

	-- Default options
	Increment = 15;
	Pivot = 'Center';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function RotateTool.Equip()
	-- Enables the tool's equipped functionality

	-- Set our current pivot mode
	SetPivot(RotateTool.Pivot);

	-- Start up our interface
	ShowUI();
	BindShortcutKeys();

end;

function RotateTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	HideHandles();
	ClearConnections();
	BoundingBox.ClearBoundingBox();
	SnapTracking.StopTracking();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ClearConnection(ConnectionKey)
	-- Clears the given specific connection

	local Connection = Connections[ConnectionKey];

	-- Disconnect the connection if it exists
	if Connections[ConnectionKey] then
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if RotateTool.UI then

		-- Reveal the UI
		RotateTool.UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	RotateTool.UI = Core.Tool.Interfaces.BTRotateToolGUI:Clone();
	RotateTool.UI.Parent = Core.UI;
	RotateTool.UI.Visible = true;

	-- Add functionality to the pivot option switch
	local PivotSwitch = RotateTool.UI.PivotOption;
	PivotSwitch.Center.Button.MouseButton1Down:Connect(function ()
		SetPivot('Center');
	end);
	PivotSwitch.Local.Button.MouseButton1Down:Connect(function ()
		SetPivot('Local');
	end);
	PivotSwitch.Last.Button.MouseButton1Down:Connect(function ()
		SetPivot('Last');
	end);

	-- Add functionality to the increment input
	local IncrementInput = RotateTool.UI.IncrementOption.Increment.TextBox;
	IncrementInput.FocusLost:Connect(function (EnterPressed)
		RotateTool.Increment = tonumber(IncrementInput.Text) or RotateTool.Increment;
		IncrementInput.Text = Support.Round(RotateTool.Increment, 4);
	end);

	-- Add functionality to the rotation inputs
	local XInput = RotateTool.UI.Info.RotationInfo.X.TextBox;
	local YInput = RotateTool.UI.Info.RotationInfo.Y.TextBox;
	local ZInput = RotateTool.UI.Info.RotationInfo.Z.TextBox;
	XInput.FocusLost:Connect(function (EnterPressed)
		local NewAngle = tonumber(XInput.Text);
		if NewAngle then
			SetAxisAngle('X', NewAngle);
		end;
	end);
	YInput.FocusLost:Connect(function (EnterPressed)
		local NewAngle = tonumber(YInput.Text);
		if NewAngle then
			SetAxisAngle('Y', NewAngle);
		end;
	end);
	ZInput.FocusLost:Connect(function (EnterPressed)
		local NewAngle = tonumber(ZInput.Text);
		if NewAngle then
			SetAxisAngle('Z', NewAngle);
		end;
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not RotateTool.UI then
		return;
	end;

	-- Hide the UI
	RotateTool.UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not RotateTool.UI then
		return;
	end;

	-- Only show and calculate selection info if it's not empty
	if #Selection.Parts == 0 then
		RotateTool.UI.Info.Visible = false;
		RotateTool.UI.Size = UDim2.new(0, 245, 0, 90);
		return;
	else
		RotateTool.UI.Info.Visible = true;
		RotateTool.UI.Size = UDim2.new(0, 245, 0, 150);
	end;

	-----------------------------------------
	-- Update the size information indicators
	-----------------------------------------

	-- Identify common angles across axes
	local XVariations, YVariations, ZVariations = {}, {}, {};
	for _, Part in pairs(Selection.Parts) do
		table.insert(XVariations, Support.Round(Part.Orientation.X, 3));
		table.insert(YVariations, Support.Round(Part.Orientation.Y, 3));
		table.insert(ZVariations, Support.Round(Part.Orientation.Z, 3));
	end;
	local CommonX = Support.IdentifyCommonItem(XVariations);
	local CommonY = Support.IdentifyCommonItem(YVariations);
	local CommonZ = Support.IdentifyCommonItem(ZVariations);

	-- Shortcuts to indicators
	local XIndicator = RotateTool.UI.Info.RotationInfo.X.TextBox;
	local YIndicator = RotateTool.UI.Info.RotationInfo.Y.TextBox;
	local ZIndicator = RotateTool.UI.Info.RotationInfo.Z.TextBox;

	-- Update each indicator if it's not currently being edited
	if not XIndicator:IsFocused() then
		XIndicator.Text = CommonX or '*';
	end;
	if not YIndicator:IsFocused() then
		YIndicator.Text = CommonY or '*';
	end;
	if not ZIndicator:IsFocused() then
		ZIndicator.Text = CommonZ or '*';
	end;

end;

function SetPivot(PivotMode)
	-- Sets the given rotation pivot mode

	-- Update setting
	RotateTool.Pivot = PivotMode;

	-- Update the UI switch
	if RotateTool.UI then
		Core.ToggleSwitch(PivotMode, RotateTool.UI.PivotOption);
	end;

	-- Disable any unnecessary bounding boxes
	BoundingBox.ClearBoundingBox();

	-- For center mode, use bounding box handles
	if PivotMode == 'Center' then
		BoundingBox.StartBoundingBox(AttachHandles);

	-- For local mode, use focused part handles
	elseif PivotMode == 'Local' then
		AttachHandles(Selection.Focus, true); 

	-- For last mode, use focused part handles
	elseif PivotMode == 'Last' then
		AttachHandles(CustomPivotPoint and (RotateTool.Handles and RotateTool.Handles.Adornee) or Selection.Focus, true);
	end;

end;

function AttachHandles(Part, Autofocus)
	-- Creates and attaches handles to `Part`, and optionally automatically attaches to the focused part

	-- Enable autofocus if requested and not already on
	if Autofocus and not Connections.AutofocusHandle then
		Connections.AutofocusHandle = Selection.FocusChanged:Connect(function ()
			AttachHandles(Selection.Focus, true);
		end);

	-- Disable autofocus if not requested and on
	elseif not Autofocus and Connections.AutofocusHandle then
		ClearConnection 'AutofocusHandle';
	end;

	-- Clear previous pivot point
	CustomPivotPoint = nil

	-- Just attach and show the handles if they already exist
	if RotateTool.Handles then
		RotateTool.Handles:BlacklistObstacle(BoundingBox.GetBoundingBox())
		RotateTool.Handles:SetAdornee(Part)
		return
	end

	local AreaPermissions
	local function OnHandleDragStart()
		-- Prepare for rotating parts when the handle is clicked

		-- Prevent selection
		Core.Targeting.CancelSelecting();

		-- Indicate rotating via handle
		HandleRotating = true;

		-- Freeze bounding box extents while rotating
		if BoundingBox.GetBoundingBox() then
			InitialExtentsSize, InitialExtentsCFrame = BoundingBox.CalculateExtents(Selection.Parts, BoundingBox.StaticExtents)
			BoundingBox.PauseMonitoring();
		end;

		-- Stop parts from moving, and capture the initial state of the parts
		InitialState = PreparePartsForRotating();

		-- Track the change
		TrackChange();

		-- Cache area permissions information
		if Core.Mode == 'Tool' then
			AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);
		end;

		-- Set the pivot point to the center of the selection if in Center mode
		if RotateTool.Pivot == 'Center' then
			PivotPoint = BoundingBox.GetBoundingBox().CFrame;

		-- Set the pivot point to the center of the focused part if in Last mode
		elseif RotateTool.Pivot == 'Last' and not CustomPivotPoint then
			if Selection.Focus:IsA 'BasePart' then
				PivotPoint = Selection.Focus.CFrame
			elseif Selection.Focus:IsA 'Model' then
				PivotPoint = Selection.Focus:GetModelCFrame()
			end
		end;

	end

	local function OnHandleDrag(Axis, Rotation)
		-- Update parts when the handles are moved

		-- Only rotate if handle is enabled
		if not HandleRotating then
			return;
		end;

		-- Turn the rotation amount into degrees
		Rotation = math.deg(Rotation);

		-- Calculate the increment-aligned rotation amount
		Rotation = GetIncrementMultiple(Rotation, RotateTool.Increment) % 360;

		-- Get displayable rotation delta
		local DisplayedRotation = GetHandleDisplayDelta(Rotation);

		-- Perform the rotation
		RotatePartsAroundPivot(RotateTool.Pivot, PivotPoint, Axis, Rotation, InitialState);

		-- Make sure we're not entering any unauthorized private areas
		if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
			for Part, State in pairs(InitialState) do
				Part.CFrame = State.CFrame;
			end;

			-- Reset displayed rotation delta
			DisplayedRotation = 0;
		end;

		-- Update the "degrees rotated" indicator
		if RotateTool.UI then
			RotateTool.UI.Changes.Text.Text = 'rotated ' .. DisplayedRotation .. ' degrees';
		end;

	end

	local function OnHandleDragEnd()
		if not HandleRotating then
			return
		end

		-- Prevent selection
		Core.Targeting.CancelSelecting();

		-- Disable rotating
		HandleRotating = false;

		-- Clear this connection to prevent it from firing again
		ClearConnection 'HandleRelease';

		-- Clear change indicator states
		HandleDirection = nil;
		HandleFirstAngle = nil;
		LastDisplayedRotation = nil;

		-- Make joints, restore original anchor and collision states
		for Part, State in pairs(InitialState) do
			Part:MakeJoints();
			Core.RestoreJoints(State.Joints);
			Part.CanCollide = State.CanCollide;
			Part.Anchored = State.Anchored;
		end;

		-- Register the change
		RegisterChange();

		-- Resume normal bounding box updating
		BoundingBox.RecalculateStaticExtents();
		BoundingBox.ResumeMonitoring();

	end

	-- Create the handles
	local ArcHandles = require(Libraries:WaitForChild 'ArcHandles')
	RotateTool.Handles = ArcHandles.new({
		Color = RotateTool.Color.Color,
		Parent = Core.UIContainer,
		Adornee = Part,
		ObstacleBlacklist = { BoundingBox.GetBoundingBox() },
		OnDragStart = OnHandleDragStart,
		OnDrag = OnHandleDrag,
		OnDragEnd = OnHandleDragEnd
	})
end

function HideHandles()
	-- Hides the resizing handles

	-- Make sure handles exist and are visible
	if not RotateTool.Handles then
		return;
	end;

	-- Hide the handles
	RotateTool.Handles = RotateTool.Handles:Destroy()

	-- Disable handle autofocus if enabled
	ClearConnection 'AutofocusHandle';

end;

function RotatePartsAroundPivot(PivotMode, PivotPoint, Axis, Rotation, InitialStates)
	-- Rotates the given parts in `InitialStates` around `PivotMode` (using `PivotPoint` if applicable)'s `Axis` by `Rotation`

	-- Create a CFrame that increments rotation by `Rotation` around `Axis`
	local RotationCFrame = CFrame.fromAxisAngle(Vector3.FromAxis(Axis), math.rad(Rotation));

	-- Rotate each part
	for Part, InitialState in pairs(InitialStates) do

		-- Rotate around the selection's center, or the currently focused part
		if PivotMode == 'Center' or PivotMode == 'Last' then

			-- Calculate the focused part's rotation
			local RelativeTo = PivotPoint * RotationCFrame;

			-- Calculate this part's offset from the focused part's rotation
			local Offset = PivotPoint:toObjectSpace(InitialState.CFrame);

			-- Rotate relative to the focused part by this part's offset from it
			Part.CFrame = RelativeTo * Offset;

		-- Rotate around the part's center
		elseif RotateTool.Pivot == 'Local' then
			Part.CFrame = InitialState.CFrame * RotationCFrame;

		end;

	end;

end;

function GetHandleDisplayDelta(HandleRotation)
	-- Returns a human-friendly version of the handle's rotation delta

	-- Prepare to capture first angle
	if HandleFirstAngle == nil then
		HandleFirstAngle = true;
		HandleDirection = true;

	-- Capture first angle
	elseif HandleFirstAngle == true then

		-- Determine direction based on first angle
		if math.abs(HandleRotation) > 180 then
			HandleDirection = false;
		else
			HandleDirection = true;
		end;

		-- Disable first angle capturing
		HandleFirstAngle = false;

	end;

	-- Determine the rotation delta to display
	local DisplayedRotation;
	if HandleDirection == true then
		DisplayedRotation = (360 - HandleRotation) % 360;
	else
		DisplayedRotation = HandleRotation % 360;
	end;

	-- Switch delta calculation direction if crossing directions
	if LastDisplayedRotation and (
	   (LastDisplayedRotation <= 120 and DisplayedRotation >= 240) or
	   (LastDisplayedRotation >= 240 and DisplayedRotation <= 120)) then
		HandleDirection = not HandleDirection;
	end;

	-- Update displayed rotation after direction correction
	if HandleDirection == true then
		DisplayedRotation = (360 - HandleRotation) % 360;
	else
		DisplayedRotation = HandleRotation % 360;
	end;

	-- Store this last display rotation
	LastDisplayedRotation = DisplayedRotation;

	-- Return updated display delta
	return DisplayedRotation;

end;

function BindShortcutKeys()
	-- Enables useful shortcut keys for this tool

	-- Track user input while this tool is equipped
	table.insert(Connections, UserInputService.InputBegan:Connect(function (InputInfo, GameProcessedEvent)

		-- Make sure this is an intentional event
		if GameProcessedEvent then
			return;
		end;

		-- Make sure this input is a key press
		if InputInfo.UserInputType ~= Enum.UserInputType.Keyboard then
			return;
		end;

		-- Make sure it wasn't pressed while typing
		if UserInputService:GetFocusedTextBox() then
			return;
		end;

		-- Check if the enter key was pressed
		if InputInfo.KeyCode == Enum.KeyCode.Return or InputInfo.KeyCode == Enum.KeyCode.KeypadEnter then

			-- Toggle the current axis mode
			if RotateTool.Pivot == 'Center' then
				SetPivot('Local');

			elseif RotateTool.Pivot == 'Local' then
				SetPivot('Last');

			elseif RotateTool.Pivot == 'Last' then
				SetPivot('Center');
			end;

		-- Check if the - key was pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.Minus or InputInfo.KeyCode == Enum.KeyCode.KeypadMinus then

			-- Focus on the increment input
			if RotateTool.UI then
				RotateTool.UI.IncrementOption.Increment.TextBox:CaptureFocus();
			end;

		-- Nudge around X axis if the 8 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadEight then
			NudgeSelectionByAxis(Enum.Axis.X, 1);

		-- Nudge around X axis if the 2 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadTwo then
			NudgeSelectionByAxis(Enum.Axis.X, -1);

		-- Nudge around Z axis if the 9 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadNine then
			NudgeSelectionByAxis(Enum.Axis.Z, 1);

		-- Nudge around Z axis if the 1 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadOne then
			NudgeSelectionByAxis(Enum.Axis.Z, -1);

		-- Nudge around Y axis if the 4 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadFour then
			NudgeSelectionByAxis(Enum.Axis.Y, -1);

		-- Nudge around Y axis if the 6 button on the keypad is pressed
		elseif InputInfo.KeyCode == Enum.KeyCode.KeypadSix then
			NudgeSelectionByAxis(Enum.Axis.Y, 1);

		-- Start snapping when the R key is pressed down, and it's not the selection clearing hotkey
		elseif (InputInfo.KeyCode == Enum.KeyCode.R) and not Selection.Multiselecting then
			StartSnapping();

		-- Start snapping when T key is pressed down (alias)
		elseif (InputInfo.KeyCode == Enum.KeyCode.T) and (not Selection.Multiselecting) then
			StartSnapping();

		end;

	end));

end;

function StartSnapping()

	-- Make sure snapping isn't already enabled
	if SnapTracking.Enabled then
		return;
	end;

	-- Listen for snapped points
	SnapTracking.StartTracking(function (NewPoint)
		SnappedPoint = NewPoint;
	end);

	-- Select the snapped pivot point upon clicking
	Connections.SelectSnappedPivot = Core.Mouse.Button1Down:Connect(function ()

		-- Disable unintentional selection
		Core.Targeting.CancelSelecting();

		-- Ensure there is a snap point
		if not SnappedPoint then
			return;
		end;

		-- Disable snapping
		SnapTracking.StopTracking();

		-- Attach the handles to a part at the snapped point
		local Part = Make 'Part' {
			CFrame = SnappedPoint,
			Size = Vector3.new(5, 1, 5)
		};
		SetPivot 'Last';
		AttachHandles(Part, true);

		-- Maintain the part in memory to prevent garbage collection
		GCBypass = { Part };

		-- Set the pivot point
		PivotPoint = SnappedPoint;
		CustomPivotPoint = true;

		-- Disconnect snapped pivot point selection listener
		ClearConnection 'SelectSnappedPivot';

	end);

end;

function SetAxisAngle(Axis, Angle)
	-- Sets the selection's angle on axis `Axis` to `Angle`

	-- Turn the given angle from degrees to radians
	local Angle = math.rad(Angle);

	-- Track this change
	TrackChange();

	-- Prepare parts to be moved
	local InitialStates = PreparePartsForRotating();

	-- Update each part
	for Part, State in pairs(InitialStates) do

		-- Set the part's new CFrame
		Part.CFrame = CFrame.new(Part.Position) * CFrame.fromOrientation(
			Axis == 'X' and Angle or math.rad(Part.Orientation.X),
			Axis == 'Y' and Angle or math.rad(Part.Orientation.Y),
			Axis == 'Z' and Angle or math.rad(Part.Orientation.Z)
		);

	end;

	-- Cache up permissions for all private areas
	local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);

	-- Revert changes if player is not authorized to move parts to target destination
	if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
		for Part, State in pairs(InitialStates) do
			Part.CFrame = State.CFrame;
		end;
	end;

	-- Restore the parts' original states
	for Part, State in pairs(InitialStates) do
		Part:MakeJoints();
		Core.RestoreJoints(State.Joints);
		Part.CanCollide = State.CanCollide;
		Part.Anchored = State.Anchored;
	end;

	-- Register the change
	RegisterChange();

end;

function NudgeSelectionByAxis(Axis, Direction)
	-- Nudges the rotation of the selection in the direction of the given axis

	-- Ensure selection is not empty
	if #Selection.Parts == 0 then
		return;
	end;

	-- Get amount to nudge by
	local NudgeAmount = RotateTool.Increment;

	-- Reverse nudge amount if shift key is held while nudging
	local PressedKeys = Support.FlipTable(Support.GetListMembers(UserInputService:GetKeysPressed(), 'KeyCode'));
	if PressedKeys[Enum.KeyCode.LeftShift] or PressedKeys[Enum.KeyCode.RightShift] then
		NudgeAmount = -NudgeAmount;
	end;

	-- Track the change
	TrackChange();

	-- Stop parts from moving, and capture the initial state of the parts
	local InitialState = PreparePartsForRotating();

	-- Set the pivot point to the center of the selection if in Center mode
	if RotateTool.Pivot == 'Center' then
		local BoundingBoxSize, BoundingBoxCFrame = BoundingBox.CalculateExtents(Selection.Parts);
		PivotPoint = BoundingBoxCFrame;

	-- Set the pivot point to the center of the focused part if in Last mode
	elseif RotateTool.Pivot == 'Last' and not CustomPivotPoint then
		if Selection.Focus:IsA 'BasePart' then
			PivotPoint = Selection.Focus.CFrame
		elseif Selection.Focus:IsA 'Model' then
			PivotPoint = Selection.Focus:GetModelCFrame()
		end
	end;

	-- Perform the rotation
	RotatePartsAroundPivot(RotateTool.Pivot, PivotPoint, Axis, NudgeAmount * (Direction or 1), InitialState);

	-- Update the "degrees rotated" indicator
	if RotateTool.UI then
		RotateTool.UI.Changes.Text.Text = 'rotated ' .. (NudgeAmount * (Direction or 1)) .. ' degrees';
	end;

	-- Cache area permissions information
	local AreaPermissions = Security.GetPermissions(Security.GetSelectionAreas(Selection.Parts), Core.Player);

	-- Make sure we're not entering any unauthorized private areas
	if Core.Mode == 'Tool' and Security.ArePartsViolatingAreas(Selection.Parts, Core.Player, false, AreaPermissions) then
		for Part, State in pairs(InitialState) do
			Part.CFrame = State.CFrame;
		end;
	end;

	-- Make joints, restore original anchor and collision states
	for Part, State in pairs(InitialState) do
		Part:MakeJoints();
		Core.RestoreJoints(State.Joints);
		Part.CanCollide = State.CanCollide;
		Part.Anchored = State.Anchored;
	end;

	-- Register the change
	RegisterChange();

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Parts = Support.CloneTable(Selection.Parts);
		BeforeCFrame = {};
		AfterCFrame = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, CFrame = Record.BeforeCFrame[Part] });
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncRotate', Changes);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, CFrame = Record.AfterCFrame[Part] });
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncRotate', Changes);

		end;

	};

	-- Collect the selection's initial state
	for _, Part in pairs(HistoryRecord.Parts) do
		HistoryRecord.BeforeCFrame[Part] = Part.CFrame;
	end;

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Collect the selection's final state
	local Changes = {};
	for _, Part in pairs(HistoryRecord.Parts) do
		HistoryRecord.AfterCFrame[Part] = Part.CFrame;
		table.insert(Changes, { Part = Part, CFrame = Part.CFrame });
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncRotate', Changes);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

function PreparePartsForRotating()
	-- Prepares parts for rotating and returns the initial state of the parts

	local InitialState = {};

	-- Get index of parts
	local PartIndex = Support.FlipTable(Selection.Parts);

	-- Stop parts from moving, and capture the initial state of the parts
	for _, Part in pairs(Selection.Parts) do
		InitialState[Part] = { Anchored = Part.Anchored, CanCollide = Part.CanCollide, CFrame = Part.CFrame };
		Part.Anchored = true;
		Part.CanCollide = false;
		InitialState[Part].Joints = Core.PreserveJoints(Part, PartIndex);
		Part:BreakJoints();
		Part.Velocity = Vector3.new();
		Part.RotVelocity = Vector3.new();
	end;

	return InitialState;
end;

function GetIncrementMultiple(Number, Increment)

	-- Get how far the actual distance is from a multiple of our increment
	local MultipleDifference = Number % Increment;

	-- Identify the closest lower and upper multiples of the increment
	local LowerMultiple = Number - MultipleDifference;
	local UpperMultiple = Number - MultipleDifference + Increment;

	-- Calculate to which of the two multiples we're closer
	local LowerMultipleProximity = math.abs(Number - LowerMultiple);
	local UpperMultipleProximity = math.abs(Number - UpperMultiple);

	-- Use the closest multiple of our increment as the distance moved
	if LowerMultipleProximity <= UpperMultipleProximity then
		Number = LowerMultiple;
	else
		Number = UpperMultiple;
	end;

	return Number;
end;

-- Return the tool
return RotateTool;
end;
};
G2L_MODULES[G2L["530"]] = {
Closure = function()
    local script = G2L["530"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local SurfaceTool = {

	Name = 'Surface Tool';
	Color = BrickColor.new 'Bright violet';

	-- Default options
	Surface = 'All';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function SurfaceTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	EnableSurfaceSelection();

	-- Set our current surface mode
	SetSurface(SurfaceTool.Surface);

end;

function SurfaceTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if SurfaceTool.UI then

		-- Reveal the UI
		SurfaceTool.UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	SurfaceTool.UI = Core.Tool.Interfaces.BTSurfaceToolGUI:Clone();
	SurfaceTool.UI.Parent = Core.UI;
	SurfaceTool.UI.Visible = true;

	-- Create the surface selection dropdown
	SurfaceDropdown = Core.Cheer(SurfaceTool.UI.SideOption.Dropdown).Start({ 'All', 'Top', 'Bottom', 'Front', 'Back', 'Left', 'Right' }, 'All', SetSurface);

	-- Map type label names to actual type names
	local SurfaceTypes = {
		['Studs'] = 'Studs',
		['Inlets'] = 'Inlet',
		['Smooth'] = 'Smooth',
		['Weld'] = 'Weld',
		['Glue'] = 'Glue',
		['Universal'] = 'Universal',
		['Hinge'] = 'Hinge',
		['Motor'] = 'Motor',
		['No Outline'] = 'SmoothNoOutlines'
	};

	-- Create the surface type selection dropdown
	SurfaceTypeDropdown = Core.Cheer(SurfaceTool.UI.TypeOption.Dropdown).Start({ 'Studs', 'Inlets', 'Smooth', 'Weld', 'Glue', 'Universal', 'Hinge', 'Motor', 'No Outline' }, '', function (Option)
		SetSurfaceType(Enum.SurfaceType[SurfaceTypes[Option]]);
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not SurfaceTool.UI then
		return;
	end;

	-- Hide the UI
	SurfaceTool.UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function GetSurfaceTypeDisplayName(SurfaceType)
	-- Returns a more friendly name for the given `SurfaceType`

	-- For stepping motors, add a space
	if SurfaceType == Enum.SurfaceType.SteppingMotor then
		return 'Stepping Motor';

	-- For no outlines, simplify name
	elseif SurfaceType == Enum.SurfaceType.SmoothNoOutlines then
		return 'No Outline';

	-- For other surface types, return their normal name
	else
		return SurfaceType.Name;

	end;

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not SurfaceTool.UI then
		return;
	end;

	-- Only show and identify current surface type if selection is not empty
	if #Selection.Parts == 0 then
		SurfaceTypeDropdown.SetOption('');
		return;
	end;

	------------------------------------
	-- Update the surface type indicator
	------------------------------------

	-- Collect all different surface types in selection
	local SurfaceTypeVariations = {};
	for _, Part in pairs(Selection.Parts) do

		-- Search for variations on all surfaces if all surfaces are selected
		if SurfaceTool.Surface == 'All' then
			table.insert(SurfaceTypeVariations, Part.TopSurface);
			table.insert(SurfaceTypeVariations, Part.BottomSurface);
			table.insert(SurfaceTypeVariations, Part.FrontSurface);
			table.insert(SurfaceTypeVariations, Part.BackSurface);
			table.insert(SurfaceTypeVariations, Part.LeftSurface);
			table.insert(SurfaceTypeVariations, Part.RightSurface);

		-- Search for variations on single selected surface
		else
			table.insert(SurfaceTypeVariations, Part[SurfaceTool.Surface .. 'Surface']);
		end;

	end;

	-- Identify common surface type in selection
	local CommonSurfaceType = Support.IdentifyCommonItem(SurfaceTypeVariations);

	-- Update the current surface type in the surface type dropdown
	SurfaceTypeDropdown.SetOption(CommonSurfaceType and GetSurfaceTypeDisplayName(CommonSurfaceType) or '*');

end;

function SetSurface(SurfaceName)
	-- Changes the surface option to `Surface`

	-- Set the surface option
	SurfaceTool.Surface = SurfaceName;

	-- Update the current surface in the surface dropdown
	SurfaceDropdown.SetOption(SurfaceName);

end;

function SetSurfaceType(SurfaceType)
	-- Changes the selection's surface type on the currently selected surface

	-- Make sure a surface has been selected
	if not SurfaceTool.Surface then
		return;
	end;

	-- Track changes
	TrackChange();

	-- Change the surface of the parts locally
	for _, Part in pairs(Selection.Parts) do

		-- Change all surfaces if all selected
		if SurfaceTool.Surface == 'All' then
			Part.TopSurface = SurfaceType;
			Part.BottomSurface = SurfaceType;
			Part.FrontSurface = SurfaceType;
			Part.BackSurface = SurfaceType;
			Part.LeftSurface = SurfaceType;
			Part.RightSurface = SurfaceType;

		-- Change specific selected surface
		else
			Part[SurfaceTool.Surface .. 'Surface'] = SurfaceType;
		end;

	end;

	-- Register changes
	RegisterChange();

end;

function EnableSurfaceSelection()
	-- Allows the player to select surfaces by clicking on them

	-- Watch out for clicks on selected parts
	Connections.SurfaceSelection = Core.Mouse.Button1Down:Connect(function ()
		local _, ScopeTarget = Core.Targeting:UpdateTarget()
		if Selection.IsSelected(ScopeTarget) then

			-- Set the surface option to the target surface
			SetSurface(Core.Mouse.TargetSurface.Name);

		end;
	end);

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Parts = Support.CloneTable(Selection.Parts);
		BeforeSurfaces = {};
		AfterSurfaces = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, Surfaces = Record.BeforeSurfaces[Part]	});
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncSurface', Changes);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Put together the change request
			local Changes = {};
			for _, Part in pairs(Record.Parts) do
				table.insert(Changes, { Part = Part, Surfaces = Record.AfterSurfaces[Part] });
			end;

			-- Send the change request
			Core.SyncAPI:Invoke('SyncSurface', Changes);

		end;

	};

	-- Collect the selection's initial state
	for _, Part in pairs(HistoryRecord.Parts) do

		-- Begin to record surfaces
		HistoryRecord.BeforeSurfaces[Part] = {};
		local Surfaces = HistoryRecord.BeforeSurfaces[Part];

		-- Record all surfaces if all selected
		if SurfaceTool.Surface == 'All' then
			Surfaces.Top = Part.TopSurface;
			Surfaces.Bottom = Part.BottomSurface;
			Surfaces.Front = Part.FrontSurface;
			Surfaces.Back = Part.BackSurface;
			Surfaces.Left = Part.LeftSurface;
			Surfaces.Right = Part.RightSurface;

		-- Record specific selected surface
		else
			Surfaces[SurfaceTool.Surface] = Part[SurfaceTool.Surface .. 'Surface'];
		end;

	end;

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Collect the selection's final state
	local Changes = {};
	for _, Part in pairs(HistoryRecord.Parts) do

		-- Begin to record surfaces
		HistoryRecord.AfterSurfaces[Part] = {};
		local Surfaces = HistoryRecord.AfterSurfaces[Part];

		-- Record all surfaces if all selected
		if SurfaceTool.Surface == 'All' then
			Surfaces.Top = Part.TopSurface;
			Surfaces.Bottom = Part.BottomSurface;
			Surfaces.Front = Part.FrontSurface;
			Surfaces.Back = Part.BackSurface;
			Surfaces.Left = Part.LeftSurface;
			Surfaces.Right = Part.RightSurface;

		-- Record specific selected surface
		else
			Surfaces[SurfaceTool.Surface] = Part[SurfaceTool.Surface .. 'Surface'];
		end;

		-- Create the change request for this part
		table.insert(Changes, { Part = Part, Surfaces = Surfaces });

	end;

	-- Send the changes to the server
	Core.SyncAPI:Invoke('SyncSurface', Changes);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

-- Return the tool
return SurfaceTool;
end;
};
G2L_MODULES[G2L["531"]] = {
Closure = function()
    local script = G2L["531"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local TextureTool = {

	Name = 'Texture Tool';
	Color = BrickColor.new 'Bright violet';

	-- Default options
	Type = 'Decal';
	Face = Enum.NormalId.Front;

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function TextureTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	EnableSurfaceClickSelection();

	-- Set our current texture type and face
	SetTextureType(TextureTool.Type);
	SetFace(TextureTool.Face);

end;

function TextureTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if UI then

		-- Reveal the UI
		UI.Visible = true;

		-- Update the UI every 0.1 seconds
		UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	UI = Core.Tool.Interfaces.BTTextureToolGUI:Clone();
	UI.Parent = Core.UI;
	UI.Visible = true;

	-- References to UI elements
	local AddButton = UI.AddButton;
	local RemoveButton = UI.RemoveButton;
	local DecalModeButton = UI.ModeOption.Decal.Button;
	local TextureModeButton = UI.ModeOption.Texture.Button;
	local ImageIdInput = UI.ImageIDOption.TextBox;
	local TransparencyInput = UI.TransparencyOption.Input.TextBox;
	local RepeatXInput = UI.RepeatOption.XInput.TextBox;
	local RepeatYInput = UI.RepeatOption.YInput.TextBox;

	-- Enable the texture type switch
	DecalModeButton.MouseButton1Click:Connect(function ()
		SetTextureType 'Decal';
	end);
	TextureModeButton.MouseButton1Click:Connect(function ()
		SetTextureType 'Texture';
	end);

	-- Create the face selection dropdown
	local Faces = { 'Top', 'Bottom', 'Front', 'Back', 'Left', 'Right' };
	FaceDropdown = Core.Cheer(UI.SideOption.Dropdown).Start(Faces, '', function (Face)
		SetFace(Enum.NormalId[Face]);
	end);

	-- Enable the image ID input
	ImageIdInput.FocusLost:Connect(function (EnterPressed)
		SetTextureId(TextureTool.Type, TextureTool.Face, ParseAssetId(ImageIdInput.Text));
	end);

	-- Enable other inputs
	SyncInputToProperty('Transparency', TransparencyInput);
	SyncInputToProperty('StudsPerTileU', RepeatXInput);
	SyncInputToProperty('StudsPerTileV', RepeatYInput);

	-- Enable the texture adding button
	AddButton.Button.MouseButton1Click:Connect(function ()
		AddTextures(TextureTool.Type, TextureTool.Face);
	end);
	RemoveButton.Button.MouseButton1Click:Connect(function ()
		RemoveTextures(TextureTool.Type, TextureTool.Face);
	end);

	-- Update the UI every 0.1 seconds
	UIUpdater = Support.ScheduleRecurringTask(UpdateUI, 0.1);

end;

function SyncInputToProperty(Property, Input)
	-- Enables `Input` to change the given property

	-- Enable inputs
	Input.FocusLost:Connect(function ()
		SetProperty(TextureTool.Type, TextureTool.Face, Property, tonumber(Input.Text));
	end);

end;

function EnableSurfaceClickSelection()
	-- Allows for the setting of the current face by clicking

	-- Clear out any existing connection
	if Connections.SurfaceClickSelection then
		Connections.SurfaceClickSelection:Disconnect();
		Connections.SurfaceClickSelection = nil;
	end;

	-- Add the new click connection
	Connections.SurfaceClickSelection = Core.Mouse.Button1Down:Connect(function ()
		local _, ScopeTarget = Core.Targeting:UpdateTarget()
		if Selection.IsSelected(ScopeTarget) then
			SetFace(Core.Mouse.TargetSurface)
		end
	end)

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not UI then
		return;
	end;

	-- Hide the UI
	UI.Visible = false;

	-- Stop updating the UI
	UIUpdater:Stop();

end;

function GetTextures(TextureType, Face)
	-- Returns all the textures in the selection

	local Textures = {};

	-- Get any textures from any selected parts
	for _, Part in pairs(Selection.Parts) do
		for _, Child in pairs(Part:GetChildren()) do

			-- If this child is texture we're looking for, collect it
			if Child.ClassName == TextureType and Child.Face == Face then
				table.insert(Textures, Child);
			end;

		end;
	end;

	-- Return the found textures
	return Textures;

end;

-- List of creatable textures
local TextureTypes = { 'Decal', 'Texture' };

-- List of UI layouts
local Layouts = {
	EmptySelection = { 'SelectNote' };
	NoTextures = { 'ModeOption', 'SideOption', 'AddButton' };
	SomeDecals = { 'ModeOption', 'SideOption', 'ImageIDOption', 'TransparencyOption', 'AddButton', 'RemoveButton' };
	AllDecals = { 'ModeOption', 'SideOption', 'ImageIDOption', 'TransparencyOption', 'RemoveButton' };
	SomeTextures = { 'ModeOption', 'SideOption', 'ImageIDOption', 'TransparencyOption', 'RepeatOption', 'AddButton', 'RemoveButton' };
	AllTextures = { 'ModeOption', 'SideOption', 'ImageIDOption', 'TransparencyOption', 'RepeatOption', 'RemoveButton' };
};

-- List of UI elements
local UIElements = { 'SelectNote', 'ModeOption', 'SideOption', 'ImageIDOption', 'TransparencyOption', 'RepeatOption', 'AddButton', 'RemoveButton' };

-- Current UI layout
local CurrentLayout;

function ChangeLayout(Layout)
	-- Sets the UI to the given layout

	-- Make sure the new layout isn't already set
	if CurrentLayout == Layout then
		return;
	end;

	-- Set this as the current layout
	CurrentLayout = Layout;

	-- Reset the UI
	for _, ElementName in pairs(UIElements) do
		local Element = UI[ElementName];
		Element.Visible = false;
	end;

	-- Keep track of the total vertical extents of all items
	local Sum = 0;

	-- Go through each layout element
	for ItemIndex, ItemName in ipairs(Layout) do

		local Item = UI[ItemName];

		-- Make the item visible
		Item.Visible = true;

		-- Position this item underneath the past items
		Item.Position = UDim2.new(0, 0, 0, 20) + UDim2.new(
			Item.Position.X.Scale,
			Item.Position.X.Offset,
			0,
			Sum + 10
		);

		-- Update the sum of item heights
		Sum = Sum + 10 + Item.AbsoluteSize.Y;

	end;

	-- Resize the container to fit the new layout
	UI.Size = UDim2.new(0, 200, 0, 30 + Sum);

end;

function UpdateUI()
	-- Updates information on the UI

	-- Make sure the UI's on
	if not UI then
		return;
	end;

	-- Get the textures in the selection
	local Textures = GetTextures(TextureTool.Type, TextureTool.Face);

	-- References to UI elements
	local ImageIdInput = UI.ImageIDOption.TextBox;
	local TransparencyInput = UI.TransparencyOption.Input.TextBox;

	-----------------------
	-- Update the UI layout
	-----------------------

	-- Get the plural version of the current texture type
	local PluralTextureType = TextureTool.Type .. 's';

	-- Figure out the necessary UI layout
	if #Selection.Parts == 0 then
		ChangeLayout(Layouts.EmptySelection);
		return;

	-- When the selection has no textures
	elseif #Textures == 0 then
		ChangeLayout(Layouts.NoTextures);
		return;

	-- When only some selected items have textures
	elseif #Selection.Parts ~= #Textures then
		ChangeLayout(Layouts['Some' .. PluralTextureType]);

	-- When all selected items have textures
	elseif #Selection.Parts == #Textures then
		ChangeLayout(Layouts['All' .. PluralTextureType]);
	end;

	------------------------
	-- Update UI information
	------------------------

	-- Get the common properties
	local ImageId = Support.IdentifyCommonProperty(Textures, 'Texture');
	local Transparency = Support.IdentifyCommonProperty(Textures, 'Transparency');

	-- Update the common inputs
	UpdateDataInputs {
		[ImageIdInput] = ImageId and ParseAssetId(ImageId) or ImageId or '*';
		[TransparencyInput] = Transparency and Support.Round(Transparency, 3) or '*';
	};

	-- Update texture-specific information on UI
	if TextureTool.Type == 'Texture' then

		-- Get texture-specific UI elements
		local RepeatXInput = UI.RepeatOption.XInput.TextBox;
		local RepeatYInput = UI.RepeatOption.YInput.TextBox;

		-- Get texture-specific common properties
		local RepeatX = Support.IdentifyCommonProperty(Textures, 'StudsPerTileU');
		local RepeatY = Support.IdentifyCommonProperty(Textures, 'StudsPerTileV');

		-- Update inputs
		UpdateDataInputs {
			[RepeatXInput] = RepeatX and Support.Round(RepeatX, 3) or '*';
			[RepeatYInput] = RepeatY and Support.Round(RepeatY, 3) or '*';
		};

	end;

end;

function UpdateDataInputs(Data)
	-- Updates the data in the given TextBoxes when the user isn't typing in them

	-- Go through the inputs and data
	for Input, UpdatedValue in pairs(Data) do

		-- Makwe sure the user isn't typing into the input
		if not Input:IsFocused() then

			-- Set the input's value
			Input.Text = tostring(UpdatedValue);

		end;

	end;

end;

function ParseAssetId(Input)
	-- Returns the intended asset ID for the given input

	-- Get the ID number from the input
	local Id = tonumber(Input)
		or tonumber(Input:lower():match('%?id=([0-9]+)'))
		or tonumber(Input:match('/([0-9]+)/'))
		or tonumber(Input:lower():match('rbxassetid://([0-9]+)'));

	-- Return the ID
	return Id;
end;

function SetFace(Face)

	-- Update the tool option
	TextureTool.Face = Face;

	-- Update the UI
	FaceDropdown.SetOption(Face and Face.Name or '*');

end;

function SetTextureType(TextureType)

	-- Update the tool option
	TextureTool.Type = TextureType;

	-- Update the UI
	Core.ToggleSwitch(TextureType, UI.ModeOption);
	UI.AddButton.Button.Text = 'ADD ' .. TextureType:upper();
	UI.RemoveButton.Button.Text = 'REMOVE ' .. TextureType:upper();

end;

function SetProperty(TextureType, Face, Property, Value)

	-- Make sure the given value is valid
	if not Value then
		return;
	end;

	-- Start a history record
	TrackChange();

	-- Go through each texture
	for _, Texture in pairs(GetTextures(TextureType, Face)) do

		-- Store the state of the texture before modification
		table.insert(HistoryRecord.Before, { Part = Texture.Parent, TextureType = TextureType, Face = Face, [Property] = Texture[Property] });

		-- Create the change request for this texture
		table.insert(HistoryRecord.After, { Part = Texture.Parent, TextureType = TextureType, Face = Face, [Property] = Value });

	end;

	-- Register the changes
	RegisterChange();

end;

function SetTextureId(TextureType, Face, AssetId)
	-- Sets the textures in the selection to the intended, given image asset

	-- Make sure the given asset ID is valid
	if not AssetId then
		return;
	end;

	-- Prepare the change request
	local Changes = {
		Texture = 'rbxassetid://' .. AssetId;
	};

	-- Attempt an image extraction on the given asset
	Core.Try(Core.SyncAPI.Invoke, Core.SyncAPI, 'ExtractImageFromDecal', AssetId)
		:Then(function (ExtractedImage)
			Changes.Texture = 'rbxassetid://' .. ExtractedImage;
		end);

	-- Start a history record
	TrackChange();

	-- Go through each texture
	for _, Texture in pairs(GetTextures(TextureType, Face)) do

		-- Create the history change requests for this texture
		local Before, After = { Part = Texture.Parent, TextureType = TextureType, Face = Face }, { Part = Texture.Parent, TextureType = TextureType, Face = Face };

		-- Gather change information to finish up the history change requests
		for Property, Value in pairs(Changes) do
			Before[Property] = Texture[Property];
			After[Property] = Value;
		end;

		-- Store the state of the texture before modification
		table.insert(HistoryRecord.Before, Before);

		-- Create the change request for this texture
		table.insert(HistoryRecord.After, After);

	end;

	-- Register the changes
	RegisterChange();

end;

function AddTextures(TextureType, Face)

	-- Prepare the change request for the server
	local Changes = {};

	-- Go through the selection
	for _, Part in pairs(Selection.Parts) do

		-- Make sure this part doesn't already have a texture of the same type
		local HasTextures;
		for _, Child in pairs(Part:GetChildren()) do
			if Child.ClassName == TextureType and Child.Face == Face then
				HasTextures = true;
			end;
		end;

		-- Queue a texture to be created for this part, if not already existent
		if not HasTextures then
			table.insert(Changes, { Part = Part, TextureType = TextureType, Face = Face });
		end;

	end;

	-- Send the change request to the server
	local Textures = Core.SyncAPI:Invoke('CreateTextures', Changes);

	-- Put together the history record
	local HistoryRecord = {
		Textures = Textures;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the textures
			Core.SyncAPI:Invoke('Remove', Record.Textures);

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Restore the textures
			Core.SyncAPI:Invoke('UndoRemove', Record.Textures);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

	};

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

function RemoveTextures(TextureType, Face)

	-- Get all the textures in the selection
	local Textures = GetTextures(TextureType, Face);

	-- Create the history record
	local HistoryRecord = {
		Textures = Textures;
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Restore the textures
			Core.SyncAPI:Invoke('UndoRemove', Record.Textures);

			-- Select changed parts
			Selection.Replace(Record.Selection)

		end;

		Apply = function (Record)
			-- Reapplies this change

			-- Select changed parts
			Selection.Replace(Record.Selection)

			-- Remove the textures
			Core.SyncAPI:Invoke('Remove', Record.Textures);

		end;

	};

	-- Send the removal request
	Core.SyncAPI:Invoke('Remove', Textures);

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

function TrackChange()

	-- Start the record
	HistoryRecord = {
		Before = {};
		After = {};
		Selection = Selection.Items;

		Unapply = function (Record)
			-- Reverts this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncTexture', Record.Before);

		end;

		Apply = function (Record)
			-- Applies this change

			-- Select the changed parts
			Selection.Replace(Record.Selection)

			-- Send the change request
			Core.SyncAPI:Invoke('SyncTexture', Record.After);

		end;

	};

end;

function RegisterChange()
	-- Finishes creating the history record and registers it

	-- Make sure there's an in-progress history record
	if not HistoryRecord then
		return;
	end;

	-- Send the change to the server
	Core.SyncAPI:Invoke('SyncTexture', HistoryRecord.After);

	-- Register the record and clear the staging
	Core.History.Add(HistoryRecord);
	HistoryRecord = nil;

end;

-- Return the tool
return TextureTool;
end;
};
G2L_MODULES[G2L["532"]] = {
Closure = function()
    local script = G2L["532"];
Tool = script.Parent.Parent;
Core = require(Tool.Core);

-- Import relevant references
Selection = Core.Selection;
Support = Core.Support;
Security = Core.Security;
Support.ImportServices();

-- Initialize the tool
local WeldTool = {

	Name = 'Weld Tool';
	Color = BrickColor.new 'Really black';

};

-- Container for temporary connections (disconnected automatically)
local Connections = {};

function WeldTool.Equip()
	-- Enables the tool's equipped functionality

	-- Start up our interface
	ShowUI();
	EnableFocusHighlighting();

end;

function WeldTool.Unequip()
	-- Disables the tool's equipped functionality

	-- Clear unnecessary resources
	HideUI();
	ClearConnections();

end;

function ClearConnections()
	-- Clears out temporary connections

	for ConnectionKey, Connection in pairs(Connections) do
		Connection:Disconnect();
		Connections[ConnectionKey] = nil;
	end;

end;

function ShowUI()
	-- Creates and reveals the UI

	-- Reveal UI if already created
	if UI then

		-- Reveal the UI
		UI.Visible = true;

		-- Skip UI creation
		return;

	end;

	-- Create the UI
	UI = Core.Tool.Interfaces.BTWeldToolGUI:Clone();
	UI.Parent = Core.UI;
	UI.Visible = true;

	-- Hook up the buttons
	UI.Interface.WeldButton.MouseButton1Click:Connect(CreateWelds);
	UI.Interface.BreakWeldsButton.MouseButton1Click:Connect(BreakWelds);

end;

function HideUI()
	-- Hides the tool UI

	-- Make sure there's a UI
	if not UI then
		return;
	end;

	-- Hide the UI
	UI.Visible = false;

end;

-- References to reduce indexing time
local GetConnectedParts = Instance.new('Part').GetConnectedParts;
local GetChildren = script.GetChildren;

function GetPartWelds(Part)
	-- Returns any BT-created welds involving `Part`

	local Welds = {};

	-- Get welds stored inside `Part`
	for Weld in pairs(SearchWelds(Part, Part)) do
		Welds[Weld] = true;
	end;

	-- Get welds stored inside connected parts
	for _, ConnectedPart in pairs(GetConnectedParts(Part)) do
		for Weld in pairs(SearchWelds(ConnectedPart, Part)) do
			Welds[Weld] = true;
		end;
	end;

	-- Return all found welds
	return Welds;

end;

function SearchWelds(Haystack, Part)
	-- Searches for and returns BT-created welds in `Haystack` involving `Part`

	local Welds = {};

	-- Search the haystack for welds involving `Part`
	for _, Item in pairs(GetChildren(Haystack)) do

		-- Check if this item is a BT-created weld involving the part
		if Item.Name == 'BTWeld' and Item.ClassName == 'Weld' and
		   (Item.Part0 == Part or Item.Part1 == Part) then

			-- Store weld if valid
			Welds[Item] = true;

		end;

	end;

	-- Return the found welds
	return Welds;

end;

function CreateWelds()
	-- Creates welds for every selected part to the focused part

	-- Determine welding target
	local WeldTarget = (Selection.Focus:IsA 'BasePart' and Selection.Focus) or
		(Selection.Focus:IsA 'Model' and Selection.Focus.PrimaryPart) or
		Selection.Focus:FindFirstChildWhichIsA('BasePart', true)

	-- Send the change request to the server API
	local Welds = Core.SyncAPI:Invoke('CreateWelds', Selection.Parts, WeldTarget)

	-- Update the UI with the number of welds created
	UI.Changes.Text.Text = ('created %s weld%s'):format(#Welds, #Welds == 1 and '' or 's');

	-- Put together the history record
	local HistoryRecord = {
		Welds = Welds;

		Unapply = function (HistoryRecord)
			-- Reverts this change

			-- Remove the welds
			Core.SyncAPI:Invoke('RemoveWelds', HistoryRecord.Welds);

		end;

		Apply = function (HistoryRecord)
			-- Reapplies this change

			-- Restore the welds
			Core.SyncAPI:Invoke('UndoRemovedWelds', HistoryRecord.Welds);

		end;

	};

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

function BreakWelds()
	-- Search for any selection-connecting, BT-created welds and remove them

	local Welds = {};

	-- Find welds in selected parts
	for _, Part in pairs(Selection.Parts) do
		for Weld in pairs(GetPartWelds(Part)) do
			Welds[Weld] = true;
		end;
	end;

	-- Turn weld index into list
	Welds = Support.Keys(Welds);

	-- Send the change request to the server API
	local WeldsRemoved = Core.SyncAPI:Invoke('RemoveWelds', Welds);

	-- Update the UI with the number of welds removed
	UI.Changes.Text.Text = ('removed %s weld%s'):format(WeldsRemoved, WeldsRemoved == 1 and '' or 's');

	-- Put together the history record
	local HistoryRecord = {
		Welds = Welds;

		Unapply = function (HistoryRecord)
			-- Reverts this change

			-- Restore the welds
			Core.SyncAPI:Invoke('UndoRemovedWelds', HistoryRecord.Welds);

		end;

		Apply = function (HistoryRecord)
			-- Reapplies this change

			-- Remove the welds
			Core.SyncAPI:Invoke('RemoveWelds', HistoryRecord.Welds);

		end;

	};

	-- Register the history record
	Core.History.Add(HistoryRecord);

end;

function EnableFocusHighlighting()
	-- Enables automatic highlighting of the focused part in the selection

	-- Only enable focus highlighting in tool mode
	if Core.Mode ~= 'Tool' then
		return;
	end;

	-- Reset all outline colors
	Core.Selection.RecolorOutlines(Core.Selection.Color);

	-- Recolor current focused item
	if Selection.Focus and (#Selection.Parts > 1) then
		Core.Selection.RecolorOutline(Selection.Focus, BrickColor.new('Deep orange'))
	end;

	-- Recolor future focused items
	Connections.FocusHighlighting = Selection.FocusChanged:Connect(function (FocusedItem)

		-- Reset all outline colors
		Core.Selection.RecolorOutlines(Core.Selection.Color);

		-- Recolor newly focused item
		if FocusedItem and (#Selection.Parts > 1) then
			Core.Selection.RecolorOutline(FocusedItem, BrickColor.new('Deep orange'))
		end;

	end);

end;

-- Return the tool
return WeldTool;
end;
};
-- StarterGui.BestOne.Frame1.Credits.LocalScript
local function C_6()
local script = G2L["6"];
	local CreditF = script.Parent.Parent.Parent.CreditsF
	local MainF = script.Parent.Parent.Parent.MainF
	local PlayerF = script.Parent.Parent.Parent.LocalPlayerF
	local HelpF = script.Parent.Parent.Parent.HelpF
	script.Parent.MouseButton1Click:Connect(function() 
		if CreditF.Visible == true then
			CreditF.Visible = false
			MainF.Visible = false
			PlayerF.Visible = false
			HelpF.Visible = false
		else
			CreditF.Visible = true
			MainF.Visible = false
			PlayerF.Visible = false
			HelpF.Visible = false
		end
	end)
end;
task.spawn(C_6);
-- StarterGui.BestOne.Frame1.Main.LocalScript
local function C_9()
local script = G2L["9"];
	local CreditF = script.Parent.Parent.Parent.CreditsF
	local MainF = script.Parent.Parent.Parent.MainF
	local PlayerF = script.Parent.Parent.Parent.LocalPlayerF
	local HelpF = script.Parent.Parent.Parent.HelpF
	script.Parent.MouseButton1Click:Connect(function() 
		if MainF.Visible == true then
			CreditF.Visible = false
			MainF.Visible = false
			PlayerF.Visible = false
			HelpF.Visible = false
		else
			CreditF.Visible = false
			MainF.Visible = true
			PlayerF.Visible = false
			HelpF.Visible = false
		end
	end)
end;
task.spawn(C_9);
-- StarterGui.BestOne.Frame1.LocalP.LocalScript
local function C_c()
local script = G2L["c"];
	local CreditF = script.Parent.Parent.Parent.CreditsF
	local MainF = script.Parent.Parent.Parent.MainF
	local PlayerF = script.Parent.Parent.Parent.LocalPlayerF
	local HelpF = script.Parent.Parent.Parent.HelpF
	script.Parent.MouseButton1Click:Connect(function() 
		if PlayerF.Visible == true then
			CreditF.Visible = false
			MainF.Visible = false
			PlayerF.Visible = false
			HelpF.Visible = false
		else
			CreditF.Visible = false
			MainF.Visible = false
			PlayerF.Visible = true
			HelpF.Visible = false
		end
	end)
end;
task.spawn(C_c);
-- StarterGui.BestOne.Frame1.Help.LocalScript
local function C_f()
local script = G2L["f"];
	local CreditF = script.Parent.Parent.Parent.CreditsF
	local MainF = script.Parent.Parent.Parent.MainF
	local PlayerF = script.Parent.Parent.Parent.LocalPlayerF
	local HelpF = script.Parent.Parent.Parent.HelpF
	script.Parent.MouseButton1Click:Connect(function() 
		if HelpF.Visible == true then
			CreditF.Visible = false
			MainF.Visible = false
			PlayerF.Visible = false
			HelpF.Visible = false
		else
			CreditF.Visible = false
			MainF.Visible = false
			PlayerF.Visible = false
			HelpF.Visible = true
		end
	end)
end;
task.spawn(C_f);
-- StarterGui.BestOne.MainF.Fling.LocalScript
local function C_16()
local script = G2L["16"];
	script.Parent.Text = "Fling GUI"
	script.Parent.MouseButton1Click:Connect(function() 
		script.Parent.Parent.Parent.Top.Visible = true
	end)
end;
task.spawn(C_16);
-- StarterGui.BestOne.MainF.RESET.LocalScript
local function C_1a()
local script = G2L["1a"];
	script.Parent.MouseButton1Click:connect(function() 
		game.Players.LocalPlayer.Character:BreakJoints()
		script.InstantRespawn.Parent = game.ServerScriptService
	end)
	
end;
task.spawn(C_1a);
-- StarterGui.BestOne.MainF.Fly.LocalScript
local function C_20()
local script = G2L["20"];
	script.Parent.MouseButton1Click:Connect(function()
		local main = Instance.new("ScreenGui")
		local Frame = Instance.new("Frame")
		local up = Instance.new("TextButton")
		local down = Instance.new("TextButton")
		local onof = Instance.new("TextButton")
		local TextLabel = Instance.new("TextLabel")
		local plus = Instance.new("TextButton")
		local speed = Instance.new("TextLabel")
		local mine = Instance.new("TextButton")
		local closebutton = Instance.new("TextButton")
		local mini = Instance.new("TextButton")
		local mini2 = Instance.new("TextButton")
	
		main.Name = "main"
		main.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
		main.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		main.ResetOnSpawn = false
	
		Frame.Parent = main
		Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		Frame.BorderColor3 = Color3.fromRGB(255, 0, 0)
		Frame.Position = UDim2.new(0.100320168, 0, 0.379746825, 0)
		Frame.Size = UDim2.new(0, 191, 0, 58)
		task.spawn(function()
			while true do
				for hue = 0, 255, 4 do
					Frame.BorderColor3 = Color3.fromHSV(hue/256, 1, 1)
					Frame.BackgroundColor3 = Color3.fromHSV(hue/256, .5, .8)
					wait(0.055)
				end
			end
		end)
	
		up.Name = "up"
		up.Parent = Frame
		up.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		up.Size = UDim2.new(0, 44, 0, 28)
		up.Font = Enum.Font.SourceSans
		up.Text = "↑"
		up.TextColor3 = Color3.fromRGB(0, 255, 0)
		up.TextSize = 17.000
	
		down.Name = "down"
		down.Parent = Frame
		down.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		down.Position = UDim2.new(0, 0, 0.491228074, 0)
		down.Size = UDim2.new(0, 44, 0, 28)
		down.Font = Enum.Font.SourceSans
		down.Text = "↓"
		down.TextColor3 = Color3.fromRGB(255, 0, 0)
		down.TextSize = 17.000
	
		onof.Name = "onof"
		onof.Name = "onof"
		onof.Parent = Frame
		onof.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		onof.Position = UDim2.new(0.702823281, 0, 0.491228074, 0)
		onof.Size = UDim2.new(0, 55.4, 0, 28)
		onof.Font = Enum.Font.SourceSans
		onof.Text = "FLY"
		onof.TextColor3 = Color3.fromRGB(0, 255, 255)
		onof.TextSize = 14.700
	
		TextLabel.Parent = Frame
		TextLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		TextLabel.Position = UDim2.new(0.469327301, 0, 0, 0)
		TextLabel.Size = UDim2.new(0, 100, 0, 28)
		TextLabel.Font = Enum.Font.SourceSans
		TextLabel.Text = "GUI v1.0.6 EN"
		TextLabel.TextColor3 = Color3.new(0, 255, 0) 
		TextLabel.TextScaled = true
		TextLabel.TextSize = 13.250
		TextLabel.TextWrapped = true
	
		plus.Name = "plus"
		plus.Parent = Frame
		plus.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		plus.Position = UDim2.new(0.231578946, 0, 0, 0)
		plus.Size = UDim2.new(0, 45, 0, 28)
		plus.Font = Enum.Font.SourceSans
		plus.Text = "+"
		plus.TextColor3 = Color3.fromRGB(0, 255, 0)
		plus.TextScaled = true
		plus.TextSize = 14.000
		plus.TextWrapped = true
	
		speed.Name = "speed"
		speed.Parent = Frame
		speed.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		speed.Position = UDim2.new(0.468421042, 0, 0.491228074, 0)
		speed.Size = UDim2.new(0, 44, 0, 28)
		speed.Font = Enum.Font.SourceSans
		speed.Text = "1"
		speed.TextColor3 = Color3.fromRGB(255, 255, 0)
		speed.TextScaled = true
		speed.TextSize = 14.000
		speed.TextWrapped = true
	
		mine.Name = "mine"
		mine.Parent = Frame
		mine.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		mine.Position = UDim2.new(0.231578946, 0, 0.491228074, 0)
		mine.Size = UDim2.new(0, 44, 0, 28)
		mine.Font = Enum.Font.SourceSans
		mine.Text = "—"
		mine.TextColor3 = Color3.fromRGB(255, 0, 0)
		mine.TextScaled = true
		mine.TextSize = 14.000
		mine.TextWrapped = true
	
		closebutton.Name = "Close"
		closebutton.Parent = main.Frame
		closebutton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		closebutton.Font = "SourceSans"
		closebutton.Size = UDim2.new(0, 45, 0, 28)
		closebutton.Text = "X"
		closebutton.TextSize = 30
		closebutton.Position =  UDim2.new(0, 0, -1, 27)
	
		mini.Name = "minimize"
		mini.Parent = main.Frame
		mini.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		mini.Font = "SourceSans"
		mini.Size = UDim2.new(0, 45, 0, 28)
		mini.Text = "—"
		mini.TextSize = 40
		mini.Position = UDim2.new(0, 44, -1, 27)
	
		mini2.Name = "minimize2"
		mini2.Parent = main.Frame
		mini2.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		mini2.Font = "SourceSans"
		mini2.Size = UDim2.new(0, 45, 0, 28)
		mini2.Text = "+"
		mini2.TextSize = 40
		mini2.Position = UDim2.new(0, 44, -1, 57)
		mini2.Visible = false
	
		speeds = 1
	
		local speaker = game:GetService("Players").LocalPlayer
	
		local chr = game.Players.LocalPlayer.Character
		local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
	
		nowe = false
	
		game:GetService("StarterGui"):SetCore("SendNotification", { 
			Title = "FLY GUI";
			Text = "by Liver zMods";
			Icon = "rbxthumb://type=Asset&id=11935868660&w=150&h=150"})
		Duration = 15;
	
		game:GetService("StarterGui"):SetCore("SendNotification", { 
			Title = "GUI OPEN";
			Text = "Gui Fly ︎︎✅";
			Icon = "rbxthumb://type=Asset&id=11935883214&w=150&h=150"})
		Duration = 10;
	
		game:GetService("StarterGui"):SetCore("SendNotification", { 
			Title = "By Liver zMods";
			Text = "created by Brasileiro!";
			Icon = "rbxthumb://type=Asset&id=11935866652&w=150&h=150"})
		Duration = 30;
	
		Frame.Active = true -- main = gui
		Frame.Draggable = true
	
		onof.MouseButton1Down:connect(function()
	
			if nowe == true then
				nowe = false
	
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,true)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,true)
				speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
			else 
				nowe = true
	
	
	
				for i = 1, speeds do
					spawn(function()
	
						local hb = game:GetService("RunService").Heartbeat	
	
	
						tpwalking = true
						local chr = game.Players.LocalPlayer.Character
						local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
						while tpwalking and hb:Wait() and chr and hum and hum.Parent do
							if hum.MoveDirection.Magnitude > 0 then
								chr:TranslateBy(hum.MoveDirection)
							end
						end
	
					end)
				end
				game.Players.LocalPlayer.Character.Animate.Disabled = true
				local Char = game.Players.LocalPlayer.Character
				local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
	
				for i,v in next, Hum:GetPlayingAnimationTracks() do
					v:AdjustSpeed(0)
				end
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
				speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
				speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
			end
	
	
	
	
			if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R6 then
	
	
	
				local plr = game.Players.LocalPlayer
				local torso = plr.Character.Torso
				local flying = true
				local deb = true
				local ctrl = {f = 0, b = 0, l = 0, r = 0}
				local lastctrl = {f = 0, b = 0, l = 0, r = 0}
				local maxspeed = 50
				local speed = 0
	
	
				local bg = Instance.new("BodyGyro", torso)
				bg.P = 9e4
				bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
				bg.cframe = torso.CFrame
				local bv = Instance.new("BodyVelocity", torso)
				bv.velocity = Vector3.new(0,0.1,0)
				bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
				if nowe == true then
					plr.Character.Humanoid.PlatformStand = true
				end
				while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
					game:GetService("RunService").RenderStepped:Wait()
	
					if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
						speed = speed+.5+(speed/maxspeed)
						if speed > maxspeed then
							speed = maxspeed
						end
					elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
						speed = speed-1
						if speed < 0 then
							speed = 0
						end
					end
					if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
						lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
					elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
					else
						bv.velocity = Vector3.new(0,0,0)
					end
					--	game.Players.LocalPlayer.Character.Animate.Disabled = true
					bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
				end
				ctrl = {f = 0, b = 0, l = 0, r = 0}
				lastctrl = {f = 0, b = 0, l = 0, r = 0}
				speed = 0
				bg:Destroy()
				bv:Destroy()
				plr.Character.Humanoid.PlatformStand = false
				game.Players.LocalPlayer.Character.Animate.Disabled = false
				tpwalking = false
	
	
	
	
			else
				local plr = game.Players.LocalPlayer
				local UpperTorso = plr.Character.UpperTorso
				local flying = true
				local deb = true
				local ctrl = {f = 0, b = 0, l = 0, r = 0}
				local lastctrl = {f = 0, b = 0, l = 0, r = 0}
				local maxspeed = 50
				local speed = 0
	
	
				local bg = Instance.new("BodyGyro", UpperTorso)
				bg.P = 9e4
				bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
				bg.cframe = UpperTorso.CFrame
				local bv = Instance.new("BodyVelocity", UpperTorso)
				bv.velocity = Vector3.new(0,0.1,0)
				bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
				if nowe == true then
					plr.Character.Humanoid.PlatformStand = true
				end
				while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
					wait()
	
					if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
						speed = speed+.5+(speed/maxspeed)
						if speed > maxspeed then
							speed = maxspeed
						end
					elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
						speed = speed-1
						if speed < 0 then
							speed = 0
						end
					end
					if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
						lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
					elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
						bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
					else
						bv.velocity = Vector3.new(0,0,0)
					end
	
					bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
				end
				ctrl = {f = 0, b = 0, l = 0, r = 0}
				lastctrl = {f = 0, b = 0, l = 0, r = 0}
				speed = 0
				bg:Destroy()
				bv:Destroy()
				plr.Character.Humanoid.PlatformStand = false
				game.Players.LocalPlayer.Character.Animate.Disabled = false
				tpwalking = false
	
	
	
			end
	
	
	
	
	
		end)
	
		local tis
	
		up.MouseButton1Down:connect(function()
			tis = up.MouseEnter:connect(function()
				while tis do
					wait()
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,1,0)
				end
			end)
		end)
	
		up.MouseLeave:connect(function()
			if tis then
				tis:Disconnect()
				tis = nil
			end
		end)
	
		local dis
	
		down.MouseButton1Down:connect(function()
			dis = down.MouseEnter:connect(function()
				while dis do
					wait()
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,-1,0)
				end
			end)
		end)
	
		down.MouseLeave:connect(function()
			if dis then
				dis:Disconnect()
				dis = nil
			end
		end)
	
	
		game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(char)
			wait(0.7)
			game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
			game.Players.LocalPlayer.Character.Animate.Disabled = false
	
		end)
	
	
		plus.MouseButton1Down:connect(function()
			speeds = speeds + 1
			speed.Text = speeds
			if nowe == true then
	
	
				tpwalking = false
				for i = 1, speeds do
					spawn(function()
	
						local hb = game:GetService("RunService").Heartbeat	
	
	
						tpwalking = true
						local chr = game.Players.LocalPlayer.Character
						local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
						while tpwalking and hb:Wait() and chr and hum and hum.Parent do
							if hum.MoveDirection.Magnitude > 0 then
								chr:TranslateBy(hum.MoveDirection)
							end
						end
	
					end)
				end
			end
		end)
		mine.MouseButton1Down:connect(function()
			if speeds == 1 then
				speed.Text = 'cannot be less than 1'
				wait(1)
				speed.Text = speeds
			else
				speeds = speeds - 1
				speed.Text = speeds
				if nowe == true then
					tpwalking = false
					for i = 1, speeds do
						spawn(function()
	
							local hb = game:GetService("RunService").Heartbeat	
	
	
							tpwalking = true
							local chr = game.Players.LocalPlayer.Character
							local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
							while tpwalking and hb:Wait() and chr and hum and hum.Parent do
								if hum.MoveDirection.Magnitude > 0 then
									chr:TranslateBy(hum.MoveDirection)
								end
							end
	
						end)
					end
				end
			end
		end)
	
		closebutton.MouseButton1Click:Connect(function()
			main:Destroy()
		end)
	
		mini.MouseButton1Click:Connect(function()
			up.Visible = false
			down.Visible = false
			onof.Visible = false
			plus.Visible = false
			speed.Visible = false
			mine.Visible = false
			mini.Visible = false
			mini2.Visible = true
			main.Frame.BackgroundTransparency = 1
			closebutton.Position =  UDim2.new(0, 0, -1, 57)
		end)
	
		mini2.MouseButton1Click:Connect(function()
			up.Visible = true
			down.Visible = true
			onof.Visible = true
			plus.Visible = true
			speed.Visible = true
			mine.Visible = true
			mini.Visible = true
			mini2.Visible = false
			main.Frame.BackgroundTransparency = 0 
			closebutton.Position =  UDim2.new(0, 0, -1, 27)
		end)
	
	end)
end;
task.spawn(C_20);
-- StarterGui.BestOne.MainF.INFINITE.LocalScript
local function C_24()
local script = G2L["24"];
	local InfiniteJumpEnabled = true
	script.Parent.MouseButton1Click:Connect(function(click)
		game:GetService("UserInputService").JumpRequest:Connect(function() 
			if InfiniteJumpEnabled then
				game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
			end
		end)
	end)
end;
task.spawn(C_24);
-- StarterGui.BestOne.MainF.NOCLIP.LocalScript
local function C_2a()
local script = G2L["2a"];
	local noclip = false
	local player = game.Players.LocalPlayer
	local character = player.Character
	
	local mouse = script.Parent
	
	mouse.MouseButton1Click:Connect(function()
		if noclip == true then
			noclip = false
		else
			noclip = true
		end
		while true do
		player = game.Players.LocalPlayer
		character = player.Character
	    character.Humanoid.AutoJumpEnabled = false
	
		if noclip == true then
			for _, v in pairs(character:GetDescendants()) do
				pcall(function()
					if v:IsA("BasePart") then
						v.CanCollide = false
					end
				end)
				pcall(function()
					if v:IsA("Tool") then
						v.CanCollide = false
					end
				end)
				pcall(function()
					if v:IsA("Part") then
						v.CanCollide = false
					end
				end)
				pcall(function()
					if v:IsA("Platform") then
						v.CanCollide = false
					end
				end)
				pcall(function()
					if v:FindFirstChild("HumanoidRootPart") then
						v.CanCollide = false
					end
				end)
			end
		end
		if noclip == false then
			for _, v in pairs(character:GetDescendants()) do
				pcall(function()
					if v:IsA("BasePart") then
						v.CanCollide = true
					end
				end)
				pcall(function()
					if v:IsA("Tool") then
						v.CanCollide = true
					end
				end)
				pcall(function()
					if v:IsA("Part") then
						v.CanCollide = true
					end
				end)
				pcall(function()
					if v:IsA("Platform") then
						v.CanCollide = true
					end
				end)
				pcall(function()
					if v:FindFirstChild("HumanoidRootPart") then
						v.CanCollide = false
					end
				end)
			end
		end
		game:GetService("RunService").Stepped:wait()
	end
	end)
	
	
end;
task.spawn(C_2a);
-- StarterGui.BestOne.Top.Main.TextButton.LocalScript
local function C_30()
local script = G2L["30"];
	local TextButton = script.Parent
	local TextBox = script.Parent.Parent.TextBox
	local lp = game:FindService("Players").LocalPlayer
	
	local function gplr(String)
		local Found = {}
		local strl = String:lower()
		if strl == "all" then
			for i,v in pairs(game:FindService("Players"):GetPlayers()) do
				table.insert(Found,v)
			end
		elseif strl == "others" then
			for i,v in pairs(game:FindService("Players"):GetPlayers()) do
				if v.Name ~= lp.Name then
					table.insert(Found,v)
				end
			end 
		elseif strl == "me" then
			for i,v in pairs(game:FindService("Players"):GetPlayers()) do
				if v.Name == lp.Name then
					table.insert(Found,v)
				end
			end 
		else
			for i,v in pairs(game:FindService("Players"):GetPlayers()) do
				if v.Name:lower():sub(1, #String) == String:lower() then
					table.insert(Found,v)
				end
			end 
		end
		return Found 
	end
	
	local function notif(str,dur)
		game:FindService("StarterGui"):SetCore("SendNotification", {
			Title = "yeet gui",
			Text = str,
			Icon = "rbxassetid://2005276185",
			Duration = dur or 3
		})
	end
	
	TextButton.MouseButton1Click:Connect(function()
		local Target = gplr(TextBox.Text)
		if Target[1] then
			Target = Target[1]
	
			local Thrust = Instance.new('BodyThrust', lp.Character.HumanoidRootPart)
			Thrust.Force = Vector3.new(9999,9999,9999)
			Thrust.Name = "YeetForce"
			repeat
				lp.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame
				Thrust.Location = Target.Character.HumanoidRootPart.Position
				game:FindService("RunService").Heartbeat:wait()
			until not Target.Character:FindFirstChild("Head")
		else
			notif("Invalid player")
		end
	end)
	
end;
task.spawn(C_30);
-- StarterGui.BestOne.Top.LocalScript
local function C_31()
local script = G2L["31"];
	script.Parent.Draggable = true
	script.Parent.Active = true
end;
task.spawn(C_31);
-- StarterGui.BestOne.Top.X.LocalScript
local function C_34()
local script = G2L["34"];
	script.Parent.MouseButton1Click:Connect(function() 
		script.Parent.Parent.Visible = false
	end)
end;
task.spawn(C_34);
-- StarterGui.BestOne.Open.LocalScript
local function C_36()
local script = G2L["36"];
	local Frame1 = script.Parent.Parent.Frame1
	local CreditF = script.Parent.Parent.CreditsF
	local MainF = script.Parent.Parent.MainF
	script.Parent.MouseButton1Click:Connect(function()
		if Frame1.Visible == true then
			Frame1.Visible = false
			CreditF.Visible = false
			MainF.Visible = false
		else
			Frame1.Visible = true
			CreditF.Visible = true
			MainF.Visible = false
		end
	end)
end;
task.spawn(C_36);
-- StarterGui.BestOne.KeyF.Verify.LocalScript
local function C_40()
local script = G2L["40"];
	local key = script.Parent.Parent.TextBox
	script.Parent.MouseButton1Click:Connect(function() 
		if key.Text == "infinitekeyFerModz" then
			script.Parent.Parent.Visible = false
			script.Parent.Parent.Parent.Open.Visible = true
		else
			key.Text = ""
			key.Text = "WRONG KEY"
			wait(0.2)
			key.Text = ""
			key.PlaceholderText = "Place key here"
		end
	end)
	
end;
task.spawn(C_40);
-- StarterGui.BestOne.KeyF.KillFrame.LocalScript
local function C_46()
local script = G2L["46"];
	script.Parent.MouseButton1Click:Connect(function() 
		script.Parent.Parent.Parent:Destroy()
	end)
end;
task.spawn(C_46);
-- StarterGui.BestOne.KeyF.Link.LocalScript
local function C_48()
local script = G2L["48"];
	while true do
		script.Parent.Text = "https://pastebin.com/bgRQUA2D"
		wait()
	end
	
end;
task.spawn(C_48);
-- StarterGui.BestOne.KeyF.Link.LocalScript
local function C_4b()
local script = G2L["4b"];
	while true do
		script.Parent.Text = "https://pastebin.com/bgRQUA2D"
		wait()
	end
	
end;
task.spawn(C_4b);
-- StarterGui.BestOne.KeyF.Link.LocalScript
local function C_4c()
local script = G2L["4c"];
	while true do
		script.Parent.Text = "https://pastebin.com/bgRQUA2D"
		wait()
	end
	
end;
task.spawn(C_4c);
-- StarterGui.BestOne.KeyF.Link.LocalScript
local function C_4d()
local script = G2L["4d"];
	while true do
		script.Parent.Text = "https://pastebin.com/bgRQUA2D"
		wait()
	end
	
end;
task.spawn(C_4d);
-- StarterGui.BestOne.KeyF.LocalScript
local function C_4e()
local script = G2L["4e"];
	script.Parent.Draggable = true
	script.Parent.Active = true
end;
task.spawn(C_4e);
-- StarterGui.BestOne.LocalPlayerF.-.LocalScript
local function C_54()
local script = G2L["54"];
	local label = script.Parent.Parent.TextLabel
	
	
	
	script.Parent.MouseButton1Click:Connect(function()
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed -5
		label.Text = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed
	end)
end;
task.spawn(C_54);
-- StarterGui.BestOne.LocalPlayerF.+.LocalScript
local function C_57()
local script = G2L["57"];
	local label = script.Parent.Parent.TextLabel
	
	
	
	script.Parent.MouseButton1Click:Connect(function()
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed +5
		label.Text = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed
	end)
end;
task.spawn(C_57);
-- StarterGui.BestOne.LocalPlayerF.Clicktp.LocalScript
local function C_59()
local script = G2L["59"];
	script.Parent.MouseButton1Click:Connect(function()
		mouse = game.Players.LocalPlayer:GetMouse()
		tool = Instance.new("Tool")
		tool.RequiresHandle = false
		tool.Name = "Click Teleport"
		tool.Activated:connect(function()
			local pos = mouse.Hit+Vector3.new(0,2.5,0)
			pos = CFrame.new(pos.X,pos.Y,pos.Z)
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
		end)
		tool.Parent = game.Players.LocalPlayer.Backpack
	end)
end;
task.spawn(C_59);
-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript
local function C_5b()
local script = G2L["5b"];
	script.Parent.MouseButton1Click:Connect(function() 
		local tool = script["F3X Btools!"]
		tool:Clone()
		tool.Parent = game.Players.LocalPlayer.Backpack
	end)
end;
task.spawn(C_5b);
-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.SyncAPI.LocalEndpoint
local function C_6a()
local script = G2L["6a"];
	local SyncAPI = script.Parent;
	local Tool = SyncAPI.Parent;
	local ServerEndpoint = SyncAPI:WaitForChild 'ServerEndpoint';
	local RunService = game:GetService 'RunService'
	
	-- Provide functionality to the local API endpoint instance
	SyncAPI.OnInvoke = function (...)
	
		-- Route requests to server endpoint if in filter mode
		if not RunService:IsServer() then
			return ServerEndpoint:InvokeServer(...)
	
		-- Perform requests locally if working locally
		else
			SyncModule = require(SyncAPI:WaitForChild 'SyncModule')
			return SyncModule.PerformAction(game.Players.LocalPlayer, ...)
		end;
	
	end;
end;
task.spawn(C_6a);
-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loaded.ReplicationListener
local function C_6e()
local script = G2L["6e"];
	local Indicator = script.Parent;
	local Tool = Indicator.Parent;
	
	-- Wait for tool to load completely
	local TotalDescendants = (Indicator:WaitForChild 'DescendantCount').Value;
	while not (#Tool:GetDescendants() >= TotalDescendants) do
		wait(0.1);
	end;
	
	-- Set load indicator to true upon load completion
	Indicator.Value = true;
end;
task.spawn(C_6e);
-- StarterGui.BestOne.LocalPlayerF.Btools.LocalScript.F3X Btools!.Loader.ToolInitializer
local function C_51d()
local script = G2L["51d"];
	if not plugin then
	    require(script.Parent)
	end
end;
task.spawn(C_51d);
-- StarterGui.BestOne.HelpF.TextLabel.LocalScript
local function C_536()
local script = G2L["536"];
	while true do 
		script.Parent.Text = "https://discord.com/invite/PfBP9kBF"
		wait()
	end
end;
task.spawn(C_536);

return G2L["1"], require;
