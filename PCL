-- lua

if game.CoreGui:FindFirstChild("LuaEncoderPC") then
	game.CoreGui:FindFirstChild("LuaEncoderPC"):Destroy()
end
task.wait()

-- Instances: 171 | Scripts: 13 | Modules: 7
local G2L = {};

-- StarterGui.LuaEncoderPC
G2L["1"] = Instance.new("ScreenGui", game.CoreGui);
G2L["1"]["Name"] = [[LuaEncoderPC]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
G2L["1"]["ResetOnSpawn"] = false;

-- StarterGui.LuaEncoderPC.Frame
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["Visible"] = false;
G2L["2"]["ZIndex"] = 999999999;
G2L["2"]["BorderSizePixel"] = 0;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["2"]["Size"] = UDim2.new(0.5347, 0, 0.44798, 0);
G2L["2"]["Position"] = UDim2.new(0.01569, 0, 0.02972, 0);
G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);

-- StarterGui.LuaEncoderPC.Frame.ImageLabel
G2L["3"] = Instance.new("ImageLabel", G2L["2"]);
G2L["3"]["ZIndex"] = 999999999;
G2L["3"]["BorderSizePixel"] = 0;
G2L["3"]["SelectionOrder"] = 6;
G2L["3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3"]["Image"] = [[rbxassetid://17546664635]];
G2L["3"]["Size"] = UDim2.new(0.10276, 0, 0.15285, 0);
G2L["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["BackgroundTransparency"] = 1;
G2L["3"]["Position"] = UDim2.new(-0, 0, 0, 0);

-- StarterGui.LuaEncoderPC.Frame.UIStroke
G2L["4"] = Instance.new("UIStroke", G2L["2"]);
G2L["4"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["4"]["Thickness"] = 3;
G2L["4"]["Color"] = Color3.fromRGB(79, 12, 101);

-- StarterGui.LuaEncoderPC.Frame.Execute
G2L["5"] = Instance.new("TextButton", G2L["2"]);
G2L["5"]["BorderSizePixel"] = 0;
G2L["5"]["TextSize"] = 14;
G2L["5"]["SelectionOrder"] = 6;
G2L["5"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5"]["ZIndex"] = 999999999;
G2L["5"]["Size"] = UDim2.new(0.179, 0, 0.14112, 0);
G2L["5"]["Name"] = [[Execute]];
G2L["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5"]["Text"] = [[Execute]];
G2L["5"]["Position"] = UDim2.new(0.03038, 0, 0.81361, 0);

-- StarterGui.LuaEncoderPC.Frame.Execute.UIStroke
G2L["6"] = Instance.new("UIStroke", G2L["5"]);
G2L["6"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["6"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Execute.UICorner
G2L["7"] = Instance.new("UICorner", G2L["5"]);


-- StarterGui.LuaEncoderPC.Frame.Clear
G2L["8"] = Instance.new("TextButton", G2L["2"]);
G2L["8"]["BorderSizePixel"] = 0;
G2L["8"]["TextSize"] = 14;
G2L["8"]["SelectionOrder"] = 6;
G2L["8"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8"]["ZIndex"] = 999999999;
G2L["8"]["Size"] = UDim2.new(0.18421, 0, 0.14112, 0);
G2L["8"]["Name"] = [[Clear]];
G2L["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8"]["Text"] = [[Clear]];
G2L["8"]["Position"] = UDim2.new(0.22479, 0, 0.81361, 0);

-- StarterGui.LuaEncoderPC.Frame.Clear.UIStroke
G2L["9"] = Instance.new("UIStroke", G2L["8"]);
G2L["9"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["9"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Clear.UICorner
G2L["a"] = Instance.new("UICorner", G2L["8"]);


-- StarterGui.LuaEncoderPC.Frame.Attach
G2L["b"] = Instance.new("TextButton", G2L["2"]);
G2L["b"]["BorderSizePixel"] = 0;
G2L["b"]["TextSize"] = 14;
G2L["b"]["SelectionOrder"] = 6;
G2L["b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b"]["ZIndex"] = 999999999;
G2L["b"]["Size"] = UDim2.new(0.16762, 0, 0.14112, 0);
G2L["b"]["Name"] = [[Attach]];
G2L["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b"]["Text"] = [[Inject]];
G2L["b"]["Position"] = UDim2.new(0.82991, 0, 0.81361, 0);

-- StarterGui.LuaEncoderPC.Frame.Attach.UIStroke
G2L["c"] = Instance.new("UIStroke", G2L["b"]);
G2L["c"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["c"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Attach.UICorner
G2L["d"] = Instance.new("UICorner", G2L["b"]);


-- StarterGui.LuaEncoderPC.Frame.Values
G2L["e"] = Instance.new("Folder", G2L["2"]);
G2L["e"]["Name"] = [[Values]];

-- StarterGui.LuaEncoderPC.Frame.Values.Attached
G2L["f"] = Instance.new("BoolValue", G2L["e"]);
G2L["f"]["Name"] = [[Attached]];

-- StarterGui.LuaEncoderPC.Frame.Values.Attaching
G2L["10"] = Instance.new("BoolValue", G2L["e"]);
G2L["10"]["Name"] = [[Attaching]];

-- StarterGui.LuaEncoderPC.Frame.Close
G2L["11"] = Instance.new("TextButton", G2L["2"]);
G2L["11"]["BorderSizePixel"] = 0;
G2L["11"]["TextSize"] = 24;
G2L["11"]["SelectionOrder"] = 6;
G2L["11"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["11"]["ZIndex"] = 999999999;
G2L["11"]["Size"] = UDim2.new(0.08071, 0, 0.12269, 0);
G2L["11"]["Name"] = [[Close]];
G2L["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["Text"] = [[X]];
G2L["11"]["Position"] = UDim2.new(0.91682, 0, -0, 0);

-- StarterGui.LuaEncoderPC.Frame.Close.UIStroke
G2L["12"] = Instance.new("UIStroke", G2L["11"]);
G2L["12"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["12"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Close.UICorner
G2L["13"] = Instance.new("UICorner", G2L["11"]);


-- StarterGui.LuaEncoderPC.Frame.Title
G2L["14"] = Instance.new("TextLabel", G2L["2"]);
G2L["14"]["ZIndex"] = 999999999;
G2L["14"]["BorderSizePixel"] = 0;
G2L["14"]["SelectionOrder"] = 6;
G2L["14"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14"]["TextSize"] = 14;
G2L["14"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14"]["BackgroundTransparency"] = 1;
G2L["14"]["Size"] = UDim2.new(0.69278, 0, 0.15285, 0);
G2L["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14"]["Text"] = [[Lua Encoder - vRBX - v27.5]];
G2L["14"]["Name"] = [[Title]];
G2L["14"]["Position"] = UDim2.new(0.16456, 0, -0, 0);

-- StarterGui.LuaEncoderPC.Frame.Fire
G2L["15"] = Instance.new("TextButton", G2L["2"]);
G2L["15"]["BorderSizePixel"] = 0;
G2L["15"]["TextSize"] = 14;
G2L["15"]["SelectionOrder"] = 6;
G2L["15"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15"]["ZIndex"] = 999999999;
G2L["15"]["Size"] = UDim2.new(0.17423, 0, 0.14112, 0);
G2L["15"]["Name"] = [[Fire]];
G2L["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["Text"] = [[Script Hub]];
G2L["15"]["Position"] = UDim2.new(0.62573, 0, 0.81361, 0);

-- StarterGui.LuaEncoderPC.Frame.Fire.UIStroke
G2L["16"] = Instance.new("UIStroke", G2L["15"]);
G2L["16"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["16"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Fire.UICorner
G2L["17"] = Instance.new("UICorner", G2L["15"]);


-- StarterGui.LuaEncoderPC.Frame.Credits
G2L["18"] = Instance.new("TextButton", G2L["2"]);
G2L["18"]["BorderSizePixel"] = 0;
G2L["18"]["TextSize"] = 14;
G2L["18"]["SelectionOrder"] = 6;
G2L["18"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18"]["ZIndex"] = 999999999;
G2L["18"]["Size"] = UDim2.new(0.10137, 0, 0.16408, 0);
G2L["18"]["Name"] = [[Credits]];
G2L["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["Text"] = [[Credits]];
G2L["18"]["Position"] = UDim2.new(0.88861, 0, 0.21646, 0);

-- StarterGui.LuaEncoderPC.Frame.Credits.UIStroke
G2L["19"] = Instance.new("UIStroke", G2L["18"]);
G2L["19"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["19"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Credits.UICorner
G2L["1a"] = Instance.new("UICorner", G2L["18"]);


-- StarterGui.LuaEncoderPC.Frame.Main
G2L["1b"] = Instance.new("LocalScript", G2L["2"]);
G2L["1b"]["Name"] = [[Main]];

-- StarterGui.LuaEncoderPC.Frame.ScrollingFrame
G2L["1c"] = Instance.new("ScrollingFrame", G2L["2"]);
G2L["1c"]["Active"] = true;
G2L["1c"]["ZIndex"] = 999999999;
G2L["1c"]["BorderSizePixel"] = 0;
G2L["1c"]["CanvasSize"] = UDim2.new(2, 0, 999, 0);
G2L["1c"]["SelectionOrder"] = 6;
G2L["1c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c"]["Size"] = UDim2.new(0.84151, 0, 0.575, 0);
G2L["1c"]["Position"] = UDim2.new(0.03155, 0, 0.21646, 0);
G2L["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c"]["BackgroundTransparency"] = 1;

-- StarterGui.LuaEncoderPC.Frame.ScrollingFrame.TextBox
G2L["1d"] = Instance.new("TextBox", G2L["1c"]);
G2L["1d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d"]["PlaceholderColor3"] = Color3.fromRGB(255, 0, 0);
G2L["1d"]["ZIndex"] = 999999999;
G2L["1d"]["BorderSizePixel"] = 0;
G2L["1d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1d"]["TextWrapped"] = true;
G2L["1d"]["TextSize"] = 14;
G2L["1d"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1d"]["BackgroundColor3"] = Color3.fromRGB(68, 68, 68);
G2L["1d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d"]["RichText"] = true;
G2L["1d"]["MultiLine"] = true;
G2L["1d"]["ClearTextOnFocus"] = false;
G2L["1d"]["PlaceholderText"] = [[-- print("Lua Encoder")]];
G2L["1d"]["Size"] = UDim2.new(3.086, 0, 3.08584, 0);
G2L["1d"]["Position"] = UDim2.new(0, 0, -0, 0);
G2L["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d"]["Text"] = [[]];

-- StarterGui.LuaEncoderPC.Frame.ScrollingFrame.TextBox.UICorner
G2L["1e"] = Instance.new("UICorner", G2L["1d"]);


-- StarterGui.LuaEncoderPC.Frame.ScrollingFrame.UIStroke
G2L["1f"] = Instance.new("UIStroke", G2L["1c"]);
G2L["1f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["1f"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.ScrollingFrame.UICorner
G2L["20"] = Instance.new("UICorner", G2L["1c"]);


-- StarterGui.LuaEncoderPC.Frame.About
G2L["21"] = Instance.new("TextButton", G2L["2"]);
G2L["21"]["BorderSizePixel"] = 0;
G2L["21"]["TextSize"] = 14;
G2L["21"]["SelectionOrder"] = 6;
G2L["21"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["21"]["ZIndex"] = 999999999;
G2L["21"]["Size"] = UDim2.new(0.10137, 0, 0.15617, 0);
G2L["21"]["Name"] = [[About]];
G2L["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21"]["Text"] = [[About]];
G2L["21"]["Position"] = UDim2.new(0.88861, 0, 0.42115, 0);

-- StarterGui.LuaEncoderPC.Frame.About.UIStroke
G2L["22"] = Instance.new("UIStroke", G2L["21"]);
G2L["22"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["22"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.About.UICorner
G2L["23"] = Instance.new("UICorner", G2L["21"]);


-- StarterGui.LuaEncoderPC.Frame.Settings
G2L["24"] = Instance.new("TextButton", G2L["2"]);
G2L["24"]["BorderSizePixel"] = 0;
G2L["24"]["TextSize"] = 14;
G2L["24"]["SelectionOrder"] = 6;
G2L["24"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["24"]["ZIndex"] = 999999999;
G2L["24"]["Size"] = UDim2.new(0.10137, 0, 0.15954, 0);
G2L["24"]["Name"] = [[Settings]];
G2L["24"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["Text"] = [[Settings]];
G2L["24"]["Position"] = UDim2.new(0.89059, 0, 0.60176, 0);

-- StarterGui.LuaEncoderPC.Frame.Settings.UIStroke
G2L["25"] = Instance.new("UIStroke", G2L["24"]);
G2L["25"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["25"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Settings.UICorner
G2L["26"] = Instance.new("UICorner", G2L["24"]);


-- StarterGui.LuaEncoderPC.Frame.Execute2
G2L["27"] = Instance.new("TextButton", G2L["2"]);
G2L["27"]["TextWrapped"] = true;
G2L["27"]["BorderSizePixel"] = 0;
G2L["27"]["TextSize"] = 14;
G2L["27"]["SelectionOrder"] = 6;
G2L["27"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["27"]["ZIndex"] = 999999999;
G2L["27"]["Size"] = UDim2.new(0.17656, 0, 0.14337, 0);
G2L["27"]["Name"] = [[Execute2]];
G2L["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["27"]["Text"] = [[Execute ClipBoard]];
G2L["27"]["Visible"] = false;
G2L["27"]["Position"] = UDim2.new(0.42887, 0, 0.81137, 0);

-- StarterGui.LuaEncoderPC.Frame.Execute2.UIStroke
G2L["28"] = Instance.new("UIStroke", G2L["27"]);
G2L["28"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["28"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Frame.Execute2.UICorner
G2L["29"] = Instance.new("UICorner", G2L["27"]);


-- StarterGui.LuaEncoderPC.Frame.UICorner
G2L["2a"] = Instance.new("UICorner", G2L["2"]);


-- StarterGui.LuaEncoderPC.Frame.API
G2L["2b"] = Instance.new("Folder", G2L["2"]);
G2L["2b"]["Name"] = [[API]];

-- StarterGui.LuaEncoderPC.Frame.API.API Injector
G2L["2c"] = Instance.new("Folder", G2L["2b"]);
G2L["2c"]["Name"] = [[API Injector]];

-- StarterGui.LuaEncoderPC.Frame.API.API Injector.LuaEncoder.API
G2L["2d"] = Instance.new("ModuleScript", G2L["2c"]);
G2L["2d"]["Name"] = [[LuaEncoder.API]];

-- StarterGui.LuaEncoderPC.Frame.API.API Executor
G2L["2e"] = Instance.new("Folder", G2L["2b"]);
G2L["2e"]["Name"] = [[API Executor]];

-- StarterGui.LuaEncoderPC.Frame.API.API Executor.LuaEncoder.API
G2L["2f"] = Instance.new("ModuleScript", G2L["2e"]);
G2L["2f"]["Name"] = [[LuaEncoder.API]];

-- StarterGui.LuaEncoderPC.Frame.API.API Clearer
G2L["30"] = Instance.new("Folder", G2L["2b"]);
G2L["30"]["Name"] = [[API Clearer]];

-- StarterGui.LuaEncoderPC.Frame.API.API Clearer.LuaEncoder.API
G2L["31"] = Instance.new("ModuleScript", G2L["30"]);
G2L["31"]["Name"] = [[LuaEncoder.API]];

-- StarterGui.LuaEncoderPC.Frame.Module
G2L["32"] = Instance.new("ModuleScript", G2L["2"]);
G2L["32"]["Name"] = [[Module]];

-- StarterGui.LuaEncoderPC.Frame.Highlighter
G2L["33"] = Instance.new("ModuleScript", G2L["2"]);
G2L["33"]["Name"] = [[Highlighter]];

-- StarterGui.LuaEncoderPC.Frame.Highlighter.lexer
G2L["34"] = Instance.new("ModuleScript", G2L["33"]);
G2L["34"]["Name"] = [[lexer]];

-- StarterGui.LuaEncoderPC.Frame.Highlighter.lexer.language
G2L["35"] = Instance.new("ModuleScript", G2L["34"]);
G2L["35"]["Name"] = [[language]];

-- StarterGui.LuaEncoderPC.Hub
G2L["36"] = Instance.new("Frame", G2L["1"]);
G2L["36"]["Visible"] = false;
G2L["36"]["ZIndex"] = 999999999;
G2L["36"]["BorderSizePixel"] = 0;
G2L["36"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["36"]["Size"] = UDim2.new(0.23398, 0, 0.54517, 0);
G2L["36"]["Position"] = UDim2.new(0.6532, 0, 0.15074, 0);
G2L["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["36"]["Name"] = [[Hub]];

-- StarterGui.LuaEncoderPC.Hub.Title
G2L["37"] = Instance.new("TextLabel", G2L["36"]);
G2L["37"]["BorderSizePixel"] = 0;
G2L["37"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37"]["TextSize"] = 14;
G2L["37"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["37"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["37"]["Size"] = UDim2.new(1, 0, 0.14417, 0);
G2L["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["37"]["Text"] = [[Script Hub]];
G2L["37"]["Name"] = [[Title]];
G2L["37"]["Position"] = UDim2.new(-0, 0, 0, 0);

-- StarterGui.LuaEncoderPC.Hub.Title.UICorner
G2L["38"] = Instance.new("UICorner", G2L["37"]);


-- StarterGui.LuaEncoderPC.Hub.Title.UIStroke
G2L["39"] = Instance.new("UIStroke", G2L["37"]);
G2L["39"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.Hub.Ghost
G2L["3a"] = Instance.new("TextButton", G2L["36"]);
G2L["3a"]["BorderSizePixel"] = 0;
G2L["3a"]["TextSize"] = 14;
G2L["3a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3a"]["Size"] = UDim2.new(0.86044, 0, 0.12872, 0);
G2L["3a"]["Name"] = [[Ghost]];
G2L["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["Text"] = [[Ghost Hub]];
G2L["3a"]["Position"] = UDim2.new(0.0652, 0, 0.2096, 0);

-- StarterGui.LuaEncoderPC.Hub.Ghost.UIStroke
G2L["3b"] = Instance.new("UIStroke", G2L["3a"]);
G2L["3b"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["3b"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Hub.Ghost.UICorner
G2L["3c"] = Instance.new("UICorner", G2L["3a"]);


-- StarterGui.LuaEncoderPC.Hub.HubMain
G2L["3d"] = Instance.new("LocalScript", G2L["36"]);
G2L["3d"]["Name"] = [[HubMain]];

-- StarterGui.LuaEncoderPC.Hub.UICorner
G2L["3e"] = Instance.new("UICorner", G2L["36"]);


-- StarterGui.LuaEncoderPC.Hub.UIStroke
G2L["3f"] = Instance.new("UIStroke", G2L["36"]);
G2L["3f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.Hub.DLT
G2L["40"] = Instance.new("TextButton", G2L["36"]);
G2L["40"]["BorderSizePixel"] = 0;
G2L["40"]["TextSize"] = 14;
G2L["40"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["40"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["40"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["40"]["Size"] = UDim2.new(0.86044, 0, 0.12093, 0);
G2L["40"]["Name"] = [[DLT]];
G2L["40"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["40"]["Text"] = [[Script searcher(Paid)]];
G2L["40"]["Position"] = UDim2.new(0.0652, 0, 0.33527, 0);

-- StarterGui.LuaEncoderPC.Hub.DLT.UIStroke
G2L["41"] = Instance.new("UIStroke", G2L["40"]);
G2L["41"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["41"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Hub.DLT.UICorner
G2L["42"] = Instance.new("UICorner", G2L["40"]);


-- StarterGui.LuaEncoderPC.Hub.Cloud
G2L["43"] = Instance.new("TextButton", G2L["36"]);
G2L["43"]["BorderSizePixel"] = 0;
G2L["43"]["TextSize"] = 14;
G2L["43"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["43"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["43"]["Size"] = UDim2.new(0.86044, 0, 0.12872, 0);
G2L["43"]["Name"] = [[Cloud]];
G2L["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["Text"] = [[Cloud Script]];
G2L["43"]["Position"] = UDim2.new(0.0652, 0, 0.45538, 0);

-- StarterGui.LuaEncoderPC.Hub.Cloud.UIStroke
G2L["44"] = Instance.new("UIStroke", G2L["43"]);
G2L["44"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["44"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Hub.Cloud.UICorner
G2L["45"] = Instance.new("UICorner", G2L["43"]);


-- StarterGui.LuaEncoderPC.Hub.fe
G2L["46"] = Instance.new("TextButton", G2L["36"]);
G2L["46"]["BorderSizePixel"] = 0;
G2L["46"]["TextSize"] = 14;
G2L["46"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["46"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["46"]["Size"] = UDim2.new(0.86044, 0, 0.14097, 0);
G2L["46"]["Name"] = [[fe]];
G2L["46"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["46"]["Text"] = [[FE]];
G2L["46"]["Position"] = UDim2.new(0.0652, 0, 0.56936, 0);

-- StarterGui.LuaEncoderPC.Hub.fe.UIStroke
G2L["47"] = Instance.new("UIStroke", G2L["46"]);
G2L["47"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["47"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Hub.fe.UICorner
G2L["48"] = Instance.new("UICorner", G2L["46"]);


-- StarterGui.LuaEncoderPC.Hub.fel
G2L["49"] = Instance.new("TextButton", G2L["36"]);
G2L["49"]["BorderSizePixel"] = 0;
G2L["49"]["TextSize"] = 14;
G2L["49"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["49"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["49"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["49"]["Size"] = UDim2.new(0.86044, 0, 0.14097, 0);
G2L["49"]["Name"] = [[fel]];
G2L["49"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["49"]["Text"] = [[FE illusion]];
G2L["49"]["Position"] = UDim2.new(0.0652, 0, 0.70956, 0);

-- StarterGui.LuaEncoderPC.Hub.fel.UIStroke
G2L["4a"] = Instance.new("UIStroke", G2L["49"]);
G2L["4a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["4a"]["Thickness"] = 2;

-- StarterGui.LuaEncoderPC.Hub.fel.UICorner
G2L["4b"] = Instance.new("UICorner", G2L["49"]);


-- StarterGui.LuaEncoderPC.Credits
G2L["4c"] = Instance.new("Frame", G2L["1"]);
G2L["4c"]["Visible"] = false;
G2L["4c"]["ZIndex"] = 999999999;
G2L["4c"]["BorderSizePixel"] = 0;
G2L["4c"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["4c"]["Size"] = UDim2.new(0.23398, 0, 0.42416, 0);
G2L["4c"]["Position"] = UDim2.new(0.6532, 0, 0.15074, 0);
G2L["4c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4c"]["Name"] = [[Credits]];

-- StarterGui.LuaEncoderPC.Credits.Title
G2L["4d"] = Instance.new("TextLabel", G2L["4c"]);
G2L["4d"]["BorderSizePixel"] = 0;
G2L["4d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4d"]["TextSize"] = 14;
G2L["4d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4d"]["Size"] = UDim2.new(1, 0, 0.14417, 0);
G2L["4d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4d"]["Text"] = [[Credits]];
G2L["4d"]["Name"] = [[Title]];
G2L["4d"]["Position"] = UDim2.new(-0, 0, 0, 0);

-- StarterGui.LuaEncoderPC.Credits.Title.UICorner
G2L["4e"] = Instance.new("UICorner", G2L["4d"]);


-- StarterGui.LuaEncoderPC.Credits.Title.UIStroke
G2L["4f"] = Instance.new("UIStroke", G2L["4d"]);
G2L["4f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.Credits.CreditMain
G2L["50"] = Instance.new("LocalScript", G2L["4c"]);
G2L["50"]["Name"] = [[CreditMain]];

-- StarterGui.LuaEncoderPC.Credits.UICorner
G2L["51"] = Instance.new("UICorner", G2L["4c"]);


-- StarterGui.LuaEncoderPC.Credits.UIStroke
G2L["52"] = Instance.new("UIStroke", G2L["4c"]);
G2L["52"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.Credits.TextBox
G2L["53"] = Instance.new("TextBox", G2L["4c"]);
G2L["53"]["Interactable"] = false;
G2L["53"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["53"]["BorderSizePixel"] = 0;
G2L["53"]["TextEditable"] = false;
G2L["53"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["53"]["TextWrapped"] = true;
G2L["53"]["TextSize"] = 14;
G2L["53"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["53"]["TextScaled"] = true;
G2L["53"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["53"]["ShowNativeInput"] = false;
G2L["53"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["53"]["MultiLine"] = true;
G2L["53"]["ClearTextOnFocus"] = false;
G2L["53"]["Size"] = UDim2.new(0.90356, 0, 0.63004, 0);
G2L["53"]["Position"] = UDim2.new(0.05028, 0, 0.24027, 0);
G2L["53"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["53"]["Text"] = [[-- Inspired by delta, fluxus, synapse]];

-- StarterGui.LuaEncoderPC.Credits.TextBox.UIStroke
G2L["54"] = Instance.new("UIStroke", G2L["53"]);
G2L["54"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.Credits.TextBox.UICorner
G2L["55"] = Instance.new("UICorner", G2L["53"]);


-- StarterGui.LuaEncoderPC.Credits.TextBox.UITextSizeConstraint
G2L["56"] = Instance.new("UITextSizeConstraint", G2L["53"]);
G2L["56"]["MaxTextSize"] = 14;

-- StarterGui.LuaEncoderPC.About
G2L["57"] = Instance.new("Frame", G2L["1"]);
G2L["57"]["Visible"] = false;
G2L["57"]["ZIndex"] = 999999999;
G2L["57"]["BorderSizePixel"] = 0;
G2L["57"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["57"]["Size"] = UDim2.new(0.23398, 0, 0.42416, 0);
G2L["57"]["Position"] = UDim2.new(0.6532, 0, 0.15074, 0);
G2L["57"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["57"]["Name"] = [[About]];

-- StarterGui.LuaEncoderPC.About.Title
G2L["58"] = Instance.new("TextLabel", G2L["57"]);
G2L["58"]["BorderSizePixel"] = 0;
G2L["58"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["58"]["TextSize"] = 14;
G2L["58"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["58"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["58"]["Size"] = UDim2.new(1, 0, 0.14417, 0);
G2L["58"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["58"]["Text"] = [[About]];
G2L["58"]["Name"] = [[Title]];
G2L["58"]["Position"] = UDim2.new(-0, 0, 0, 0);

-- StarterGui.LuaEncoderPC.About.Title.UICorner
G2L["59"] = Instance.new("UICorner", G2L["58"]);


-- StarterGui.LuaEncoderPC.About.Title.UIStroke
G2L["5a"] = Instance.new("UIStroke", G2L["58"]);
G2L["5a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.About.Aboutmain
G2L["5b"] = Instance.new("LocalScript", G2L["57"]);
G2L["5b"]["Name"] = [[Aboutmain]];

-- StarterGui.LuaEncoderPC.About.UICorner
G2L["5c"] = Instance.new("UICorner", G2L["57"]);


-- StarterGui.LuaEncoderPC.About.UIStroke
G2L["5d"] = Instance.new("UIStroke", G2L["57"]);
G2L["5d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.About.TextBox
G2L["5e"] = Instance.new("TextBox", G2L["57"]);
G2L["5e"]["Interactable"] = false;
G2L["5e"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5e"]["BorderSizePixel"] = 0;
G2L["5e"]["TextEditable"] = false;
G2L["5e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["5e"]["TextWrapped"] = true;
G2L["5e"]["TextSize"] = 14;
G2L["5e"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["5e"]["TextScaled"] = true;
G2L["5e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5e"]["ShowNativeInput"] = false;
G2L["5e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5e"]["MultiLine"] = true;
G2L["5e"]["ClearTextOnFocus"] = false;
G2L["5e"]["Size"] = UDim2.new(0.90356, 0, 0.63004, 0);
G2L["5e"]["Position"] = UDim2.new(0.05028, 0, 0.24027, 0);
G2L["5e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5e"]["Text"] = [[-- This can execute: loadstrings, coroutine, tasks, while, for, if, do, etc
-- This can be an executor that works in the future i think lol (I need to do more researching).
-- End i think...]];

-- StarterGui.LuaEncoderPC.About.TextBox.UIStroke
G2L["5f"] = Instance.new("UIStroke", G2L["5e"]);
G2L["5f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.About.TextBox.UICorner
G2L["60"] = Instance.new("UICorner", G2L["5e"]);


-- StarterGui.LuaEncoderPC.About.TextBox.UITextSizeConstraint
G2L["61"] = Instance.new("UITextSizeConstraint", G2L["5e"]);
G2L["61"]["MaxTextSize"] = 14;

-- StarterGui.LuaEncoderPC.Settings
G2L["62"] = Instance.new("Frame", G2L["1"]);
G2L["62"]["Visible"] = false;
G2L["62"]["ZIndex"] = 999999999;
G2L["62"]["BorderSizePixel"] = 0;
G2L["62"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["62"]["Size"] = UDim2.new(0.23398, 0, 0.42416, 0);
G2L["62"]["Position"] = UDim2.new(0.6532, 0, 0.15074, 0);
G2L["62"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["62"]["Name"] = [[Settings]];

-- StarterGui.LuaEncoderPC.Settings.Title
G2L["63"] = Instance.new("TextLabel", G2L["62"]);
G2L["63"]["BorderSizePixel"] = 0;
G2L["63"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["63"]["TextSize"] = 14;
G2L["63"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["63"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["63"]["Size"] = UDim2.new(1, 0, 0.14417, 0);
G2L["63"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["63"]["Text"] = [[Settings]];
G2L["63"]["Name"] = [[Title]];
G2L["63"]["Position"] = UDim2.new(-0, 0, 0, 0);

-- StarterGui.LuaEncoderPC.Settings.Title.UICorner
G2L["64"] = Instance.new("UICorner", G2L["63"]);


-- StarterGui.LuaEncoderPC.Settings.Title.UIStroke
G2L["65"] = Instance.new("UIStroke", G2L["63"]);
G2L["65"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.Settings.SettingsMain
G2L["66"] = Instance.new("LocalScript", G2L["62"]);
G2L["66"]["Name"] = [[SettingsMain]];

-- StarterGui.LuaEncoderPC.Settings.UICorner
G2L["67"] = Instance.new("UICorner", G2L["62"]);


-- StarterGui.LuaEncoderPC.Settings.UIStroke
G2L["68"] = Instance.new("UIStroke", G2L["62"]);
G2L["68"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- StarterGui.LuaEncoderPC.Settings.Option1
G2L["69"] = Instance.new("TextButton", G2L["62"]);
G2L["69"]["TextWrapped"] = true;
G2L["69"]["BorderSizePixel"] = 0;
G2L["69"]["TextSize"] = 14;
G2L["69"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["TextScaled"] = true;
G2L["69"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["69"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["69"]["Size"] = UDim2.new(0.79777, 0, 0.14516, 0);
G2L["69"]["Name"] = [[Option1]];
G2L["69"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["Text"] = [[Protect you from anti cheats]];
G2L["69"]["Position"] = UDim2.new(0.0838, 0, 0.20523, 0);

-- StarterGui.LuaEncoderPC.Settings.Option1.UITextSizeConstraint
G2L["6a"] = Instance.new("UITextSizeConstraint", G2L["69"]);
G2L["6a"]["MaxTextSize"] = 14;

-- StarterGui.LuaEncoderPC.Settings.Option1.UIStroke
G2L["6b"] = Instance.new("UIStroke", G2L["69"]);
G2L["6b"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["6b"]["Color"] = Color3.fromRGB(255, 0, 0);

-- StarterGui.LuaEncoderPC.Settings.useless
G2L["6c"] = Instance.new("TextButton", G2L["62"]);
G2L["6c"]["TextWrapped"] = true;
G2L["6c"]["BorderSizePixel"] = 0;
G2L["6c"]["TextSize"] = 14;
G2L["6c"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6c"]["TextScaled"] = true;
G2L["6c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6c"]["Size"] = UDim2.new(0.79777, 0, 0.13014, 0);
G2L["6c"]["Name"] = [[useless]];
G2L["6c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6c"]["Text"] = [[useless]];
G2L["6c"]["Position"] = UDim2.new(0.0838, 0, 0.34538, 0);

-- StarterGui.LuaEncoderPC.Settings.useless.UITextSizeConstraint
G2L["6d"] = Instance.new("UITextSizeConstraint", G2L["6c"]);
G2L["6d"]["MaxTextSize"] = 14;

-- StarterGui.LuaEncoderPC.Settings.useless.UIStroke
G2L["6e"] = Instance.new("UIStroke", G2L["6c"]);
G2L["6e"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["6e"]["Color"] = Color3.fromRGB(255, 0, 0);

-- StarterGui.LuaEncoderPC.Settings.icon
G2L["6f"] = Instance.new("TextButton", G2L["62"]);
G2L["6f"]["TextWrapped"] = true;
G2L["6f"]["BorderSizePixel"] = 0;
G2L["6f"]["TextSize"] = 14;
G2L["6f"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6f"]["TextScaled"] = true;
G2L["6f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6f"]["Size"] = UDim2.new(0.79777, 0, 0.11012, 0);
G2L["6f"]["Name"] = [[icon]];
G2L["6f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6f"]["Text"] = [[Floating Icon]];
G2L["6f"]["Position"] = UDim2.new(0.0838, 0, 0.47052, 0);

-- StarterGui.LuaEncoderPC.Settings.icon.UITextSizeConstraint
G2L["70"] = Instance.new("UITextSizeConstraint", G2L["6f"]);
G2L["70"]["MaxTextSize"] = 14;

-- StarterGui.LuaEncoderPC.Settings.icon.UIStroke
G2L["71"] = Instance.new("UIStroke", G2L["6f"]);
G2L["71"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["71"]["Color"] = Color3.fromRGB(255, 0, 0);

-- StarterGui.LuaEncoderPC.Settings.link
G2L["72"] = Instance.new("TextButton", G2L["62"]);
G2L["72"]["TextWrapped"] = true;
G2L["72"]["BorderSizePixel"] = 0;
G2L["72"]["TextSize"] = 14;
G2L["72"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["72"]["TextScaled"] = true;
G2L["72"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["72"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["72"]["Size"] = UDim2.new(0.79777, 0, 0.12514, 0);
G2L["72"]["Name"] = [[link]];
G2L["72"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["72"]["Text"] = [[Get delta link and all my scripts link]];
G2L["72"]["Position"] = UDim2.new(0.0838, 0, 0.57564, 0);

-- StarterGui.LuaEncoderPC.Settings.link.UITextSizeConstraint
G2L["73"] = Instance.new("UITextSizeConstraint", G2L["72"]);
G2L["73"]["MaxTextSize"] = 14;

-- StarterGui.LuaEncoderPC.Settings.link.UIStroke
G2L["74"] = Instance.new("UIStroke", G2L["72"]);
G2L["74"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["74"]["Color"] = Color3.fromRGB(255, 0, 0);

-- StarterGui.LuaEncoderPC.Settings.Change
G2L["75"] = Instance.new("TextButton", G2L["62"]);
G2L["75"]["TextWrapped"] = true;
G2L["75"]["BorderSizePixel"] = 0;
G2L["75"]["TextSize"] = 14;
G2L["75"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["75"]["TextScaled"] = true;
G2L["75"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["75"]["Size"] = UDim2.new(0.79777, 0, 0.12514, 0);
G2L["75"]["Name"] = [[Change]];
G2L["75"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["75"]["Text"] = [[change execute button state]];
G2L["75"]["Visible"] = false;
G2L["75"]["Position"] = UDim2.new(0.0838, 0, 0.69577, 0);

-- StarterGui.LuaEncoderPC.Settings.Change.UITextSizeConstraint
G2L["76"] = Instance.new("UITextSizeConstraint", G2L["75"]);
G2L["76"]["MaxTextSize"] = 14;

-- StarterGui.LuaEncoderPC.Settings.Change.UIStroke
G2L["77"] = Instance.new("UIStroke", G2L["75"]);
G2L["77"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["77"]["Color"] = Color3.fromRGB(255, 0, 0);

-- StarterGui.LuaEncoderPC.Open
G2L["78"] = Instance.new("ImageButton", G2L["1"]);
G2L["78"]["BorderSizePixel"] = 0;
G2L["78"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["ZIndex"] = 999999999;
G2L["78"]["Image"] = [[rbxassetid://17546664635]];
G2L["78"]["Size"] = UDim2.new(0.057, 0, 0.12, 0);
G2L["78"]["Name"] = [[Open]];
G2L["78"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["Position"] = UDim2.new(0.66275, 0, 0.02972, 0);

-- StarterGui.LuaEncoderPC.Open.UICorner
G2L["79"] = Instance.new("UICorner", G2L["78"]);


-- StarterGui.LuaEncoderPC.Open.OpenMain
G2L["7a"] = Instance.new("LocalScript", G2L["78"]);
G2L["7a"]["Name"] = [[OpenMain]];

-- StarterGui.LuaEncoderPC.InjectedFrame
G2L["7b"] = Instance.new("Frame", G2L["1"]);
G2L["7b"]["Visible"] = false;
G2L["7b"]["ZIndex"] = 999999999;
G2L["7b"]["BorderSizePixel"] = 0;
G2L["7b"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["7b"]["Size"] = UDim2.new(0.34771, 0, 0.15711, 0);
G2L["7b"]["Position"] = UDim2.new(0.63274, 0, 0.82166, 0);
G2L["7b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7b"]["Name"] = [[InjectedFrame]];

-- StarterGui.LuaEncoderPC.InjectedFrame.UICorner
G2L["7c"] = Instance.new("UICorner", G2L["7b"]);


-- StarterGui.LuaEncoderPC.InjectedFrame.LocalScript
G2L["7d"] = Instance.new("LocalScript", G2L["7b"]);


-- StarterGui.LuaEncoderPC.InjectedFrame.Title
G2L["7e"] = Instance.new("TextLabel", G2L["7b"]);
G2L["7e"]["ZIndex"] = 999999999;
G2L["7e"]["BorderSizePixel"] = 0;
G2L["7e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7e"]["TextSize"] = 14;
G2L["7e"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["7e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7e"]["BackgroundTransparency"] = 1;
G2L["7e"]["Size"] = UDim2.new(0, 69, 0, 29);
G2L["7e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7e"]["Text"] = [[Lua Encoder]];
G2L["7e"]["Name"] = [[Title]];
G2L["7e"]["Position"] = UDim2.new(0.05621, 0, 0, 0);

-- StarterGui.LuaEncoderPC.InjectedFrame.Desc
G2L["7f"] = Instance.new("TextLabel", G2L["7b"]);
G2L["7f"]["ZIndex"] = 999999999;
G2L["7f"]["BorderSizePixel"] = 0;
G2L["7f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["7f"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["7f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7f"]["TextSize"] = 14;
G2L["7f"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["7f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7f"]["BackgroundTransparency"] = 1;
G2L["7f"]["Size"] = UDim2.new(0, 264, 0, 45);
G2L["7f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7f"]["Text"] = [[Has injected to roblox]];
G2L["7f"]["Name"] = [[Desc]];
G2L["7f"]["Position"] = UDim2.new(0.00752, 0, 0.39189, 0);

-- StarterGui.LuaEncoderPC.InjectedFrame.ImageLabel
G2L["80"] = Instance.new("ImageLabel", G2L["7b"]);
G2L["80"]["ZIndex"] = 999999999;
G2L["80"]["BorderSizePixel"] = 0;
G2L["80"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["80"]["Image"] = [[rbxassetid://17546664635]];
G2L["80"]["Size"] = UDim2.new(0.12155, 0, 0.39189, 0);
G2L["80"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["80"]["BackgroundTransparency"] = 1;
G2L["80"]["Position"] = UDim2.new(0.87594, 0, 0, 0);

-- StarterGui.LuaEncoderPC.InjectedFrame.UIStroke
G2L["81"] = Instance.new("UIStroke", G2L["7b"]);


-- StarterGui.LuaEncoderPC.NotInjF
G2L["82"] = Instance.new("Frame", G2L["1"]);
G2L["82"]["Visible"] = false;
G2L["82"]["ZIndex"] = 999999999;
G2L["82"]["BorderSizePixel"] = 0;
G2L["82"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["82"]["Size"] = UDim2.new(0.34771, 0, 0.15711, 0);
G2L["82"]["Position"] = UDim2.new(0.63274, 0, 0.82166, 0);
G2L["82"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["82"]["Name"] = [[NotInjF]];

-- StarterGui.LuaEncoderPC.NotInjF.UICorner
G2L["83"] = Instance.new("UICorner", G2L["82"]);


-- StarterGui.LuaEncoderPC.NotInjF.LocalScript
G2L["84"] = Instance.new("LocalScript", G2L["82"]);


-- StarterGui.LuaEncoderPC.NotInjF.Title
G2L["85"] = Instance.new("TextLabel", G2L["82"]);
G2L["85"]["ZIndex"] = 999999999;
G2L["85"]["BorderSizePixel"] = 0;
G2L["85"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["85"]["TextSize"] = 14;
G2L["85"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["85"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["85"]["BackgroundTransparency"] = 1;
G2L["85"]["Size"] = UDim2.new(0, 70, 0, 29);
G2L["85"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["85"]["Text"] = [[Lua Encoder]];
G2L["85"]["Name"] = [[Title]];
G2L["85"]["Position"] = UDim2.new(0.05245, 0, 0, 0);

-- StarterGui.LuaEncoderPC.NotInjF.Desc
G2L["86"] = Instance.new("TextLabel", G2L["82"]);
G2L["86"]["ZIndex"] = 999999999;
G2L["86"]["BorderSizePixel"] = 0;
G2L["86"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["86"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["86"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["TextSize"] = 14;
G2L["86"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["86"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["BackgroundTransparency"] = 1;
G2L["86"]["Size"] = UDim2.new(0, 264, 0, 45);
G2L["86"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["86"]["Text"] = [[Isn't Injected to roblox.]];
G2L["86"]["Name"] = [[Desc]];
G2L["86"]["Position"] = UDim2.new(0.00752, 0, 0.39189, 0);

-- StarterGui.LuaEncoderPC.NotInjF.ImageLabel
G2L["87"] = Instance.new("ImageLabel", G2L["82"]);
G2L["87"]["ZIndex"] = 999999999;
G2L["87"]["BorderSizePixel"] = 0;
G2L["87"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["87"]["Image"] = [[rbxassetid://17546664635]];
G2L["87"]["Size"] = UDim2.new(0.12155, 0, 0.39189, 0);
G2L["87"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["87"]["BackgroundTransparency"] = 1;
G2L["87"]["Position"] = UDim2.new(0.87594, 0, 0, 0);

-- StarterGui.LuaEncoderPC.NotInjF.UIStroke
G2L["88"] = Instance.new("UIStroke", G2L["82"]);


-- StarterGui.LuaEncoderPC.InjectingFrame
G2L["89"] = Instance.new("Frame", G2L["1"]);
G2L["89"]["Visible"] = false;
G2L["89"]["ZIndex"] = 999999999;
G2L["89"]["BorderSizePixel"] = 0;
G2L["89"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["89"]["Size"] = UDim2.new(0.34771, 0, 0.15711, 0);
G2L["89"]["Position"] = UDim2.new(0.63274, 0, 0.82166, 0);
G2L["89"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["89"]["Name"] = [[InjectingFrame]];

-- StarterGui.LuaEncoderPC.InjectingFrame.UICorner
G2L["8a"] = Instance.new("UICorner", G2L["89"]);


-- StarterGui.LuaEncoderPC.InjectingFrame.LocalScript
G2L["8b"] = Instance.new("LocalScript", G2L["89"]);


-- StarterGui.LuaEncoderPC.InjectingFrame.Title
G2L["8c"] = Instance.new("TextLabel", G2L["89"]);
G2L["8c"]["ZIndex"] = 999999999;
G2L["8c"]["BorderSizePixel"] = 0;
G2L["8c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8c"]["TextSize"] = 14;
G2L["8c"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8c"]["BackgroundTransparency"] = 1;
G2L["8c"]["Size"] = UDim2.new(0, 73, 0, 29);
G2L["8c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8c"]["Text"] = [[Lua Encoder]];
G2L["8c"]["Name"] = [[Title]];
G2L["8c"]["Position"] = UDim2.new(0.04118, 0, 0, 0);

-- StarterGui.LuaEncoderPC.InjectingFrame.Desc
G2L["8d"] = Instance.new("TextLabel", G2L["89"]);
G2L["8d"]["ZIndex"] = 999999999;
G2L["8d"]["BorderSizePixel"] = 0;
G2L["8d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["8d"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["8d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["TextSize"] = 14;
G2L["8d"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["BackgroundTransparency"] = 1;
G2L["8d"]["Size"] = UDim2.new(0, 264, 0, 45);
G2L["8d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8d"]["Text"] = [[Injecting]];
G2L["8d"]["Name"] = [[Desc]];
G2L["8d"]["Position"] = UDim2.new(0.00752, 0, 0.39189, 0);

-- StarterGui.LuaEncoderPC.InjectingFrame.ImageLabel
G2L["8e"] = Instance.new("ImageLabel", G2L["89"]);
G2L["8e"]["ZIndex"] = 999999999;
G2L["8e"]["BorderSizePixel"] = 0;
G2L["8e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8e"]["Image"] = [[rbxassetid://17546664635]];
G2L["8e"]["Size"] = UDim2.new(0.12155, 0, 0.39189, 0);
G2L["8e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8e"]["BackgroundTransparency"] = 1;
G2L["8e"]["Position"] = UDim2.new(0.87594, 0, 0, 0);

-- StarterGui.LuaEncoderPC.InjectingFrame.UIStroke
G2L["8f"] = Instance.new("UIStroke", G2L["89"]);


-- StarterGui.LuaEncoderPC.AlrInjcFrame
G2L["90"] = Instance.new("Frame", G2L["1"]);
G2L["90"]["Visible"] = false;
G2L["90"]["ZIndex"] = 999999999;
G2L["90"]["BorderSizePixel"] = 0;
G2L["90"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["90"]["Size"] = UDim2.new(0.34771, 0, 0.15711, 0);
G2L["90"]["Position"] = UDim2.new(0.63274, 0, 0.82166, 0);
G2L["90"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["90"]["Name"] = [[AlrInjcFrame]];

-- StarterGui.LuaEncoderPC.AlrInjcFrame.UICorner
G2L["91"] = Instance.new("UICorner", G2L["90"]);


-- StarterGui.LuaEncoderPC.AlrInjcFrame.LocalScript
G2L["92"] = Instance.new("LocalScript", G2L["90"]);


-- StarterGui.LuaEncoderPC.AlrInjcFrame.Title
G2L["93"] = Instance.new("TextLabel", G2L["90"]);
G2L["93"]["ZIndex"] = 999999999;
G2L["93"]["BorderSizePixel"] = 0;
G2L["93"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["93"]["TextSize"] = 14;
G2L["93"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["93"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["93"]["BackgroundTransparency"] = 1;
G2L["93"]["Size"] = UDim2.new(0, 74, 0, 29);
G2L["93"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["93"]["Text"] = [[Lua Encoder]];
G2L["93"]["Name"] = [[Title]];
G2L["93"]["Position"] = UDim2.new(0.03742, 0, 0, 0);

-- StarterGui.LuaEncoderPC.AlrInjcFrame.Desc
G2L["94"] = Instance.new("TextLabel", G2L["90"]);
G2L["94"]["ZIndex"] = 999999999;
G2L["94"]["BorderSizePixel"] = 0;
G2L["94"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["94"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["94"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["94"]["TextSize"] = 14;
G2L["94"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["94"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["94"]["BackgroundTransparency"] = 1;
G2L["94"]["Size"] = UDim2.new(0, 264, 0, 45);
G2L["94"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["94"]["Text"] = [[Already Injected to roblox]];
G2L["94"]["Name"] = [[Desc]];
G2L["94"]["Position"] = UDim2.new(0.00752, 0, 0.39189, 0);

-- StarterGui.LuaEncoderPC.AlrInjcFrame.ImageLabel
G2L["95"] = Instance.new("ImageLabel", G2L["90"]);
G2L["95"]["ZIndex"] = 999999999;
G2L["95"]["BorderSizePixel"] = 0;
G2L["95"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["95"]["Image"] = [[rbxassetid://17546664635]];
G2L["95"]["Size"] = UDim2.new(0.12155, 0, 0.39189, 0);
G2L["95"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["95"]["BackgroundTransparency"] = 1;
G2L["95"]["Position"] = UDim2.new(0.87594, 0, 0, 0);

-- StarterGui.LuaEncoderPC.AlrInjcFrame.UIStroke
G2L["96"] = Instance.new("UIStroke", G2L["90"]);


-- StarterGui.LuaEncoderPC.ExecutedFrame
G2L["97"] = Instance.new("Frame", G2L["1"]);
G2L["97"]["Visible"] = false;
G2L["97"]["ZIndex"] = 999999999;
G2L["97"]["BorderSizePixel"] = 0;
G2L["97"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["97"]["Size"] = UDim2.new(0.34771, 0, 0.15711, 0);
G2L["97"]["Position"] = UDim2.new(0.63274, 0, 0.82166, 0);
G2L["97"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["97"]["Name"] = [[ExecutedFrame]];

-- StarterGui.LuaEncoderPC.ExecutedFrame.UICorner
G2L["98"] = Instance.new("UICorner", G2L["97"]);


-- StarterGui.LuaEncoderPC.ExecutedFrame.LocalScript
G2L["99"] = Instance.new("LocalScript", G2L["97"]);


-- StarterGui.LuaEncoderPC.ExecutedFrame.Title
G2L["9a"] = Instance.new("TextLabel", G2L["97"]);
G2L["9a"]["ZIndex"] = 999999999;
G2L["9a"]["BorderSizePixel"] = 0;
G2L["9a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9a"]["TextSize"] = 14;
G2L["9a"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9a"]["BackgroundTransparency"] = 1;
G2L["9a"]["Size"] = UDim2.new(0, 70, 0, 29);
G2L["9a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9a"]["Text"] = [[Lua Encoder]];
G2L["9a"]["Name"] = [[Title]];
G2L["9a"]["Position"] = UDim2.new(0.05245, 0, 0, 0);

-- StarterGui.LuaEncoderPC.ExecutedFrame.Desc
G2L["9b"] = Instance.new("TextLabel", G2L["97"]);
G2L["9b"]["ZIndex"] = 999999999;
G2L["9b"]["BorderSizePixel"] = 0;
G2L["9b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["9b"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["9b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9b"]["TextSize"] = 14;
G2L["9b"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9b"]["BackgroundTransparency"] = 1;
G2L["9b"]["Size"] = UDim2.new(0, 264, 0, 45);
G2L["9b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9b"]["Text"] = [[Executed Code]];
G2L["9b"]["Name"] = [[Desc]];
G2L["9b"]["Position"] = UDim2.new(0.00752, 0, 0.39189, 0);

-- StarterGui.LuaEncoderPC.ExecutedFrame.ImageLabel
G2L["9c"] = Instance.new("ImageLabel", G2L["97"]);
G2L["9c"]["ZIndex"] = 999999999;
G2L["9c"]["BorderSizePixel"] = 0;
G2L["9c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9c"]["Image"] = [[rbxassetid://17546664635]];
G2L["9c"]["Size"] = UDim2.new(0.12155, 0, 0.39189, 0);
G2L["9c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9c"]["BackgroundTransparency"] = 1;
G2L["9c"]["Position"] = UDim2.new(0.87594, 0, 0, 0);

-- StarterGui.LuaEncoderPC.ExecutedFrame.UIStroke
G2L["9d"] = Instance.new("UIStroke", G2L["97"]);


-- StarterGui.LuaEncoderPC.ClearedFrame
G2L["9e"] = Instance.new("Frame", G2L["1"]);
G2L["9e"]["Visible"] = false;
G2L["9e"]["ZIndex"] = 999999999;
G2L["9e"]["BorderSizePixel"] = 0;
G2L["9e"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["9e"]["Size"] = UDim2.new(0.34771, 0, 0.15711, 0);
G2L["9e"]["Position"] = UDim2.new(0.63274, 0, 0.82166, 0);
G2L["9e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9e"]["Name"] = [[ClearedFrame]];

-- StarterGui.LuaEncoderPC.ClearedFrame.UICorner
G2L["9f"] = Instance.new("UICorner", G2L["9e"]);


-- StarterGui.LuaEncoderPC.ClearedFrame.LocalScript
G2L["a0"] = Instance.new("LocalScript", G2L["9e"]);


-- StarterGui.LuaEncoderPC.ClearedFrame.Title
G2L["a1"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a1"]["ZIndex"] = 999999999;
G2L["a1"]["BorderSizePixel"] = 0;
G2L["a1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a1"]["TextSize"] = 14;
G2L["a1"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a1"]["BackgroundTransparency"] = 1;
G2L["a1"]["Size"] = UDim2.new(0, 73, 0, 29);
G2L["a1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a1"]["Text"] = [[Lua Encoder]];
G2L["a1"]["Name"] = [[Title]];
G2L["a1"]["Position"] = UDim2.new(0.04118, 0, 0, 0);

-- StarterGui.LuaEncoderPC.ClearedFrame.ImageLabel
G2L["a2"] = Instance.new("ImageLabel", G2L["9e"]);
G2L["a2"]["ZIndex"] = 999999999;
G2L["a2"]["BorderSizePixel"] = 0;
G2L["a2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a2"]["Image"] = [[rbxassetid://17546664635]];
G2L["a2"]["Size"] = UDim2.new(0.12155, 0, 0.39189, 0);
G2L["a2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a2"]["BackgroundTransparency"] = 1;
G2L["a2"]["Position"] = UDim2.new(0.87594, 0, 0, 0);

-- StarterGui.LuaEncoderPC.ClearedFrame.UIStroke
G2L["a3"] = Instance.new("UIStroke", G2L["9e"]);


-- StarterGui.LuaEncoderPC.ClearedFrame.Desc
G2L["a4"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a4"]["ZIndex"] = 999999999;
G2L["a4"]["BorderSizePixel"] = 0;
G2L["a4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a4"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a4"]["TextSize"] = 14;
G2L["a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a4"]["BackgroundTransparency"] = 1;
G2L["a4"]["Size"] = UDim2.new(0, 264, 0, 45);
G2L["a4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a4"]["Text"] = [[Cleared CodeBox]];
G2L["a4"]["Name"] = [[Desc]];
G2L["a4"]["Position"] = UDim2.new(0.00752, 0, 0.39189, 0);

-- StarterGui.LuaEncoderPC.ExecutedThing
G2L["a5"] = Instance.new("Frame", G2L["1"]);
G2L["a5"]["Visible"] = false;
G2L["a5"]["ZIndex"] = 999999999;
G2L["a5"]["BorderSizePixel"] = 0;
G2L["a5"]["BackgroundColor3"] = Color3.fromRGB(59, 59, 59);
G2L["a5"]["Size"] = UDim2.new(0.34771, 0, 0.15711, 0);
G2L["a5"]["Position"] = UDim2.new(0.63274, 0, 0.82166, 0);
G2L["a5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a5"]["Name"] = [[ExecutedThing]];

-- StarterGui.LuaEncoderPC.ExecutedThing.UICorner
G2L["a6"] = Instance.new("UICorner", G2L["a5"]);


-- StarterGui.LuaEncoderPC.ExecutedThing.LocalScript
G2L["a7"] = Instance.new("LocalScript", G2L["a5"]);


-- StarterGui.LuaEncoderPC.ExecutedThing.Title
G2L["a8"] = Instance.new("TextLabel", G2L["a5"]);
G2L["a8"]["ZIndex"] = 999999999;
G2L["a8"]["BorderSizePixel"] = 0;
G2L["a8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a8"]["TextSize"] = 14;
G2L["a8"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a8"]["BackgroundTransparency"] = 1;
G2L["a8"]["Size"] = UDim2.new(0, 71, 0, 29);
G2L["a8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a8"]["Text"] = [[Lua Encoder]];
G2L["a8"]["Name"] = [[Title]];
G2L["a8"]["Position"] = UDim2.new(0.04869, 0, 0, 0);

-- StarterGui.LuaEncoderPC.ExecutedThing.Desc
G2L["a9"] = Instance.new("TextLabel", G2L["a5"]);
G2L["a9"]["ZIndex"] = 999999999;
G2L["a9"]["BorderSizePixel"] = 0;
G2L["a9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a9"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a9"]["TextSize"] = 14;
G2L["a9"]["FontFace"] = Font.new([[rbxasset://fonts/families/FredokaOne.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a9"]["BackgroundTransparency"] = 1;
G2L["a9"]["Size"] = UDim2.new(0, 264, 0, 45);
G2L["a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a9"]["Text"] = [[Executed]];
G2L["a9"]["Name"] = [[Desc]];
G2L["a9"]["Position"] = UDim2.new(0.00752, 0, 0.39189, 0);

-- StarterGui.LuaEncoderPC.ExecutedThing.ImageLabel
G2L["aa"] = Instance.new("ImageLabel", G2L["a5"]);
G2L["aa"]["ZIndex"] = 999999999;
G2L["aa"]["BorderSizePixel"] = 0;
G2L["aa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["aa"]["Image"] = [[rbxassetid://17546664635]];
G2L["aa"]["Size"] = UDim2.new(0.12155, 0, 0.39189, 0);
G2L["aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["aa"]["BackgroundTransparency"] = 1;
G2L["aa"]["Position"] = UDim2.new(0.87594, 0, 0, 0);

-- StarterGui.LuaEncoderPC.ExecutedThing.UIStroke
G2L["ab"] = Instance.new("UIStroke", G2L["a5"]);


-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L["2d"]] = {
Closure = function()
    local script = G2L["2d"];
local module = {}

game:GetService("ServerScriptService"):SetAttribute("LoadStringEnabled", true);
game:GetService("ServerScriptService"):SetAttribute("CanExecuteCode", true);
game:GetService("ServerScriptService"):SetAttribute("LocalLoadStringEnabled", true);



return module




end;
};
G2L_MODULES[G2L["2f"]] = {
Closure = function()
    local script = G2L["2f"];
local module = {}

game:GetService("ServerScriptService"):SetAttribute("ExecuteScript", true);
task.wait();
game:GetService("ServerScriptService"):SetAttribute("ExecuteScript", false);

return module

end;
};
G2L_MODULES[G2L["31"]] = {
Closure = function()
    local script = G2L["31"];
local module = {}

local txtb = script.Parent.Parent.Parent.ScrollingFrame.TextBox
txtb.Text = ""


return module

end;
};
G2L_MODULES[G2L["32"]] = {
Closure = function()
    local script = G2L["32"];
local module = {}

local highlighter = require(script.Parent.Highlighter)

highlighter.highlight({
	textObject = script.Parent.ScrollingFrame.TextBox,
	src = script.Parent.ScrollingFrame.TextBox.Text,
	forceUpdate = false
})


return module
end;
};
G2L_MODULES[G2L["33"]] = {
Closure = function()
    local script = G2L["33"];
export type HighlighterColors = { [string]: Color3 }

export type TextObject = TextLabel | TextBox

export type HighlightProps = {
	textObject: TextObject,
	src: string?,
	forceUpdate: boolean?,
	lexer: Lexer?,
	customLang: { [string]: string }?
}

export type Lexer = {
	scan: (src: string) -> () -> (string, string),
	navigator: () -> any,
	finished: boolean?,
}

export type Highlighter = {
	defaultLexer: Lexer,
	setTokenColors: (colors: HighlighterColors?) -> (),
	highlight: (props: HighlightProps) -> (() -> ())?,
	refresh: () -> (),
}

export type ObjectData = {
	Text: string,
	Labels: { TextLabel },
	Lines: { string },
	Lexer: Lexer?,
	CustomLang: { [string]: string }?,
}

local function SanitizeRichText(s: string): string
	return string.gsub(
		string.gsub(string.gsub(string.gsub(string.gsub(s, "&", "&amp;"), "<", "&lt;"), ">", "&gt;"), '"', "&quot;"),
		"'",
		"&apos;"
	)
end

local function SanitizeTabs(s: string): string
	return string.gsub(s, "\t", "    ")
end

local function SanitizeControl(s: string): string
	return string.gsub(s, "[\0\1\2\3\4\5\6\7\8\11\12\13\14\15\16\17\18\19\20\21\22\23\24\25\26\27\28\29\30\31]+", "")
end

local TokenColors: HighlighterColors = {
	["background"] = Color3.fromRGB(67, 67, 67),
	["iden"] = Color3.fromRGB(255, 255, 255),
	["keyword"] = Color3.fromRGB(0, 151, 216),
	["builtin"] = Color3.fromRGB(60, 147, 171),
	["string"] = Color3.fromRGB(83, 24, 130),
	["number"] = Color3.fromRGB(69, 230, 67),
	["comment"] = Color3.fromRGB(255, 0, 0),
	["operator"] = Color3.fromRGB(255, 136, 32),
	["custom"] = Color3.fromRGB(75, 255, 216),
	["loads"] = Color3.fromRGB(255, 170, 0)
}
local ColorFormatter: { [Color3]: string } = {}
local LastData: { [TextObject]: ObjectData } = {}
local Cleanups: { [TextObject]: () -> () } = {}

local Highlighter = {
	defaultLexer = require(script.lexer),
}

function Highlighter.highlight(props: HighlightProps)
	-- Gather props
	local textObject = props.textObject
	local src = SanitizeTabs(SanitizeControl(props.src or textObject.Text))
	local lexer = props.lexer or Highlighter.defaultLexer
	local customLang = props.customLang
	local forceUpdate = props.forceUpdate

	-- Avoid updating when unnecessary
	local data = LastData[textObject]
	if data == nil then
		data = {
			Text = "",
			Labels = {},
			Lines = {},
			Lexer = lexer,
			CustomLang = customLang,
		}
		LastData[textObject] = data
	elseif forceUpdate ~= true and data.Text == src then
		return
	end

	local lineLabels = data.Labels
	local previousLines = data.Lines

	local lines = string.split(src, "\n")

	data.Lines = lines
	data.Text = src
	data.Lexer = lexer
	data.CustomLang = customLang

	-- Ensure valid object properties
	textObject.RichText = false
	textObject.Text = src
	textObject.TextXAlignment = Enum.TextXAlignment.Left
	textObject.TextYAlignment = Enum.TextYAlignment.Top
	textObject.BackgroundColor3 = TokenColors.background
	textObject.TextColor3 = TokenColors.iden
	textObject.TextTransparency = 0

	-- Build the highlight labels
	local lineFolder = textObject:FindFirstChild("SyntaxHighlights")
	if lineFolder == nil then
		local newLineFolder = Instance.new("Folder")
		newLineFolder.Name = "SyntaxHighlights"
		newLineFolder.Parent = textObject

		lineFolder = newLineFolder
	end

	-- Add a cleanup handler for this textObject
	local cleanup = Cleanups[textObject]
	if not cleanup then
		local connections: { RBXScriptConnection } = {}
		local function newCleanup()
			for _, label in ipairs(lineLabels) do
				label:Destroy()
			end
			table.clear(lineLabels)
			lineLabels = nil

			LastData[textObject] = nil
			Cleanups[textObject] = nil

			for _, connection in connections do
				connection:Disconnect()
			end
			table.clear(connections)
			connections = nil
		end
		Cleanups[textObject] = newCleanup
		cleanup = newCleanup

		table.insert(
			connections,
			textObject.AncestryChanged:Connect(function()
				if textObject.Parent then
					return
				end

				cleanup()
			end)
		)
		table.insert(
			connections,
			textObject:GetPropertyChangedSignal("TextBounds"):Connect(function()
				Highlighter.highlight({
					textObject = textObject,
					forceUpdate = true,
					lexer = lexer,
					customLang = customLang,
				})
			end)
		)
		table.insert(
			connections,
			textObject:GetPropertyChangedSignal("Text"):Connect(function()
				Highlighter.highlight({
					textObject = textObject,
					lexer = lexer,
					customLang = customLang,
				})
			end)
		)
		table.insert(
			connections,
			textObject:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
				Highlighter.highlight({
					textObject = textObject,
					forceUpdate = true,
					lexer = lexer,
					customLang = customLang,
				})
			end)
		)
	end

	-- Shortcut empty labels
	if src == "" then
		for l=1, #lineLabels do
			if lineLabels[l].Text == "" then continue end
			lineLabels[l].Text = ""
		end
		return cleanup
	end

	-- Wait for TextBounds to be non-NaN and non-zero because Roblox
	local textBounds = textObject.TextBounds
	while (textBounds.Y ~= textBounds.Y) or (textBounds.Y < 1) do
		task.wait()
		textBounds = textObject.TextBounds
	end

	if LastData[textObject] == nil then
		-- Got cleaned up while we were waiting
		return cleanup
	end

	local numLines = #lines
	local textHeight = textBounds.Y / numLines * textObject.LineHeight

	local richText, index, lineNumber = table.create(5), 0, 1
	for token: string, content: string in lexer.scan(src) do
		local Color =
			if customLang and customLang[content] then
			TokenColors["custom"]
			else
			TokenColors[token] or TokenColors["iden"]

		local tokenLines = string.split(SanitizeRichText(content), "\n")

		for l, line in ipairs(tokenLines) do
			-- Find line label
			local lineLabel = lineLabels[lineNumber]
			if not lineLabel then
				local newLabel = Instance.new("TextLabel")
				newLabel.Name = "Line_" .. lineNumber
				newLabel.RichText = true
				newLabel.BackgroundTransparency = 1
				newLabel.ZIndex = 4
				newLabel.Text = ""
				newLabel.TextXAlignment = Enum.TextXAlignment.Left
				newLabel.TextYAlignment = Enum.TextYAlignment.Top
				newLabel.Parent = lineFolder
				lineLabels[lineNumber] = newLabel
				lineLabel = newLabel
			end

			-- Align line label
			lineLabel.TextColor3 = TokenColors["iden"]
			lineLabel.Font = textObject.Font
			lineLabel.TextSize = textObject.TextSize
			lineLabel.Size = UDim2.new(1, 0, 0, math.ceil(textHeight))
			lineLabel.Position = UDim2.fromScale(0, textHeight * (lineNumber - 1) / textObject.AbsoluteSize.Y)

			-- If multiline token, then set line & move to next
			if l > 1 then
				if forceUpdate or lines[lineNumber] ~= previousLines[lineNumber] then
					-- Set line
					lineLabels[lineNumber].Text = table.concat(richText)
				end
				-- Move to next line
				lineNumber += 1
				index = 0
				table.clear(richText)
			end

			-- If changed, add token to line
			if forceUpdate or lines[lineNumber] ~= previousLines[lineNumber] then
				index += 1
				-- Only add RichText tags when the color is non-default and the characters are non-whitespace
				if Color ~= TokenColors["iden"] and string.find(line, "[%S%C]") then
					richText[index] = string.format(ColorFormatter[Color], line)
				else
					richText[index] = line
				end
			end
		end
	end

	-- Set final line
	if richText[1] and lineLabels[lineNumber] then
		lineLabels[lineNumber].Text = table.concat(richText)
	end

	-- Clear unused line labels
	for l=lineNumber+1, #lineLabels do
		if lineLabels[l].Text == "" then continue end
		lineLabels[l].Text = ""
	end

	return cleanup
end

function Highlighter.refresh(): ()
	-- Rehighlight existing labels using latest colors
	for textObject, data in pairs(LastData) do
		for _, lineLabel in ipairs(data.Labels) do
			lineLabel.TextColor3 = TokenColors["iden"]
		end

		Highlighter.highlight({
			textObject = textObject,
			forceUpdate = false,
			src = data.Text,
			lexer = data.Lexer,
			customLang = data.CustomLang,
		})
	end
end

function Highlighter.setTokenColors(colors: HighlighterColors)
	for token, color in colors do
		TokenColors[token] = color
		ColorFormatter[color] = string.format(
			'<font color="#%.2x%.2x%.2x">',
			color.R * 255,
			color.G * 255,
			color.B * 255
		) .. "%s</font>"
	end

	Highlighter.refresh()
end
Highlighter.setTokenColors(TokenColors)

return Highlighter :: Highlighter
end;
};
G2L_MODULES[G2L["34"]] = {
Closure = function()
    local script = G2L["34"];
--[=[
	Lexical scanner for creating a sequence of tokens from Lua source code.
	This is a heavily modified and Roblox-optimized version of
	the original Penlight Lexer module:
		https://github.com/stevedonovan/Penlight
	Authors:
		stevedonovan <https://github.com/stevedonovan> ----------- Original Penlight lexer author
		ryanjmulder <https://github.com/ryanjmulder> ------------- Penlight lexer contributer
		mpeterv <https://github.com/mpeterv> --------------------- Penlight lexer contributer
		Tieske <https://github.com/Tieske> ----------------------- Penlight lexer contributer
		boatbomber <https://github.com/boatbomber> --------------- Roblox port, added builtin token,
		                                                           added patterns for incomplete syntax, bug fixes,
		                                                           behavior changes, token optimization, thread optimization
		                                                           Added lexer.navigator() for non-sequential reads
		Sleitnick <https://github.com/Sleitnick> ----------------- Roblox optimizations
		howmanysmall <https://github.com/howmanysmall> ----------- Lua + Roblox optimizations

	List of possible tokens:
		- iden
		- keyword
		- builtin
		- string
		- number
		- comment
		- operator
--]=]

local lexer = {}

local Prefix, Suffix, Cleaner = "^[%c%s]*", "[%c%s]*", "[%c%s]+"
local UNICODE = "[%z\x01-\x7F\xC2-\xF4][\x80-\xBF]+"
local NUMBER_A = "0[xX][%da-fA-F_]+"
local NUMBER_B = "0[bB][01_]+"
local NUMBER_C = "%d+%.?%d*[eE][%+%-]?%d+"
local NUMBER_D = "%d+[%._]?[%d_eE]*"
local OPERATORS = "[:;<>/~%*%(%)%-={},%.#%^%+%%]+"
local BRACKETS = "[%[%]]+" -- needs to be separate pattern from other operators or it'll mess up multiline strings
local IDEN = "[%a_][%w_]*"
local STRING_EMPTY = "(['\"])%1" --Empty String
local STRING_PLAIN = "(['\"])[^\n]-([^\\]%1)" --TODO: Handle escaping escapes
local STRING_INTER = "`[^\n]-`"
local STRING_INCOMP_A = "(['\"]).-\n" --Incompleted String with next line
local STRING_INCOMP_B = "(['\"])[^\n]*" --Incompleted String without next line
local STRING_MULTI = "%[(=*)%[.-%]%1%]" --Multiline-String
local STRING_MULTI_INCOMP = "%[=*%[.-.*" --Incompleted Multiline-String
local COMMENT_MULTI = "%-%-%[(=*)%[.-%]%1%]" --Completed Multiline-Comment
local COMMENT_MULTI_INCOMP = "%-%-%[=*%[.-.*" --Incompleted Multiline-Comment
local COMMENT_PLAIN = "%-%-.-\n" --Completed Singleline-Comment
local COMMENT_INCOMP = "%-%-.*" --Incompleted Singleline-Comment
-- local TYPED_VAR = ":%s*([%w%?%| \t]+%s*)" --Typed variable, parameter, function

local lang = require(script.language)
local lua_keyword = lang.keyword
local lua_builtin = lang.builtin
local lua_libraries = lang.libraries

lexer.language = lang

local lua_matches = {
	-- Indentifiers
	{ Prefix .. IDEN .. Suffix, "var" },

	-- Numbers
	{ Prefix .. NUMBER_A .. Suffix, "number" },
	{ Prefix .. NUMBER_B .. Suffix, "number" },
	{ Prefix .. NUMBER_C .. Suffix, "number" },
	{ Prefix .. NUMBER_D .. Suffix, "number" },

	-- Strings
	{ Prefix .. STRING_EMPTY .. Suffix, "string" },
	{ Prefix .. STRING_PLAIN .. Suffix, "string" },
	{ Prefix .. STRING_INCOMP_A .. Suffix, "string" },
	{ Prefix .. STRING_INCOMP_B .. Suffix, "string" },
	{ Prefix .. STRING_MULTI .. Suffix, "string" },
	{ Prefix .. STRING_MULTI_INCOMP .. Suffix, "string" },
	{ Prefix .. STRING_INTER .. Suffix, "string_inter" },

	-- Comments
	{ Prefix .. COMMENT_MULTI .. Suffix, "comment" },
	{ Prefix .. COMMENT_MULTI_INCOMP .. Suffix, "comment" },
	{ Prefix .. COMMENT_PLAIN .. Suffix, "comment" },
	{ Prefix .. COMMENT_INCOMP .. Suffix, "comment" },

	-- Operators
	{ Prefix .. OPERATORS .. Suffix, "operator" },
	{ Prefix .. BRACKETS .. Suffix, "operator" },

	-- Unicode
	{ Prefix .. UNICODE .. Suffix, "iden" },

	-- Unknown
	{ "^.", "iden" },
}

-- To reduce the amount of table indexing during lexing, we separate the matches now
local PATTERNS, TOKENS = {}, {}
for i, m in lua_matches do
	PATTERNS[i] = m[1]
	TOKENS[i] = m[2]
end

--- Create a plain token iterator from a string.
-- @tparam string s a string.

function lexer.scan(s: string)
	local index = 1
	local size = #s
	local previousContent1, previousContent2, previousContent3, previousToken = "", "", "", ""

	local thread = coroutine.create(function()
		while index <= size do
			local matched = false
			for tokenType, pattern in ipairs(PATTERNS) do
				-- Find match
				local start, finish = string.find(s, pattern, index)
				if start == nil then continue end

				-- Move head
				index = finish + 1
				matched = true

				-- Gather results
				local content = string.sub(s, start, finish)
				local rawToken = TOKENS[tokenType]
				local processedToken = rawToken

				-- Process token
				if rawToken == "var" then
					-- Since we merge spaces into the tok, we need to remove them
					-- in order to check the actual word it contains
					local cleanContent = string.gsub(content, Cleaner, "")

					if lua_keyword[cleanContent] then
						processedToken = "keyword"
					elseif lua_builtin[cleanContent] then
						processedToken = "builtin"
					elseif string.find(previousContent1, "%.[%s%c]*$") and previousToken ~= "comment" then
						-- The previous was a . so we need to special case indexing things
						local parent = string.gsub(previousContent2, Cleaner, "")
						local lib = lua_libraries[parent]
						if lib and lib[cleanContent] and not string.find(previousContent3, "%.[%s%c]*$") then
							-- Indexing a builtin lib with existing item, treat as a builtin
							processedToken = "builtin"
						else
							-- Indexing a non builtin, can't be treated as a keyword/builtin
							processedToken = "iden"
						end
						-- print("indexing",parent,"with",cleanTok,"as",t2)
					else
						processedToken = "iden"
					end
				elseif rawToken == "string_inter" then
					if not string.find(content, "[^\\]{") then
						-- This inter string doesnt actually have any inters
						processedToken = "string"
					else
						-- We're gonna do our own yields, so the main loop won't need to
						-- Our yields will be a mix of string and whatever is inside the inters
						processedToken = nil

						local isString = true
						local subIndex = 1
						local subSize = #content
						while subIndex <= subSize do
							-- Find next brace
							local subStart, subFinish = string.find(content, "^.-[^\\][{}]", subIndex)
							if subStart == nil then
								-- No more braces, all string
								coroutine.yield("string", string.sub(content, subIndex))
								break
							end

							if isString then
								-- We are currently a string
								subIndex = subFinish + 1
								coroutine.yield("string", string.sub(content, subStart, subFinish))

								-- This brace opens code
								isString = false
							else
								-- We are currently in code
								subIndex = subFinish
								local subContent = string.sub(content, subStart, subFinish-1)
								for innerToken, innerContent in lexer.scan(subContent) do
									coroutine.yield(innerToken, innerContent)
								end

								-- This brace opens string/closes code
								isString = true
							end
						end
					end
				end

				-- Record last 3 tokens for the indexing context check
				previousContent3 = previousContent2
				previousContent2 = previousContent1
				previousContent1 = content
				previousToken = processedToken or rawToken
				if processedToken then
					coroutine.yield(processedToken, content)
				end
				break
			end

			-- No matches found
			if not matched then
				return
			end
		end

		-- Completed the scan
		return
	end)

	return function()
		if coroutine.status(thread) == "dead" then
			return
		end

		local success, token, content = coroutine.resume(thread)
		if success and token then
			return token, content
		end

		return
	end
end

function lexer.navigator()
	local nav = {
		Source = "",
		TokenCache = table.create(50),

		_RealIndex = 0,
		_UserIndex = 0,
		_ScanThread = nil,
	}

	function nav:Destroy()
		self.Source = nil
		self._RealIndex = nil
		self._UserIndex = nil
		self.TokenCache = nil
		self._ScanThread = nil
	end

	function nav:SetSource(SourceString)
		self.Source = SourceString

		self._RealIndex = 0
		self._UserIndex = 0
		table.clear(self.TokenCache)

		self._ScanThread = coroutine.create(function()
			for Token, Src in lexer.scan(self.Source) do
				self._RealIndex += 1
				self.TokenCache[self._RealIndex] = { Token, Src }
				coroutine.yield(Token, Src)
			end
		end)
	end

	function nav.Next()
		nav._UserIndex += 1

		if nav._RealIndex >= nav._UserIndex then
			-- Already scanned, return cached
			return table.unpack(nav.TokenCache[nav._UserIndex])
		else
			if coroutine.status(nav._ScanThread) == "dead" then
				-- Scan thread dead
				return
			else
				local success, token, src = coroutine.resume(nav._ScanThread)
				if success and token then
					-- Scanned new data
					return token, src
				else
					-- Lex completed
					return
				end
			end
		end
	end

	function nav.Peek(PeekAmount)
		local GoalIndex = nav._UserIndex + PeekAmount

		if nav._RealIndex >= GoalIndex then
			-- Already scanned, return cached
			if GoalIndex > 0 then
				return table.unpack(nav.TokenCache[GoalIndex])
			else
				-- Invalid peek
				return
			end
		else
			if coroutine.status(nav._ScanThread) == "dead" then
				-- Scan thread dead
				return
			else
				local IterationsAway = GoalIndex - nav._RealIndex

				local success, token, src = nil, nil, nil

				for _ = 1, IterationsAway do
					success, token, src = coroutine.resume(nav._ScanThread)
					if not (success or token) then
						-- Lex completed
						break
					end
				end

				return token, src
			end
		end
	end

	return nav
end

return lexer
end;
};
G2L_MODULES[G2L["35"]] = {
Closure = function()
    local script = G2L["35"];
local language = {
	keyword = {
		["and"] = "keyword",
		["break"] = "keyword",
		["continue"] = "keyword",
		["do"] = "keyword",
		["else"] = "keyword",
		["elseif"] = "keyword",
		["end"] = "keyword",
		["export"] = "keyword",
		["false"] = "keyword",
		["for"] = "keyword",
		["function"] = "keyword",
		["if"] = "keyword",
		["in"] = "keyword",
		["local"] = "keyword",
		["nil"] = "keyword",
		["not"] = "keyword",
		["or"] = "keyword",
		["repeat"] = "keyword",
		["return"] = "keyword",
		["self"] = "keyword",
		["then"] = "keyword",
		["true"] = "keyword",
		["type"] = "keyword",
		["typeof"] = "keyword",
		["until"] = "keyword",
		["while"] = "keyword",
	},

	builtin = {
		-- Luau Functions
		["assert"] = "function",
		["error"] = "function",
		["getfenv"] = "function",
		["getmetatable"] = "function",
		["ipairs"] = "function",
		["newproxy"] = "function",
		["next"] = "function",
		["pairs"] = "function",
		["pcall"] = "function",
		["print"] = "function",
		["rawequal"] = "function",
		["rawget"] = "function",
		["rawlen"] = "function",
		["rawset"] = "function",
		["select"] = "function",
		["setfenv"] = "function",
		["setmetatable"] = "function",
		["tonumber"] = "function",
		["tostring"] = "function",
		["unpack"] = "function",
		["xpcall"] = "function",
		

		-- Luau Functions (Deprecated)
		["collectgarbage"] = "function",

		-- Luau Variables
		["_G"] = "table",
		["_VERSION"] = "string",

		-- Luau Tables
		["bit32"] = "table",
		["coroutine"] = "table",
		["debug"] = "table",
		["math"] = "table",
		["os"] = "table",
		["string"] = "table",
		["table"] = "table",
		["utf8"] = "table",

		-- Roblox Functions
		["DebuggerManager"] = "function",
		["delay"] = "function",
		["gcinfo"] = "function",
		["PluginManager"] = "function",
		["require"] = "function",
		["settings"] = "function",
		["spawn"] = "function",
		["tick"] = "function",
		["time"] = "function",
		["UserSettings"] = "function",
		["wait"] = "function",
		["warn"] = "function",

		-- Roblox Functions (Deprecated)
		["Delay"] = "function",
		["ElapsedTime"] = "function",
		["elapsedTime"] = "function",
		["printidentity"] = "function",
		["Spawn"] = "function",
		["Stats"] = "function",
		["stats"] = "function",
		["Version"] = "function",
		["version"] = "function",
		["Wait"] = "function",
		["ypcall"] = "function",

		-- Roblox Variables
		["game"] = "Instance",
		["plugin"] = "Instance",
		["script"] = "Instance",
		["shared"] = "Instance",
		["workspace"] = "Instance",

		-- Roblox Variables (Deprecated)
		["Game"] = "Instance",
		["Workspace"] = "Instance",

		-- Roblox Tables
		["Axes"] = "table",
		["BrickColor"] = "table",
		["CatalogSearchParams"] = "table",
		["CFrame"] = "table",
		["Color3"] = "table",
		["ColorSequence"] = "table",
		["ColorSequenceKeypoint"] = "table",
		["DateTime"] = "table",
		["DockWidgetPluginGuiInfo"] = "table",
		["Enum"] = "table",
		["Faces"] = "table",
		["FloatCurveKey"] = "table",
		["Font"] = "table",
		["Instance"] = "table",
		["NumberRange"] = "table",
		["NumberSequence"] = "table",
		["NumberSequenceKeypoint"] = "table",
		["OverlapParams"] = "table",
		["PathWaypoint"] = "table",
		["PhysicalProperties"] = "table",
		["Random"] = "table",
		["Ray"] = "table",
		["RaycastParams"] = "table",
		["Rect"] = "table",
		["Region3"] = "table",
		["Region3int16"] = "table",
		["RotationCurveKey"] = "table",
		["task"] = "table",
		["TweenInfo"] = "table",
		["UDim"] = "table",
		["UDim2"] = "table",
		["Vector2"] = "table",
		["Vector2int16"] = "table",
		["Vector3"] = "table",
		["Vector3int16"] = "table",
	},
	
	loads = {
		["loadstring"] = "loads",
	},
	

	libraries = {

		-- Luau Libraries
		bit32 = {
			arshift = "function",
			band = "function",
			bnot = "function",
			bor = "function",
			btest = "function",
			bxor = "function",
			countlz = "function",
			countrz = "function",
			extract = "function",
			lrotate = "function",
			lshift = "function",
			replace = "function",
			rrotate = "function",
			rshift = "function",
		},

		coroutine = {
			close = "function",
			create = "function",
			isyieldable = "function",
			resume = "function",
			running = "function",
			status = "function",
			wrap = "function",
			yield = "function",
		},

		debug = {
			dumpheap = "function",
			info = "function",
			loadmodule = "function",
			profilebegin = "function",
			profileend = "function",
			resetmemorycategory = "function",
			setmemorycategory = "function",
			traceback = "function",
		},

		math = {
			abs = "function",
			acos = "function",
			asin = "function",
			atan2 = "function",
			atan = "function",
			ceil = "function",
			clamp = "function",
			cos = "function",
			cosh = "function",
			deg = "function",
			exp = "function",
			floor = "function",
			fmod = "function",
			frexp = "function",
			ldexp = "function",
			log10 = "function",
			log = "function",
			max = "function",
			min = "function",
			modf = "function",
			noise = "function",
			pow = "function",
			rad = "function",
			random = "function",
			randomseed = "function",
			round = "function",
			sign = "function",
			sin = "function",
			sinh = "function",
			sqrt = "function",
			tan = "function",
			tanh = "function",

			huge = "number",
			pi = "number",
		},

		os = {
			clock = "function",
			date = "function",
			difftime = "function",
			time = "function",
		},

		string = {
			byte = "function",
			char = "function",
			find = "function",
			format = "function",
			gmatch = "function",
			gsub = "function",
			len = "function",
			lower = "function",
			match = "function",
			pack = "function",
			packsize = "function",
			rep = "function",
			reverse = "function",
			split = "function",
			sub = "function",
			unpack = "function",
			upper = "function",
		},

		table = {
			clear = "function",
			clone = "function",
			concat = "function",
			create = "function",
			find = "function",
			foreach = "function",
			foreachi = "function",
			freeze = "function",
			getn = "function",
			insert = "function",
			isfrozen = "function",
			maxn = "function",
			move = "function",
			pack = "function",
			remove = "function",
			sort = "function",
			unpack = "function",
		},

		utf8 = {
			char = "function",
			codepoint = "function",
			codes = "function",
			graphemes = "function",
			len = "function",
			nfcnormalize = "function",
			nfdnormalize = "function",
			offset = "function",

			charpattern = "string",
		},

		-- Roblox Libraries
		Axes = {
			new = "function",
		},

		BrickColor = {
			Black = "function",
			Blue = "function",
			DarkGray = "function",
			Gray = "function",
			Green = "function",
			new = "function",
			New = "function",
			palette = "function",
			Random = "function",
			random = "function",
			Red = "function",
			White = "function",
			Yellow = "function",
		},

		CatalogSearchParams = {
			new = "function",
		},

		CFrame = {
			Angles = "function",
			fromAxisAngle = "function",
			fromEulerAngles = "function",
			fromEulerAnglesXYZ = "function",
			fromEulerAnglesYXZ = "function",
			fromMatrix = "function",
			fromOrientation = "function",
			lookAt = "function",
			new = "function",

			identity = "CFrame",
		},

		Color3 = {
			fromHex = "function",
			fromHSV = "function",
			fromRGB = "function",
			new = "function",
			toHSV = "function",
		},

		ColorSequence = {
			new = "function",
		},

		ColorSequenceKeypoint = {
			new = "function",
		},

		DateTime = {
			fromIsoDate = "function",
			fromLocalTime = "function",
			fromUniversalTime = "function",
			fromUnixTimestamp = "function",
			fromUnixTimestampMillis = "function",
			now = "function",
		},

		DockWidgetPluginGuiInfo = {
			new = "function",
		},

		Enum = {},

		Faces = {
			new = "function",
		},

		FloatCurveKey = {
			new = "function",
		},

		Font = {
			fromEnum = "function",
			fromId = "function",
			fromName = "function",
			new = "function",
		},

		Instance = {
			new = "function",
		},

		NumberRange = {
			new = "function",
		},

		NumberSequence = {
			new = "function",
		},

		NumberSequenceKeypoint = {
			new = "function",
		},

		OverlapParams = {
			new = "function",
		},

		PathWaypoint = {
			new = "function",
		},

		PhysicalProperties = {
			new = "function",
		},

		Random = {
			new = "function",
		},

		Ray = {
			new = "function",
		},

		RaycastParams = {
			new = "function",
		},

		Rect = {
			new = "function",
		},

		Region3 = {
			new = "function",
		},

		Region3int16 = {
			new = "function",
		},

		RotationCurveKey = {
			new = "function",
		},

		task = {
			cancel = "function",
			defer = "function",
			delay = "function",
			desynchronize = "function",
			spawn = "function",
			synchronize = "function",
			wait = "function",
		},

		TweenInfo = {
			new = "function",
		},

		UDim = {
			new = "function",
		},

		UDim2 = {
			fromOffset = "function",
			fromScale = "function",
			new = "function",
		},

		Vector2 = {
			new = "function",

			one = "Vector2",
			xAxis = "Vector2",
			yAxis = "Vector2",
			zero = "Vector2",
		},

		Vector2int16 = {
			new = "function",
		},

		Vector3 = {
			fromAxis = "function",
			FromAxis = "function",
			fromNormalId = "function",
			FromNormalId = "function",
			new = "function",

			one = "Vector3",
			xAxis = "Vector3",
			yAxis = "Vector3",
			zAxis = "Vector3",
			zero = "Vector3",
		},

		Vector3int16 = {
			new = "function",
		},
	},
}

-- Filling up language.libraries.Enum table
local enumLibraryTable = language.libraries.Enum

for _, enum in ipairs(Enum:GetEnums()) do
	--TODO: Remove tostring from here once there is a better way to get the name of an Enum
	enumLibraryTable[tostring(enum)] = "Enum"
end

return language
end;
};
-- StarterGui.LuaEncoderPC.Frame.Main
local function C_1b()
local script = G2L["1b"];
	repeat wait() until game:IsLoaded()
	
	--// Variables
	
	local gui = script.Parent.Parent
	local frame = gui.Frame
	local hub = gui.Hub
	local cred = gui.Credits
	local about = gui.About
	local setting = gui.Settings
	local injf = gui.InjectedFrame
	local notinj = gui.NotInjF
	local isinj = gui.InjectingFrame
	local alrinj = gui.AlrInjcFrame
	local execd = gui.ExecutedFrame
	local clrdf = gui.ClearedFrame
	local api = frame.API
	local apiexec = api["API Executor"]
	local apiclr = api["API Clearer"]
	local apin = api["API Injector"]
	local injector = apin["LuaEncoder.API"]
	local executorAPI = apiexec["LuaEncoder.API"]
	local clearerAPI = apiclr["LuaEncoder.API"]
	local moduleHigh = frame.Module
	require(moduleHigh)
	
	--// Buttons Variables and boolvalues and Folder variables
	
	local txtb = frame.ScrollingFrame.TextBox
	local exe = frame.Execute
	local clr = frame.Clear
	local atc = frame.Attach
	local val = frame.Values
	local att = val.Attached
	local att2 = val.Attaching
	local cls = frame.Close
	local title = frame.Title
	local fire = frame.Fire
	local crd = frame.Credits
	local abt = frame.About
	local set = frame.Settings
	local exe2 = frame.Execute2
	
	--// Lua Encoder versions variables
	
	local luaversion = "vRBX"
	local luav2 = "v27.5"
	local canexecutein = "level 6 or 7 or 8 executors, External/Internal"
	local canexecutein2 = 6 or 7 or 8
	local LuaCode = "2.629.609, 2.630.556"
	print("Version of Lua Encoder/Roblox: "..LuaCode)
	
	
	--// Booleans
	
	frame.Draggable = true
	frame.Active = true
	
	--// Local Functions
	
	local function execute(code)
		if att.Value == true then
			if txtb.Text == "" then
				print("Nothing to execute")
			end
			execd.Title.Visible = true
			execd.ImageLabel.Visible = true
			execd.Desc.Visible = true
			execd.Size = UDim2.new(0.348, 0,0.157, 0)
			execd.Visible = true
			require(executorAPI)
			loadstring(code)()
		else
			notinj:TweenSize(UDim2.new(0.348, 0,0.157, 0), "Out", "Sine", 0)
			wait(0.1) do
				notinj.Title.Visible = true
				notinj.Desc.Visible = true
				notinj.ImageLabel.Visible = true
				notinj.Visible = true
			end
		end
	end
	
	local function clear(thing)
		clrdf.Title.Visible = true
		clrdf.ImageLabel.Visible = true
		clrdf.Desc.Visible = true
		clrdf.Size = UDim2.new(0.348, 0,0.157, 0)
		clrdf.Visible = true
		require(clearerAPI)
		thing.Text = ""
	end
	
	local function attach()
		local repeated = 1
		if att.Value == true then
			alrinj.Title.Visible =true
			alrinj.Desc.Visible = true
			alrinj.ImageLabel.Visible = true
			alrinj.Size = UDim2.new(0.348, 0,0.157, 0)
			alrinj.Visible = true
			title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Already Injected!)"
			wait(2)
			title.Text = "Lua Encoder - "..luaversion.." - "..luav2
		else
			isinj.Visible = true
			if att2.Value == true then return end
			att2.Value = true
			repeat
				title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Injecting.)"
				wait(0.75)
				title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Injecting..)"
				wait(0.4)
				title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Injecting...)"
				wait(0.6)
				title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Checking whitelist.)"
				wait(0.75)
				title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Checking whitelist..)"
				wait(0.3)
				title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Checking whitelist...)"
				repeated += 1
				wait(0.3)
				if repeated == 3 then
					title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Injected!)"
					wait(0.75)
					title.Text = "Lua Encoder - "..luaversion.." - "..luav2.." (Whitelist Accepted!)"
					wait(0.75)
					title.Text = "Lua Encoder - "..luaversion.." - "..luav2
					require(injector)
					att.Value = true
					wait(0.03)
					injf.Desc.Text = "Has injected to roblox/"..game.Name
					injf.Visible = true
				end
			until repeated == 3
			att2.Value = false
		end
	end
	
	local function close()
		gui:Destroy()
	end
	
	local function shub()
		if hub.Visible == true then
			hub.Visible = false
		else
			hub.Visible = true
		end
	end
	
	local function credits()
		if cred.Visible == true then
			cred.Visible = false
		else
			cred.Visible = true
		end
	end
	
	local function executecode()
		executeclipboard() 
	end
	
	local function openABT()
		if about.Visible == true then
			about.Visible = false
		else
			about.Visible = true
		end
	end
	
	local function opensett()
		if setting.Visible == true then
			setting.Visible = false
		else
			setting.Visible = true
		end
	end
	
	--// Button Functions
	
	exe.MouseButton1Click:Connect(function() 
		task.wait()
		execute(txtb.Text)
	end)
	
	clr.MouseButton1Click:Connect(function() 
		clear(txtb)
	end)
	
	atc.MouseButton1Click:Connect(function() 
		attach()
	end)
	
	cls.MouseButton1Click:Connect(function() 
		close()
	end)
	
	fire.MouseButton1Click:Connect(function() 
		shub()
	end)
	
	crd.MouseButton1Click:Connect(function() 
		credits()
	end)
	
	abt.MouseButton1Click:Connect(function() 
		openABT()
	end)
	
	set.MouseButton1Click:Connect(function() 
		opensett()
	end)
	
	exe2.MouseButton1Click:Connect(function() 
		executecode()
	end)
	
	
	-- stuff
	
	task.spawn(function()
		require(api.APIListener["LuaEncoder.API"])
	end)
	
	
	--[[ End ]]--
end;
task.spawn(C_1b);
-- StarterGui.LuaEncoderPC.Hub.HubMain
local function C_3d()
local script = G2L["3d"];
	--// Variables
	
	local gui = script.Parent.Parent
	local notinj = gui.NotInjF
	local exec = gui.ExecutedThing
	local att = gui.Frame.Values.Attached
	local fm = gui.Hub
	local gh = fm.Ghost
	local dlt = fm.DLT
	local cld = fm.Cloud
	local fe = fm.fe
	local ilu = fm.fel
	
	--// Booleans
	
	fm.Draggable = true
	fm.Active = true
	
	--// Functions
	
	dlt.MouseButton1Click:Connect(function() 
		if att.Value == true then
			exec.Desc.Visible = true
			exec.Desc.Text = "Executed ECCS-V3"
			exec.Title.Visible = true
			exec.ImageLabel.Visible = true
			exec.Size = UDim2.new(0.348, 0,0.157, 0)
			exec.Visible = true
			loadstring(game:HttpGet("https://raw.githubusercontent.com/ECCSco/ECCS-V3/main/ECCS%20Searcher%20V2.2"))("Copyright ERROR_CODE ECCS Co")
		else
			notinj.Desc.Visible = true
			notinj.Title.Visible = true
			notinj.ImageLabel.Visible = true
			notinj.Size = UDim2.new(0.348, 0,0.157, 0)
			notinj.Visible = true
		end
	
	end)
	
	gh.MouseButton1Click:Connect(function() 
		if att.Value == true then
			exec.Desc.Visible = true
			exec.Desc.Text = "Executed Xx Ghost Hub xX"
			exec.Title.Visible = true
			exec.ImageLabel.Visible = true
			exec.Size = UDim2.new(0.348, 0,0.157, 0)
			exec.Visible = true
			loadstring(game:HttpGet('https://raw.githubusercontent.com/GhostPlayer352/Test4/main/GhostHub'))()
		else
			notinj.Desc.Visible = true
			notinj.Title.Visible = true
			notinj.ImageLabel.Visible = true
			notinj.Size = UDim2.new(0.348, 0,0.157, 0)
			notinj.Visible = true
		end
	end)
	
	cld.MouseButton1Click:Connect(function() 
		if att.Value == true then
			exec.Desc.Visible = true
			exec.Desc.Text = "Executed CloudScript(powered by scriptblox)"
			exec.Title.Visible = true
			exec.ImageLabel.Visible = true
			exec.Size = UDim2.new(0.348, 0,0.157, 0)
			exec.Visible = true
			loadstring(game:HttpGet('https://raw.githubusercontent.com/laderite/scripts/main/Cloudscripts.lua'))()
		else
			notinj.Desc.Visible = true
			notinj.Title.Visible = true
			notinj.ImageLabel.Visible = true
			notinj.Size = UDim2.new(0.348, 0,0.157, 0)
			notinj.Visible = true
		end
	end)
	fe.MouseButton1Click:Connect(function() 
		if att.Value == true then
			exec.Desc.Visible = true
			exec.Desc.Text = "Executed FE Hub(Bypassed key system)"
			exec.Title.Visible = true
			exec.ImageLabel.Visible = true
			exec.Size = UDim2.new(0.348, 0,0.157, 0)
			exec.Visible = true
			loadstring(game:HttpGet("https://pastebin.com/raw/LMiJ1JK1"))()
		else
			notinj.Desc.Visible = true
			notinj.Title.Visible = true
			notinj.ImageLabel.Visible = true
			notinj.Size = UDim2.new(0.348, 0,0.157, 0)
			notinj.Visible = true
		end
	end)
	
	ilu.MouseButton1Click:Connect(function() 
		if att.Value == true then
			exec.Desc.Visible = true
			exec.Desc.Text = "Executed Fe Illusion"
			exec.Title.Visible = true
			exec.ImageLabel.Visible = true
			exec.Size = UDim2.new(0.348, 0,0.157, 0)
			exec.Visible = true
			loadstring(game:HttpGet("https://raw.githubusercontent.com/0Ben1/fe/main/obf_11l7Y131YqJjZ31QmV5L8pI23V02b3191sEg26E75472Wl78Vi8870jRv5txZyL1.lua.txt"))()
		else
			notinj.Desc.Visible = true
			notinj.Title.Visible = true
			notinj.ImageLabel.Visible = true
			notinj.Size = UDim2.new(0.348, 0,0.157, 0)
			notinj.Visible = true
		end
	end)
	
	--[[ End ]]--
end;
task.spawn(C_3d);
-- StarterGui.LuaEncoderPC.Credits.CreditMain
local function C_50()
local script = G2L["50"];
	--// Variables
	
	local gui = script.Parent.Parent
	local fm = gui.Credits
	
	--// Booleans
	
	fm.Draggable = true
	fm.Active = true
	
	--[[ End ]]--
end;
task.spawn(C_50);
-- StarterGui.LuaEncoderPC.About.Aboutmain
local function C_5b()
local script = G2L["5b"];
	--// Variables
	
	local gui = script.Parent.Parent
	local fm = gui.About
	
	--// Booleans
	
	fm.Draggable = true
	fm.Active = true
	
	--[[ End ]]--
end;
task.spawn(C_5b);
-- StarterGui.LuaEncoderPC.Settings.SettingsMain
local function C_66()
local script = G2L["66"];
	--// Variables
	
	local gui = script.Parent.Parent
	local notinj = gui.NotInjF
	local fm = gui.Settings
	local fm2 = gui.Frame
	local op = fm.Option1
	local plr = game:GetService("Players").LocalPlayer
	local char = plr.Character or plr.CharacterAdded:Wait()
	local hum = char.Humanoid
	local openic = fm.icon
	local link = fm.link
	local exe = fm2.Execute
	local exe2 = fm2.Execute2
	local chn = fm.Change
	
	--// Booleans
	
	fm.Draggable = true
	fm.Active = true
	
	--// Local functions
	
	local function anti()
		local protected = false
		protected = not protected
		if protected == true then
			plr:SetAttribute("MaxSpeed", 50)
			plr:SetAttribute("MaxJumpPower", 75)
			while task.wait(0.2) do
				if hum.WalkSpeed >= 50 then
					hum.WalkSpeed = 16
					print("saved you from a ban or an other thing")
				end
				if hum.JumpPower >= 75 then
					hum.JumpPower = 50
					print("saved you from a ban or an other thing")
				end
			end
		end
	end
	
	local function toggle()
		local opn = gui.Open
		opn.Visible = not opn.Visible
	end
	
	local function getlink(link)
		setclipboard(link)
	end
	
	local function chage()
		exe.Visible = not exe.Visible
		exe2.Visible = not exe2.Visible
		print("changed, now you can execute setclipboards, makefolders, etc, if u change again then you can only execute what it is in about")
	end
	
	--// Buuton functions
	
	op.MouseButton1Click:Connect(anti)
	
	openic.MouseButton1Click:Connect(toggle)
	
	link.MouseButton1Click:Connect(function() 
		getlink("https://github.com/delta-hydro")
		getlink("https://github.com/nseinkkk")
	end)
	
	chn.MouseButton1Click:Connect(chage)
	
	--[[ End ]]--
end;
task.spawn(C_66);
-- StarterGui.LuaEncoderPC.Open.OpenMain
local function C_7a()
local script = G2L["7a"];
	local open = script.Parent
	local frame = open.Parent.Frame
	open.Active = true
	open.Draggable = true
	
	open.MouseButton1Click:Connect(function() 
		frame.Visible = not frame.Visible
	end)
end;
task.spawn(C_7a);
-- StarterGui.LuaEncoderPC.InjectedFrame.LocalScript
local function C_7d()
local script = G2L["7d"];
	task.spawn(function()
		while task.wait(0.001) do
			if script.Parent.Visible == true then
				wait(2)
				script.Parent.Title.Visible = false
				script.Parent.Desc.Visible = false
				script.Parent.ImageLabel.Visible = false
				script.Parent:TweenSize(UDim2.new(0, 0), "Out", "Sine", 0.2)
				wait(0.1) do
					script.Parent.Visible = false
				end
			end
		end
	end)
	
end;
task.spawn(C_7d);
-- StarterGui.LuaEncoderPC.NotInjF.LocalScript
local function C_84()
local script = G2L["84"];
	task.spawn(function()
		while task.wait(0.001) do
			if script.Parent.Visible == true then
				wait(2)
				script.Parent.Title.Visible = false
				script.Parent.Desc.Visible = false
				script.Parent.ImageLabel.Visible = false
				script.Parent:TweenSize(UDim2.new(0, 0), "Out", "Sine", 0.2)
				wait(0.1) do
					script.Parent.Visible = false
				end
			end
		end
	end)
	
end;
task.spawn(C_84);
-- StarterGui.LuaEncoderPC.InjectingFrame.LocalScript
local function C_8b()
local script = G2L["8b"];
	task.spawn(function()
		local repeated = 0
		while script.Parent.Visible == true do
			repeat
				script.Parent.Desc.Text = "Injecting"
				wait(0.5)
				script.Parent.Desc.Text = "Injecting."
				wait(0.4)
				script.Parent.Desc.Text = "Injecting.."
				wait(0.75)
				script.Parent.Desc.Text = "Injecting..."
				wait(0.3)
			until repeated == 3
		end
	end)
	
	
	
	
	
	task.spawn(function()
		while task.wait(0.001) do
			wait(0.75)
			wait(0.4)
			wait(0.6)
			wait(0.75)
			wait(0.3)
			wait(0.3)
			wait(0.75)
			wait(0.4)
			wait(0.6)
			wait(0.75)
			wait(0.3)
			wait(0.3)
			wait(0.75)
			if script.Parent.Visible == true then
				wait(2)
				script.Parent.Title.Visible = false
				script.Parent.Desc.Visible = false
				script.Parent.ImageLabel.Visible = false
				script.Parent:TweenSize(UDim2.new(0, 0), "Out", "Sine", 0.2)
				wait(0.1) do
					script.Parent.Visible = false
				end
			end
		end
	end)
	
end;
task.spawn(C_8b);
-- StarterGui.LuaEncoderPC.AlrInjcFrame.LocalScript
local function C_92()
local script = G2L["92"];
	task.spawn(function()
		while task.wait(0.001) do
			if script.Parent.Visible == true then
				wait(2)
				script.Parent.Title.Visible = false
				script.Parent.Desc.Visible = false
				script.Parent.ImageLabel.Visible = false
				script.Parent:TweenSize(UDim2.new(0, 0), "Out", "Sine", 0.2)
				wait(0.1) do
					script.Parent.Visible = false
				end
			end
		end
	end)
	
end;
task.spawn(C_92);
-- StarterGui.LuaEncoderPC.ExecutedFrame.LocalScript
local function C_99()
local script = G2L["99"];
	task.spawn(function()
		while task.wait(0.001) do
			if script.Parent.Visible == true then
				wait(2)
				script.Parent.Title.Visible = false
				script.Parent.Desc.Visible = false
				script.Parent.ImageLabel.Visible = false
				script.Parent:TweenSize(UDim2.new(0, 0), "Out", "Sine", 0.1)
				wait(0.1) do
					script.Parent.Visible = false
				end
			end
		end
	end)
	
end;
task.spawn(C_99);
-- StarterGui.LuaEncoderPC.ClearedFrame.LocalScript
local function C_a0()
local script = G2L["a0"];
	task.spawn(function()
		while task.wait(0.001) do
			if script.Parent.Visible == true then
				wait(2)
				script.Parent.Title.Visible = false
				script.Parent.Desc.Visible = false
				script.Parent.ImageLabel.Visible = false
				script.Parent:TweenSize(UDim2.new(0, 0), "Out", "Sine", 0.1)
				wait(0.1) do
					script.Parent.Visible = false
				end
			end
		end
	end)
	
end;
task.spawn(C_a0);
-- StarterGui.LuaEncoderPC.ExecutedThing.LocalScript
local function C_a7()
local script = G2L["a7"];
	task.spawn(function()
		while task.wait(0.001) do
			if script.Parent.Visible == true then
				wait(2)
				script.Parent.Title.Visible = false
				script.Parent.Desc.Visible = false
				script.Parent.ImageLabel.Visible = false
				script.Parent:TweenSize(UDim2.new(0, 0), "Out", "Sine", 0.2)
				wait(0.1) do
					script.Parent.Visible = false
				end
			end
		end
	end)
	
end;
task.spawn(C_a7);

return G2L["1"], require;
